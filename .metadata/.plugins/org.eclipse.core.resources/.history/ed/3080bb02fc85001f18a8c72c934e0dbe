/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/

#include "main.h"
#include "cmsis_os.h"
#include <stdio.h>
#include <string.h>

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
#define SHT25_I2C_ADDRESS 0x40

typedef enum {
STATE_INIT,
STATE_READ_SENSOR,
STATE_PUBLISH_MQTT,
} state_t;
state_t state = STATE_INIT;
/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
float temperature, humidity;

osThreadId mqttTaskHandle;
osThreadId fsmTaskHandle;

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
void mqtt_Task(void const * argument);
void fsm_Task(void const * argument);
float SHT25_ReadTemperature(void);
float SHT25_ReadHumidity(void);
void WE10_Init(void);
void MQTT_Init(void);
void mqtt_data_send(float temp, float hum);
void read_sensor_values(float *temp, float *hum);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
    ITM_SendChar(ch);
    return ch;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();

  /* USER CODE BEGIN 2 */
  WE10_Init();
  MQTT_Init();
  /* USER CODE END 2 */

  /* Create the thread(s) */
  osThreadDef(mqttTask, mqtt_Task, osPriorityNormal, 0, 128);
  mqttTaskHandle = osThreadCreate(osThread(mqttTask), NULL);

  osThreadDef(fsmTask, fsm_Task, osPriorityIdle, 0, 128);
  fsmTaskHandle = osThreadCreate(osThread(fsmTask), NULL);

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  while (1) {
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void fsm_Task(void const * argument) {
    /* Infinite loop */
    while (1) {
        switch (state) {
            case STATE_INIT:
                WE10_Init();
                MQTT_Init();
                state = STATE_READ_SENSOR;
                break;

            case STATE_READ_SENSOR:
                read_sensor_values(&temperature, &humidity);
                state = STATE_PUBLISH_MQTT;
                break;

            case STATE_PUBLISH_MQTT:
                mqtt_data_send(temperature, humidity);
                state = STATE_READ_SENSOR; // Return to reading state
                break;
        }
    }
}
void read_sensor_values(float *temp, float *hum) {
    *temp = SHT25_ReadTemperature();
    *hum = SHT25_ReadHumidity();
}


void mqtt_Task(void const * argument) {
    while (1) {
        if (state == STATE_INIT) {
            mqtt_data_send(temperature, humidity);
        }
        osDelay(1000); // Adjust as necessary
    }
}


void mqtt_data_send(float temp, float hum) {
    char buffer[100];

    // Send temperature
    sprintf(buffer, "CMD+MQTTPUB=base/state/temperature,%.2f C\r\n", temp);
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);

    // Send humidity
    sprintf(buffer, "CMD+MQTTPUB=base/state/humidity,%.2f %%\r\n", hum);
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
}

float SHT25_ReadTemperature(void) {
    uint8_t command = 0xE3;  // Command to read temperature
    uint8_t data[2];

    HAL_I2C_Master_Transmit(&hi2c1, SHT25_I2C_ADDRESS << 1, &command, 1, HAL_MAX_DELAY);
    HAL_I2C_Master_Receive(&hi2c1, SHT25_I2C_ADDRESS << 1, data, 2, HAL_MAX_DELAY);

    uint16_t tempRaw = (data[0] << 8) | data[1];
    tempRaw &= ~0x0003;  // Clear the status bits
    return -46.85 + (175.72 * (float)tempRaw / 65536.0);
}

float SHT25_ReadHumidity(void) {
    uint8_t command = 0xE5;  // Command to read humidity
    uint8_t data[2];

    HAL_I2C_Master_Transmit(&hi2c1, SHT25_I2C_ADDRESS << 1, &command, 1, HAL_MAX_DELAY);
    HAL_I2C_Master_Receive(&hi2c1, SHT25_I2C_ADDRESS << 1, data, 2, HAL_MAX_DELAY);

    uint16_t humRaw = (data[0] << 8) | data[1];
    humRaw &= ~0x0003;  // Clear the status bits
    return -6.0 + (125.0 * (float)humRaw / 65536.0);
}

void WE10_Init(void)
{
	char buffer[128];
	sprintf (&buffer[0], "CMD+RESET\r\n");
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);

		HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);


		/*********  CMD+WIFIMODE=1  **********/
		//memset(&buffer[0],0x00,strlen(buffer));
		sprintf (&buffer[0], "CMD+WIFIMODE=1\r\n");
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);

		HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
		HAL_Delay(2000);


		/********* CMD+CONTOAP=SSID,PASSWD **********/
		//memset(&buffer[0],0x00,strlen(buffer));
		sprintf (&buffer[0], "CMD+CONTOAP=VIVO,12345678\r\n");
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
		//memset(&buffer[0],0x00,strlen(buffer));
		HAL_Delay(2000);
		HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
		HAL_Delay(500);
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);

		/********* CMD?WIFI**********/
		//memset(&buffer[0],0x00,strlen(buffer));
		sprintf (&buffer[0], "CMD?WIFI\r\n");
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
	//	memset(&buffer[0],0x00,strlen(buffer));
	//	HAL_Delay(500);
		HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
		HAL_Delay(500);
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);

}
void MQTT_Init(void)
{
	char buffer[128];
	sprintf (&buffer[0], "CMD+MQTTNETCFG=dev.rightech.io,1883\r\n");
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
		//memset(&buffer[0],0x00,strlen(buffer));
		//HAL_Delay(500);
		HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
		HAL_Delay(500);
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);


		/*********CMD+MQTTCONCFG **********/
		//memset(&buffer[0],0x00,strlen(buffer));
		sprintf (&buffer[0], "CMD+MQTTCONCFG=3,mqtt-saikumarsunny2002-3ruesz,,,,,,,,,\r\n");
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
		//memset(&buffer[0],0x00,strlen(buffer));
		//HAL_Delay(500);
		HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
		HAL_Delay(500);
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);


		/*********CMD+MQTTSTART **********/
		//memset(&buffer[0],0x00,strlen(buffer));
		sprintf (&buffer[0], "CMD+MQTTSTART=1\r\n");
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
	//	memset(&buffer[0],0x00,strlen(buffer));
		HAL_Delay(5000);
		HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
		HAL_Delay(500);
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);

}


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 38400;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 38400;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/* USER CODE BEGIN Header_mqtt_Task */
/**
  * @brief  Function implementing the mqttTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_mqtt_Task */


/* USER CODE BEGIN Header_fsm_Task */
/**
* @brief Function implementing the fsmTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fsm_Task */


/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM2 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
