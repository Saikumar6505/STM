/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include <stdio.h>
#include <string.h>

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* Global temperature and humidity variables */
float temperature = 0.0;  // Initialize to a default value
float humidity = 0.0;

/* Definitions for the SHT25 sensor */
#define SHT25_I2C_ADDRESS 0x40

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
float SHT25_ReadTemperature(void);
float SHT25_ReadHumidity(void);
void WE10_Init(void);
void MQTT_Init(void);
void mqtt_data_send(float temp);
void mqtt_message_receive(void);
/* Helper function for printf over ITM */
int __io_putchar(int ch) {
    ITM_SendChar(ch);
    return ch;
}

/* Initialize WE10 Wi-Fi module */
void WE10_Init() {
    // Define your commands as constants
	const char *reset_cmd = "CMD+RESET\r\n";
	HAL_UART_Transmit(&huart1, (uint8_t*)reset_cmd, strlen(reset_cmd), 1000);
	HAL_Delay(5000);  // Wait for the module to reset and reconnect

    const char *commands[] = {
        //"CMD+RESET\r\n",
        "CMD+WIFIMODE=1\r\n",
        "CMD+CONTOAP=\"VIVO\",\"12345678\"\r\n"
    };

    for (int i = 0; i < sizeof(commands) / sizeof(commands[0]); i++) {
        HAL_UART_Transmit(&huart1, (uint8_t*)commands[i], strlen(commands[i]), 1000);
        HAL_Delay(2000);

        // Check response
        uint8_t response[100] = {0};  // Initialize to zero
        HAL_UART_Receive(&huart1, response, sizeof(response) - 1, 1000);  // Leave space for null terminator
        response[sizeof(response) - 1] = '\0';  // Null-terminate the string
        printf("Response: %s\n", response);
    }
}

/* Initialize MQTT connection */
void MQTT_Init() {
    char arr4[] = "CMD+MQTTNETCFG=dev.rightech.io,1883\r\n";
    char arr5[] = "CMD+MQTTCONCFG=3,mqtt-saikumarsunny2002-6ykmq8,,,,,,,,,\r\n";
    char arr6[] = "CMD+MQTTSTART=1\r\n";
    char arr7[] = "CMD+MQTTSUB=base/state/Temperature\r\n";

    // Send MQTT Network Configuration
    HAL_UART_Transmit(&huart1, (uint8_t*)arr4, strlen(arr4), 1000);
    HAL_Delay(2000);  // Delay to ensure the command is processed

    uint8_t response[100] = {0};
    HAL_UART_Receive(&huart1, response, sizeof(response) - 1, 2000);
    response[sizeof(response) - 1] = '\0';
    printf("MQTT Network Config Response: %s\n", response); // Log response

    // Send Connection Configuration
    HAL_UART_Transmit(&huart1, (uint8_t*)arr5, strlen(arr5), 1000);
    HAL_Delay(2000);  // Delay to ensure the command is processed

    HAL_UART_Receive(&huart1, response, sizeof(response) - 1, 2000);
    response[sizeof(response) - 1] = '\0';
    printf("MQTT Connection Config Response: %s\n", response); // Log response

    // Start MQTT
    HAL_UART_Transmit(&huart1, (uint8_t*)arr6, strlen(arr6), 1000);
    HAL_Delay(5000);  // Wait longer to confirm connection

    HAL_UART_Receive(&huart1, response, sizeof(response) - 1, 2000);
    response[sizeof(response) - 1] = '\0';
    printf("MQTT Start Response: %s\n", response); // Log response

    // Subscribe to topic
    HAL_UART_Transmit(&huart1, (uint8_t*)arr7, strlen(arr7), 1000);
    HAL_Delay(2000);  // Delay to ensure command is processed

    HAL_UART_Receive(&huart1, response, sizeof(response) - 1, 2000);
    response[sizeof(response) - 1] = '\0';
    printf("MQTT Subscribe Response: %s\n", response); // Log response
}


/* Read temperature from SHT25 sensor */
float SHT25_ReadTemperature(void) {
    uint8_t command = 0xE3;  // Command to read temperature
    uint8_t data[2];

    HAL_I2C_Master_Transmit(&hi2c1, SHT25_I2C_ADDRESS << 1, &command, 1, HAL_MAX_DELAY);  // Send command
    HAL_I2C_Master_Receive(&hi2c1, SHT25_I2C_ADDRESS << 1, data, 2, HAL_MAX_DELAY);       // Receive data

    uint16_t tempRaw = (data[0] << 8) | data[1];
    tempRaw &= ~0x0003;  // Clear status bits
    float temperature = -46.85 + (175.72 * (float)tempRaw / 65536.0);
    return temperature;
}

/* Read humidity from SHT25 sensor */
float SHT25_ReadHumidity(void) {
    uint8_t command = 0xE5;  // Command to read humidity
    uint8_t data[2];

    HAL_I2C_Master_Transmit(&hi2c1, SHT25_I2C_ADDRESS << 1, &command, 1, HAL_MAX_DELAY);  // Send command
    HAL_I2C_Master_Receive(&hi2c1, SHT25_I2C_ADDRESS << 1, data, 2, HAL_MAX_DELAY);       // Receive data

    uint16_t humRaw = (data[0] << 8) | data[1];
    humRaw &= ~0x0003;  // Clear status bits
    float humidity = -6.0 + (125.0 * (float)humRaw / 65536.0);
    return humidity;
}

/* Send data via MQTT */
void mqtt_data_send(float temp) {
    char buffer[50];
    snprintf(buffer, sizeof(buffer), "CMD+MQTTPUB=base/state/Temperature,%.2f\r\n", temp);
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);

    // Wait for the module to process the command
    HAL_Delay(1000); // Delay to ensure the command is processed

    // Check response from the module
    uint8_t response[100] = {0};  // Buffer to receive response
    HAL_UART_Receive(&huart1, response, sizeof(response) - 1, 2000);  // Receive response
    response[sizeof(response) - 1] = '\0';  // Null-terminate the string
    printf("Publish Response: %s\n", response);  // Print the response for debugging
}

void mqtt_message_receive(void) {
    // Buffer to receive incoming MQTT messages
    uint8_t mqtt_message[100] = {0};

    // Try to receive a message (non-blocking or with timeout)
    if (HAL_UART_Receive(&huart1, mqtt_message, sizeof(mqtt_message) - 1, 10000) == HAL_OK) {
        mqtt_message[sizeof(mqtt_message) - 1] = '\0';  // Null-terminate the message
        printf("Received MQTT message: %s\n", mqtt_message);

        // Optional: Process the message (e.g., compare message content and act on it)
        if (strstr((char*)mqtt_message, "ON") != NULL) {
            printf("Turning on device based on MQTT message\n");
            // Add code to turn on device
        } else if (strstr((char*)mqtt_message, "OFF") != NULL) {
            printf("Turning off device based on MQTT message\n");
            // Add code to turn off device
        }
    }
}

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
    HAL_Init();
    SystemClock_Config();

    /* Initialize peripherals */
    MX_GPIO_Init();
    MX_USART2_UART_Init();
    MX_I2C1_Init();
    MX_USART1_UART_Init();

    /* Initialize WE10 Wi-Fi and MQTT */
    WE10_Init();
    MQTT_Init();

    /* Infinite loop */
    while (1) {
        temperature = SHT25_ReadTemperature();
        humidity = SHT25_ReadHumidity();

        // Format and transmit temperature and humidity over UART
        printf("Temperature: %.2f C, Humidity: %.2f%%\n", temperature, humidity);

        // Send temperature via MQTT
        mqtt_data_send(temperature);
        mqtt_message_receive();
        // Delay for 5 seconds
        HAL_Delay(5000);
    }
}

/* System Clock Configuration */
void SystemClock_Config(void) {
    /* Configuration for clock */
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    __HAL_RCC_PWR_CLK_ENABLE();
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLM = 16;
    RCC_OscInitStruct.PLL.PLLN = 336;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
    RCC_OscInitStruct.PLL.PLLQ = 4;

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
        Error_Handler();
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
        Error_Handler();
    }
}

/* I2C1 Initialization Function */
static void MX_I2C1_Init(void) {
    hi2c1.Instance = I2C1;
    hi2c1.Init.ClockSpeed = 100000;
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0;
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
    hi2c1.Init.OwnAddress2 = 0;
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
    HAL_I2C_Init(&hi2c1);
}

/* USART1 Initialization Function */
static void MX_USART1_UART_Init(void) {
    huart1.Instance = USART1;
    huart1.Init.BaudRate = 115200;
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
    huart1.Init.StopBits = UART_STOPBITS_1;
    huart1.Init.Parity = UART_PARITY_NONE;
    huart1.Init.Mode = UART_MODE_TX_RX;
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
    HAL_UART_Init(&huart1);
}

/* USART2 Initialization Function */
static void MX_USART2_UART_Init(void) {
    huart2.Instance = USART2;
    huart2.Init.BaudRate = 115200;
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
    huart2.Init.StopBits = UART_STOPBITS_1;
    huart2.Init.Parity = UART_PARITY_NONE;
    huart2.Init.Mode = UART_MODE_TX_RX;
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
    HAL_UART_Init(&huart2);
}

/* GPIO Initialization Function */
static void MX_GPIO_Init(void) {
    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
}

/* Error Handler */
void Error_Handler(void) {
    while (1) {
        // Stay in infinite loop on error
    }
}
