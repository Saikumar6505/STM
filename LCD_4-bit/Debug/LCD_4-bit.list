
LCD_4-bit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000374  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800050c  0800050c  0000150c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000530  08000530  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000530  08000530  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000530  08000530  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000530  08000530  00001530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000534  08000534  00001534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000538  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800053c  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800053c  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001306  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000562  00000000  00000000  0000333a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  000038a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000015c  00000000  00000000  00003a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f57  00000000  00000000  00003bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f75  00000000  00000000  00017b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080ae9  00000000  00000000  00019ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009a5a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f8  00000000  00000000  0009a5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0009abdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080004f4 	.word	0x080004f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080004f4 	.word	0x080004f4

080001d8 <main>:
void LCD_data(char data);
void LCD_init(void);
void PORTS_init(void);
void LCD_string(const char* str);

int main(void) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
    /* Initialize LCD controller */
    LCD_init();
 80001dc:	f000 f833 	bl	8000246 <LCD_init>

    while (1) {
        /* Display "Welcome to STM32" on the first line */
        LCD_command(0x80);  // Set cursor to the beginning of the first line
 80001e0:	2080      	movs	r0, #128	@ 0x80
 80001e2:	f000 f87b 	bl	80002dc <LCD_command>
        LCD_string("Welcome to STM32");
 80001e6:	480b      	ldr	r0, [pc, #44]	@ (8000214 <main+0x3c>)
 80001e8:	f000 f818 	bl	800021c <LCD_string>

        /* Display "Enjoy Coding!" on the second line */
        LCD_command(0xC0);  // Set cursor to the beginning of the second line
 80001ec:	20c0      	movs	r0, #192	@ 0xc0
 80001ee:	f000 f875 	bl	80002dc <LCD_command>
        LCD_string("Enjoy Coding!");
 80001f2:	4809      	ldr	r0, [pc, #36]	@ (8000218 <main+0x40>)
 80001f4:	f000 f812 	bl	800021c <LCD_string>

        delayMs(2000);
 80001f8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001fc:	f000 f8ba 	bl	8000374 <delayMs>

        /* Clear LCD display */
        LCD_command(0x01);  // Clear display command
 8000200:	2001      	movs	r0, #1
 8000202:	f000 f86b 	bl	80002dc <LCD_command>
        delayMs(500);
 8000206:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800020a:	f000 f8b3 	bl	8000374 <delayMs>
        LCD_command(0x80);  // Set cursor to the beginning of the first line
 800020e:	bf00      	nop
 8000210:	e7e6      	b.n	80001e0 <main+0x8>
 8000212:	bf00      	nop
 8000214:	0800050c 	.word	0x0800050c
 8000218:	08000520 	.word	0x08000520

0800021c <LCD_string>:
    }
}

/* Function to display a string on the LCD */
void LCD_string(const char* str) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000224:	e006      	b.n	8000234 <LCD_string+0x18>
        LCD_data(*str++);
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	1c5a      	adds	r2, r3, #1
 800022a:	607a      	str	r2, [r7, #4]
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	4618      	mov	r0, r3
 8000230:	f000 f87c 	bl	800032c <LCD_data>
    while (*str) {
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d1f4      	bne.n	8000226 <LCD_string+0xa>
    }
}
 800023c:	bf00      	nop
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}

08000246 <LCD_init>:

/* Initialize port pins and LCD controller */
void LCD_init(void) {
 8000246:	b580      	push	{r7, lr}
 8000248:	af00      	add	r7, sp, #0
    PORTS_init();
 800024a:	f000 f815 	bl	8000278 <PORTS_init>
    delayMs(20);  // Initialization delay
 800024e:	2014      	movs	r0, #20
 8000250:	f000 f890 	bl	8000374 <delayMs>

    /* Function set: 8-bit, 2 lines, 5x7 font */
    LCD_command(0x38);
 8000254:	2038      	movs	r0, #56	@ 0x38
 8000256:	f000 f841 	bl	80002dc <LCD_command>
    /* Entry mode set: Increment cursor */
    LCD_command(0x06);
 800025a:	2006      	movs	r0, #6
 800025c:	f000 f83e 	bl	80002dc <LCD_command>
    /* Clear display */
    LCD_command(0x01);
 8000260:	2001      	movs	r0, #1
 8000262:	f000 f83b 	bl	80002dc <LCD_command>
    delayMs(2);  // Wait for the display to clear
 8000266:	2002      	movs	r0, #2
 8000268:	f000 f884 	bl	8000374 <delayMs>
    /* Display on, cursor blinking */
    LCD_command(0x0F);
 800026c:	200f      	movs	r0, #15
 800026e:	f000 f835 	bl	80002dc <LCD_command>
}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
	...

08000278 <PORTS_init>:

void PORTS_init(void) {
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
    /* Enable GPIOB and GPIOC clock */
    RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN);
 800027c:	4b14      	ldr	r3, [pc, #80]	@ (80002d0 <PORTS_init+0x58>)
 800027e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000280:	4a13      	ldr	r2, [pc, #76]	@ (80002d0 <PORTS_init+0x58>)
 8000282:	f043 0306 	orr.w	r3, r3, #6
 8000286:	6313      	str	r3, [r2, #48]	@ 0x30

    /* Configure GPIOB pins for RS, RW, and EN */
    GPIOB->MODER &= ~0x0000FC00;  // Clear pin modes for PB5-PB7
 8000288:	4b12      	ldr	r3, [pc, #72]	@ (80002d4 <PORTS_init+0x5c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a11      	ldr	r2, [pc, #68]	@ (80002d4 <PORTS_init+0x5c>)
 800028e:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8000292:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= 0x00005400;   // Set PB5, PB6, PB7 to output mode
 8000294:	4b0f      	ldr	r3, [pc, #60]	@ (80002d4 <PORTS_init+0x5c>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a0e      	ldr	r2, [pc, #56]	@ (80002d4 <PORTS_init+0x5c>)
 800029a:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 800029e:	6013      	str	r3, [r2, #0]
    GPIOB->BSRR = 0x00C00000;     // Turn off EN and RW pins
 80002a0:	4b0c      	ldr	r3, [pc, #48]	@ (80002d4 <PORTS_init+0x5c>)
 80002a2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80002a6:	619a      	str	r2, [r3, #24]

    /* Configure GPIOC pins for D0-D7 */
    GPIOC->MODER &= ~0x0000FFFF;  // Clear pin modes for PC0-PC7
 80002a8:	4b0b      	ldr	r3, [pc, #44]	@ (80002d8 <PORTS_init+0x60>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a0a      	ldr	r2, [pc, #40]	@ (80002d8 <PORTS_init+0x60>)
 80002ae:	0c1b      	lsrs	r3, r3, #16
 80002b0:	041b      	lsls	r3, r3, #16
 80002b2:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= 0x00005555;   // Set PC0-PC7 to output mode
 80002b4:	4b08      	ldr	r3, [pc, #32]	@ (80002d8 <PORTS_init+0x60>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a07      	ldr	r2, [pc, #28]	@ (80002d8 <PORTS_init+0x60>)
 80002ba:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 80002be:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 80002c2:	6013      	str	r3, [r2, #0]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40020400 	.word	0x40020400
 80002d8:	40020800 	.word	0x40020800

080002dc <LCD_command>:

void LCD_command(unsigned char command) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
    GPIOB->BSRR = (RS | RW) << 16;  // RS = 0, RW = 0
 80002e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000324 <LCD_command+0x48>)
 80002e8:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 80002ec:	619a      	str	r2, [r3, #24]
    GPIOC->ODR = command;           // Send command to data bus
 80002ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000328 <LCD_command+0x4c>)
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	6153      	str	r3, [r2, #20]
    GPIOB->BSRR = EN;               // Pulse E high
 80002f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000324 <LCD_command+0x48>)
 80002f6:	2280      	movs	r2, #128	@ 0x80
 80002f8:	619a      	str	r2, [r3, #24]
    delayMs(1);
 80002fa:	2001      	movs	r0, #1
 80002fc:	f000 f83a 	bl	8000374 <delayMs>
    GPIOB->BSRR = EN << 16;         // Pulse E low
 8000300:	4b08      	ldr	r3, [pc, #32]	@ (8000324 <LCD_command+0x48>)
 8000302:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000306:	619a      	str	r2, [r3, #24]

    // Commands 1 and 2 need up to 1.64ms, others need 40us
    delayMs((command < 4) ? 2 : 1);
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	2b03      	cmp	r3, #3
 800030c:	d801      	bhi.n	8000312 <LCD_command+0x36>
 800030e:	2302      	movs	r3, #2
 8000310:	e000      	b.n	8000314 <LCD_command+0x38>
 8000312:	2301      	movs	r3, #1
 8000314:	4618      	mov	r0, r3
 8000316:	f000 f82d 	bl	8000374 <delayMs>
}
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40020400 	.word	0x40020400
 8000328:	40020800 	.word	0x40020800

0800032c <LCD_data>:

void LCD_data(char data) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
    GPIOB->BSRR = RS;               // RS = 1
 8000336:	4b0d      	ldr	r3, [pc, #52]	@ (800036c <LCD_data+0x40>)
 8000338:	2220      	movs	r2, #32
 800033a:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = RW << 16;         // RW = 0
 800033c:	4b0b      	ldr	r3, [pc, #44]	@ (800036c <LCD_data+0x40>)
 800033e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000342:	619a      	str	r2, [r3, #24]
    GPIOC->ODR = data;              // Send data to data bus
 8000344:	4a0a      	ldr	r2, [pc, #40]	@ (8000370 <LCD_data+0x44>)
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	6153      	str	r3, [r2, #20]
    GPIOB->BSRR = EN;               // Pulse E high
 800034a:	4b08      	ldr	r3, [pc, #32]	@ (800036c <LCD_data+0x40>)
 800034c:	2280      	movs	r2, #128	@ 0x80
 800034e:	619a      	str	r2, [r3, #24]
    delayMs(1);
 8000350:	2001      	movs	r0, #1
 8000352:	f000 f80f 	bl	8000374 <delayMs>
    GPIOB->BSRR = EN << 16;         // Pulse E low
 8000356:	4b05      	ldr	r3, [pc, #20]	@ (800036c <LCD_data+0x40>)
 8000358:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800035c:	619a      	str	r2, [r3, #24]
    delayMs(1);
 800035e:	2001      	movs	r0, #1
 8000360:	f000 f808 	bl	8000374 <delayMs>
}
 8000364:	bf00      	nop
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40020400 	.word	0x40020400
 8000370:	40020800 	.word	0x40020800

08000374 <delayMs>:

void delayMs(int n) {
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
    int i;
    for (; n > 0; n--) {
 800037c:	e00d      	b.n	800039a <delayMs+0x26>
        for (i = 0; i < 3195; i++) {
 800037e:	2300      	movs	r3, #0
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	e002      	b.n	800038a <delayMs+0x16>
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	3301      	adds	r3, #1
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	f640 427a 	movw	r2, #3194	@ 0xc7a
 8000390:	4293      	cmp	r3, r2
 8000392:	ddf7      	ble.n	8000384 <delayMs+0x10>
    for (; n > 0; n--) {
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	3b01      	subs	r3, #1
 8000398:	607b      	str	r3, [r7, #4]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	2b00      	cmp	r3, #0
 800039e:	dcee      	bgt.n	800037e <delayMs+0xa>
            // Simple delay loop
        }
    }
}
 80003a0:	bf00      	nop
 80003a2:	bf00      	nop
 80003a4:	3714      	adds	r7, #20
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr

080003ae <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003b2:	bf00      	nop
 80003b4:	e7fd      	b.n	80003b2 <NMI_Handler+0x4>

080003b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ba:	bf00      	nop
 80003bc:	e7fd      	b.n	80003ba <HardFault_Handler+0x4>

080003be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003c2:	bf00      	nop
 80003c4:	e7fd      	b.n	80003c2 <MemManage_Handler+0x4>

080003c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003ca:	bf00      	nop
 80003cc:	e7fd      	b.n	80003ca <BusFault_Handler+0x4>

080003ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003ce:	b480      	push	{r7}
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003d2:	bf00      	nop
 80003d4:	e7fd      	b.n	80003d2 <UsageFault_Handler+0x4>

080003d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003d6:	b480      	push	{r7}
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003da:	bf00      	nop
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr

080003e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr

080003f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr

08000400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000404:	f000 f83e 	bl	8000484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}

0800040c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000410:	4b06      	ldr	r3, [pc, #24]	@ (800042c <SystemInit+0x20>)
 8000412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000416:	4a05      	ldr	r2, [pc, #20]	@ (800042c <SystemInit+0x20>)
 8000418:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800041c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	e000ed00 	.word	0xe000ed00

08000430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000430:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000468 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000434:	f7ff ffea 	bl	800040c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000438:	480c      	ldr	r0, [pc, #48]	@ (800046c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800043a:	490d      	ldr	r1, [pc, #52]	@ (8000470 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800043c:	4a0d      	ldr	r2, [pc, #52]	@ (8000474 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800043e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000440:	e002      	b.n	8000448 <LoopCopyDataInit>

08000442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000446:	3304      	adds	r3, #4

08000448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800044c:	d3f9      	bcc.n	8000442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044e:	4a0a      	ldr	r2, [pc, #40]	@ (8000478 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000450:	4c0a      	ldr	r4, [pc, #40]	@ (800047c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000454:	e001      	b.n	800045a <LoopFillZerobss>

08000456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000458:	3204      	adds	r2, #4

0800045a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800045c:	d3fb      	bcc.n	8000456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800045e:	f000 f825 	bl	80004ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000462:	f7ff feb9 	bl	80001d8 <main>
  bx  lr    
 8000466:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000468:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800046c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000470:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000474:	08000538 	.word	0x08000538
  ldr r2, =_sbss
 8000478:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800047c:	20000024 	.word	0x20000024

08000480 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000480:	e7fe      	b.n	8000480 <ADC_IRQHandler>
	...

08000484 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <HAL_IncTick+0x20>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	461a      	mov	r2, r3
 800048e:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <HAL_IncTick+0x24>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4413      	add	r3, r2
 8000494:	4a04      	ldr	r2, [pc, #16]	@ (80004a8 <HAL_IncTick+0x24>)
 8000496:	6013      	str	r3, [r2, #0]
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	20000000 	.word	0x20000000
 80004a8:	20000020 	.word	0x20000020

080004ac <__libc_init_array>:
 80004ac:	b570      	push	{r4, r5, r6, lr}
 80004ae:	4d0d      	ldr	r5, [pc, #52]	@ (80004e4 <__libc_init_array+0x38>)
 80004b0:	4c0d      	ldr	r4, [pc, #52]	@ (80004e8 <__libc_init_array+0x3c>)
 80004b2:	1b64      	subs	r4, r4, r5
 80004b4:	10a4      	asrs	r4, r4, #2
 80004b6:	2600      	movs	r6, #0
 80004b8:	42a6      	cmp	r6, r4
 80004ba:	d109      	bne.n	80004d0 <__libc_init_array+0x24>
 80004bc:	4d0b      	ldr	r5, [pc, #44]	@ (80004ec <__libc_init_array+0x40>)
 80004be:	4c0c      	ldr	r4, [pc, #48]	@ (80004f0 <__libc_init_array+0x44>)
 80004c0:	f000 f818 	bl	80004f4 <_init>
 80004c4:	1b64      	subs	r4, r4, r5
 80004c6:	10a4      	asrs	r4, r4, #2
 80004c8:	2600      	movs	r6, #0
 80004ca:	42a6      	cmp	r6, r4
 80004cc:	d105      	bne.n	80004da <__libc_init_array+0x2e>
 80004ce:	bd70      	pop	{r4, r5, r6, pc}
 80004d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d4:	4798      	blx	r3
 80004d6:	3601      	adds	r6, #1
 80004d8:	e7ee      	b.n	80004b8 <__libc_init_array+0xc>
 80004da:	f855 3b04 	ldr.w	r3, [r5], #4
 80004de:	4798      	blx	r3
 80004e0:	3601      	adds	r6, #1
 80004e2:	e7f2      	b.n	80004ca <__libc_init_array+0x1e>
 80004e4:	08000530 	.word	0x08000530
 80004e8:	08000530 	.word	0x08000530
 80004ec:	08000530 	.word	0x08000530
 80004f0:	08000534 	.word	0x08000534

080004f4 <_init>:
 80004f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f6:	bf00      	nop
 80004f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fa:	bc08      	pop	{r3}
 80004fc:	469e      	mov	lr, r3
 80004fe:	4770      	bx	lr

08000500 <_fini>:
 8000500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000502:	bf00      	nop
 8000504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000506:	bc08      	pop	{r3}
 8000508:	469e      	mov	lr, r3
 800050a:	4770      	bx	lr
