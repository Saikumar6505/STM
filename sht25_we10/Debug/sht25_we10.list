
sht25_we10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fe4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  08007188  08007188  00008188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007768  08007768  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007768  08007768  00008768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007770  08007770  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007770  08007770  00008770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007774  08007774  00008774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007778  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200001d4  0800794c  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  0800794c  00009430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a76c  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e9  00000000  00000000  00013970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  00015260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c9  00000000  00000000  00015c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168e0  00000000  00000000  00016421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf4e  00000000  00000000  0002cd01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089faf  00000000  00000000  00038c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2bfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bd8  00000000  00000000  000c2c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000c681c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800716c 	.word	0x0800716c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800716c 	.word	0x0800716c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <WE10_Init>:
    ITM_SendChar(ch);
    return ch;
}

/* Initialize WE10 Wi-Fi module */
void WE10_Init() {
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b09f      	sub	sp, #124	@ 0x7c
 8000f4c:	af00      	add	r7, sp, #0
    // Define your commands as constants
	const char *reset_cmd = "CMD+RESET\r\n";
 8000f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001000 <WE10_Init+0xb8>)
 8000f50:	673b      	str	r3, [r7, #112]	@ 0x70
	HAL_UART_Transmit(&huart1, (uint8_t*)reset_cmd, strlen(reset_cmd), 1000);
 8000f52:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000f54:	f7ff f994 	bl	8000280 <strlen>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f60:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8000f62:	4828      	ldr	r0, [pc, #160]	@ (8001004 <WE10_Init+0xbc>)
 8000f64:	f002 fdce 	bl	8003b04 <HAL_UART_Transmit>
	HAL_Delay(5000);  // Wait for the module to reset and reconnect
 8000f68:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f6c:	f000 fe5a 	bl	8001c24 <HAL_Delay>

    const char *commands[] = {
 8000f70:	4a25      	ldr	r2, [pc, #148]	@ (8001008 <WE10_Init+0xc0>)
 8000f72:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000f76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f7a:	e883 0003 	stmia.w	r3, {r0, r1}
        //"CMD+RESET\r\n",
        "CMD+WIFIMODE=1\r\n",
        "CMD+CONTOAP=\"VIVO\",\"12345678\"\r\n"
    };

    for (int i = 0; i < sizeof(commands) / sizeof(commands[0]); i++) {
 8000f7e:	2300      	movs	r3, #0
 8000f80:	677b      	str	r3, [r7, #116]	@ 0x74
 8000f82:	e035      	b.n	8000ff0 <WE10_Init+0xa8>
        HAL_UART_Transmit(&huart1, (uint8_t*)commands[i], strlen(commands[i]), 1000);
 8000f84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	3378      	adds	r3, #120	@ 0x78
 8000f8a:	443b      	add	r3, r7
 8000f8c:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8000f90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	3378      	adds	r3, #120	@ 0x78
 8000f96:	443b      	add	r3, r7
 8000f98:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff f96f 	bl	8000280 <strlen>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000faa:	4621      	mov	r1, r4
 8000fac:	4815      	ldr	r0, [pc, #84]	@ (8001004 <WE10_Init+0xbc>)
 8000fae:	f002 fda9 	bl	8003b04 <HAL_UART_Transmit>
        HAL_Delay(2000);
 8000fb2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fb6:	f000 fe35 	bl	8001c24 <HAL_Delay>

        // Check response
        uint8_t response[100] = {0};  // Initialize to zero
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	2260      	movs	r2, #96	@ 0x60
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f004 f884 	bl	80050d4 <memset>
        HAL_UART_Receive(&huart1, response, sizeof(response) - 1, 1000);  // Leave space for null terminator
 8000fcc:	1d39      	adds	r1, r7, #4
 8000fce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd2:	2263      	movs	r2, #99	@ 0x63
 8000fd4:	480b      	ldr	r0, [pc, #44]	@ (8001004 <WE10_Init+0xbc>)
 8000fd6:	f002 fe20 	bl	8003c1a <HAL_UART_Receive>
        response[sizeof(response) - 1] = '\0';  // Null-terminate the string
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        printf("Response: %s\n", response);
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4809      	ldr	r0, [pc, #36]	@ (800100c <WE10_Init+0xc4>)
 8000fe6:	f003 fef9 	bl	8004ddc <iprintf>
    for (int i = 0; i < sizeof(commands) / sizeof(commands[0]); i++) {
 8000fea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fec:	3301      	adds	r3, #1
 8000fee:	677b      	str	r3, [r7, #116]	@ 0x74
 8000ff0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d9c6      	bls.n	8000f84 <WE10_Init+0x3c>
    }
}
 8000ff6:	bf00      	nop
 8000ff8:	bf00      	nop
 8000ffa:	377c      	adds	r7, #124	@ 0x7c
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd90      	pop	{r4, r7, pc}
 8001000:	08007188 	.word	0x08007188
 8001004:	20000244 	.word	0x20000244
 8001008:	080071d8 	.word	0x080071d8
 800100c:	08007194 	.word	0x08007194

08001010 <MQTT_Init>:

/* Initialize MQTT connection */
void MQTT_Init() {
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b0ce      	sub	sp, #312	@ 0x138
 8001014:	af00      	add	r7, sp, #0
    // Define your connection credentials

    // Prepare MQTT commands
    char arr4[] = "CMD+MQTTNETCFG=dev.rightech.io,1883\r\n";
 8001016:	4b5d      	ldr	r3, [pc, #372]	@ (800118c <MQTT_Init+0x17c>)
 8001018:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 800101c:	461d      	mov	r5, r3
 800101e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001026:	e895 0003 	ldmia.w	r5, {r0, r1}
 800102a:	6020      	str	r0, [r4, #0]
 800102c:	3404      	adds	r4, #4
 800102e:	8021      	strh	r1, [r4, #0]
    char arr5[150]; // Adjust size as needed
    snprintf(arr5, sizeof(arr5), "CMD+MQTTCONCFG=3,mqtt-saikumarsunny2002-3ruesz,,,,,,,,,\r\n" );
 8001030:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001034:	4a56      	ldr	r2, [pc, #344]	@ (8001190 <MQTT_Init+0x180>)
 8001036:	2196      	movs	r1, #150	@ 0x96
 8001038:	4618      	mov	r0, r3
 800103a:	f003 ff3f 	bl	8004ebc <sniprintf>
    char arr6[] = "CMD+MQTTSTART=1\r\n";
 800103e:	4b55      	ldr	r3, [pc, #340]	@ (8001194 <MQTT_Init+0x184>)
 8001040:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 8001044:	461d      	mov	r5, r3
 8001046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104a:	682b      	ldr	r3, [r5, #0]
 800104c:	8023      	strh	r3, [r4, #0]


    // Send MQTT Network Configuration

        // Send MQTT Network Configuration
        printf("Sending Network Config: %s", arr4);
 800104e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001052:	4619      	mov	r1, r3
 8001054:	4850      	ldr	r0, [pc, #320]	@ (8001198 <MQTT_Init+0x188>)
 8001056:	f003 fec1 	bl	8004ddc <iprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)arr4, strlen(arr4), 1000);
 800105a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f90e 	bl	8000280 <strlen>
 8001064:	4603      	mov	r3, r0
 8001066:	b29a      	uxth	r2, r3
 8001068:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800106c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001070:	484a      	ldr	r0, [pc, #296]	@ (800119c <MQTT_Init+0x18c>)
 8001072:	f002 fd47 	bl	8003b04 <HAL_UART_Transmit>
        HAL_Delay(5000);  // Increased delay
 8001076:	f241 3088 	movw	r0, #5000	@ 0x1388
 800107a:	f000 fdd3 	bl	8001c24 <HAL_Delay>

        // Receive response
        uint8_t response[100] = {0};
 800107e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001082:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	3304      	adds	r3, #4
 800108c:	2260      	movs	r2, #96	@ 0x60
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f004 f81f 	bl	80050d4 <memset>
        HAL_UART_Receive(&huart1, response, sizeof(response) - 1, 2000);
 8001096:	4639      	mov	r1, r7
 8001098:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800109c:	2263      	movs	r2, #99	@ 0x63
 800109e:	483f      	ldr	r0, [pc, #252]	@ (800119c <MQTT_Init+0x18c>)
 80010a0:	f002 fdbb 	bl	8003c1a <HAL_UART_Receive>
        response[sizeof(response) - 1] = '\0';
 80010a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010a8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
        printf("MQTT Network Config Response: %s\n", response); // Log response
 80010b2:	463b      	mov	r3, r7
 80010b4:	4619      	mov	r1, r3
 80010b6:	483a      	ldr	r0, [pc, #232]	@ (80011a0 <MQTT_Init+0x190>)
 80010b8:	f003 fe90 	bl	8004ddc <iprintf>

        // Send Connection Configuration
        printf("Sending Connection Config: %s", arr5);
 80010bc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80010c0:	4619      	mov	r1, r3
 80010c2:	4838      	ldr	r0, [pc, #224]	@ (80011a4 <MQTT_Init+0x194>)
 80010c4:	f003 fe8a 	bl	8004ddc <iprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)arr5, strlen(arr5), 1000);
 80010c8:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff f8d7 	bl	8000280 <strlen>
 80010d2:	4603      	mov	r3, r0
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80010da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010de:	482f      	ldr	r0, [pc, #188]	@ (800119c <MQTT_Init+0x18c>)
 80010e0:	f002 fd10 	bl	8003b04 <HAL_UART_Transmit>
        HAL_Delay(5000);  // Increased delay
 80010e4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80010e8:	f000 fd9c 	bl	8001c24 <HAL_Delay>

        // Receive response
        HAL_UART_Receive(&huart1, response, sizeof(response) - 1, 2000);
 80010ec:	4639      	mov	r1, r7
 80010ee:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010f2:	2263      	movs	r2, #99	@ 0x63
 80010f4:	4829      	ldr	r0, [pc, #164]	@ (800119c <MQTT_Init+0x18c>)
 80010f6:	f002 fd90 	bl	8003c1a <HAL_UART_Receive>
        response[sizeof(response) - 1] = '\0';
 80010fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
        printf("MQTT Connection Config Response: %s\n", response); // Log response
 8001108:	463b      	mov	r3, r7
 800110a:	4619      	mov	r1, r3
 800110c:	4826      	ldr	r0, [pc, #152]	@ (80011a8 <MQTT_Init+0x198>)
 800110e:	f003 fe65 	bl	8004ddc <iprintf>

        // Start MQTT
        printf("Starting MQTT...\n");
 8001112:	4826      	ldr	r0, [pc, #152]	@ (80011ac <MQTT_Init+0x19c>)
 8001114:	f003 feca 	bl	8004eac <puts>
        HAL_UART_Transmit(&huart1, (uint8_t*)arr6, strlen(arr6), 1000);
 8001118:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f8af 	bl	8000280 <strlen>
 8001122:	4603      	mov	r3, r0
 8001124:	b29a      	uxth	r2, r3
 8001126:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 800112a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800112e:	481b      	ldr	r0, [pc, #108]	@ (800119c <MQTT_Init+0x18c>)
 8001130:	f002 fce8 	bl	8003b04 <HAL_UART_Transmit>
        HAL_Delay(5000);  // Wait longer to confirm connection
 8001134:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001138:	f000 fd74 	bl	8001c24 <HAL_Delay>

        // Receive response
        HAL_UART_Receive(&huart1, response, sizeof(response) - 1, 2000);
 800113c:	4639      	mov	r1, r7
 800113e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001142:	2263      	movs	r2, #99	@ 0x63
 8001144:	4815      	ldr	r0, [pc, #84]	@ (800119c <MQTT_Init+0x18c>)
 8001146:	f002 fd68 	bl	8003c1a <HAL_UART_Receive>
        response[sizeof(response) - 1] = '\0';
 800114a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800114e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
        printf("MQTT Start Response: %s\n", response); // Log response
 8001158:	463b      	mov	r3, r7
 800115a:	4619      	mov	r1, r3
 800115c:	4814      	ldr	r0, [pc, #80]	@ (80011b0 <MQTT_Init+0x1a0>)
 800115e:	f003 fe3d 	bl	8004ddc <iprintf>

        // Check if MQTT started successfully
        if (strstr((char*)response, "OK") != NULL) {
 8001162:	463b      	mov	r3, r7
 8001164:	4913      	ldr	r1, [pc, #76]	@ (80011b4 <MQTT_Init+0x1a4>)
 8001166:	4618      	mov	r0, r3
 8001168:	f003 ffbc 	bl	80050e4 <strstr>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <MQTT_Init+0x16a>
            printf("MQTT connection successful.\n");
 8001172:	4811      	ldr	r0, [pc, #68]	@ (80011b8 <MQTT_Init+0x1a8>)
 8001174:	f003 fe9a 	bl	8004eac <puts>
            printf("MQTT connection failed.\n");
        }



    }
 8001178:	e002      	b.n	8001180 <MQTT_Init+0x170>
            printf("MQTT connection failed.\n");
 800117a:	4810      	ldr	r0, [pc, #64]	@ (80011bc <MQTT_Init+0x1ac>)
 800117c:	f003 fe96 	bl	8004eac <puts>
    }
 8001180:	bf00      	nop
 8001182:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8001186:	46bd      	mov	sp, r7
 8001188:	bdb0      	pop	{r4, r5, r7, pc}
 800118a:	bf00      	nop
 800118c:	0800730c 	.word	0x0800730c
 8001190:	080071e0 	.word	0x080071e0
 8001194:	08007334 	.word	0x08007334
 8001198:	0800721c 	.word	0x0800721c
 800119c:	20000244 	.word	0x20000244
 80011a0:	08007238 	.word	0x08007238
 80011a4:	0800725c 	.word	0x0800725c
 80011a8:	0800727c 	.word	0x0800727c
 80011ac:	080072a4 	.word	0x080072a4
 80011b0:	080072b8 	.word	0x080072b8
 80011b4:	080072d4 	.word	0x080072d4
 80011b8:	080072d8 	.word	0x080072d8
 80011bc:	080072f4 	.word	0x080072f4

080011c0 <SHT25_ReadTemperature>:


/* Read temperature from SHT25 sensor */
float SHT25_ReadTemperature(void) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af02      	add	r7, sp, #8
    uint8_t command = 0xE3;  // Command to read temperature
 80011c6:	23e3      	movs	r3, #227	@ 0xe3
 80011c8:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];

    HAL_I2C_Master_Transmit(&hi2c1, SHT25_I2C_ADDRESS << 1, &command, 1, HAL_MAX_DELAY);  // Send command
 80011ca:	1dfa      	adds	r2, r7, #7
 80011cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2301      	movs	r3, #1
 80011d4:	2180      	movs	r1, #128	@ 0x80
 80011d6:	4828      	ldr	r0, [pc, #160]	@ (8001278 <SHT25_ReadTemperature+0xb8>)
 80011d8:	f001 f8f6 	bl	80023c8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, SHT25_I2C_ADDRESS << 1, data, 2, HAL_MAX_DELAY);       // Receive data
 80011dc:	1d3a      	adds	r2, r7, #4
 80011de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2302      	movs	r3, #2
 80011e6:	2180      	movs	r1, #128	@ 0x80
 80011e8:	4823      	ldr	r0, [pc, #140]	@ (8001278 <SHT25_ReadTemperature+0xb8>)
 80011ea:	f001 f9eb 	bl	80025c4 <HAL_I2C_Master_Receive>

    uint16_t tempRaw = (data[0] << 8) | data[1];
 80011ee:	793b      	ldrb	r3, [r7, #4]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	797b      	ldrb	r3, [r7, #5]
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	4313      	orrs	r3, r2
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	81fb      	strh	r3, [r7, #14]
    tempRaw &= ~0x0003;  // Clear status bits
 80011fe:	89fb      	ldrh	r3, [r7, #14]
 8001200:	f023 0303 	bic.w	r3, r3, #3
 8001204:	81fb      	strh	r3, [r7, #14]
    float temperature = -46.85 + (175.72 * (float)tempRaw / 65536.0);
 8001206:	89fb      	ldrh	r3, [r7, #14]
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001210:	ee17 0a90 	vmov	r0, s15
 8001214:	f7ff f9a0 	bl	8000558 <__aeabi_f2d>
 8001218:	a313      	add	r3, pc, #76	@ (adr r3, 8001268 <SHT25_ReadTemperature+0xa8>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	f7ff f9f3 	bl	8000608 <__aeabi_dmul>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	4b13      	ldr	r3, [pc, #76]	@ (800127c <SHT25_ReadTemperature+0xbc>)
 8001230:	f7ff fb14 	bl	800085c <__aeabi_ddiv>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4619      	mov	r1, r3
 800123c:	a30c      	add	r3, pc, #48	@ (adr r3, 8001270 <SHT25_ReadTemperature+0xb0>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff f829 	bl	8000298 <__aeabi_dsub>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fcb3 	bl	8000bb8 <__aeabi_d2f>
 8001252:	4603      	mov	r3, r0
 8001254:	60bb      	str	r3, [r7, #8]
    return temperature;
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	ee07 3a90 	vmov	s15, r3
}
 800125c:	eeb0 0a67 	vmov.f32	s0, s15
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	3d70a3d7 	.word	0x3d70a3d7
 800126c:	4065f70a 	.word	0x4065f70a
 8001270:	cccccccd 	.word	0xcccccccd
 8001274:	40476ccc 	.word	0x40476ccc
 8001278:	200001f0 	.word	0x200001f0
 800127c:	40f00000 	.word	0x40f00000

08001280 <SHT25_ReadHumidity>:

/* Read humidity from SHT25 sensor */
float SHT25_ReadHumidity(void) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af02      	add	r7, sp, #8
    uint8_t command = 0xE5;  // Command to read humidity
 8001286:	23e5      	movs	r3, #229	@ 0xe5
 8001288:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];

    HAL_I2C_Master_Transmit(&hi2c1, SHT25_I2C_ADDRESS << 1, &command, 1, HAL_MAX_DELAY);  // Send command
 800128a:	1dfa      	adds	r2, r7, #7
 800128c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2301      	movs	r3, #1
 8001294:	2180      	movs	r1, #128	@ 0x80
 8001296:	4824      	ldr	r0, [pc, #144]	@ (8001328 <SHT25_ReadHumidity+0xa8>)
 8001298:	f001 f896 	bl	80023c8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, SHT25_I2C_ADDRESS << 1, data, 2, HAL_MAX_DELAY);       // Receive data
 800129c:	1d3a      	adds	r2, r7, #4
 800129e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2302      	movs	r3, #2
 80012a6:	2180      	movs	r1, #128	@ 0x80
 80012a8:	481f      	ldr	r0, [pc, #124]	@ (8001328 <SHT25_ReadHumidity+0xa8>)
 80012aa:	f001 f98b 	bl	80025c4 <HAL_I2C_Master_Receive>

    uint16_t humRaw = (data[0] << 8) | data[1];
 80012ae:	793b      	ldrb	r3, [r7, #4]
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	797b      	ldrb	r3, [r7, #5]
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	4313      	orrs	r3, r2
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	81fb      	strh	r3, [r7, #14]
    humRaw &= ~0x0003;  // Clear status bits
 80012be:	89fb      	ldrh	r3, [r7, #14]
 80012c0:	f023 0303 	bic.w	r3, r3, #3
 80012c4:	81fb      	strh	r3, [r7, #14]
    float humidity = -6.0 + (125.0 * (float)humRaw / 65536.0);
 80012c6:	89fb      	ldrh	r3, [r7, #14]
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d0:	ee17 0a90 	vmov	r0, s15
 80012d4:	f7ff f940 	bl	8000558 <__aeabi_f2d>
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	4b13      	ldr	r3, [pc, #76]	@ (800132c <SHT25_ReadHumidity+0xac>)
 80012de:	f7ff f993 	bl	8000608 <__aeabi_dmul>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <SHT25_ReadHumidity+0xb0>)
 80012f0:	f7ff fab4 	bl	800085c <__aeabi_ddiv>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <SHT25_ReadHumidity+0xb4>)
 8001302:	f7fe ffc9 	bl	8000298 <__aeabi_dsub>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f7ff fc53 	bl	8000bb8 <__aeabi_d2f>
 8001312:	4603      	mov	r3, r0
 8001314:	60bb      	str	r3, [r7, #8]
    return humidity;
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	ee07 3a90 	vmov	s15, r3
}
 800131c:	eeb0 0a67 	vmov.f32	s0, s15
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200001f0 	.word	0x200001f0
 800132c:	405f4000 	.word	0x405f4000
 8001330:	40f00000 	.word	0x40f00000
 8001334:	40180000 	.word	0x40180000

08001338 <mqtt_data_send>:

/* Send data via MQTT */
void mqtt_data_send(float temp,float humidity) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b0aa      	sub	sp, #168	@ 0xa8
 800133c:	af02      	add	r7, sp, #8
 800133e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001342:	edc7 0a00 	vstr	s1, [r7]
    char buffer[50];
    snprintf(buffer, sizeof(buffer), "CMD+MQTTPUB=base/state/temperature,%.2f\r\n", temp);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff f906 	bl	8000558 <__aeabi_f2d>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8001354:	e9cd 2300 	strd	r2, r3, [sp]
 8001358:	4a27      	ldr	r2, [pc, #156]	@ (80013f8 <mqtt_data_send+0xc0>)
 800135a:	2132      	movs	r1, #50	@ 0x32
 800135c:	f003 fdae 	bl	8004ebc <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001360:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001364:	4618      	mov	r0, r3
 8001366:	f7fe ff8b 	bl	8000280 <strlen>
 800136a:	4603      	mov	r3, r0
 800136c:	b29a      	uxth	r2, r3
 800136e:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8001372:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001376:	4821      	ldr	r0, [pc, #132]	@ (80013fc <mqtt_data_send+0xc4>)
 8001378:	f002 fbc4 	bl	8003b04 <HAL_UART_Transmit>
    snprintf(buffer, sizeof(buffer), "CMD+MQTTPUB=base/state/humidity,%.2f\r\n",humidity);
 800137c:	6838      	ldr	r0, [r7, #0]
 800137e:	f7ff f8eb 	bl	8000558 <__aeabi_f2d>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800138a:	e9cd 2300 	strd	r2, r3, [sp]
 800138e:	4a1c      	ldr	r2, [pc, #112]	@ (8001400 <mqtt_data_send+0xc8>)
 8001390:	2132      	movs	r1, #50	@ 0x32
 8001392:	f003 fd93 	bl	8004ebc <sniprintf>
         HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001396:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800139a:	4618      	mov	r0, r3
 800139c:	f7fe ff70 	bl	8000280 <strlen>
 80013a0:	4603      	mov	r3, r0
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80013a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ac:	4813      	ldr	r0, [pc, #76]	@ (80013fc <mqtt_data_send+0xc4>)
 80013ae:	f002 fba9 	bl	8003b04 <HAL_UART_Transmit>

    // Wait for the module to process the command
    HAL_Delay(1000); // Delay to ensure the command is processed
 80013b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013b6:	f000 fc35 	bl	8001c24 <HAL_Delay>
    // Check response from the module
    uint8_t response[100] = {0};  // Buffer to receive response
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	2260      	movs	r2, #96	@ 0x60
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f003 fe84 	bl	80050d4 <memset>
    HAL_UART_Receive(&huart1, response, sizeof(response) - 1, 2000);  // Receive response
 80013cc:	f107 0108 	add.w	r1, r7, #8
 80013d0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80013d4:	2263      	movs	r2, #99	@ 0x63
 80013d6:	4809      	ldr	r0, [pc, #36]	@ (80013fc <mqtt_data_send+0xc4>)
 80013d8:	f002 fc1f 	bl	8003c1a <HAL_UART_Receive>
    response[sizeof(response) - 1] = '\0';  // Null-terminate the string
 80013dc:	2300      	movs	r3, #0
 80013de:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    printf("Publish Response: %s\n", response);  // Print the response for debugging
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	4619      	mov	r1, r3
 80013e8:	4806      	ldr	r0, [pc, #24]	@ (8001404 <mqtt_data_send+0xcc>)
 80013ea:	f003 fcf7 	bl	8004ddc <iprintf>
}
 80013ee:	bf00      	nop
 80013f0:	37a0      	adds	r7, #160	@ 0xa0
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	08007348 	.word	0x08007348
 80013fc:	20000244 	.word	0x20000244
 8001400:	08007374 	.word	0x08007374
 8001404:	0800739c 	.word	0x0800739c

08001408 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8001408:	b5b0      	push	{r4, r5, r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af02      	add	r7, sp, #8
    HAL_Init();
 800140e:	f000 fb97 	bl	8001b40 <HAL_Init>
    SystemClock_Config();
 8001412:	f000 f847 	bl	80014a4 <SystemClock_Config>

    /* Initialize peripherals */
    MX_GPIO_Init();
 8001416:	f000 f921 	bl	800165c <MX_GPIO_Init>
    MX_USART2_UART_Init();
 800141a:	f000 f8fb 	bl	8001614 <MX_USART2_UART_Init>
    MX_I2C1_Init();
 800141e:	f000 f8ab 	bl	8001578 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 8001422:	f000 f8d3 	bl	80015cc <MX_USART1_UART_Init>

    /* Initialize WE10 Wi-Fi and MQTT */
    WE10_Init();
 8001426:	f7ff fd8f 	bl	8000f48 <WE10_Init>
    MQTT_Init();
 800142a:	f7ff fdf1 	bl	8001010 <MQTT_Init>

    /* Infinite loop */
    while (1) {
        temperature = SHT25_ReadTemperature();
 800142e:	f7ff fec7 	bl	80011c0 <SHT25_ReadTemperature>
 8001432:	eef0 7a40 	vmov.f32	s15, s0
 8001436:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <main+0x90>)
 8001438:	edc3 7a00 	vstr	s15, [r3]
        humidity = SHT25_ReadHumidity();
 800143c:	f7ff ff20 	bl	8001280 <SHT25_ReadHumidity>
 8001440:	eef0 7a40 	vmov.f32	s15, s0
 8001444:	4b15      	ldr	r3, [pc, #84]	@ (800149c <main+0x94>)
 8001446:	edc3 7a00 	vstr	s15, [r3]

        // Format and transmit temperature and humidity over UART
        printf("Temperature: %.2f C, Humidity: %.2f%%\n", temperature, humidity);
 800144a:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <main+0x90>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f882 	bl	8000558 <__aeabi_f2d>
 8001454:	4604      	mov	r4, r0
 8001456:	460d      	mov	r5, r1
 8001458:	4b10      	ldr	r3, [pc, #64]	@ (800149c <main+0x94>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f87b 	bl	8000558 <__aeabi_f2d>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	e9cd 2300 	strd	r2, r3, [sp]
 800146a:	4622      	mov	r2, r4
 800146c:	462b      	mov	r3, r5
 800146e:	480c      	ldr	r0, [pc, #48]	@ (80014a0 <main+0x98>)
 8001470:	f003 fcb4 	bl	8004ddc <iprintf>

        // Send temperature via MQTT
        mqtt_data_send(temperature,humidity);
 8001474:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <main+0x90>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <main+0x94>)
 800147c:	ed93 7a00 	vldr	s14, [r3]
 8001480:	eef0 0a47 	vmov.f32	s1, s14
 8001484:	eeb0 0a67 	vmov.f32	s0, s15
 8001488:	f7ff ff56 	bl	8001338 <mqtt_data_send>

        // Delay for 5 seconds
        HAL_Delay(5000);
 800148c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001490:	f000 fbc8 	bl	8001c24 <HAL_Delay>
        temperature = SHT25_ReadTemperature();
 8001494:	bf00      	nop
 8001496:	e7ca      	b.n	800142e <main+0x26>
 8001498:	200002d4 	.word	0x200002d4
 800149c:	200002d8 	.word	0x200002d8
 80014a0:	080073b4 	.word	0x080073b4

080014a4 <SystemClock_Config>:
    }
}

/* System Clock Configuration */
void SystemClock_Config(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b094      	sub	sp, #80	@ 0x50
 80014a8:	af00      	add	r7, sp, #0
    /* Configuration for clock */
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014aa:	f107 0320 	add.w	r3, r7, #32
 80014ae:	2230      	movs	r2, #48	@ 0x30
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 fe0e 	bl	80050d4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	4b28      	ldr	r3, [pc, #160]	@ (8001570 <SystemClock_Config+0xcc>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d0:	4a27      	ldr	r2, [pc, #156]	@ (8001570 <SystemClock_Config+0xcc>)
 80014d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d8:	4b25      	ldr	r3, [pc, #148]	@ (8001570 <SystemClock_Config+0xcc>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e4:	2300      	movs	r3, #0
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	4b22      	ldr	r3, [pc, #136]	@ (8001574 <SystemClock_Config+0xd0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a21      	ldr	r2, [pc, #132]	@ (8001574 <SystemClock_Config+0xd0>)
 80014ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001574 <SystemClock_Config+0xd0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001500:	2302      	movs	r3, #2
 8001502:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001504:	2301      	movs	r3, #1
 8001506:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001508:	2310      	movs	r3, #16
 800150a:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150c:	2302      	movs	r3, #2
 800150e:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001510:	2300      	movs	r3, #0
 8001512:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 16;
 8001514:	2310      	movs	r3, #16
 8001516:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 8001518:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800151c:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800151e:	2304      	movs	r3, #4
 8001520:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8001522:	2304      	movs	r3, #4
 8001524:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001526:	f107 0320 	add.w	r3, r7, #32
 800152a:	4618      	mov	r0, r3
 800152c:	f001 fe02 	bl	8003134 <HAL_RCC_OscConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <SystemClock_Config+0x96>
        Error_Handler();
 8001536:	f000 f8b9 	bl	80016ac <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800153a:	230f      	movs	r3, #15
 800153c:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800153e:	2302      	movs	r3, #2
 8001540:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001546:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800154a:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	2102      	movs	r1, #2
 8001556:	4618      	mov	r0, r3
 8001558:	f002 f864 	bl	8003624 <HAL_RCC_ClockConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0xc2>
        Error_Handler();
 8001562:	f000 f8a3 	bl	80016ac <Error_Handler>
    }
}
 8001566:	bf00      	nop
 8001568:	3750      	adds	r7, #80	@ 0x50
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40007000 	.word	0x40007000

08001578 <MX_I2C1_Init>:

/* I2C1 Initialization Function */
static void MX_I2C1_Init(void) {
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 800157c:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <MX_I2C1_Init+0x48>)
 800157e:	4a11      	ldr	r2, [pc, #68]	@ (80015c4 <MX_I2C1_Init+0x4c>)
 8001580:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8001582:	4b0f      	ldr	r3, [pc, #60]	@ (80015c0 <MX_I2C1_Init+0x48>)
 8001584:	4a10      	ldr	r2, [pc, #64]	@ (80015c8 <MX_I2C1_Init+0x50>)
 8001586:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001588:	4b0d      	ldr	r3, [pc, #52]	@ (80015c0 <MX_I2C1_Init+0x48>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 800158e:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <MX_I2C1_Init+0x48>)
 8001590:	2200      	movs	r2, #0
 8001592:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001594:	4b0a      	ldr	r3, [pc, #40]	@ (80015c0 <MX_I2C1_Init+0x48>)
 8001596:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800159a:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800159c:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <MX_I2C1_Init+0x48>)
 800159e:	2200      	movs	r2, #0
 80015a0:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 80015a2:	4b07      	ldr	r3, [pc, #28]	@ (80015c0 <MX_I2C1_Init+0x48>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a8:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <MX_I2C1_Init+0x48>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ae:	4b04      	ldr	r3, [pc, #16]	@ (80015c0 <MX_I2C1_Init+0x48>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
    HAL_I2C_Init(&hi2c1);
 80015b4:	4802      	ldr	r0, [pc, #8]	@ (80015c0 <MX_I2C1_Init+0x48>)
 80015b6:	f000 fdc3 	bl	8002140 <HAL_I2C_Init>
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200001f0 	.word	0x200001f0
 80015c4:	40005400 	.word	0x40005400
 80015c8:	000186a0 	.word	0x000186a0

080015cc <MX_USART1_UART_Init>:

/* USART1 Initialization Function */
static void MX_USART1_UART_Init(void) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 80015d0:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <MX_USART1_UART_Init+0x40>)
 80015d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001610 <MX_USART1_UART_Init+0x44>)
 80015d4:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 80015d6:	4b0d      	ldr	r3, [pc, #52]	@ (800160c <MX_USART1_UART_Init+0x40>)
 80015d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015dc:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015de:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <MX_USART1_UART_Init+0x40>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80015e4:	4b09      	ldr	r3, [pc, #36]	@ (800160c <MX_USART1_UART_Init+0x40>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80015ea:	4b08      	ldr	r3, [pc, #32]	@ (800160c <MX_USART1_UART_Init+0x40>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <MX_USART1_UART_Init+0x40>)
 80015f2:	220c      	movs	r2, #12
 80015f4:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f6:	4b05      	ldr	r3, [pc, #20]	@ (800160c <MX_USART1_UART_Init+0x40>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015fc:	4b03      	ldr	r3, [pc, #12]	@ (800160c <MX_USART1_UART_Init+0x40>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
    HAL_UART_Init(&huart1);
 8001602:	4802      	ldr	r0, [pc, #8]	@ (800160c <MX_USART1_UART_Init+0x40>)
 8001604:	f002 fa2e 	bl	8003a64 <HAL_UART_Init>
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000244 	.word	0x20000244
 8001610:	40011000 	.word	0x40011000

08001614 <MX_USART2_UART_Init>:

/* USART2 Initialization Function */
static void MX_USART2_UART_Init(void) {
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8001618:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <MX_USART2_UART_Init+0x40>)
 800161a:	4a0f      	ldr	r2, [pc, #60]	@ (8001658 <MX_USART2_UART_Init+0x44>)
 800161c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800161e:	4b0d      	ldr	r3, [pc, #52]	@ (8001654 <MX_USART2_UART_Init+0x40>)
 8001620:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001624:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001626:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <MX_USART2_UART_Init+0x40>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800162c:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <MX_USART2_UART_Init+0x40>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001632:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <MX_USART2_UART_Init+0x40>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001638:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <MX_USART2_UART_Init+0x40>)
 800163a:	220c      	movs	r2, #12
 800163c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163e:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <MX_USART2_UART_Init+0x40>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001644:	4b03      	ldr	r3, [pc, #12]	@ (8001654 <MX_USART2_UART_Init+0x40>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
    HAL_UART_Init(&huart2);
 800164a:	4802      	ldr	r0, [pc, #8]	@ (8001654 <MX_USART2_UART_Init+0x40>)
 800164c:	f002 fa0a 	bl	8003a64 <HAL_UART_Init>
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	2000028c 	.word	0x2000028c
 8001658:	40004400 	.word	0x40004400

0800165c <MX_GPIO_Init>:

/* GPIO Initialization Function */
static void MX_GPIO_Init(void) {
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	4b10      	ldr	r3, [pc, #64]	@ (80016a8 <MX_GPIO_Init+0x4c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	4a0f      	ldr	r2, [pc, #60]	@ (80016a8 <MX_GPIO_Init+0x4c>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	@ 0x30
 8001672:	4b0d      	ldr	r3, [pc, #52]	@ (80016a8 <MX_GPIO_Init+0x4c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <MX_GPIO_Init+0x4c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a08      	ldr	r2, [pc, #32]	@ (80016a8 <MX_GPIO_Init+0x4c>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <MX_GPIO_Init+0x4c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800

080016ac <Error_Handler>:

/* Error Handler */
void Error_Handler(void) {
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
    while (1) {
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <Error_Handler+0x4>

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <HAL_MspInit+0x4c>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001700 <HAL_MspInit+0x4c>)
 80016c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <HAL_MspInit+0x4c>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <HAL_MspInit+0x4c>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	4a08      	ldr	r2, [pc, #32]	@ (8001700 <HAL_MspInit+0x4c>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_MspInit+0x4c>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016f2:	2007      	movs	r0, #7
 80016f4:	f000 fb6c 	bl	8001dd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40023800 	.word	0x40023800

08001704 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	@ 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a19      	ldr	r2, [pc, #100]	@ (8001788 <HAL_I2C_MspInit+0x84>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d12b      	bne.n	800177e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b18      	ldr	r3, [pc, #96]	@ (800178c <HAL_I2C_MspInit+0x88>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a17      	ldr	r2, [pc, #92]	@ (800178c <HAL_I2C_MspInit+0x88>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <HAL_I2C_MspInit+0x88>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001742:	23c0      	movs	r3, #192	@ 0xc0
 8001744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001746:	2312      	movs	r3, #18
 8001748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800174a:	2301      	movs	r3, #1
 800174c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001752:	2304      	movs	r3, #4
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	480c      	ldr	r0, [pc, #48]	@ (8001790 <HAL_I2C_MspInit+0x8c>)
 800175e:	f000 fb6b 	bl	8001e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <HAL_I2C_MspInit+0x88>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	4a08      	ldr	r2, [pc, #32]	@ (800178c <HAL_I2C_MspInit+0x88>)
 800176c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001770:	6413      	str	r3, [r2, #64]	@ 0x40
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <HAL_I2C_MspInit+0x88>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	@ 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40005400 	.word	0x40005400
 800178c:	40023800 	.word	0x40023800
 8001790:	40020400 	.word	0x40020400

08001794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08c      	sub	sp, #48	@ 0x30
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a32      	ldr	r2, [pc, #200]	@ (800187c <HAL_UART_MspInit+0xe8>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d12d      	bne.n	8001812 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]
 80017ba:	4b31      	ldr	r3, [pc, #196]	@ (8001880 <HAL_UART_MspInit+0xec>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017be:	4a30      	ldr	r2, [pc, #192]	@ (8001880 <HAL_UART_MspInit+0xec>)
 80017c0:	f043 0310 	orr.w	r3, r3, #16
 80017c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001880 <HAL_UART_MspInit+0xec>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	f003 0310 	and.w	r3, r3, #16
 80017ce:	61bb      	str	r3, [r7, #24]
 80017d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001880 <HAL_UART_MspInit+0xec>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	4a29      	ldr	r2, [pc, #164]	@ (8001880 <HAL_UART_MspInit+0xec>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e2:	4b27      	ldr	r3, [pc, #156]	@ (8001880 <HAL_UART_MspInit+0xec>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017ee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001800:	2307      	movs	r3, #7
 8001802:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 031c 	add.w	r3, r7, #28
 8001808:	4619      	mov	r1, r3
 800180a:	481e      	ldr	r0, [pc, #120]	@ (8001884 <HAL_UART_MspInit+0xf0>)
 800180c:	f000 fb14 	bl	8001e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001810:	e030      	b.n	8001874 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a1c      	ldr	r2, [pc, #112]	@ (8001888 <HAL_UART_MspInit+0xf4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d12b      	bne.n	8001874 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800181c:	2300      	movs	r3, #0
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <HAL_UART_MspInit+0xec>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001824:	4a16      	ldr	r2, [pc, #88]	@ (8001880 <HAL_UART_MspInit+0xec>)
 8001826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800182a:	6413      	str	r3, [r2, #64]	@ 0x40
 800182c:	4b14      	ldr	r3, [pc, #80]	@ (8001880 <HAL_UART_MspInit+0xec>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <HAL_UART_MspInit+0xec>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001840:	4a0f      	ldr	r2, [pc, #60]	@ (8001880 <HAL_UART_MspInit+0xec>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6313      	str	r3, [r2, #48]	@ 0x30
 8001848:	4b0d      	ldr	r3, [pc, #52]	@ (8001880 <HAL_UART_MspInit+0xec>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001854:	230c      	movs	r3, #12
 8001856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001860:	2303      	movs	r3, #3
 8001862:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001864:	2307      	movs	r3, #7
 8001866:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	4619      	mov	r1, r3
 800186e:	4805      	ldr	r0, [pc, #20]	@ (8001884 <HAL_UART_MspInit+0xf0>)
 8001870:	f000 fae2 	bl	8001e38 <HAL_GPIO_Init>
}
 8001874:	bf00      	nop
 8001876:	3730      	adds	r7, #48	@ 0x30
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40011000 	.word	0x40011000
 8001880:	40023800 	.word	0x40023800
 8001884:	40020000 	.word	0x40020000
 8001888:	40004400 	.word	0x40004400

0800188c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <NMI_Handler+0x4>

08001894 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <HardFault_Handler+0x4>

0800189c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <MemManage_Handler+0x4>

080018a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <BusFault_Handler+0x4>

080018ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <UsageFault_Handler+0x4>

080018b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e2:	f000 f97f 	bl	8001be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80018f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001934 <ITM_SendChar+0x48>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001934 <ITM_SendChar+0x48>)
 80018fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001900:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001902:	4b0d      	ldr	r3, [pc, #52]	@ (8001938 <ITM_SendChar+0x4c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a0c      	ldr	r2, [pc, #48]	@ (8001938 <ITM_SendChar+0x4c>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800190e:	bf00      	nop
 8001910:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f8      	beq.n	8001910 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800191e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	6013      	str	r3, [r2, #0]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000edfc 	.word	0xe000edfc
 8001938:	e0000e00 	.word	0xe0000e00

0800193c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return 1;
 8001940:	2301      	movs	r3, #1
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_kill>:

int _kill(int pid, int sig)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001956:	f003 fc25 	bl	80051a4 <__errno>
 800195a:	4603      	mov	r3, r0
 800195c:	2216      	movs	r2, #22
 800195e:	601a      	str	r2, [r3, #0]
  return -1;
 8001960:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <_exit>:

void _exit (int status)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001974:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ffe7 	bl	800194c <_kill>
  while (1) {}    /* Make sure we hang here */
 800197e:	bf00      	nop
 8001980:	e7fd      	b.n	800197e <_exit+0x12>

08001982 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	e00a      	b.n	80019aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001994:	f3af 8000 	nop.w
 8001998:	4601      	mov	r1, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	60ba      	str	r2, [r7, #8]
 80019a0:	b2ca      	uxtb	r2, r1
 80019a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	dbf0      	blt.n	8001994 <_read+0x12>
  }

  return len;
 80019b2:	687b      	ldr	r3, [r7, #4]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	e009      	b.n	80019e2 <_write+0x26>
  {
	  //__io_putchar(*ptr++);
	 	  	  ITM_SendChar(*ptr++);
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	60ba      	str	r2, [r7, #8]
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ff88 	bl	80018ec <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	3301      	adds	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	dbf1      	blt.n	80019ce <_write+0x12>
  }
  return len;
 80019ea:	687b      	ldr	r3, [r7, #4]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_close>:

int _close(int file)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a1c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <_isatty>:

int _isatty(int file)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a34:	2301      	movs	r3, #1
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b085      	sub	sp, #20
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a64:	4a14      	ldr	r2, [pc, #80]	@ (8001ab8 <_sbrk+0x5c>)
 8001a66:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <_sbrk+0x60>)
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a70:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a78:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <_sbrk+0x64>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	@ (8001ac4 <_sbrk+0x68>)
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d207      	bcs.n	8001a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a8c:	f003 fb8a 	bl	80051a4 <__errno>
 8001a90:	4603      	mov	r3, r0
 8001a92:	220c      	movs	r2, #12
 8001a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a9a:	e009      	b.n	8001ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	@ (8001ac0 <_sbrk+0x64>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4a05      	ldr	r2, [pc, #20]	@ (8001ac0 <_sbrk+0x64>)
 8001aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20020000 	.word	0x20020000
 8001abc:	00000400 	.word	0x00000400
 8001ac0:	200002dc 	.word	0x200002dc
 8001ac4:	20000430 	.word	0x20000430

08001ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <SystemInit+0x20>)
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ad2:	4a05      	ldr	r2, [pc, #20]	@ (8001ae8 <SystemInit+0x20>)
 8001ad4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ad8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001af0:	f7ff ffea 	bl	8001ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001af4:	480c      	ldr	r0, [pc, #48]	@ (8001b28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001af6:	490d      	ldr	r1, [pc, #52]	@ (8001b2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001af8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001afc:	e002      	b.n	8001b04 <LoopCopyDataInit>

08001afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b02:	3304      	adds	r3, #4

08001b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b08:	d3f9      	bcc.n	8001afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b10:	e001      	b.n	8001b16 <LoopFillZerobss>

08001b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b14:	3204      	adds	r2, #4

08001b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b18:	d3fb      	bcc.n	8001b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b1a:	f003 fb49 	bl	80051b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b1e:	f7ff fc73 	bl	8001408 <main>
  bx  lr    
 8001b22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b2c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b30:	08007778 	.word	0x08007778
  ldr r2, =_sbss
 8001b34:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b38:	20000430 	.word	0x20000430

08001b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC_IRQHandler>
	...

08001b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b44:	4b0e      	ldr	r3, [pc, #56]	@ (8001b80 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0d      	ldr	r2, [pc, #52]	@ (8001b80 <HAL_Init+0x40>)
 8001b4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b50:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <HAL_Init+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0a      	ldr	r2, [pc, #40]	@ (8001b80 <HAL_Init+0x40>)
 8001b56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b5c:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a07      	ldr	r2, [pc, #28]	@ (8001b80 <HAL_Init+0x40>)
 8001b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b68:	2003      	movs	r0, #3
 8001b6a:	f000 f931 	bl	8001dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f000 f808 	bl	8001b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b74:	f7ff fd9e 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b8c:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <HAL_InitTick+0x54>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <HAL_InitTick+0x58>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 f93b 	bl	8001e1e <HAL_SYSTICK_Config>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00e      	b.n	8001bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b0f      	cmp	r3, #15
 8001bb6:	d80a      	bhi.n	8001bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bc0:	f000 f911 	bl	8001de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc4:	4a06      	ldr	r2, [pc, #24]	@ (8001be0 <HAL_InitTick+0x5c>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000008 	.word	0x20000008
 8001be0:	20000004 	.word	0x20000004

08001be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be8:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <HAL_IncTick+0x20>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_IncTick+0x24>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a04      	ldr	r2, [pc, #16]	@ (8001c08 <HAL_IncTick+0x24>)
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000008 	.word	0x20000008
 8001c08:	200002e0 	.word	0x200002e0

08001c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c10:	4b03      	ldr	r3, [pc, #12]	@ (8001c20 <HAL_GetTick+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	200002e0 	.word	0x200002e0

08001c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c2c:	f7ff ffee 	bl	8001c0c <HAL_GetTick>
 8001c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c3c:	d005      	beq.n	8001c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <HAL_Delay+0x44>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c4a:	bf00      	nop
 8001c4c:	f7ff ffde 	bl	8001c0c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d8f7      	bhi.n	8001c4c <HAL_Delay+0x28>
  {
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000008 	.word	0x20000008

08001c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9e:	4a04      	ldr	r2, [pc, #16]	@ (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	60d3      	str	r3, [r2, #12]
}
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb8:	4b04      	ldr	r3, [pc, #16]	@ (8001ccc <__NVIC_GetPriorityGrouping+0x18>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	f003 0307 	and.w	r3, r3, #7
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	db0a      	blt.n	8001cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	490c      	ldr	r1, [pc, #48]	@ (8001d1c <__NVIC_SetPriority+0x4c>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	0112      	lsls	r2, r2, #4
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf8:	e00a      	b.n	8001d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4908      	ldr	r1, [pc, #32]	@ (8001d20 <__NVIC_SetPriority+0x50>)
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	3b04      	subs	r3, #4
 8001d08:	0112      	lsls	r2, r2, #4
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	761a      	strb	r2, [r3, #24]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000e100 	.word	0xe000e100
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	@ 0x24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f1c3 0307 	rsb	r3, r3, #7
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	bf28      	it	cs
 8001d42:	2304      	movcs	r3, #4
 8001d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	2b06      	cmp	r3, #6
 8001d4c:	d902      	bls.n	8001d54 <NVIC_EncodePriority+0x30>
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3b03      	subs	r3, #3
 8001d52:	e000      	b.n	8001d56 <NVIC_EncodePriority+0x32>
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43da      	mvns	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	401a      	ands	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	43d9      	mvns	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	4313      	orrs	r3, r2
         );
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3724      	adds	r7, #36	@ 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d9c:	d301      	bcc.n	8001da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00f      	b.n	8001dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dcc <SysTick_Config+0x40>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001daa:	210f      	movs	r1, #15
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001db0:	f7ff ff8e 	bl	8001cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db4:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <SysTick_Config+0x40>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dba:	4b04      	ldr	r3, [pc, #16]	@ (8001dcc <SysTick_Config+0x40>)
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	e000e010 	.word	0xe000e010

08001dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ff47 	bl	8001c6c <__NVIC_SetPriorityGrouping>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b086      	sub	sp, #24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df8:	f7ff ff5c 	bl	8001cb4 <__NVIC_GetPriorityGrouping>
 8001dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f7ff ff8e 	bl	8001d24 <NVIC_EncodePriority>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff5d 	bl	8001cd0 <__NVIC_SetPriority>
}
 8001e16:	bf00      	nop
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ffb0 	bl	8001d8c <SysTick_Config>
 8001e2c:	4603      	mov	r3, r0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	@ 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	e159      	b.n	8002108 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e54:	2201      	movs	r2, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	f040 8148 	bne.w	8002102 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d005      	beq.n	8001e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d130      	bne.n	8001eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 0201 	and.w	r2, r3, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d017      	beq.n	8001f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d123      	bne.n	8001f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	08da      	lsrs	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3208      	adds	r2, #8
 8001f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	08da      	lsrs	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3208      	adds	r2, #8
 8001f76:	69b9      	ldr	r1, [r7, #24]
 8001f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0203 	and.w	r2, r3, #3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80a2 	beq.w	8002102 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b57      	ldr	r3, [pc, #348]	@ (8002120 <HAL_GPIO_Init+0x2e8>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc6:	4a56      	ldr	r2, [pc, #344]	@ (8002120 <HAL_GPIO_Init+0x2e8>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fce:	4b54      	ldr	r3, [pc, #336]	@ (8002120 <HAL_GPIO_Init+0x2e8>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fda:	4a52      	ldr	r2, [pc, #328]	@ (8002124 <HAL_GPIO_Init+0x2ec>)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a49      	ldr	r2, [pc, #292]	@ (8002128 <HAL_GPIO_Init+0x2f0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d019      	beq.n	800203a <HAL_GPIO_Init+0x202>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a48      	ldr	r2, [pc, #288]	@ (800212c <HAL_GPIO_Init+0x2f4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <HAL_GPIO_Init+0x1fe>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a47      	ldr	r2, [pc, #284]	@ (8002130 <HAL_GPIO_Init+0x2f8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00d      	beq.n	8002032 <HAL_GPIO_Init+0x1fa>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a46      	ldr	r2, [pc, #280]	@ (8002134 <HAL_GPIO_Init+0x2fc>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d007      	beq.n	800202e <HAL_GPIO_Init+0x1f6>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a45      	ldr	r2, [pc, #276]	@ (8002138 <HAL_GPIO_Init+0x300>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d101      	bne.n	800202a <HAL_GPIO_Init+0x1f2>
 8002026:	2304      	movs	r3, #4
 8002028:	e008      	b.n	800203c <HAL_GPIO_Init+0x204>
 800202a:	2307      	movs	r3, #7
 800202c:	e006      	b.n	800203c <HAL_GPIO_Init+0x204>
 800202e:	2303      	movs	r3, #3
 8002030:	e004      	b.n	800203c <HAL_GPIO_Init+0x204>
 8002032:	2302      	movs	r3, #2
 8002034:	e002      	b.n	800203c <HAL_GPIO_Init+0x204>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <HAL_GPIO_Init+0x204>
 800203a:	2300      	movs	r3, #0
 800203c:	69fa      	ldr	r2, [r7, #28]
 800203e:	f002 0203 	and.w	r2, r2, #3
 8002042:	0092      	lsls	r2, r2, #2
 8002044:	4093      	lsls	r3, r2
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800204c:	4935      	ldr	r1, [pc, #212]	@ (8002124 <HAL_GPIO_Init+0x2ec>)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	3302      	adds	r3, #2
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800205a:	4b38      	ldr	r3, [pc, #224]	@ (800213c <HAL_GPIO_Init+0x304>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800207e:	4a2f      	ldr	r2, [pc, #188]	@ (800213c <HAL_GPIO_Init+0x304>)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002084:	4b2d      	ldr	r3, [pc, #180]	@ (800213c <HAL_GPIO_Init+0x304>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020a8:	4a24      	ldr	r2, [pc, #144]	@ (800213c <HAL_GPIO_Init+0x304>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ae:	4b23      	ldr	r3, [pc, #140]	@ (800213c <HAL_GPIO_Init+0x304>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020d2:	4a1a      	ldr	r2, [pc, #104]	@ (800213c <HAL_GPIO_Init+0x304>)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d8:	4b18      	ldr	r3, [pc, #96]	@ (800213c <HAL_GPIO_Init+0x304>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020fc:	4a0f      	ldr	r2, [pc, #60]	@ (800213c <HAL_GPIO_Init+0x304>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3301      	adds	r3, #1
 8002106:	61fb      	str	r3, [r7, #28]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	2b0f      	cmp	r3, #15
 800210c:	f67f aea2 	bls.w	8001e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	3724      	adds	r7, #36	@ 0x24
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
 8002124:	40013800 	.word	0x40013800
 8002128:	40020000 	.word	0x40020000
 800212c:	40020400 	.word	0x40020400
 8002130:	40020800 	.word	0x40020800
 8002134:	40020c00 	.word	0x40020c00
 8002138:	40021000 	.word	0x40021000
 800213c:	40013c00 	.word	0x40013c00

08002140 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e12b      	b.n	80023aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d106      	bne.n	800216c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff facc 	bl	8001704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2224      	movs	r2, #36	@ 0x24
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002192:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021a4:	f001 fc36 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 80021a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	4a81      	ldr	r2, [pc, #516]	@ (80023b4 <HAL_I2C_Init+0x274>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d807      	bhi.n	80021c4 <HAL_I2C_Init+0x84>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4a80      	ldr	r2, [pc, #512]	@ (80023b8 <HAL_I2C_Init+0x278>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	bf94      	ite	ls
 80021bc:	2301      	movls	r3, #1
 80021be:	2300      	movhi	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	e006      	b.n	80021d2 <HAL_I2C_Init+0x92>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4a7d      	ldr	r2, [pc, #500]	@ (80023bc <HAL_I2C_Init+0x27c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	bf94      	ite	ls
 80021cc:	2301      	movls	r3, #1
 80021ce:	2300      	movhi	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e0e7      	b.n	80023aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4a78      	ldr	r2, [pc, #480]	@ (80023c0 <HAL_I2C_Init+0x280>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	0c9b      	lsrs	r3, r3, #18
 80021e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	4a6a      	ldr	r2, [pc, #424]	@ (80023b4 <HAL_I2C_Init+0x274>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d802      	bhi.n	8002214 <HAL_I2C_Init+0xd4>
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	3301      	adds	r3, #1
 8002212:	e009      	b.n	8002228 <HAL_I2C_Init+0xe8>
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	4a69      	ldr	r2, [pc, #420]	@ (80023c4 <HAL_I2C_Init+0x284>)
 8002220:	fba2 2303 	umull	r2, r3, r2, r3
 8002224:	099b      	lsrs	r3, r3, #6
 8002226:	3301      	adds	r3, #1
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	430b      	orrs	r3, r1
 800222e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800223a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	495c      	ldr	r1, [pc, #368]	@ (80023b4 <HAL_I2C_Init+0x274>)
 8002244:	428b      	cmp	r3, r1
 8002246:	d819      	bhi.n	800227c <HAL_I2C_Init+0x13c>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1e59      	subs	r1, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	fbb1 f3f3 	udiv	r3, r1, r3
 8002256:	1c59      	adds	r1, r3, #1
 8002258:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800225c:	400b      	ands	r3, r1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00a      	beq.n	8002278 <HAL_I2C_Init+0x138>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1e59      	subs	r1, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002270:	3301      	adds	r3, #1
 8002272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002276:	e051      	b.n	800231c <HAL_I2C_Init+0x1dc>
 8002278:	2304      	movs	r3, #4
 800227a:	e04f      	b.n	800231c <HAL_I2C_Init+0x1dc>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d111      	bne.n	80022a8 <HAL_I2C_Init+0x168>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1e58      	subs	r0, r3, #1
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6859      	ldr	r1, [r3, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	440b      	add	r3, r1
 8002292:	fbb0 f3f3 	udiv	r3, r0, r3
 8002296:	3301      	adds	r3, #1
 8002298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf0c      	ite	eq
 80022a0:	2301      	moveq	r3, #1
 80022a2:	2300      	movne	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	e012      	b.n	80022ce <HAL_I2C_Init+0x18e>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1e58      	subs	r0, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	0099      	lsls	r1, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80022be:	3301      	adds	r3, #1
 80022c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	bf0c      	ite	eq
 80022c8:	2301      	moveq	r3, #1
 80022ca:	2300      	movne	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_I2C_Init+0x196>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e022      	b.n	800231c <HAL_I2C_Init+0x1dc>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10e      	bne.n	80022fc <HAL_I2C_Init+0x1bc>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1e58      	subs	r0, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6859      	ldr	r1, [r3, #4]
 80022e6:	460b      	mov	r3, r1
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	440b      	add	r3, r1
 80022ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f0:	3301      	adds	r3, #1
 80022f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022fa:	e00f      	b.n	800231c <HAL_I2C_Init+0x1dc>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1e58      	subs	r0, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	0099      	lsls	r1, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002312:	3301      	adds	r3, #1
 8002314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002318:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	6809      	ldr	r1, [r1, #0]
 8002320:	4313      	orrs	r3, r2
 8002322:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69da      	ldr	r2, [r3, #28]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800234a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6911      	ldr	r1, [r2, #16]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68d2      	ldr	r2, [r2, #12]
 8002356:	4311      	orrs	r1, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	430b      	orrs	r3, r1
 800235e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	000186a0 	.word	0x000186a0
 80023b8:	001e847f 	.word	0x001e847f
 80023bc:	003d08ff 	.word	0x003d08ff
 80023c0:	431bde83 	.word	0x431bde83
 80023c4:	10624dd3 	.word	0x10624dd3

080023c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af02      	add	r7, sp, #8
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	461a      	mov	r2, r3
 80023d4:	460b      	mov	r3, r1
 80023d6:	817b      	strh	r3, [r7, #10]
 80023d8:	4613      	mov	r3, r2
 80023da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023dc:	f7ff fc16 	bl	8001c0c <HAL_GetTick>
 80023e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b20      	cmp	r3, #32
 80023ec:	f040 80e0 	bne.w	80025b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	2319      	movs	r3, #25
 80023f6:	2201      	movs	r2, #1
 80023f8:	4970      	ldr	r1, [pc, #448]	@ (80025bc <HAL_I2C_Master_Transmit+0x1f4>)
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 fc64 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002406:	2302      	movs	r3, #2
 8002408:	e0d3      	b.n	80025b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_I2C_Master_Transmit+0x50>
 8002414:	2302      	movs	r3, #2
 8002416:	e0cc      	b.n	80025b2 <HAL_I2C_Master_Transmit+0x1ea>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b01      	cmp	r3, #1
 800242c:	d007      	beq.n	800243e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0201 	orr.w	r2, r2, #1
 800243c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800244c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2221      	movs	r2, #33	@ 0x21
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2210      	movs	r2, #16
 800245a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	893a      	ldrh	r2, [r7, #8]
 800246e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4a50      	ldr	r2, [pc, #320]	@ (80025c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800247e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002480:	8979      	ldrh	r1, [r7, #10]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	6a3a      	ldr	r2, [r7, #32]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 face 	bl	8002a28 <I2C_MasterRequestWrite>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e08d      	b.n	80025b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024ac:	e066      	b.n	800257c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	6a39      	ldr	r1, [r7, #32]
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 fd22 	bl	8002efc <I2C_WaitOnTXEFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00d      	beq.n	80024da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d107      	bne.n	80024d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e06b      	b.n	80025b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024de:	781a      	ldrb	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002502:	3b01      	subs	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b04      	cmp	r3, #4
 8002516:	d11b      	bne.n	8002550 <HAL_I2C_Master_Transmit+0x188>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251c:	2b00      	cmp	r3, #0
 800251e:	d017      	beq.n	8002550 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002524:	781a      	ldrb	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	6a39      	ldr	r1, [r7, #32]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fd19 	bl	8002f8c <I2C_WaitOnBTFFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00d      	beq.n	800257c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002564:	2b04      	cmp	r3, #4
 8002566:	d107      	bne.n	8002578 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002576:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e01a      	b.n	80025b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002580:	2b00      	cmp	r3, #0
 8002582:	d194      	bne.n	80024ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002592:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	e000      	b.n	80025b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025b0:	2302      	movs	r3, #2
  }
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	00100002 	.word	0x00100002
 80025c0:	ffff0000 	.word	0xffff0000

080025c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08c      	sub	sp, #48	@ 0x30
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	461a      	mov	r2, r3
 80025d0:	460b      	mov	r3, r1
 80025d2:	817b      	strh	r3, [r7, #10]
 80025d4:	4613      	mov	r3, r2
 80025d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025d8:	f7ff fb18 	bl	8001c0c <HAL_GetTick>
 80025dc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b20      	cmp	r3, #32
 80025e8:	f040 8217 	bne.w	8002a1a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	2319      	movs	r3, #25
 80025f2:	2201      	movs	r2, #1
 80025f4:	497c      	ldr	r1, [pc, #496]	@ (80027e8 <HAL_I2C_Master_Receive+0x224>)
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 fb66 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002602:	2302      	movs	r3, #2
 8002604:	e20a      	b.n	8002a1c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_I2C_Master_Receive+0x50>
 8002610:	2302      	movs	r3, #2
 8002612:	e203      	b.n	8002a1c <HAL_I2C_Master_Receive+0x458>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b01      	cmp	r3, #1
 8002628:	d007      	beq.n	800263a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0201 	orr.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002648:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2222      	movs	r2, #34	@ 0x22
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2210      	movs	r2, #16
 8002656:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	893a      	ldrh	r2, [r7, #8]
 800266a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	4a5c      	ldr	r2, [pc, #368]	@ (80027ec <HAL_I2C_Master_Receive+0x228>)
 800267a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800267c:	8979      	ldrh	r1, [r7, #10]
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 fa52 	bl	8002b2c <I2C_MasterRequestRead>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e1c4      	b.n	8002a1c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002696:	2b00      	cmp	r3, #0
 8002698:	d113      	bne.n	80026c2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269a:	2300      	movs	r3, #0
 800269c:	623b      	str	r3, [r7, #32]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	623b      	str	r3, [r7, #32]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	623b      	str	r3, [r7, #32]
 80026ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	e198      	b.n	80029f4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d11b      	bne.n	8002702 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	e178      	b.n	80029f4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002706:	2b02      	cmp	r3, #2
 8002708:	d11b      	bne.n	8002742 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002718:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002728:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800272a:	2300      	movs	r3, #0
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	61bb      	str	r3, [r7, #24]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	e158      	b.n	80029f4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002750:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002768:	e144      	b.n	80029f4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800276e:	2b03      	cmp	r3, #3
 8002770:	f200 80f1 	bhi.w	8002956 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002778:	2b01      	cmp	r3, #1
 800277a:	d123      	bne.n	80027c4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800277c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800277e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 fc4b 	bl	800301c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e145      	b.n	8002a1c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027c2:	e117      	b.n	80029f4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d14e      	bne.n	800286a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d2:	2200      	movs	r2, #0
 80027d4:	4906      	ldr	r1, [pc, #24]	@ (80027f0 <HAL_I2C_Master_Receive+0x22c>)
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 fa76 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e11a      	b.n	8002a1c <HAL_I2C_Master_Receive+0x458>
 80027e6:	bf00      	nop
 80027e8:	00100002 	.word	0x00100002
 80027ec:	ffff0000 	.word	0xffff0000
 80027f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002802:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282c:	b29b      	uxth	r3, r3
 800282e:	3b01      	subs	r3, #1
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800285e:	b29b      	uxth	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002868:	e0c4      	b.n	80029f4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002870:	2200      	movs	r2, #0
 8002872:	496c      	ldr	r1, [pc, #432]	@ (8002a24 <HAL_I2C_Master_Receive+0x460>)
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fa27 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0cb      	b.n	8002a1c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002892:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028cc:	2200      	movs	r2, #0
 80028ce:	4955      	ldr	r1, [pc, #340]	@ (8002a24 <HAL_I2C_Master_Receive+0x460>)
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f9f9 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e09d      	b.n	8002a1c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800294a:	b29b      	uxth	r3, r3
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002954:	e04e      	b.n	80029f4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002958:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 fb5e 	bl	800301c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e058      	b.n	8002a1c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002992:	b29b      	uxth	r3, r3
 8002994:	3b01      	subs	r3, #1
 8002996:	b29a      	uxth	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d124      	bne.n	80029f4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d107      	bne.n	80029c2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029c0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f47f aeb6 	bne.w	800276a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	e000      	b.n	8002a1c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002a1a:	2302      	movs	r3, #2
  }
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3728      	adds	r7, #40	@ 0x28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	00010004 	.word	0x00010004

08002a28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	603b      	str	r3, [r7, #0]
 8002a34:	460b      	mov	r3, r1
 8002a36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d006      	beq.n	8002a52 <I2C_MasterRequestWrite+0x2a>
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d003      	beq.n	8002a52 <I2C_MasterRequestWrite+0x2a>
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a50:	d108      	bne.n	8002a64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	e00b      	b.n	8002a7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a68:	2b12      	cmp	r3, #18
 8002a6a:	d107      	bne.n	8002a7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f91d 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00d      	beq.n	8002ab0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aa2:	d103      	bne.n	8002aac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aaa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e035      	b.n	8002b1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ab8:	d108      	bne.n	8002acc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aba:	897b      	ldrh	r3, [r7, #10]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ac8:	611a      	str	r2, [r3, #16]
 8002aca:	e01b      	b.n	8002b04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002acc:	897b      	ldrh	r3, [r7, #10]
 8002ace:	11db      	asrs	r3, r3, #7
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f003 0306 	and.w	r3, r3, #6
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	f063 030f 	orn	r3, r3, #15
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	490e      	ldr	r1, [pc, #56]	@ (8002b24 <I2C_MasterRequestWrite+0xfc>)
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f966 	bl	8002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e010      	b.n	8002b1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002afa:	897b      	ldrh	r3, [r7, #10]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	4907      	ldr	r1, [pc, #28]	@ (8002b28 <I2C_MasterRequestWrite+0x100>)
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f956 	bl	8002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	00010008 	.word	0x00010008
 8002b28:	00010002 	.word	0x00010002

08002b2c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b40:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b50:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d006      	beq.n	8002b66 <I2C_MasterRequestRead+0x3a>
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d003      	beq.n	8002b66 <I2C_MasterRequestRead+0x3a>
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b64:	d108      	bne.n	8002b78 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	e00b      	b.n	8002b90 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7c:	2b11      	cmp	r3, #17
 8002b7e:	d107      	bne.n	8002b90 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 f893 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00d      	beq.n	8002bc4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bb6:	d103      	bne.n	8002bc0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bbe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e079      	b.n	8002cb8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bcc:	d108      	bne.n	8002be0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bce:	897b      	ldrh	r3, [r7, #10]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	611a      	str	r2, [r3, #16]
 8002bde:	e05f      	b.n	8002ca0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002be0:	897b      	ldrh	r3, [r7, #10]
 8002be2:	11db      	asrs	r3, r3, #7
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	f003 0306 	and.w	r3, r3, #6
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	f063 030f 	orn	r3, r3, #15
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	4930      	ldr	r1, [pc, #192]	@ (8002cc0 <I2C_MasterRequestRead+0x194>)
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 f8dc 	bl	8002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e054      	b.n	8002cb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c0e:	897b      	ldrh	r3, [r7, #10]
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	4929      	ldr	r1, [pc, #164]	@ (8002cc4 <I2C_MasterRequestRead+0x198>)
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f8cc 	bl	8002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e044      	b.n	8002cb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c52:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f831 	bl	8002cc8 <I2C_WaitOnFlagUntilTimeout>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00d      	beq.n	8002c88 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c7a:	d103      	bne.n	8002c84 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c82:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e017      	b.n	8002cb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	11db      	asrs	r3, r3, #7
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f003 0306 	and.w	r3, r3, #6
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f063 030e 	orn	r3, r3, #14
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	4907      	ldr	r1, [pc, #28]	@ (8002cc4 <I2C_MasterRequestRead+0x198>)
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f888 	bl	8002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	00010008 	.word	0x00010008
 8002cc4:	00010002 	.word	0x00010002

08002cc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cd8:	e048      	b.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ce0:	d044      	beq.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce2:	f7fe ff93 	bl	8001c0c <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d302      	bcc.n	8002cf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d139      	bne.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	0c1b      	lsrs	r3, r3, #16
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d10d      	bne.n	8002d1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	43da      	mvns	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	e00c      	b.n	8002d38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	43da      	mvns	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d116      	bne.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d58:	f043 0220 	orr.w	r2, r3, #32
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e023      	b.n	8002db4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	0c1b      	lsrs	r3, r3, #16
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d10d      	bne.n	8002d92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	43da      	mvns	r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	4013      	ands	r3, r2
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf0c      	ite	eq
 8002d88:	2301      	moveq	r3, #1
 8002d8a:	2300      	movne	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	461a      	mov	r2, r3
 8002d90:	e00c      	b.n	8002dac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	43da      	mvns	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d093      	beq.n	8002cda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dca:	e071      	b.n	8002eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dda:	d123      	bne.n	8002e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002df4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	f043 0204 	orr.w	r2, r3, #4
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e067      	b.n	8002ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e2a:	d041      	beq.n	8002eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2c:	f7fe feee 	bl	8001c0c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d302      	bcc.n	8002e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d136      	bne.n	8002eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	0c1b      	lsrs	r3, r3, #16
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d10c      	bne.n	8002e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	43da      	mvns	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4013      	ands	r3, r2
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	bf14      	ite	ne
 8002e5e:	2301      	movne	r3, #1
 8002e60:	2300      	moveq	r3, #0
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	e00b      	b.n	8002e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	43da      	mvns	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	4013      	ands	r3, r2
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bf14      	ite	ne
 8002e78:	2301      	movne	r3, #1
 8002e7a:	2300      	moveq	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d016      	beq.n	8002eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9c:	f043 0220 	orr.w	r2, r3, #32
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e021      	b.n	8002ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	0c1b      	lsrs	r3, r3, #16
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d10c      	bne.n	8002ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	43da      	mvns	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf14      	ite	ne
 8002ecc:	2301      	movne	r3, #1
 8002ece:	2300      	moveq	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	e00b      	b.n	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	43da      	mvns	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	bf14      	ite	ne
 8002ee6:	2301      	movne	r3, #1
 8002ee8:	2300      	moveq	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f47f af6d 	bne.w	8002dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f08:	e034      	b.n	8002f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f8e3 	bl	80030d6 <I2C_IsAcknowledgeFailed>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e034      	b.n	8002f84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f20:	d028      	beq.n	8002f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f22:	f7fe fe73 	bl	8001c0c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d302      	bcc.n	8002f38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d11d      	bne.n	8002f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f42:	2b80      	cmp	r3, #128	@ 0x80
 8002f44:	d016      	beq.n	8002f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f60:	f043 0220 	orr.w	r2, r3, #32
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e007      	b.n	8002f84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7e:	2b80      	cmp	r3, #128	@ 0x80
 8002f80:	d1c3      	bne.n	8002f0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f98:	e034      	b.n	8003004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f89b 	bl	80030d6 <I2C_IsAcknowledgeFailed>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e034      	b.n	8003014 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fb0:	d028      	beq.n	8003004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb2:	f7fe fe2b 	bl	8001c0c <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d302      	bcc.n	8002fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d11d      	bne.n	8003004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d016      	beq.n	8003004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff0:	f043 0220 	orr.w	r2, r3, #32
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e007      	b.n	8003014 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b04      	cmp	r3, #4
 8003010:	d1c3      	bne.n	8002f9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003028:	e049      	b.n	80030be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b10      	cmp	r3, #16
 8003036:	d119      	bne.n	800306c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0210 	mvn.w	r2, #16
 8003040:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e030      	b.n	80030ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306c:	f7fe fdce 	bl	8001c0c <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	429a      	cmp	r2, r3
 800307a:	d302      	bcc.n	8003082 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d11d      	bne.n	80030be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800308c:	2b40      	cmp	r3, #64	@ 0x40
 800308e:	d016      	beq.n	80030be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030aa:	f043 0220 	orr.w	r2, r3, #32
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e007      	b.n	80030ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c8:	2b40      	cmp	r3, #64	@ 0x40
 80030ca:	d1ae      	bne.n	800302a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ec:	d11b      	bne.n	8003126 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	f043 0204 	orr.w	r2, r3, #4
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e267      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d075      	beq.n	800323e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003152:	4b88      	ldr	r3, [pc, #544]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	2b04      	cmp	r3, #4
 800315c:	d00c      	beq.n	8003178 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800315e:	4b85      	ldr	r3, [pc, #532]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003166:	2b08      	cmp	r3, #8
 8003168:	d112      	bne.n	8003190 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800316a:	4b82      	ldr	r3, [pc, #520]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003172:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003176:	d10b      	bne.n	8003190 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003178:	4b7e      	ldr	r3, [pc, #504]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d05b      	beq.n	800323c <HAL_RCC_OscConfig+0x108>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d157      	bne.n	800323c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e242      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003198:	d106      	bne.n	80031a8 <HAL_RCC_OscConfig+0x74>
 800319a:	4b76      	ldr	r3, [pc, #472]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a75      	ldr	r2, [pc, #468]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80031a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e01d      	b.n	80031e4 <HAL_RCC_OscConfig+0xb0>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0x98>
 80031b2:	4b70      	ldr	r3, [pc, #448]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a6f      	ldr	r2, [pc, #444]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80031b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b6d      	ldr	r3, [pc, #436]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a6c      	ldr	r2, [pc, #432]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80031c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e00b      	b.n	80031e4 <HAL_RCC_OscConfig+0xb0>
 80031cc:	4b69      	ldr	r3, [pc, #420]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a68      	ldr	r2, [pc, #416]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80031d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	4b66      	ldr	r3, [pc, #408]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a65      	ldr	r2, [pc, #404]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80031de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d013      	beq.n	8003214 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7fe fd0e 	bl	8001c0c <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f4:	f7fe fd0a 	bl	8001c0c <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	@ 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e207      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003206:	4b5b      	ldr	r3, [pc, #364]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0xc0>
 8003212:	e014      	b.n	800323e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fe fcfa 	bl	8001c0c <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800321c:	f7fe fcf6 	bl	8001c0c <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	@ 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e1f3      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322e:	4b51      	ldr	r3, [pc, #324]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0xe8>
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d063      	beq.n	8003312 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800324a:	4b4a      	ldr	r3, [pc, #296]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003256:	4b47      	ldr	r3, [pc, #284]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800325e:	2b08      	cmp	r3, #8
 8003260:	d11c      	bne.n	800329c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003262:	4b44      	ldr	r3, [pc, #272]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d116      	bne.n	800329c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326e:	4b41      	ldr	r3, [pc, #260]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_RCC_OscConfig+0x152>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d001      	beq.n	8003286 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e1c7      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003286:	4b3b      	ldr	r3, [pc, #236]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4937      	ldr	r1, [pc, #220]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329a:	e03a      	b.n	8003312 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d020      	beq.n	80032e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a4:	4b34      	ldr	r3, [pc, #208]	@ (8003378 <HAL_RCC_OscConfig+0x244>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032aa:	f7fe fcaf 	bl	8001c0c <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b2:	f7fe fcab 	bl	8001c0c <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e1a8      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d0:	4b28      	ldr	r3, [pc, #160]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4925      	ldr	r1, [pc, #148]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	600b      	str	r3, [r1, #0]
 80032e4:	e015      	b.n	8003312 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e6:	4b24      	ldr	r3, [pc, #144]	@ (8003378 <HAL_RCC_OscConfig+0x244>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fe fc8e 	bl	8001c0c <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f4:	f7fe fc8a 	bl	8001c0c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e187      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003306:	4b1b      	ldr	r3, [pc, #108]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d036      	beq.n	800338c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d016      	beq.n	8003354 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003326:	4b15      	ldr	r3, [pc, #84]	@ (800337c <HAL_RCC_OscConfig+0x248>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332c:	f7fe fc6e 	bl	8001c0c <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003334:	f7fe fc6a 	bl	8001c0c <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e167      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003346:	4b0b      	ldr	r3, [pc, #44]	@ (8003374 <HAL_RCC_OscConfig+0x240>)
 8003348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x200>
 8003352:	e01b      	b.n	800338c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003354:	4b09      	ldr	r3, [pc, #36]	@ (800337c <HAL_RCC_OscConfig+0x248>)
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335a:	f7fe fc57 	bl	8001c0c <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003360:	e00e      	b.n	8003380 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003362:	f7fe fc53 	bl	8001c0c <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d907      	bls.n	8003380 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e150      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
 8003374:	40023800 	.word	0x40023800
 8003378:	42470000 	.word	0x42470000
 800337c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003380:	4b88      	ldr	r3, [pc, #544]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1ea      	bne.n	8003362 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8097 	beq.w	80034c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339a:	2300      	movs	r3, #0
 800339c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800339e:	4b81      	ldr	r3, [pc, #516]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10f      	bne.n	80033ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	4b7d      	ldr	r3, [pc, #500]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	4a7c      	ldr	r2, [pc, #496]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 80033b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ba:	4b7a      	ldr	r3, [pc, #488]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c6:	2301      	movs	r3, #1
 80033c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ca:	4b77      	ldr	r3, [pc, #476]	@ (80035a8 <HAL_RCC_OscConfig+0x474>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d118      	bne.n	8003408 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d6:	4b74      	ldr	r3, [pc, #464]	@ (80035a8 <HAL_RCC_OscConfig+0x474>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a73      	ldr	r2, [pc, #460]	@ (80035a8 <HAL_RCC_OscConfig+0x474>)
 80033dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e2:	f7fe fc13 	bl	8001c0c <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ea:	f7fe fc0f 	bl	8001c0c <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e10c      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	4b6a      	ldr	r3, [pc, #424]	@ (80035a8 <HAL_RCC_OscConfig+0x474>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d106      	bne.n	800341e <HAL_RCC_OscConfig+0x2ea>
 8003410:	4b64      	ldr	r3, [pc, #400]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003414:	4a63      	ldr	r2, [pc, #396]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6713      	str	r3, [r2, #112]	@ 0x70
 800341c:	e01c      	b.n	8003458 <HAL_RCC_OscConfig+0x324>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b05      	cmp	r3, #5
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x30c>
 8003426:	4b5f      	ldr	r3, [pc, #380]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342a:	4a5e      	ldr	r2, [pc, #376]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 800342c:	f043 0304 	orr.w	r3, r3, #4
 8003430:	6713      	str	r3, [r2, #112]	@ 0x70
 8003432:	4b5c      	ldr	r3, [pc, #368]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003436:	4a5b      	ldr	r2, [pc, #364]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	6713      	str	r3, [r2, #112]	@ 0x70
 800343e:	e00b      	b.n	8003458 <HAL_RCC_OscConfig+0x324>
 8003440:	4b58      	ldr	r3, [pc, #352]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003444:	4a57      	ldr	r2, [pc, #348]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003446:	f023 0301 	bic.w	r3, r3, #1
 800344a:	6713      	str	r3, [r2, #112]	@ 0x70
 800344c:	4b55      	ldr	r3, [pc, #340]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003450:	4a54      	ldr	r2, [pc, #336]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003452:	f023 0304 	bic.w	r3, r3, #4
 8003456:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d015      	beq.n	800348c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003460:	f7fe fbd4 	bl	8001c0c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003466:	e00a      	b.n	800347e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003468:	f7fe fbd0 	bl	8001c0c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e0cb      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347e:	4b49      	ldr	r3, [pc, #292]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0ee      	beq.n	8003468 <HAL_RCC_OscConfig+0x334>
 800348a:	e014      	b.n	80034b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348c:	f7fe fbbe 	bl	8001c0c <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003492:	e00a      	b.n	80034aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003494:	f7fe fbba 	bl	8001c0c <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e0b5      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034aa:	4b3e      	ldr	r3, [pc, #248]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 80034ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1ee      	bne.n	8003494 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d105      	bne.n	80034c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034bc:	4b39      	ldr	r3, [pc, #228]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 80034be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c0:	4a38      	ldr	r2, [pc, #224]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 80034c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80a1 	beq.w	8003614 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034d2:	4b34      	ldr	r3, [pc, #208]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d05c      	beq.n	8003598 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d141      	bne.n	800356a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e6:	4b31      	ldr	r3, [pc, #196]	@ (80035ac <HAL_RCC_OscConfig+0x478>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7fe fb8e 	bl	8001c0c <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f4:	f7fe fb8a 	bl	8001c0c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e087      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003506:	4b27      	ldr	r3, [pc, #156]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69da      	ldr	r2, [r3, #28]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003520:	019b      	lsls	r3, r3, #6
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003528:	085b      	lsrs	r3, r3, #1
 800352a:	3b01      	subs	r3, #1
 800352c:	041b      	lsls	r3, r3, #16
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003534:	061b      	lsls	r3, r3, #24
 8003536:	491b      	ldr	r1, [pc, #108]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 8003538:	4313      	orrs	r3, r2
 800353a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800353c:	4b1b      	ldr	r3, [pc, #108]	@ (80035ac <HAL_RCC_OscConfig+0x478>)
 800353e:	2201      	movs	r2, #1
 8003540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003542:	f7fe fb63 	bl	8001c0c <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800354a:	f7fe fb5f 	bl	8001c0c <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e05c      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355c:	4b11      	ldr	r3, [pc, #68]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0x416>
 8003568:	e054      	b.n	8003614 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356a:	4b10      	ldr	r3, [pc, #64]	@ (80035ac <HAL_RCC_OscConfig+0x478>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003570:	f7fe fb4c 	bl	8001c0c <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003578:	f7fe fb48 	bl	8001c0c <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e045      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358a:	4b06      	ldr	r3, [pc, #24]	@ (80035a4 <HAL_RCC_OscConfig+0x470>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x444>
 8003596:	e03d      	b.n	8003614 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d107      	bne.n	80035b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e038      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40007000 	.word	0x40007000
 80035ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003620 <HAL_RCC_OscConfig+0x4ec>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d028      	beq.n	8003610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d121      	bne.n	8003610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d11a      	bne.n	8003610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035e0:	4013      	ands	r3, r2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d111      	bne.n	8003610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f6:	085b      	lsrs	r3, r3, #1
 80035f8:	3b01      	subs	r3, #1
 80035fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d107      	bne.n	8003610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40023800 	.word	0x40023800

08003624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0cc      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003638:	4b68      	ldr	r3, [pc, #416]	@ (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d90c      	bls.n	8003660 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003646:	4b65      	ldr	r3, [pc, #404]	@ (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800364e:	4b63      	ldr	r3, [pc, #396]	@ (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d001      	beq.n	8003660 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0b8      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d020      	beq.n	80036ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003678:	4b59      	ldr	r3, [pc, #356]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	4a58      	ldr	r2, [pc, #352]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003682:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003690:	4b53      	ldr	r3, [pc, #332]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	4a52      	ldr	r2, [pc, #328]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800369a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800369c:	4b50      	ldr	r3, [pc, #320]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	494d      	ldr	r1, [pc, #308]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d044      	beq.n	8003744 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d107      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c2:	4b47      	ldr	r3, [pc, #284]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d119      	bne.n	8003702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e07f      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d003      	beq.n	80036e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d107      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e2:	4b3f      	ldr	r3, [pc, #252]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e06f      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f2:	4b3b      	ldr	r3, [pc, #236]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e067      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003702:	4b37      	ldr	r3, [pc, #220]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f023 0203 	bic.w	r2, r3, #3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4934      	ldr	r1, [pc, #208]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	4313      	orrs	r3, r2
 8003712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003714:	f7fe fa7a 	bl	8001c0c <HAL_GetTick>
 8003718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371a:	e00a      	b.n	8003732 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800371c:	f7fe fa76 	bl	8001c0c <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e04f      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003732:	4b2b      	ldr	r3, [pc, #172]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 020c 	and.w	r2, r3, #12
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	429a      	cmp	r2, r3
 8003742:	d1eb      	bne.n	800371c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003744:	4b25      	ldr	r3, [pc, #148]	@ (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d20c      	bcs.n	800376c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4b22      	ldr	r3, [pc, #136]	@ (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800375a:	4b20      	ldr	r3, [pc, #128]	@ (80037dc <HAL_RCC_ClockConfig+0x1b8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e032      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003778:	4b19      	ldr	r3, [pc, #100]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4916      	ldr	r1, [pc, #88]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	4313      	orrs	r3, r2
 8003788:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003796:	4b12      	ldr	r3, [pc, #72]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	490e      	ldr	r1, [pc, #56]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037aa:	f000 f821 	bl	80037f0 <HAL_RCC_GetSysClockFreq>
 80037ae:	4602      	mov	r2, r0
 80037b0:	4b0b      	ldr	r3, [pc, #44]	@ (80037e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	091b      	lsrs	r3, r3, #4
 80037b6:	f003 030f 	and.w	r3, r3, #15
 80037ba:	490a      	ldr	r1, [pc, #40]	@ (80037e4 <HAL_RCC_ClockConfig+0x1c0>)
 80037bc:	5ccb      	ldrb	r3, [r1, r3]
 80037be:	fa22 f303 	lsr.w	r3, r2, r3
 80037c2:	4a09      	ldr	r2, [pc, #36]	@ (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 80037c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80037c6:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fe f9da 	bl	8001b84 <HAL_InitTick>

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40023c00 	.word	0x40023c00
 80037e0:	40023800 	.word	0x40023800
 80037e4:	080073dc 	.word	0x080073dc
 80037e8:	20000000 	.word	0x20000000
 80037ec:	20000004 	.word	0x20000004

080037f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f4:	b094      	sub	sp, #80	@ 0x50
 80037f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003808:	4b79      	ldr	r3, [pc, #484]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 030c 	and.w	r3, r3, #12
 8003810:	2b08      	cmp	r3, #8
 8003812:	d00d      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0x40>
 8003814:	2b08      	cmp	r3, #8
 8003816:	f200 80e1 	bhi.w	80039dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_RCC_GetSysClockFreq+0x34>
 800381e:	2b04      	cmp	r3, #4
 8003820:	d003      	beq.n	800382a <HAL_RCC_GetSysClockFreq+0x3a>
 8003822:	e0db      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003824:	4b73      	ldr	r3, [pc, #460]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003826:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003828:	e0db      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800382a:	4b73      	ldr	r3, [pc, #460]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800382c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800382e:	e0d8      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003830:	4b6f      	ldr	r3, [pc, #444]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003838:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800383a:	4b6d      	ldr	r3, [pc, #436]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d063      	beq.n	800390e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003846:	4b6a      	ldr	r3, [pc, #424]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	099b      	lsrs	r3, r3, #6
 800384c:	2200      	movs	r2, #0
 800384e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003850:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003858:	633b      	str	r3, [r7, #48]	@ 0x30
 800385a:	2300      	movs	r3, #0
 800385c:	637b      	str	r3, [r7, #52]	@ 0x34
 800385e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003862:	4622      	mov	r2, r4
 8003864:	462b      	mov	r3, r5
 8003866:	f04f 0000 	mov.w	r0, #0
 800386a:	f04f 0100 	mov.w	r1, #0
 800386e:	0159      	lsls	r1, r3, #5
 8003870:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003874:	0150      	lsls	r0, r2, #5
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4621      	mov	r1, r4
 800387c:	1a51      	subs	r1, r2, r1
 800387e:	6139      	str	r1, [r7, #16]
 8003880:	4629      	mov	r1, r5
 8003882:	eb63 0301 	sbc.w	r3, r3, r1
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003894:	4659      	mov	r1, fp
 8003896:	018b      	lsls	r3, r1, #6
 8003898:	4651      	mov	r1, sl
 800389a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800389e:	4651      	mov	r1, sl
 80038a0:	018a      	lsls	r2, r1, #6
 80038a2:	4651      	mov	r1, sl
 80038a4:	ebb2 0801 	subs.w	r8, r2, r1
 80038a8:	4659      	mov	r1, fp
 80038aa:	eb63 0901 	sbc.w	r9, r3, r1
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038c2:	4690      	mov	r8, r2
 80038c4:	4699      	mov	r9, r3
 80038c6:	4623      	mov	r3, r4
 80038c8:	eb18 0303 	adds.w	r3, r8, r3
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	462b      	mov	r3, r5
 80038d0:	eb49 0303 	adc.w	r3, r9, r3
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038e2:	4629      	mov	r1, r5
 80038e4:	024b      	lsls	r3, r1, #9
 80038e6:	4621      	mov	r1, r4
 80038e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038ec:	4621      	mov	r1, r4
 80038ee:	024a      	lsls	r2, r1, #9
 80038f0:	4610      	mov	r0, r2
 80038f2:	4619      	mov	r1, r3
 80038f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038f6:	2200      	movs	r2, #0
 80038f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003900:	f7fd f9aa 	bl	8000c58 <__aeabi_uldivmod>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4613      	mov	r3, r2
 800390a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800390c:	e058      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800390e:	4b38      	ldr	r3, [pc, #224]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	099b      	lsrs	r3, r3, #6
 8003914:	2200      	movs	r2, #0
 8003916:	4618      	mov	r0, r3
 8003918:	4611      	mov	r1, r2
 800391a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800391e:	623b      	str	r3, [r7, #32]
 8003920:	2300      	movs	r3, #0
 8003922:	627b      	str	r3, [r7, #36]	@ 0x24
 8003924:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003928:	4642      	mov	r2, r8
 800392a:	464b      	mov	r3, r9
 800392c:	f04f 0000 	mov.w	r0, #0
 8003930:	f04f 0100 	mov.w	r1, #0
 8003934:	0159      	lsls	r1, r3, #5
 8003936:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800393a:	0150      	lsls	r0, r2, #5
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4641      	mov	r1, r8
 8003942:	ebb2 0a01 	subs.w	sl, r2, r1
 8003946:	4649      	mov	r1, r9
 8003948:	eb63 0b01 	sbc.w	fp, r3, r1
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003958:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800395c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003960:	ebb2 040a 	subs.w	r4, r2, sl
 8003964:	eb63 050b 	sbc.w	r5, r3, fp
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	00eb      	lsls	r3, r5, #3
 8003972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003976:	00e2      	lsls	r2, r4, #3
 8003978:	4614      	mov	r4, r2
 800397a:	461d      	mov	r5, r3
 800397c:	4643      	mov	r3, r8
 800397e:	18e3      	adds	r3, r4, r3
 8003980:	603b      	str	r3, [r7, #0]
 8003982:	464b      	mov	r3, r9
 8003984:	eb45 0303 	adc.w	r3, r5, r3
 8003988:	607b      	str	r3, [r7, #4]
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003996:	4629      	mov	r1, r5
 8003998:	028b      	lsls	r3, r1, #10
 800399a:	4621      	mov	r1, r4
 800399c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039a0:	4621      	mov	r1, r4
 80039a2:	028a      	lsls	r2, r1, #10
 80039a4:	4610      	mov	r0, r2
 80039a6:	4619      	mov	r1, r3
 80039a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039aa:	2200      	movs	r2, #0
 80039ac:	61bb      	str	r3, [r7, #24]
 80039ae:	61fa      	str	r2, [r7, #28]
 80039b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039b4:	f7fd f950 	bl	8000c58 <__aeabi_uldivmod>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4613      	mov	r3, r2
 80039be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80039c0:	4b0b      	ldr	r3, [pc, #44]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	0c1b      	lsrs	r3, r3, #16
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	3301      	adds	r3, #1
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80039d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039da:	e002      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039dc:	4b05      	ldr	r3, [pc, #20]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80039de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3750      	adds	r7, #80	@ 0x50
 80039e8:	46bd      	mov	sp, r7
 80039ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ee:	bf00      	nop
 80039f0:	40023800 	.word	0x40023800
 80039f4:	00f42400 	.word	0x00f42400
 80039f8:	007a1200 	.word	0x007a1200

080039fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a00:	4b03      	ldr	r3, [pc, #12]	@ (8003a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a02:	681b      	ldr	r3, [r3, #0]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	20000000 	.word	0x20000000

08003a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a18:	f7ff fff0 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	0a9b      	lsrs	r3, r3, #10
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	4903      	ldr	r1, [pc, #12]	@ (8003a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2a:	5ccb      	ldrb	r3, [r1, r3]
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40023800 	.word	0x40023800
 8003a38:	080073ec 	.word	0x080073ec

08003a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a40:	f7ff ffdc 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 8003a44:	4602      	mov	r2, r0
 8003a46:	4b05      	ldr	r3, [pc, #20]	@ (8003a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	0b5b      	lsrs	r3, r3, #13
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	4903      	ldr	r1, [pc, #12]	@ (8003a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a52:	5ccb      	ldrb	r3, [r1, r3]
 8003a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	080073ec 	.word	0x080073ec

08003a64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e042      	b.n	8003afc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fd fe82 	bl	8001794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2224      	movs	r2, #36	@ 0x24
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003aa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fa09 	bl	8003ec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003abc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695a      	ldr	r2, [r3, #20]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003acc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003adc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08a      	sub	sp, #40	@ 0x28
 8003b08:	af02      	add	r7, sp, #8
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	603b      	str	r3, [r7, #0]
 8003b10:	4613      	mov	r3, r2
 8003b12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d175      	bne.n	8003c10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <HAL_UART_Transmit+0x2c>
 8003b2a:	88fb      	ldrh	r3, [r7, #6]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e06e      	b.n	8003c12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2221      	movs	r2, #33	@ 0x21
 8003b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b42:	f7fe f863 	bl	8001c0c <HAL_GetTick>
 8003b46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	88fa      	ldrh	r2, [r7, #6]
 8003b4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	88fa      	ldrh	r2, [r7, #6]
 8003b52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b5c:	d108      	bne.n	8003b70 <HAL_UART_Transmit+0x6c>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d104      	bne.n	8003b70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	e003      	b.n	8003b78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b78:	e02e      	b.n	8003bd8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2200      	movs	r2, #0
 8003b82:	2180      	movs	r1, #128	@ 0x80
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f8df 	bl	8003d48 <UART_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e03a      	b.n	8003c12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10b      	bne.n	8003bba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	61bb      	str	r3, [r7, #24]
 8003bb8:	e007      	b.n	8003bca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	781a      	ldrb	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1cb      	bne.n	8003b7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2200      	movs	r2, #0
 8003bea:	2140      	movs	r1, #64	@ 0x40
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f8ab 	bl	8003d48 <UART_WaitOnFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e006      	b.n	8003c12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	e000      	b.n	8003c12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c10:	2302      	movs	r3, #2
  }
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3720      	adds	r7, #32
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b08a      	sub	sp, #40	@ 0x28
 8003c1e:	af02      	add	r7, sp, #8
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	603b      	str	r3, [r7, #0]
 8003c26:	4613      	mov	r3, r2
 8003c28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b20      	cmp	r3, #32
 8003c38:	f040 8081 	bne.w	8003d3e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <HAL_UART_Receive+0x2e>
 8003c42:	88fb      	ldrh	r3, [r7, #6]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e079      	b.n	8003d40 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2222      	movs	r2, #34	@ 0x22
 8003c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c60:	f7fd ffd4 	bl	8001c0c <HAL_GetTick>
 8003c64:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	88fa      	ldrh	r2, [r7, #6]
 8003c6a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	88fa      	ldrh	r2, [r7, #6]
 8003c70:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c7a:	d108      	bne.n	8003c8e <HAL_UART_Receive+0x74>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d104      	bne.n	8003c8e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	61bb      	str	r3, [r7, #24]
 8003c8c:	e003      	b.n	8003c96 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003c96:	e047      	b.n	8003d28 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2120      	movs	r1, #32
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 f850 	bl	8003d48 <UART_WaitOnFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d005      	beq.n	8003cba <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e042      	b.n	8003d40 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10c      	bne.n	8003cda <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	3302      	adds	r3, #2
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	e01f      	b.n	8003d1a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ce2:	d007      	beq.n	8003cf4 <HAL_UART_Receive+0xda>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10a      	bne.n	8003d02 <HAL_UART_Receive+0xe8>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d106      	bne.n	8003d02 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	701a      	strb	r2, [r3, #0]
 8003d00:	e008      	b.n	8003d14 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	3301      	adds	r3, #1
 8003d18:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1b2      	bne.n	8003c98 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e000      	b.n	8003d40 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003d3e:	2302      	movs	r3, #2
  }
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3720      	adds	r7, #32
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d58:	e03b      	b.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d60:	d037      	beq.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d62:	f7fd ff53 	bl	8001c0c <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	6a3a      	ldr	r2, [r7, #32]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d302      	bcc.n	8003d78 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e03a      	b.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d023      	beq.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b80      	cmp	r3, #128	@ 0x80
 8003d8e:	d020      	beq.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b40      	cmp	r3, #64	@ 0x40
 8003d94:	d01d      	beq.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d116      	bne.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003da4:	2300      	movs	r3, #0
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f81d 	bl	8003dfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2208      	movs	r2, #8
 8003dc4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e00f      	b.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	bf0c      	ite	eq
 8003de2:	2301      	moveq	r3, #1
 8003de4:	2300      	movne	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d0b4      	beq.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b095      	sub	sp, #84	@ 0x54
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	330c      	adds	r3, #12
 8003e08:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0c:	e853 3f00 	ldrex	r3, [r3]
 8003e10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	330c      	adds	r3, #12
 8003e20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e22:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e2a:	e841 2300 	strex	r3, r2, [r1]
 8003e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1e5      	bne.n	8003e02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3314      	adds	r3, #20
 8003e3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3314      	adds	r3, #20
 8003e54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e5      	bne.n	8003e36 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d119      	bne.n	8003ea6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	330c      	adds	r3, #12
 8003e78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	f023 0310 	bic.w	r3, r3, #16
 8003e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	330c      	adds	r3, #12
 8003e90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e92:	61ba      	str	r2, [r7, #24]
 8003e94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e96:	6979      	ldr	r1, [r7, #20]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	e841 2300 	strex	r3, r2, [r1]
 8003e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1e5      	bne.n	8003e72 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003eb4:	bf00      	nop
 8003eb6:	3754      	adds	r7, #84	@ 0x54
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ec4:	b0c0      	sub	sp, #256	@ 0x100
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003edc:	68d9      	ldr	r1, [r3, #12]
 8003ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	ea40 0301 	orr.w	r3, r0, r1
 8003ee8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f18:	f021 010c 	bic.w	r1, r1, #12
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f26:	430b      	orrs	r3, r1
 8003f28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3a:	6999      	ldr	r1, [r3, #24]
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	ea40 0301 	orr.w	r3, r0, r1
 8003f46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	4b8f      	ldr	r3, [pc, #572]	@ (800418c <UART_SetConfig+0x2cc>)
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d005      	beq.n	8003f60 <UART_SetConfig+0xa0>
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	4b8d      	ldr	r3, [pc, #564]	@ (8004190 <UART_SetConfig+0x2d0>)
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d104      	bne.n	8003f6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f60:	f7ff fd6c 	bl	8003a3c <HAL_RCC_GetPCLK2Freq>
 8003f64:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f68:	e003      	b.n	8003f72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f6a:	f7ff fd53 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 8003f6e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f7c:	f040 810c 	bne.w	8004198 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f84:	2200      	movs	r2, #0
 8003f86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f8a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f92:	4622      	mov	r2, r4
 8003f94:	462b      	mov	r3, r5
 8003f96:	1891      	adds	r1, r2, r2
 8003f98:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f9a:	415b      	adcs	r3, r3
 8003f9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	eb12 0801 	adds.w	r8, r2, r1
 8003fa8:	4629      	mov	r1, r5
 8003faa:	eb43 0901 	adc.w	r9, r3, r1
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fc2:	4690      	mov	r8, r2
 8003fc4:	4699      	mov	r9, r3
 8003fc6:	4623      	mov	r3, r4
 8003fc8:	eb18 0303 	adds.w	r3, r8, r3
 8003fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003fd0:	462b      	mov	r3, r5
 8003fd2:	eb49 0303 	adc.w	r3, r9, r3
 8003fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003fe6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003fea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003fee:	460b      	mov	r3, r1
 8003ff0:	18db      	adds	r3, r3, r3
 8003ff2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	eb42 0303 	adc.w	r3, r2, r3
 8003ffa:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ffc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004000:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004004:	f7fc fe28 	bl	8000c58 <__aeabi_uldivmod>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4b61      	ldr	r3, [pc, #388]	@ (8004194 <UART_SetConfig+0x2d4>)
 800400e:	fba3 2302 	umull	r2, r3, r3, r2
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	011c      	lsls	r4, r3, #4
 8004016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800401a:	2200      	movs	r2, #0
 800401c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004020:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004024:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004028:	4642      	mov	r2, r8
 800402a:	464b      	mov	r3, r9
 800402c:	1891      	adds	r1, r2, r2
 800402e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004030:	415b      	adcs	r3, r3
 8004032:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004034:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004038:	4641      	mov	r1, r8
 800403a:	eb12 0a01 	adds.w	sl, r2, r1
 800403e:	4649      	mov	r1, r9
 8004040:	eb43 0b01 	adc.w	fp, r3, r1
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004050:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004054:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004058:	4692      	mov	sl, r2
 800405a:	469b      	mov	fp, r3
 800405c:	4643      	mov	r3, r8
 800405e:	eb1a 0303 	adds.w	r3, sl, r3
 8004062:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004066:	464b      	mov	r3, r9
 8004068:	eb4b 0303 	adc.w	r3, fp, r3
 800406c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800407c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004080:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004084:	460b      	mov	r3, r1
 8004086:	18db      	adds	r3, r3, r3
 8004088:	643b      	str	r3, [r7, #64]	@ 0x40
 800408a:	4613      	mov	r3, r2
 800408c:	eb42 0303 	adc.w	r3, r2, r3
 8004090:	647b      	str	r3, [r7, #68]	@ 0x44
 8004092:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004096:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800409a:	f7fc fddd 	bl	8000c58 <__aeabi_uldivmod>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4611      	mov	r1, r2
 80040a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004194 <UART_SetConfig+0x2d4>)
 80040a6:	fba3 2301 	umull	r2, r3, r3, r1
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	2264      	movs	r2, #100	@ 0x64
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	1acb      	subs	r3, r1, r3
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80040ba:	4b36      	ldr	r3, [pc, #216]	@ (8004194 <UART_SetConfig+0x2d4>)
 80040bc:	fba3 2302 	umull	r2, r3, r3, r2
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80040c8:	441c      	add	r4, r3
 80040ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80040d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80040dc:	4642      	mov	r2, r8
 80040de:	464b      	mov	r3, r9
 80040e0:	1891      	adds	r1, r2, r2
 80040e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80040e4:	415b      	adcs	r3, r3
 80040e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80040ec:	4641      	mov	r1, r8
 80040ee:	1851      	adds	r1, r2, r1
 80040f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80040f2:	4649      	mov	r1, r9
 80040f4:	414b      	adcs	r3, r1
 80040f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004104:	4659      	mov	r1, fp
 8004106:	00cb      	lsls	r3, r1, #3
 8004108:	4651      	mov	r1, sl
 800410a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800410e:	4651      	mov	r1, sl
 8004110:	00ca      	lsls	r2, r1, #3
 8004112:	4610      	mov	r0, r2
 8004114:	4619      	mov	r1, r3
 8004116:	4603      	mov	r3, r0
 8004118:	4642      	mov	r2, r8
 800411a:	189b      	adds	r3, r3, r2
 800411c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004120:	464b      	mov	r3, r9
 8004122:	460a      	mov	r2, r1
 8004124:	eb42 0303 	adc.w	r3, r2, r3
 8004128:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800412c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004138:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800413c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004140:	460b      	mov	r3, r1
 8004142:	18db      	adds	r3, r3, r3
 8004144:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004146:	4613      	mov	r3, r2
 8004148:	eb42 0303 	adc.w	r3, r2, r3
 800414c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800414e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004152:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004156:	f7fc fd7f 	bl	8000c58 <__aeabi_uldivmod>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4b0d      	ldr	r3, [pc, #52]	@ (8004194 <UART_SetConfig+0x2d4>)
 8004160:	fba3 1302 	umull	r1, r3, r3, r2
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	2164      	movs	r1, #100	@ 0x64
 8004168:	fb01 f303 	mul.w	r3, r1, r3
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	3332      	adds	r3, #50	@ 0x32
 8004172:	4a08      	ldr	r2, [pc, #32]	@ (8004194 <UART_SetConfig+0x2d4>)
 8004174:	fba2 2303 	umull	r2, r3, r2, r3
 8004178:	095b      	lsrs	r3, r3, #5
 800417a:	f003 0207 	and.w	r2, r3, #7
 800417e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4422      	add	r2, r4
 8004186:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004188:	e106      	b.n	8004398 <UART_SetConfig+0x4d8>
 800418a:	bf00      	nop
 800418c:	40011000 	.word	0x40011000
 8004190:	40011400 	.word	0x40011400
 8004194:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800419c:	2200      	movs	r2, #0
 800419e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80041a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80041aa:	4642      	mov	r2, r8
 80041ac:	464b      	mov	r3, r9
 80041ae:	1891      	adds	r1, r2, r2
 80041b0:	6239      	str	r1, [r7, #32]
 80041b2:	415b      	adcs	r3, r3
 80041b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041ba:	4641      	mov	r1, r8
 80041bc:	1854      	adds	r4, r2, r1
 80041be:	4649      	mov	r1, r9
 80041c0:	eb43 0501 	adc.w	r5, r3, r1
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	00eb      	lsls	r3, r5, #3
 80041ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041d2:	00e2      	lsls	r2, r4, #3
 80041d4:	4614      	mov	r4, r2
 80041d6:	461d      	mov	r5, r3
 80041d8:	4643      	mov	r3, r8
 80041da:	18e3      	adds	r3, r4, r3
 80041dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041e0:	464b      	mov	r3, r9
 80041e2:	eb45 0303 	adc.w	r3, r5, r3
 80041e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004206:	4629      	mov	r1, r5
 8004208:	008b      	lsls	r3, r1, #2
 800420a:	4621      	mov	r1, r4
 800420c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004210:	4621      	mov	r1, r4
 8004212:	008a      	lsls	r2, r1, #2
 8004214:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004218:	f7fc fd1e 	bl	8000c58 <__aeabi_uldivmod>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	4b60      	ldr	r3, [pc, #384]	@ (80043a4 <UART_SetConfig+0x4e4>)
 8004222:	fba3 2302 	umull	r2, r3, r3, r2
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	011c      	lsls	r4, r3, #4
 800422a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800422e:	2200      	movs	r2, #0
 8004230:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004234:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004238:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800423c:	4642      	mov	r2, r8
 800423e:	464b      	mov	r3, r9
 8004240:	1891      	adds	r1, r2, r2
 8004242:	61b9      	str	r1, [r7, #24]
 8004244:	415b      	adcs	r3, r3
 8004246:	61fb      	str	r3, [r7, #28]
 8004248:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800424c:	4641      	mov	r1, r8
 800424e:	1851      	adds	r1, r2, r1
 8004250:	6139      	str	r1, [r7, #16]
 8004252:	4649      	mov	r1, r9
 8004254:	414b      	adcs	r3, r1
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004264:	4659      	mov	r1, fp
 8004266:	00cb      	lsls	r3, r1, #3
 8004268:	4651      	mov	r1, sl
 800426a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800426e:	4651      	mov	r1, sl
 8004270:	00ca      	lsls	r2, r1, #3
 8004272:	4610      	mov	r0, r2
 8004274:	4619      	mov	r1, r3
 8004276:	4603      	mov	r3, r0
 8004278:	4642      	mov	r2, r8
 800427a:	189b      	adds	r3, r3, r2
 800427c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004280:	464b      	mov	r3, r9
 8004282:	460a      	mov	r2, r1
 8004284:	eb42 0303 	adc.w	r3, r2, r3
 8004288:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004296:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80042a4:	4649      	mov	r1, r9
 80042a6:	008b      	lsls	r3, r1, #2
 80042a8:	4641      	mov	r1, r8
 80042aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042ae:	4641      	mov	r1, r8
 80042b0:	008a      	lsls	r2, r1, #2
 80042b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80042b6:	f7fc fccf 	bl	8000c58 <__aeabi_uldivmod>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4611      	mov	r1, r2
 80042c0:	4b38      	ldr	r3, [pc, #224]	@ (80043a4 <UART_SetConfig+0x4e4>)
 80042c2:	fba3 2301 	umull	r2, r3, r3, r1
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	2264      	movs	r2, #100	@ 0x64
 80042ca:	fb02 f303 	mul.w	r3, r2, r3
 80042ce:	1acb      	subs	r3, r1, r3
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	3332      	adds	r3, #50	@ 0x32
 80042d4:	4a33      	ldr	r2, [pc, #204]	@ (80043a4 <UART_SetConfig+0x4e4>)
 80042d6:	fba2 2303 	umull	r2, r3, r2, r3
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042e0:	441c      	add	r4, r3
 80042e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042e6:	2200      	movs	r2, #0
 80042e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80042ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80042ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80042f0:	4642      	mov	r2, r8
 80042f2:	464b      	mov	r3, r9
 80042f4:	1891      	adds	r1, r2, r2
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	415b      	adcs	r3, r3
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004300:	4641      	mov	r1, r8
 8004302:	1851      	adds	r1, r2, r1
 8004304:	6039      	str	r1, [r7, #0]
 8004306:	4649      	mov	r1, r9
 8004308:	414b      	adcs	r3, r1
 800430a:	607b      	str	r3, [r7, #4]
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004318:	4659      	mov	r1, fp
 800431a:	00cb      	lsls	r3, r1, #3
 800431c:	4651      	mov	r1, sl
 800431e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004322:	4651      	mov	r1, sl
 8004324:	00ca      	lsls	r2, r1, #3
 8004326:	4610      	mov	r0, r2
 8004328:	4619      	mov	r1, r3
 800432a:	4603      	mov	r3, r0
 800432c:	4642      	mov	r2, r8
 800432e:	189b      	adds	r3, r3, r2
 8004330:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004332:	464b      	mov	r3, r9
 8004334:	460a      	mov	r2, r1
 8004336:	eb42 0303 	adc.w	r3, r2, r3
 800433a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	663b      	str	r3, [r7, #96]	@ 0x60
 8004346:	667a      	str	r2, [r7, #100]	@ 0x64
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004354:	4649      	mov	r1, r9
 8004356:	008b      	lsls	r3, r1, #2
 8004358:	4641      	mov	r1, r8
 800435a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800435e:	4641      	mov	r1, r8
 8004360:	008a      	lsls	r2, r1, #2
 8004362:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004366:	f7fc fc77 	bl	8000c58 <__aeabi_uldivmod>
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4b0d      	ldr	r3, [pc, #52]	@ (80043a4 <UART_SetConfig+0x4e4>)
 8004370:	fba3 1302 	umull	r1, r3, r3, r2
 8004374:	095b      	lsrs	r3, r3, #5
 8004376:	2164      	movs	r1, #100	@ 0x64
 8004378:	fb01 f303 	mul.w	r3, r1, r3
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	3332      	adds	r3, #50	@ 0x32
 8004382:	4a08      	ldr	r2, [pc, #32]	@ (80043a4 <UART_SetConfig+0x4e4>)
 8004384:	fba2 2303 	umull	r2, r3, r2, r3
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	f003 020f 	and.w	r2, r3, #15
 800438e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4422      	add	r2, r4
 8004396:	609a      	str	r2, [r3, #8]
}
 8004398:	bf00      	nop
 800439a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800439e:	46bd      	mov	sp, r7
 80043a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043a4:	51eb851f 	.word	0x51eb851f

080043a8 <__cvt>:
 80043a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043ac:	ec57 6b10 	vmov	r6, r7, d0
 80043b0:	2f00      	cmp	r7, #0
 80043b2:	460c      	mov	r4, r1
 80043b4:	4619      	mov	r1, r3
 80043b6:	463b      	mov	r3, r7
 80043b8:	bfbb      	ittet	lt
 80043ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80043be:	461f      	movlt	r7, r3
 80043c0:	2300      	movge	r3, #0
 80043c2:	232d      	movlt	r3, #45	@ 0x2d
 80043c4:	700b      	strb	r3, [r1, #0]
 80043c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80043c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80043cc:	4691      	mov	r9, r2
 80043ce:	f023 0820 	bic.w	r8, r3, #32
 80043d2:	bfbc      	itt	lt
 80043d4:	4632      	movlt	r2, r6
 80043d6:	4616      	movlt	r6, r2
 80043d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80043dc:	d005      	beq.n	80043ea <__cvt+0x42>
 80043de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80043e2:	d100      	bne.n	80043e6 <__cvt+0x3e>
 80043e4:	3401      	adds	r4, #1
 80043e6:	2102      	movs	r1, #2
 80043e8:	e000      	b.n	80043ec <__cvt+0x44>
 80043ea:	2103      	movs	r1, #3
 80043ec:	ab03      	add	r3, sp, #12
 80043ee:	9301      	str	r3, [sp, #4]
 80043f0:	ab02      	add	r3, sp, #8
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	ec47 6b10 	vmov	d0, r6, r7
 80043f8:	4653      	mov	r3, sl
 80043fa:	4622      	mov	r2, r4
 80043fc:	f000 ff88 	bl	8005310 <_dtoa_r>
 8004400:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004404:	4605      	mov	r5, r0
 8004406:	d119      	bne.n	800443c <__cvt+0x94>
 8004408:	f019 0f01 	tst.w	r9, #1
 800440c:	d00e      	beq.n	800442c <__cvt+0x84>
 800440e:	eb00 0904 	add.w	r9, r0, r4
 8004412:	2200      	movs	r2, #0
 8004414:	2300      	movs	r3, #0
 8004416:	4630      	mov	r0, r6
 8004418:	4639      	mov	r1, r7
 800441a:	f7fc fb5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800441e:	b108      	cbz	r0, 8004424 <__cvt+0x7c>
 8004420:	f8cd 900c 	str.w	r9, [sp, #12]
 8004424:	2230      	movs	r2, #48	@ 0x30
 8004426:	9b03      	ldr	r3, [sp, #12]
 8004428:	454b      	cmp	r3, r9
 800442a:	d31e      	bcc.n	800446a <__cvt+0xc2>
 800442c:	9b03      	ldr	r3, [sp, #12]
 800442e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004430:	1b5b      	subs	r3, r3, r5
 8004432:	4628      	mov	r0, r5
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	b004      	add	sp, #16
 8004438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800443c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004440:	eb00 0904 	add.w	r9, r0, r4
 8004444:	d1e5      	bne.n	8004412 <__cvt+0x6a>
 8004446:	7803      	ldrb	r3, [r0, #0]
 8004448:	2b30      	cmp	r3, #48	@ 0x30
 800444a:	d10a      	bne.n	8004462 <__cvt+0xba>
 800444c:	2200      	movs	r2, #0
 800444e:	2300      	movs	r3, #0
 8004450:	4630      	mov	r0, r6
 8004452:	4639      	mov	r1, r7
 8004454:	f7fc fb40 	bl	8000ad8 <__aeabi_dcmpeq>
 8004458:	b918      	cbnz	r0, 8004462 <__cvt+0xba>
 800445a:	f1c4 0401 	rsb	r4, r4, #1
 800445e:	f8ca 4000 	str.w	r4, [sl]
 8004462:	f8da 3000 	ldr.w	r3, [sl]
 8004466:	4499      	add	r9, r3
 8004468:	e7d3      	b.n	8004412 <__cvt+0x6a>
 800446a:	1c59      	adds	r1, r3, #1
 800446c:	9103      	str	r1, [sp, #12]
 800446e:	701a      	strb	r2, [r3, #0]
 8004470:	e7d9      	b.n	8004426 <__cvt+0x7e>

08004472 <__exponent>:
 8004472:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004474:	2900      	cmp	r1, #0
 8004476:	bfba      	itte	lt
 8004478:	4249      	neglt	r1, r1
 800447a:	232d      	movlt	r3, #45	@ 0x2d
 800447c:	232b      	movge	r3, #43	@ 0x2b
 800447e:	2909      	cmp	r1, #9
 8004480:	7002      	strb	r2, [r0, #0]
 8004482:	7043      	strb	r3, [r0, #1]
 8004484:	dd29      	ble.n	80044da <__exponent+0x68>
 8004486:	f10d 0307 	add.w	r3, sp, #7
 800448a:	461d      	mov	r5, r3
 800448c:	270a      	movs	r7, #10
 800448e:	461a      	mov	r2, r3
 8004490:	fbb1 f6f7 	udiv	r6, r1, r7
 8004494:	fb07 1416 	mls	r4, r7, r6, r1
 8004498:	3430      	adds	r4, #48	@ 0x30
 800449a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800449e:	460c      	mov	r4, r1
 80044a0:	2c63      	cmp	r4, #99	@ 0x63
 80044a2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80044a6:	4631      	mov	r1, r6
 80044a8:	dcf1      	bgt.n	800448e <__exponent+0x1c>
 80044aa:	3130      	adds	r1, #48	@ 0x30
 80044ac:	1e94      	subs	r4, r2, #2
 80044ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 80044b2:	1c41      	adds	r1, r0, #1
 80044b4:	4623      	mov	r3, r4
 80044b6:	42ab      	cmp	r3, r5
 80044b8:	d30a      	bcc.n	80044d0 <__exponent+0x5e>
 80044ba:	f10d 0309 	add.w	r3, sp, #9
 80044be:	1a9b      	subs	r3, r3, r2
 80044c0:	42ac      	cmp	r4, r5
 80044c2:	bf88      	it	hi
 80044c4:	2300      	movhi	r3, #0
 80044c6:	3302      	adds	r3, #2
 80044c8:	4403      	add	r3, r0
 80044ca:	1a18      	subs	r0, r3, r0
 80044cc:	b003      	add	sp, #12
 80044ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80044d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80044d8:	e7ed      	b.n	80044b6 <__exponent+0x44>
 80044da:	2330      	movs	r3, #48	@ 0x30
 80044dc:	3130      	adds	r1, #48	@ 0x30
 80044de:	7083      	strb	r3, [r0, #2]
 80044e0:	70c1      	strb	r1, [r0, #3]
 80044e2:	1d03      	adds	r3, r0, #4
 80044e4:	e7f1      	b.n	80044ca <__exponent+0x58>
	...

080044e8 <_printf_float>:
 80044e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ec:	b08d      	sub	sp, #52	@ 0x34
 80044ee:	460c      	mov	r4, r1
 80044f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80044f4:	4616      	mov	r6, r2
 80044f6:	461f      	mov	r7, r3
 80044f8:	4605      	mov	r5, r0
 80044fa:	f000 fe09 	bl	8005110 <_localeconv_r>
 80044fe:	6803      	ldr	r3, [r0, #0]
 8004500:	9304      	str	r3, [sp, #16]
 8004502:	4618      	mov	r0, r3
 8004504:	f7fb febc 	bl	8000280 <strlen>
 8004508:	2300      	movs	r3, #0
 800450a:	930a      	str	r3, [sp, #40]	@ 0x28
 800450c:	f8d8 3000 	ldr.w	r3, [r8]
 8004510:	9005      	str	r0, [sp, #20]
 8004512:	3307      	adds	r3, #7
 8004514:	f023 0307 	bic.w	r3, r3, #7
 8004518:	f103 0208 	add.w	r2, r3, #8
 800451c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004520:	f8d4 b000 	ldr.w	fp, [r4]
 8004524:	f8c8 2000 	str.w	r2, [r8]
 8004528:	e9d3 8900 	ldrd	r8, r9, [r3]
 800452c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004530:	9307      	str	r3, [sp, #28]
 8004532:	f8cd 8018 	str.w	r8, [sp, #24]
 8004536:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800453a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800453e:	4b9c      	ldr	r3, [pc, #624]	@ (80047b0 <_printf_float+0x2c8>)
 8004540:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004544:	f7fc fafa 	bl	8000b3c <__aeabi_dcmpun>
 8004548:	bb70      	cbnz	r0, 80045a8 <_printf_float+0xc0>
 800454a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800454e:	4b98      	ldr	r3, [pc, #608]	@ (80047b0 <_printf_float+0x2c8>)
 8004550:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004554:	f7fc fad4 	bl	8000b00 <__aeabi_dcmple>
 8004558:	bb30      	cbnz	r0, 80045a8 <_printf_float+0xc0>
 800455a:	2200      	movs	r2, #0
 800455c:	2300      	movs	r3, #0
 800455e:	4640      	mov	r0, r8
 8004560:	4649      	mov	r1, r9
 8004562:	f7fc fac3 	bl	8000aec <__aeabi_dcmplt>
 8004566:	b110      	cbz	r0, 800456e <_printf_float+0x86>
 8004568:	232d      	movs	r3, #45	@ 0x2d
 800456a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800456e:	4a91      	ldr	r2, [pc, #580]	@ (80047b4 <_printf_float+0x2cc>)
 8004570:	4b91      	ldr	r3, [pc, #580]	@ (80047b8 <_printf_float+0x2d0>)
 8004572:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004576:	bf94      	ite	ls
 8004578:	4690      	movls	r8, r2
 800457a:	4698      	movhi	r8, r3
 800457c:	2303      	movs	r3, #3
 800457e:	6123      	str	r3, [r4, #16]
 8004580:	f02b 0304 	bic.w	r3, fp, #4
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	f04f 0900 	mov.w	r9, #0
 800458a:	9700      	str	r7, [sp, #0]
 800458c:	4633      	mov	r3, r6
 800458e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004590:	4621      	mov	r1, r4
 8004592:	4628      	mov	r0, r5
 8004594:	f000 f9d2 	bl	800493c <_printf_common>
 8004598:	3001      	adds	r0, #1
 800459a:	f040 808d 	bne.w	80046b8 <_printf_float+0x1d0>
 800459e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045a2:	b00d      	add	sp, #52	@ 0x34
 80045a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045a8:	4642      	mov	r2, r8
 80045aa:	464b      	mov	r3, r9
 80045ac:	4640      	mov	r0, r8
 80045ae:	4649      	mov	r1, r9
 80045b0:	f7fc fac4 	bl	8000b3c <__aeabi_dcmpun>
 80045b4:	b140      	cbz	r0, 80045c8 <_printf_float+0xe0>
 80045b6:	464b      	mov	r3, r9
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	bfbc      	itt	lt
 80045bc:	232d      	movlt	r3, #45	@ 0x2d
 80045be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80045c2:	4a7e      	ldr	r2, [pc, #504]	@ (80047bc <_printf_float+0x2d4>)
 80045c4:	4b7e      	ldr	r3, [pc, #504]	@ (80047c0 <_printf_float+0x2d8>)
 80045c6:	e7d4      	b.n	8004572 <_printf_float+0x8a>
 80045c8:	6863      	ldr	r3, [r4, #4]
 80045ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80045ce:	9206      	str	r2, [sp, #24]
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	d13b      	bne.n	800464c <_printf_float+0x164>
 80045d4:	2306      	movs	r3, #6
 80045d6:	6063      	str	r3, [r4, #4]
 80045d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80045dc:	2300      	movs	r3, #0
 80045de:	6022      	str	r2, [r4, #0]
 80045e0:	9303      	str	r3, [sp, #12]
 80045e2:	ab0a      	add	r3, sp, #40	@ 0x28
 80045e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80045e8:	ab09      	add	r3, sp, #36	@ 0x24
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	6861      	ldr	r1, [r4, #4]
 80045ee:	ec49 8b10 	vmov	d0, r8, r9
 80045f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80045f6:	4628      	mov	r0, r5
 80045f8:	f7ff fed6 	bl	80043a8 <__cvt>
 80045fc:	9b06      	ldr	r3, [sp, #24]
 80045fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004600:	2b47      	cmp	r3, #71	@ 0x47
 8004602:	4680      	mov	r8, r0
 8004604:	d129      	bne.n	800465a <_printf_float+0x172>
 8004606:	1cc8      	adds	r0, r1, #3
 8004608:	db02      	blt.n	8004610 <_printf_float+0x128>
 800460a:	6863      	ldr	r3, [r4, #4]
 800460c:	4299      	cmp	r1, r3
 800460e:	dd41      	ble.n	8004694 <_printf_float+0x1ac>
 8004610:	f1aa 0a02 	sub.w	sl, sl, #2
 8004614:	fa5f fa8a 	uxtb.w	sl, sl
 8004618:	3901      	subs	r1, #1
 800461a:	4652      	mov	r2, sl
 800461c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004620:	9109      	str	r1, [sp, #36]	@ 0x24
 8004622:	f7ff ff26 	bl	8004472 <__exponent>
 8004626:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004628:	1813      	adds	r3, r2, r0
 800462a:	2a01      	cmp	r2, #1
 800462c:	4681      	mov	r9, r0
 800462e:	6123      	str	r3, [r4, #16]
 8004630:	dc02      	bgt.n	8004638 <_printf_float+0x150>
 8004632:	6822      	ldr	r2, [r4, #0]
 8004634:	07d2      	lsls	r2, r2, #31
 8004636:	d501      	bpl.n	800463c <_printf_float+0x154>
 8004638:	3301      	adds	r3, #1
 800463a:	6123      	str	r3, [r4, #16]
 800463c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0a2      	beq.n	800458a <_printf_float+0xa2>
 8004644:	232d      	movs	r3, #45	@ 0x2d
 8004646:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800464a:	e79e      	b.n	800458a <_printf_float+0xa2>
 800464c:	9a06      	ldr	r2, [sp, #24]
 800464e:	2a47      	cmp	r2, #71	@ 0x47
 8004650:	d1c2      	bne.n	80045d8 <_printf_float+0xf0>
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1c0      	bne.n	80045d8 <_printf_float+0xf0>
 8004656:	2301      	movs	r3, #1
 8004658:	e7bd      	b.n	80045d6 <_printf_float+0xee>
 800465a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800465e:	d9db      	bls.n	8004618 <_printf_float+0x130>
 8004660:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004664:	d118      	bne.n	8004698 <_printf_float+0x1b0>
 8004666:	2900      	cmp	r1, #0
 8004668:	6863      	ldr	r3, [r4, #4]
 800466a:	dd0b      	ble.n	8004684 <_printf_float+0x19c>
 800466c:	6121      	str	r1, [r4, #16]
 800466e:	b913      	cbnz	r3, 8004676 <_printf_float+0x18e>
 8004670:	6822      	ldr	r2, [r4, #0]
 8004672:	07d0      	lsls	r0, r2, #31
 8004674:	d502      	bpl.n	800467c <_printf_float+0x194>
 8004676:	3301      	adds	r3, #1
 8004678:	440b      	add	r3, r1
 800467a:	6123      	str	r3, [r4, #16]
 800467c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800467e:	f04f 0900 	mov.w	r9, #0
 8004682:	e7db      	b.n	800463c <_printf_float+0x154>
 8004684:	b913      	cbnz	r3, 800468c <_printf_float+0x1a4>
 8004686:	6822      	ldr	r2, [r4, #0]
 8004688:	07d2      	lsls	r2, r2, #31
 800468a:	d501      	bpl.n	8004690 <_printf_float+0x1a8>
 800468c:	3302      	adds	r3, #2
 800468e:	e7f4      	b.n	800467a <_printf_float+0x192>
 8004690:	2301      	movs	r3, #1
 8004692:	e7f2      	b.n	800467a <_printf_float+0x192>
 8004694:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800469a:	4299      	cmp	r1, r3
 800469c:	db05      	blt.n	80046aa <_printf_float+0x1c2>
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	6121      	str	r1, [r4, #16]
 80046a2:	07d8      	lsls	r0, r3, #31
 80046a4:	d5ea      	bpl.n	800467c <_printf_float+0x194>
 80046a6:	1c4b      	adds	r3, r1, #1
 80046a8:	e7e7      	b.n	800467a <_printf_float+0x192>
 80046aa:	2900      	cmp	r1, #0
 80046ac:	bfd4      	ite	le
 80046ae:	f1c1 0202 	rsble	r2, r1, #2
 80046b2:	2201      	movgt	r2, #1
 80046b4:	4413      	add	r3, r2
 80046b6:	e7e0      	b.n	800467a <_printf_float+0x192>
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	055a      	lsls	r2, r3, #21
 80046bc:	d407      	bmi.n	80046ce <_printf_float+0x1e6>
 80046be:	6923      	ldr	r3, [r4, #16]
 80046c0:	4642      	mov	r2, r8
 80046c2:	4631      	mov	r1, r6
 80046c4:	4628      	mov	r0, r5
 80046c6:	47b8      	blx	r7
 80046c8:	3001      	adds	r0, #1
 80046ca:	d12b      	bne.n	8004724 <_printf_float+0x23c>
 80046cc:	e767      	b.n	800459e <_printf_float+0xb6>
 80046ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80046d2:	f240 80dd 	bls.w	8004890 <_printf_float+0x3a8>
 80046d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80046da:	2200      	movs	r2, #0
 80046dc:	2300      	movs	r3, #0
 80046de:	f7fc f9fb 	bl	8000ad8 <__aeabi_dcmpeq>
 80046e2:	2800      	cmp	r0, #0
 80046e4:	d033      	beq.n	800474e <_printf_float+0x266>
 80046e6:	4a37      	ldr	r2, [pc, #220]	@ (80047c4 <_printf_float+0x2dc>)
 80046e8:	2301      	movs	r3, #1
 80046ea:	4631      	mov	r1, r6
 80046ec:	4628      	mov	r0, r5
 80046ee:	47b8      	blx	r7
 80046f0:	3001      	adds	r0, #1
 80046f2:	f43f af54 	beq.w	800459e <_printf_float+0xb6>
 80046f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80046fa:	4543      	cmp	r3, r8
 80046fc:	db02      	blt.n	8004704 <_printf_float+0x21c>
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	07d8      	lsls	r0, r3, #31
 8004702:	d50f      	bpl.n	8004724 <_printf_float+0x23c>
 8004704:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004708:	4631      	mov	r1, r6
 800470a:	4628      	mov	r0, r5
 800470c:	47b8      	blx	r7
 800470e:	3001      	adds	r0, #1
 8004710:	f43f af45 	beq.w	800459e <_printf_float+0xb6>
 8004714:	f04f 0900 	mov.w	r9, #0
 8004718:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800471c:	f104 0a1a 	add.w	sl, r4, #26
 8004720:	45c8      	cmp	r8, r9
 8004722:	dc09      	bgt.n	8004738 <_printf_float+0x250>
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	079b      	lsls	r3, r3, #30
 8004728:	f100 8103 	bmi.w	8004932 <_printf_float+0x44a>
 800472c:	68e0      	ldr	r0, [r4, #12]
 800472e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004730:	4298      	cmp	r0, r3
 8004732:	bfb8      	it	lt
 8004734:	4618      	movlt	r0, r3
 8004736:	e734      	b.n	80045a2 <_printf_float+0xba>
 8004738:	2301      	movs	r3, #1
 800473a:	4652      	mov	r2, sl
 800473c:	4631      	mov	r1, r6
 800473e:	4628      	mov	r0, r5
 8004740:	47b8      	blx	r7
 8004742:	3001      	adds	r0, #1
 8004744:	f43f af2b 	beq.w	800459e <_printf_float+0xb6>
 8004748:	f109 0901 	add.w	r9, r9, #1
 800474c:	e7e8      	b.n	8004720 <_printf_float+0x238>
 800474e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004750:	2b00      	cmp	r3, #0
 8004752:	dc39      	bgt.n	80047c8 <_printf_float+0x2e0>
 8004754:	4a1b      	ldr	r2, [pc, #108]	@ (80047c4 <_printf_float+0x2dc>)
 8004756:	2301      	movs	r3, #1
 8004758:	4631      	mov	r1, r6
 800475a:	4628      	mov	r0, r5
 800475c:	47b8      	blx	r7
 800475e:	3001      	adds	r0, #1
 8004760:	f43f af1d 	beq.w	800459e <_printf_float+0xb6>
 8004764:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004768:	ea59 0303 	orrs.w	r3, r9, r3
 800476c:	d102      	bne.n	8004774 <_printf_float+0x28c>
 800476e:	6823      	ldr	r3, [r4, #0]
 8004770:	07d9      	lsls	r1, r3, #31
 8004772:	d5d7      	bpl.n	8004724 <_printf_float+0x23c>
 8004774:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004778:	4631      	mov	r1, r6
 800477a:	4628      	mov	r0, r5
 800477c:	47b8      	blx	r7
 800477e:	3001      	adds	r0, #1
 8004780:	f43f af0d 	beq.w	800459e <_printf_float+0xb6>
 8004784:	f04f 0a00 	mov.w	sl, #0
 8004788:	f104 0b1a 	add.w	fp, r4, #26
 800478c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800478e:	425b      	negs	r3, r3
 8004790:	4553      	cmp	r3, sl
 8004792:	dc01      	bgt.n	8004798 <_printf_float+0x2b0>
 8004794:	464b      	mov	r3, r9
 8004796:	e793      	b.n	80046c0 <_printf_float+0x1d8>
 8004798:	2301      	movs	r3, #1
 800479a:	465a      	mov	r2, fp
 800479c:	4631      	mov	r1, r6
 800479e:	4628      	mov	r0, r5
 80047a0:	47b8      	blx	r7
 80047a2:	3001      	adds	r0, #1
 80047a4:	f43f aefb 	beq.w	800459e <_printf_float+0xb6>
 80047a8:	f10a 0a01 	add.w	sl, sl, #1
 80047ac:	e7ee      	b.n	800478c <_printf_float+0x2a4>
 80047ae:	bf00      	nop
 80047b0:	7fefffff 	.word	0x7fefffff
 80047b4:	080073f4 	.word	0x080073f4
 80047b8:	080073f8 	.word	0x080073f8
 80047bc:	080073fc 	.word	0x080073fc
 80047c0:	08007400 	.word	0x08007400
 80047c4:	08007404 	.word	0x08007404
 80047c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80047ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80047ce:	4553      	cmp	r3, sl
 80047d0:	bfa8      	it	ge
 80047d2:	4653      	movge	r3, sl
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	4699      	mov	r9, r3
 80047d8:	dc36      	bgt.n	8004848 <_printf_float+0x360>
 80047da:	f04f 0b00 	mov.w	fp, #0
 80047de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047e2:	f104 021a 	add.w	r2, r4, #26
 80047e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80047e8:	9306      	str	r3, [sp, #24]
 80047ea:	eba3 0309 	sub.w	r3, r3, r9
 80047ee:	455b      	cmp	r3, fp
 80047f0:	dc31      	bgt.n	8004856 <_printf_float+0x36e>
 80047f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047f4:	459a      	cmp	sl, r3
 80047f6:	dc3a      	bgt.n	800486e <_printf_float+0x386>
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	07da      	lsls	r2, r3, #31
 80047fc:	d437      	bmi.n	800486e <_printf_float+0x386>
 80047fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004800:	ebaa 0903 	sub.w	r9, sl, r3
 8004804:	9b06      	ldr	r3, [sp, #24]
 8004806:	ebaa 0303 	sub.w	r3, sl, r3
 800480a:	4599      	cmp	r9, r3
 800480c:	bfa8      	it	ge
 800480e:	4699      	movge	r9, r3
 8004810:	f1b9 0f00 	cmp.w	r9, #0
 8004814:	dc33      	bgt.n	800487e <_printf_float+0x396>
 8004816:	f04f 0800 	mov.w	r8, #0
 800481a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800481e:	f104 0b1a 	add.w	fp, r4, #26
 8004822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004824:	ebaa 0303 	sub.w	r3, sl, r3
 8004828:	eba3 0309 	sub.w	r3, r3, r9
 800482c:	4543      	cmp	r3, r8
 800482e:	f77f af79 	ble.w	8004724 <_printf_float+0x23c>
 8004832:	2301      	movs	r3, #1
 8004834:	465a      	mov	r2, fp
 8004836:	4631      	mov	r1, r6
 8004838:	4628      	mov	r0, r5
 800483a:	47b8      	blx	r7
 800483c:	3001      	adds	r0, #1
 800483e:	f43f aeae 	beq.w	800459e <_printf_float+0xb6>
 8004842:	f108 0801 	add.w	r8, r8, #1
 8004846:	e7ec      	b.n	8004822 <_printf_float+0x33a>
 8004848:	4642      	mov	r2, r8
 800484a:	4631      	mov	r1, r6
 800484c:	4628      	mov	r0, r5
 800484e:	47b8      	blx	r7
 8004850:	3001      	adds	r0, #1
 8004852:	d1c2      	bne.n	80047da <_printf_float+0x2f2>
 8004854:	e6a3      	b.n	800459e <_printf_float+0xb6>
 8004856:	2301      	movs	r3, #1
 8004858:	4631      	mov	r1, r6
 800485a:	4628      	mov	r0, r5
 800485c:	9206      	str	r2, [sp, #24]
 800485e:	47b8      	blx	r7
 8004860:	3001      	adds	r0, #1
 8004862:	f43f ae9c 	beq.w	800459e <_printf_float+0xb6>
 8004866:	9a06      	ldr	r2, [sp, #24]
 8004868:	f10b 0b01 	add.w	fp, fp, #1
 800486c:	e7bb      	b.n	80047e6 <_printf_float+0x2fe>
 800486e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004872:	4631      	mov	r1, r6
 8004874:	4628      	mov	r0, r5
 8004876:	47b8      	blx	r7
 8004878:	3001      	adds	r0, #1
 800487a:	d1c0      	bne.n	80047fe <_printf_float+0x316>
 800487c:	e68f      	b.n	800459e <_printf_float+0xb6>
 800487e:	9a06      	ldr	r2, [sp, #24]
 8004880:	464b      	mov	r3, r9
 8004882:	4442      	add	r2, r8
 8004884:	4631      	mov	r1, r6
 8004886:	4628      	mov	r0, r5
 8004888:	47b8      	blx	r7
 800488a:	3001      	adds	r0, #1
 800488c:	d1c3      	bne.n	8004816 <_printf_float+0x32e>
 800488e:	e686      	b.n	800459e <_printf_float+0xb6>
 8004890:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004894:	f1ba 0f01 	cmp.w	sl, #1
 8004898:	dc01      	bgt.n	800489e <_printf_float+0x3b6>
 800489a:	07db      	lsls	r3, r3, #31
 800489c:	d536      	bpl.n	800490c <_printf_float+0x424>
 800489e:	2301      	movs	r3, #1
 80048a0:	4642      	mov	r2, r8
 80048a2:	4631      	mov	r1, r6
 80048a4:	4628      	mov	r0, r5
 80048a6:	47b8      	blx	r7
 80048a8:	3001      	adds	r0, #1
 80048aa:	f43f ae78 	beq.w	800459e <_printf_float+0xb6>
 80048ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048b2:	4631      	mov	r1, r6
 80048b4:	4628      	mov	r0, r5
 80048b6:	47b8      	blx	r7
 80048b8:	3001      	adds	r0, #1
 80048ba:	f43f ae70 	beq.w	800459e <_printf_float+0xb6>
 80048be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80048c2:	2200      	movs	r2, #0
 80048c4:	2300      	movs	r3, #0
 80048c6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80048ca:	f7fc f905 	bl	8000ad8 <__aeabi_dcmpeq>
 80048ce:	b9c0      	cbnz	r0, 8004902 <_printf_float+0x41a>
 80048d0:	4653      	mov	r3, sl
 80048d2:	f108 0201 	add.w	r2, r8, #1
 80048d6:	4631      	mov	r1, r6
 80048d8:	4628      	mov	r0, r5
 80048da:	47b8      	blx	r7
 80048dc:	3001      	adds	r0, #1
 80048de:	d10c      	bne.n	80048fa <_printf_float+0x412>
 80048e0:	e65d      	b.n	800459e <_printf_float+0xb6>
 80048e2:	2301      	movs	r3, #1
 80048e4:	465a      	mov	r2, fp
 80048e6:	4631      	mov	r1, r6
 80048e8:	4628      	mov	r0, r5
 80048ea:	47b8      	blx	r7
 80048ec:	3001      	adds	r0, #1
 80048ee:	f43f ae56 	beq.w	800459e <_printf_float+0xb6>
 80048f2:	f108 0801 	add.w	r8, r8, #1
 80048f6:	45d0      	cmp	r8, sl
 80048f8:	dbf3      	blt.n	80048e2 <_printf_float+0x3fa>
 80048fa:	464b      	mov	r3, r9
 80048fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004900:	e6df      	b.n	80046c2 <_printf_float+0x1da>
 8004902:	f04f 0800 	mov.w	r8, #0
 8004906:	f104 0b1a 	add.w	fp, r4, #26
 800490a:	e7f4      	b.n	80048f6 <_printf_float+0x40e>
 800490c:	2301      	movs	r3, #1
 800490e:	4642      	mov	r2, r8
 8004910:	e7e1      	b.n	80048d6 <_printf_float+0x3ee>
 8004912:	2301      	movs	r3, #1
 8004914:	464a      	mov	r2, r9
 8004916:	4631      	mov	r1, r6
 8004918:	4628      	mov	r0, r5
 800491a:	47b8      	blx	r7
 800491c:	3001      	adds	r0, #1
 800491e:	f43f ae3e 	beq.w	800459e <_printf_float+0xb6>
 8004922:	f108 0801 	add.w	r8, r8, #1
 8004926:	68e3      	ldr	r3, [r4, #12]
 8004928:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800492a:	1a5b      	subs	r3, r3, r1
 800492c:	4543      	cmp	r3, r8
 800492e:	dcf0      	bgt.n	8004912 <_printf_float+0x42a>
 8004930:	e6fc      	b.n	800472c <_printf_float+0x244>
 8004932:	f04f 0800 	mov.w	r8, #0
 8004936:	f104 0919 	add.w	r9, r4, #25
 800493a:	e7f4      	b.n	8004926 <_printf_float+0x43e>

0800493c <_printf_common>:
 800493c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004940:	4616      	mov	r6, r2
 8004942:	4698      	mov	r8, r3
 8004944:	688a      	ldr	r2, [r1, #8]
 8004946:	690b      	ldr	r3, [r1, #16]
 8004948:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800494c:	4293      	cmp	r3, r2
 800494e:	bfb8      	it	lt
 8004950:	4613      	movlt	r3, r2
 8004952:	6033      	str	r3, [r6, #0]
 8004954:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004958:	4607      	mov	r7, r0
 800495a:	460c      	mov	r4, r1
 800495c:	b10a      	cbz	r2, 8004962 <_printf_common+0x26>
 800495e:	3301      	adds	r3, #1
 8004960:	6033      	str	r3, [r6, #0]
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	0699      	lsls	r1, r3, #26
 8004966:	bf42      	ittt	mi
 8004968:	6833      	ldrmi	r3, [r6, #0]
 800496a:	3302      	addmi	r3, #2
 800496c:	6033      	strmi	r3, [r6, #0]
 800496e:	6825      	ldr	r5, [r4, #0]
 8004970:	f015 0506 	ands.w	r5, r5, #6
 8004974:	d106      	bne.n	8004984 <_printf_common+0x48>
 8004976:	f104 0a19 	add.w	sl, r4, #25
 800497a:	68e3      	ldr	r3, [r4, #12]
 800497c:	6832      	ldr	r2, [r6, #0]
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	42ab      	cmp	r3, r5
 8004982:	dc26      	bgt.n	80049d2 <_printf_common+0x96>
 8004984:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004988:	6822      	ldr	r2, [r4, #0]
 800498a:	3b00      	subs	r3, #0
 800498c:	bf18      	it	ne
 800498e:	2301      	movne	r3, #1
 8004990:	0692      	lsls	r2, r2, #26
 8004992:	d42b      	bmi.n	80049ec <_printf_common+0xb0>
 8004994:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004998:	4641      	mov	r1, r8
 800499a:	4638      	mov	r0, r7
 800499c:	47c8      	blx	r9
 800499e:	3001      	adds	r0, #1
 80049a0:	d01e      	beq.n	80049e0 <_printf_common+0xa4>
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	6922      	ldr	r2, [r4, #16]
 80049a6:	f003 0306 	and.w	r3, r3, #6
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	bf02      	ittt	eq
 80049ae:	68e5      	ldreq	r5, [r4, #12]
 80049b0:	6833      	ldreq	r3, [r6, #0]
 80049b2:	1aed      	subeq	r5, r5, r3
 80049b4:	68a3      	ldr	r3, [r4, #8]
 80049b6:	bf0c      	ite	eq
 80049b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049bc:	2500      	movne	r5, #0
 80049be:	4293      	cmp	r3, r2
 80049c0:	bfc4      	itt	gt
 80049c2:	1a9b      	subgt	r3, r3, r2
 80049c4:	18ed      	addgt	r5, r5, r3
 80049c6:	2600      	movs	r6, #0
 80049c8:	341a      	adds	r4, #26
 80049ca:	42b5      	cmp	r5, r6
 80049cc:	d11a      	bne.n	8004a04 <_printf_common+0xc8>
 80049ce:	2000      	movs	r0, #0
 80049d0:	e008      	b.n	80049e4 <_printf_common+0xa8>
 80049d2:	2301      	movs	r3, #1
 80049d4:	4652      	mov	r2, sl
 80049d6:	4641      	mov	r1, r8
 80049d8:	4638      	mov	r0, r7
 80049da:	47c8      	blx	r9
 80049dc:	3001      	adds	r0, #1
 80049de:	d103      	bne.n	80049e8 <_printf_common+0xac>
 80049e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e8:	3501      	adds	r5, #1
 80049ea:	e7c6      	b.n	800497a <_printf_common+0x3e>
 80049ec:	18e1      	adds	r1, r4, r3
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	2030      	movs	r0, #48	@ 0x30
 80049f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80049f6:	4422      	add	r2, r4
 80049f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80049fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a00:	3302      	adds	r3, #2
 8004a02:	e7c7      	b.n	8004994 <_printf_common+0x58>
 8004a04:	2301      	movs	r3, #1
 8004a06:	4622      	mov	r2, r4
 8004a08:	4641      	mov	r1, r8
 8004a0a:	4638      	mov	r0, r7
 8004a0c:	47c8      	blx	r9
 8004a0e:	3001      	adds	r0, #1
 8004a10:	d0e6      	beq.n	80049e0 <_printf_common+0xa4>
 8004a12:	3601      	adds	r6, #1
 8004a14:	e7d9      	b.n	80049ca <_printf_common+0x8e>
	...

08004a18 <_printf_i>:
 8004a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a1c:	7e0f      	ldrb	r7, [r1, #24]
 8004a1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a20:	2f78      	cmp	r7, #120	@ 0x78
 8004a22:	4691      	mov	r9, r2
 8004a24:	4680      	mov	r8, r0
 8004a26:	460c      	mov	r4, r1
 8004a28:	469a      	mov	sl, r3
 8004a2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a2e:	d807      	bhi.n	8004a40 <_printf_i+0x28>
 8004a30:	2f62      	cmp	r7, #98	@ 0x62
 8004a32:	d80a      	bhi.n	8004a4a <_printf_i+0x32>
 8004a34:	2f00      	cmp	r7, #0
 8004a36:	f000 80d2 	beq.w	8004bde <_printf_i+0x1c6>
 8004a3a:	2f58      	cmp	r7, #88	@ 0x58
 8004a3c:	f000 80b9 	beq.w	8004bb2 <_printf_i+0x19a>
 8004a40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a48:	e03a      	b.n	8004ac0 <_printf_i+0xa8>
 8004a4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a4e:	2b15      	cmp	r3, #21
 8004a50:	d8f6      	bhi.n	8004a40 <_printf_i+0x28>
 8004a52:	a101      	add	r1, pc, #4	@ (adr r1, 8004a58 <_printf_i+0x40>)
 8004a54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a58:	08004ab1 	.word	0x08004ab1
 8004a5c:	08004ac5 	.word	0x08004ac5
 8004a60:	08004a41 	.word	0x08004a41
 8004a64:	08004a41 	.word	0x08004a41
 8004a68:	08004a41 	.word	0x08004a41
 8004a6c:	08004a41 	.word	0x08004a41
 8004a70:	08004ac5 	.word	0x08004ac5
 8004a74:	08004a41 	.word	0x08004a41
 8004a78:	08004a41 	.word	0x08004a41
 8004a7c:	08004a41 	.word	0x08004a41
 8004a80:	08004a41 	.word	0x08004a41
 8004a84:	08004bc5 	.word	0x08004bc5
 8004a88:	08004aef 	.word	0x08004aef
 8004a8c:	08004b7f 	.word	0x08004b7f
 8004a90:	08004a41 	.word	0x08004a41
 8004a94:	08004a41 	.word	0x08004a41
 8004a98:	08004be7 	.word	0x08004be7
 8004a9c:	08004a41 	.word	0x08004a41
 8004aa0:	08004aef 	.word	0x08004aef
 8004aa4:	08004a41 	.word	0x08004a41
 8004aa8:	08004a41 	.word	0x08004a41
 8004aac:	08004b87 	.word	0x08004b87
 8004ab0:	6833      	ldr	r3, [r6, #0]
 8004ab2:	1d1a      	adds	r2, r3, #4
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6032      	str	r2, [r6, #0]
 8004ab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004abc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e09d      	b.n	8004c00 <_printf_i+0x1e8>
 8004ac4:	6833      	ldr	r3, [r6, #0]
 8004ac6:	6820      	ldr	r0, [r4, #0]
 8004ac8:	1d19      	adds	r1, r3, #4
 8004aca:	6031      	str	r1, [r6, #0]
 8004acc:	0606      	lsls	r6, r0, #24
 8004ace:	d501      	bpl.n	8004ad4 <_printf_i+0xbc>
 8004ad0:	681d      	ldr	r5, [r3, #0]
 8004ad2:	e003      	b.n	8004adc <_printf_i+0xc4>
 8004ad4:	0645      	lsls	r5, r0, #25
 8004ad6:	d5fb      	bpl.n	8004ad0 <_printf_i+0xb8>
 8004ad8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004adc:	2d00      	cmp	r5, #0
 8004ade:	da03      	bge.n	8004ae8 <_printf_i+0xd0>
 8004ae0:	232d      	movs	r3, #45	@ 0x2d
 8004ae2:	426d      	negs	r5, r5
 8004ae4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ae8:	4859      	ldr	r0, [pc, #356]	@ (8004c50 <_printf_i+0x238>)
 8004aea:	230a      	movs	r3, #10
 8004aec:	e011      	b.n	8004b12 <_printf_i+0xfa>
 8004aee:	6821      	ldr	r1, [r4, #0]
 8004af0:	6833      	ldr	r3, [r6, #0]
 8004af2:	0608      	lsls	r0, r1, #24
 8004af4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004af8:	d402      	bmi.n	8004b00 <_printf_i+0xe8>
 8004afa:	0649      	lsls	r1, r1, #25
 8004afc:	bf48      	it	mi
 8004afe:	b2ad      	uxthmi	r5, r5
 8004b00:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b02:	4853      	ldr	r0, [pc, #332]	@ (8004c50 <_printf_i+0x238>)
 8004b04:	6033      	str	r3, [r6, #0]
 8004b06:	bf14      	ite	ne
 8004b08:	230a      	movne	r3, #10
 8004b0a:	2308      	moveq	r3, #8
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b12:	6866      	ldr	r6, [r4, #4]
 8004b14:	60a6      	str	r6, [r4, #8]
 8004b16:	2e00      	cmp	r6, #0
 8004b18:	bfa2      	ittt	ge
 8004b1a:	6821      	ldrge	r1, [r4, #0]
 8004b1c:	f021 0104 	bicge.w	r1, r1, #4
 8004b20:	6021      	strge	r1, [r4, #0]
 8004b22:	b90d      	cbnz	r5, 8004b28 <_printf_i+0x110>
 8004b24:	2e00      	cmp	r6, #0
 8004b26:	d04b      	beq.n	8004bc0 <_printf_i+0x1a8>
 8004b28:	4616      	mov	r6, r2
 8004b2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b2e:	fb03 5711 	mls	r7, r3, r1, r5
 8004b32:	5dc7      	ldrb	r7, [r0, r7]
 8004b34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b38:	462f      	mov	r7, r5
 8004b3a:	42bb      	cmp	r3, r7
 8004b3c:	460d      	mov	r5, r1
 8004b3e:	d9f4      	bls.n	8004b2a <_printf_i+0x112>
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d10b      	bne.n	8004b5c <_printf_i+0x144>
 8004b44:	6823      	ldr	r3, [r4, #0]
 8004b46:	07df      	lsls	r7, r3, #31
 8004b48:	d508      	bpl.n	8004b5c <_printf_i+0x144>
 8004b4a:	6923      	ldr	r3, [r4, #16]
 8004b4c:	6861      	ldr	r1, [r4, #4]
 8004b4e:	4299      	cmp	r1, r3
 8004b50:	bfde      	ittt	le
 8004b52:	2330      	movle	r3, #48	@ 0x30
 8004b54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b58:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004b5c:	1b92      	subs	r2, r2, r6
 8004b5e:	6122      	str	r2, [r4, #16]
 8004b60:	f8cd a000 	str.w	sl, [sp]
 8004b64:	464b      	mov	r3, r9
 8004b66:	aa03      	add	r2, sp, #12
 8004b68:	4621      	mov	r1, r4
 8004b6a:	4640      	mov	r0, r8
 8004b6c:	f7ff fee6 	bl	800493c <_printf_common>
 8004b70:	3001      	adds	r0, #1
 8004b72:	d14a      	bne.n	8004c0a <_printf_i+0x1f2>
 8004b74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b78:	b004      	add	sp, #16
 8004b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	f043 0320 	orr.w	r3, r3, #32
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	4833      	ldr	r0, [pc, #204]	@ (8004c54 <_printf_i+0x23c>)
 8004b88:	2778      	movs	r7, #120	@ 0x78
 8004b8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	6831      	ldr	r1, [r6, #0]
 8004b92:	061f      	lsls	r7, r3, #24
 8004b94:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b98:	d402      	bmi.n	8004ba0 <_printf_i+0x188>
 8004b9a:	065f      	lsls	r7, r3, #25
 8004b9c:	bf48      	it	mi
 8004b9e:	b2ad      	uxthmi	r5, r5
 8004ba0:	6031      	str	r1, [r6, #0]
 8004ba2:	07d9      	lsls	r1, r3, #31
 8004ba4:	bf44      	itt	mi
 8004ba6:	f043 0320 	orrmi.w	r3, r3, #32
 8004baa:	6023      	strmi	r3, [r4, #0]
 8004bac:	b11d      	cbz	r5, 8004bb6 <_printf_i+0x19e>
 8004bae:	2310      	movs	r3, #16
 8004bb0:	e7ac      	b.n	8004b0c <_printf_i+0xf4>
 8004bb2:	4827      	ldr	r0, [pc, #156]	@ (8004c50 <_printf_i+0x238>)
 8004bb4:	e7e9      	b.n	8004b8a <_printf_i+0x172>
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	f023 0320 	bic.w	r3, r3, #32
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	e7f6      	b.n	8004bae <_printf_i+0x196>
 8004bc0:	4616      	mov	r6, r2
 8004bc2:	e7bd      	b.n	8004b40 <_printf_i+0x128>
 8004bc4:	6833      	ldr	r3, [r6, #0]
 8004bc6:	6825      	ldr	r5, [r4, #0]
 8004bc8:	6961      	ldr	r1, [r4, #20]
 8004bca:	1d18      	adds	r0, r3, #4
 8004bcc:	6030      	str	r0, [r6, #0]
 8004bce:	062e      	lsls	r6, r5, #24
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	d501      	bpl.n	8004bd8 <_printf_i+0x1c0>
 8004bd4:	6019      	str	r1, [r3, #0]
 8004bd6:	e002      	b.n	8004bde <_printf_i+0x1c6>
 8004bd8:	0668      	lsls	r0, r5, #25
 8004bda:	d5fb      	bpl.n	8004bd4 <_printf_i+0x1bc>
 8004bdc:	8019      	strh	r1, [r3, #0]
 8004bde:	2300      	movs	r3, #0
 8004be0:	6123      	str	r3, [r4, #16]
 8004be2:	4616      	mov	r6, r2
 8004be4:	e7bc      	b.n	8004b60 <_printf_i+0x148>
 8004be6:	6833      	ldr	r3, [r6, #0]
 8004be8:	1d1a      	adds	r2, r3, #4
 8004bea:	6032      	str	r2, [r6, #0]
 8004bec:	681e      	ldr	r6, [r3, #0]
 8004bee:	6862      	ldr	r2, [r4, #4]
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	4630      	mov	r0, r6
 8004bf4:	f7fb faf4 	bl	80001e0 <memchr>
 8004bf8:	b108      	cbz	r0, 8004bfe <_printf_i+0x1e6>
 8004bfa:	1b80      	subs	r0, r0, r6
 8004bfc:	6060      	str	r0, [r4, #4]
 8004bfe:	6863      	ldr	r3, [r4, #4]
 8004c00:	6123      	str	r3, [r4, #16]
 8004c02:	2300      	movs	r3, #0
 8004c04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c08:	e7aa      	b.n	8004b60 <_printf_i+0x148>
 8004c0a:	6923      	ldr	r3, [r4, #16]
 8004c0c:	4632      	mov	r2, r6
 8004c0e:	4649      	mov	r1, r9
 8004c10:	4640      	mov	r0, r8
 8004c12:	47d0      	blx	sl
 8004c14:	3001      	adds	r0, #1
 8004c16:	d0ad      	beq.n	8004b74 <_printf_i+0x15c>
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	079b      	lsls	r3, r3, #30
 8004c1c:	d413      	bmi.n	8004c46 <_printf_i+0x22e>
 8004c1e:	68e0      	ldr	r0, [r4, #12]
 8004c20:	9b03      	ldr	r3, [sp, #12]
 8004c22:	4298      	cmp	r0, r3
 8004c24:	bfb8      	it	lt
 8004c26:	4618      	movlt	r0, r3
 8004c28:	e7a6      	b.n	8004b78 <_printf_i+0x160>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	4632      	mov	r2, r6
 8004c2e:	4649      	mov	r1, r9
 8004c30:	4640      	mov	r0, r8
 8004c32:	47d0      	blx	sl
 8004c34:	3001      	adds	r0, #1
 8004c36:	d09d      	beq.n	8004b74 <_printf_i+0x15c>
 8004c38:	3501      	adds	r5, #1
 8004c3a:	68e3      	ldr	r3, [r4, #12]
 8004c3c:	9903      	ldr	r1, [sp, #12]
 8004c3e:	1a5b      	subs	r3, r3, r1
 8004c40:	42ab      	cmp	r3, r5
 8004c42:	dcf2      	bgt.n	8004c2a <_printf_i+0x212>
 8004c44:	e7eb      	b.n	8004c1e <_printf_i+0x206>
 8004c46:	2500      	movs	r5, #0
 8004c48:	f104 0619 	add.w	r6, r4, #25
 8004c4c:	e7f5      	b.n	8004c3a <_printf_i+0x222>
 8004c4e:	bf00      	nop
 8004c50:	08007406 	.word	0x08007406
 8004c54:	08007417 	.word	0x08007417

08004c58 <std>:
 8004c58:	2300      	movs	r3, #0
 8004c5a:	b510      	push	{r4, lr}
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	e9c0 3300 	strd	r3, r3, [r0]
 8004c62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c66:	6083      	str	r3, [r0, #8]
 8004c68:	8181      	strh	r1, [r0, #12]
 8004c6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004c6c:	81c2      	strh	r2, [r0, #14]
 8004c6e:	6183      	str	r3, [r0, #24]
 8004c70:	4619      	mov	r1, r3
 8004c72:	2208      	movs	r2, #8
 8004c74:	305c      	adds	r0, #92	@ 0x5c
 8004c76:	f000 fa2d 	bl	80050d4 <memset>
 8004c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb0 <std+0x58>)
 8004c7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb4 <std+0x5c>)
 8004c80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c82:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb8 <std+0x60>)
 8004c84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c86:	4b0d      	ldr	r3, [pc, #52]	@ (8004cbc <std+0x64>)
 8004c88:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc0 <std+0x68>)
 8004c8c:	6224      	str	r4, [r4, #32]
 8004c8e:	429c      	cmp	r4, r3
 8004c90:	d006      	beq.n	8004ca0 <std+0x48>
 8004c92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004c96:	4294      	cmp	r4, r2
 8004c98:	d002      	beq.n	8004ca0 <std+0x48>
 8004c9a:	33d0      	adds	r3, #208	@ 0xd0
 8004c9c:	429c      	cmp	r4, r3
 8004c9e:	d105      	bne.n	8004cac <std+0x54>
 8004ca0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ca8:	f000 baa6 	b.w	80051f8 <__retarget_lock_init_recursive>
 8004cac:	bd10      	pop	{r4, pc}
 8004cae:	bf00      	nop
 8004cb0:	08004f25 	.word	0x08004f25
 8004cb4:	08004f47 	.word	0x08004f47
 8004cb8:	08004f7f 	.word	0x08004f7f
 8004cbc:	08004fa3 	.word	0x08004fa3
 8004cc0:	200002e4 	.word	0x200002e4

08004cc4 <stdio_exit_handler>:
 8004cc4:	4a02      	ldr	r2, [pc, #8]	@ (8004cd0 <stdio_exit_handler+0xc>)
 8004cc6:	4903      	ldr	r1, [pc, #12]	@ (8004cd4 <stdio_exit_handler+0x10>)
 8004cc8:	4803      	ldr	r0, [pc, #12]	@ (8004cd8 <stdio_exit_handler+0x14>)
 8004cca:	f000 b869 	b.w	8004da0 <_fwalk_sglue>
 8004cce:	bf00      	nop
 8004cd0:	2000000c 	.word	0x2000000c
 8004cd4:	08006dd9 	.word	0x08006dd9
 8004cd8:	2000001c 	.word	0x2000001c

08004cdc <cleanup_stdio>:
 8004cdc:	6841      	ldr	r1, [r0, #4]
 8004cde:	4b0c      	ldr	r3, [pc, #48]	@ (8004d10 <cleanup_stdio+0x34>)
 8004ce0:	4299      	cmp	r1, r3
 8004ce2:	b510      	push	{r4, lr}
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	d001      	beq.n	8004cec <cleanup_stdio+0x10>
 8004ce8:	f002 f876 	bl	8006dd8 <_fflush_r>
 8004cec:	68a1      	ldr	r1, [r4, #8]
 8004cee:	4b09      	ldr	r3, [pc, #36]	@ (8004d14 <cleanup_stdio+0x38>)
 8004cf0:	4299      	cmp	r1, r3
 8004cf2:	d002      	beq.n	8004cfa <cleanup_stdio+0x1e>
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	f002 f86f 	bl	8006dd8 <_fflush_r>
 8004cfa:	68e1      	ldr	r1, [r4, #12]
 8004cfc:	4b06      	ldr	r3, [pc, #24]	@ (8004d18 <cleanup_stdio+0x3c>)
 8004cfe:	4299      	cmp	r1, r3
 8004d00:	d004      	beq.n	8004d0c <cleanup_stdio+0x30>
 8004d02:	4620      	mov	r0, r4
 8004d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d08:	f002 b866 	b.w	8006dd8 <_fflush_r>
 8004d0c:	bd10      	pop	{r4, pc}
 8004d0e:	bf00      	nop
 8004d10:	200002e4 	.word	0x200002e4
 8004d14:	2000034c 	.word	0x2000034c
 8004d18:	200003b4 	.word	0x200003b4

08004d1c <global_stdio_init.part.0>:
 8004d1c:	b510      	push	{r4, lr}
 8004d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d4c <global_stdio_init.part.0+0x30>)
 8004d20:	4c0b      	ldr	r4, [pc, #44]	@ (8004d50 <global_stdio_init.part.0+0x34>)
 8004d22:	4a0c      	ldr	r2, [pc, #48]	@ (8004d54 <global_stdio_init.part.0+0x38>)
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	4620      	mov	r0, r4
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2104      	movs	r1, #4
 8004d2c:	f7ff ff94 	bl	8004c58 <std>
 8004d30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d34:	2201      	movs	r2, #1
 8004d36:	2109      	movs	r1, #9
 8004d38:	f7ff ff8e 	bl	8004c58 <std>
 8004d3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004d40:	2202      	movs	r2, #2
 8004d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d46:	2112      	movs	r1, #18
 8004d48:	f7ff bf86 	b.w	8004c58 <std>
 8004d4c:	2000041c 	.word	0x2000041c
 8004d50:	200002e4 	.word	0x200002e4
 8004d54:	08004cc5 	.word	0x08004cc5

08004d58 <__sfp_lock_acquire>:
 8004d58:	4801      	ldr	r0, [pc, #4]	@ (8004d60 <__sfp_lock_acquire+0x8>)
 8004d5a:	f000 ba4e 	b.w	80051fa <__retarget_lock_acquire_recursive>
 8004d5e:	bf00      	nop
 8004d60:	20000425 	.word	0x20000425

08004d64 <__sfp_lock_release>:
 8004d64:	4801      	ldr	r0, [pc, #4]	@ (8004d6c <__sfp_lock_release+0x8>)
 8004d66:	f000 ba49 	b.w	80051fc <__retarget_lock_release_recursive>
 8004d6a:	bf00      	nop
 8004d6c:	20000425 	.word	0x20000425

08004d70 <__sinit>:
 8004d70:	b510      	push	{r4, lr}
 8004d72:	4604      	mov	r4, r0
 8004d74:	f7ff fff0 	bl	8004d58 <__sfp_lock_acquire>
 8004d78:	6a23      	ldr	r3, [r4, #32]
 8004d7a:	b11b      	cbz	r3, 8004d84 <__sinit+0x14>
 8004d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d80:	f7ff bff0 	b.w	8004d64 <__sfp_lock_release>
 8004d84:	4b04      	ldr	r3, [pc, #16]	@ (8004d98 <__sinit+0x28>)
 8004d86:	6223      	str	r3, [r4, #32]
 8004d88:	4b04      	ldr	r3, [pc, #16]	@ (8004d9c <__sinit+0x2c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1f5      	bne.n	8004d7c <__sinit+0xc>
 8004d90:	f7ff ffc4 	bl	8004d1c <global_stdio_init.part.0>
 8004d94:	e7f2      	b.n	8004d7c <__sinit+0xc>
 8004d96:	bf00      	nop
 8004d98:	08004cdd 	.word	0x08004cdd
 8004d9c:	2000041c 	.word	0x2000041c

08004da0 <_fwalk_sglue>:
 8004da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004da4:	4607      	mov	r7, r0
 8004da6:	4688      	mov	r8, r1
 8004da8:	4614      	mov	r4, r2
 8004daa:	2600      	movs	r6, #0
 8004dac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004db0:	f1b9 0901 	subs.w	r9, r9, #1
 8004db4:	d505      	bpl.n	8004dc2 <_fwalk_sglue+0x22>
 8004db6:	6824      	ldr	r4, [r4, #0]
 8004db8:	2c00      	cmp	r4, #0
 8004dba:	d1f7      	bne.n	8004dac <_fwalk_sglue+0xc>
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dc2:	89ab      	ldrh	r3, [r5, #12]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d907      	bls.n	8004dd8 <_fwalk_sglue+0x38>
 8004dc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	d003      	beq.n	8004dd8 <_fwalk_sglue+0x38>
 8004dd0:	4629      	mov	r1, r5
 8004dd2:	4638      	mov	r0, r7
 8004dd4:	47c0      	blx	r8
 8004dd6:	4306      	orrs	r6, r0
 8004dd8:	3568      	adds	r5, #104	@ 0x68
 8004dda:	e7e9      	b.n	8004db0 <_fwalk_sglue+0x10>

08004ddc <iprintf>:
 8004ddc:	b40f      	push	{r0, r1, r2, r3}
 8004dde:	b507      	push	{r0, r1, r2, lr}
 8004de0:	4906      	ldr	r1, [pc, #24]	@ (8004dfc <iprintf+0x20>)
 8004de2:	ab04      	add	r3, sp, #16
 8004de4:	6808      	ldr	r0, [r1, #0]
 8004de6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dea:	6881      	ldr	r1, [r0, #8]
 8004dec:	9301      	str	r3, [sp, #4]
 8004dee:	f001 fe57 	bl	8006aa0 <_vfiprintf_r>
 8004df2:	b003      	add	sp, #12
 8004df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004df8:	b004      	add	sp, #16
 8004dfa:	4770      	bx	lr
 8004dfc:	20000018 	.word	0x20000018

08004e00 <_puts_r>:
 8004e00:	6a03      	ldr	r3, [r0, #32]
 8004e02:	b570      	push	{r4, r5, r6, lr}
 8004e04:	6884      	ldr	r4, [r0, #8]
 8004e06:	4605      	mov	r5, r0
 8004e08:	460e      	mov	r6, r1
 8004e0a:	b90b      	cbnz	r3, 8004e10 <_puts_r+0x10>
 8004e0c:	f7ff ffb0 	bl	8004d70 <__sinit>
 8004e10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e12:	07db      	lsls	r3, r3, #31
 8004e14:	d405      	bmi.n	8004e22 <_puts_r+0x22>
 8004e16:	89a3      	ldrh	r3, [r4, #12]
 8004e18:	0598      	lsls	r0, r3, #22
 8004e1a:	d402      	bmi.n	8004e22 <_puts_r+0x22>
 8004e1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e1e:	f000 f9ec 	bl	80051fa <__retarget_lock_acquire_recursive>
 8004e22:	89a3      	ldrh	r3, [r4, #12]
 8004e24:	0719      	lsls	r1, r3, #28
 8004e26:	d502      	bpl.n	8004e2e <_puts_r+0x2e>
 8004e28:	6923      	ldr	r3, [r4, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d135      	bne.n	8004e9a <_puts_r+0x9a>
 8004e2e:	4621      	mov	r1, r4
 8004e30:	4628      	mov	r0, r5
 8004e32:	f000 f8f9 	bl	8005028 <__swsetup_r>
 8004e36:	b380      	cbz	r0, 8004e9a <_puts_r+0x9a>
 8004e38:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004e3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e3e:	07da      	lsls	r2, r3, #31
 8004e40:	d405      	bmi.n	8004e4e <_puts_r+0x4e>
 8004e42:	89a3      	ldrh	r3, [r4, #12]
 8004e44:	059b      	lsls	r3, r3, #22
 8004e46:	d402      	bmi.n	8004e4e <_puts_r+0x4e>
 8004e48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e4a:	f000 f9d7 	bl	80051fc <__retarget_lock_release_recursive>
 8004e4e:	4628      	mov	r0, r5
 8004e50:	bd70      	pop	{r4, r5, r6, pc}
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	da04      	bge.n	8004e60 <_puts_r+0x60>
 8004e56:	69a2      	ldr	r2, [r4, #24]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	dc17      	bgt.n	8004e8c <_puts_r+0x8c>
 8004e5c:	290a      	cmp	r1, #10
 8004e5e:	d015      	beq.n	8004e8c <_puts_r+0x8c>
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	6022      	str	r2, [r4, #0]
 8004e66:	7019      	strb	r1, [r3, #0]
 8004e68:	68a3      	ldr	r3, [r4, #8]
 8004e6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	60a3      	str	r3, [r4, #8]
 8004e72:	2900      	cmp	r1, #0
 8004e74:	d1ed      	bne.n	8004e52 <_puts_r+0x52>
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	da11      	bge.n	8004e9e <_puts_r+0x9e>
 8004e7a:	4622      	mov	r2, r4
 8004e7c:	210a      	movs	r1, #10
 8004e7e:	4628      	mov	r0, r5
 8004e80:	f000 f893 	bl	8004faa <__swbuf_r>
 8004e84:	3001      	adds	r0, #1
 8004e86:	d0d7      	beq.n	8004e38 <_puts_r+0x38>
 8004e88:	250a      	movs	r5, #10
 8004e8a:	e7d7      	b.n	8004e3c <_puts_r+0x3c>
 8004e8c:	4622      	mov	r2, r4
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f000 f88b 	bl	8004faa <__swbuf_r>
 8004e94:	3001      	adds	r0, #1
 8004e96:	d1e7      	bne.n	8004e68 <_puts_r+0x68>
 8004e98:	e7ce      	b.n	8004e38 <_puts_r+0x38>
 8004e9a:	3e01      	subs	r6, #1
 8004e9c:	e7e4      	b.n	8004e68 <_puts_r+0x68>
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	6022      	str	r2, [r4, #0]
 8004ea4:	220a      	movs	r2, #10
 8004ea6:	701a      	strb	r2, [r3, #0]
 8004ea8:	e7ee      	b.n	8004e88 <_puts_r+0x88>
	...

08004eac <puts>:
 8004eac:	4b02      	ldr	r3, [pc, #8]	@ (8004eb8 <puts+0xc>)
 8004eae:	4601      	mov	r1, r0
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	f7ff bfa5 	b.w	8004e00 <_puts_r>
 8004eb6:	bf00      	nop
 8004eb8:	20000018 	.word	0x20000018

08004ebc <sniprintf>:
 8004ebc:	b40c      	push	{r2, r3}
 8004ebe:	b530      	push	{r4, r5, lr}
 8004ec0:	4b17      	ldr	r3, [pc, #92]	@ (8004f20 <sniprintf+0x64>)
 8004ec2:	1e0c      	subs	r4, r1, #0
 8004ec4:	681d      	ldr	r5, [r3, #0]
 8004ec6:	b09d      	sub	sp, #116	@ 0x74
 8004ec8:	da08      	bge.n	8004edc <sniprintf+0x20>
 8004eca:	238b      	movs	r3, #139	@ 0x8b
 8004ecc:	602b      	str	r3, [r5, #0]
 8004ece:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ed2:	b01d      	add	sp, #116	@ 0x74
 8004ed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ed8:	b002      	add	sp, #8
 8004eda:	4770      	bx	lr
 8004edc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004ee0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004ee4:	bf14      	ite	ne
 8004ee6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8004eea:	4623      	moveq	r3, r4
 8004eec:	9304      	str	r3, [sp, #16]
 8004eee:	9307      	str	r3, [sp, #28]
 8004ef0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004ef4:	9002      	str	r0, [sp, #8]
 8004ef6:	9006      	str	r0, [sp, #24]
 8004ef8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004efc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004efe:	ab21      	add	r3, sp, #132	@ 0x84
 8004f00:	a902      	add	r1, sp, #8
 8004f02:	4628      	mov	r0, r5
 8004f04:	9301      	str	r3, [sp, #4]
 8004f06:	f001 fca5 	bl	8006854 <_svfiprintf_r>
 8004f0a:	1c43      	adds	r3, r0, #1
 8004f0c:	bfbc      	itt	lt
 8004f0e:	238b      	movlt	r3, #139	@ 0x8b
 8004f10:	602b      	strlt	r3, [r5, #0]
 8004f12:	2c00      	cmp	r4, #0
 8004f14:	d0dd      	beq.n	8004ed2 <sniprintf+0x16>
 8004f16:	9b02      	ldr	r3, [sp, #8]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	701a      	strb	r2, [r3, #0]
 8004f1c:	e7d9      	b.n	8004ed2 <sniprintf+0x16>
 8004f1e:	bf00      	nop
 8004f20:	20000018 	.word	0x20000018

08004f24 <__sread>:
 8004f24:	b510      	push	{r4, lr}
 8004f26:	460c      	mov	r4, r1
 8004f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f2c:	f000 f916 	bl	800515c <_read_r>
 8004f30:	2800      	cmp	r0, #0
 8004f32:	bfab      	itete	ge
 8004f34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004f36:	89a3      	ldrhlt	r3, [r4, #12]
 8004f38:	181b      	addge	r3, r3, r0
 8004f3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004f3e:	bfac      	ite	ge
 8004f40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004f42:	81a3      	strhlt	r3, [r4, #12]
 8004f44:	bd10      	pop	{r4, pc}

08004f46 <__swrite>:
 8004f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f4a:	461f      	mov	r7, r3
 8004f4c:	898b      	ldrh	r3, [r1, #12]
 8004f4e:	05db      	lsls	r3, r3, #23
 8004f50:	4605      	mov	r5, r0
 8004f52:	460c      	mov	r4, r1
 8004f54:	4616      	mov	r6, r2
 8004f56:	d505      	bpl.n	8004f64 <__swrite+0x1e>
 8004f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f000 f8ea 	bl	8005138 <_lseek_r>
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f6e:	81a3      	strh	r3, [r4, #12]
 8004f70:	4632      	mov	r2, r6
 8004f72:	463b      	mov	r3, r7
 8004f74:	4628      	mov	r0, r5
 8004f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f7a:	f000 b901 	b.w	8005180 <_write_r>

08004f7e <__sseek>:
 8004f7e:	b510      	push	{r4, lr}
 8004f80:	460c      	mov	r4, r1
 8004f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f86:	f000 f8d7 	bl	8005138 <_lseek_r>
 8004f8a:	1c43      	adds	r3, r0, #1
 8004f8c:	89a3      	ldrh	r3, [r4, #12]
 8004f8e:	bf15      	itete	ne
 8004f90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004f92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004f96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004f9a:	81a3      	strheq	r3, [r4, #12]
 8004f9c:	bf18      	it	ne
 8004f9e:	81a3      	strhne	r3, [r4, #12]
 8004fa0:	bd10      	pop	{r4, pc}

08004fa2 <__sclose>:
 8004fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa6:	f000 b8b7 	b.w	8005118 <_close_r>

08004faa <__swbuf_r>:
 8004faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fac:	460e      	mov	r6, r1
 8004fae:	4614      	mov	r4, r2
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	b118      	cbz	r0, 8004fbc <__swbuf_r+0x12>
 8004fb4:	6a03      	ldr	r3, [r0, #32]
 8004fb6:	b90b      	cbnz	r3, 8004fbc <__swbuf_r+0x12>
 8004fb8:	f7ff feda 	bl	8004d70 <__sinit>
 8004fbc:	69a3      	ldr	r3, [r4, #24]
 8004fbe:	60a3      	str	r3, [r4, #8]
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	071a      	lsls	r2, r3, #28
 8004fc4:	d501      	bpl.n	8004fca <__swbuf_r+0x20>
 8004fc6:	6923      	ldr	r3, [r4, #16]
 8004fc8:	b943      	cbnz	r3, 8004fdc <__swbuf_r+0x32>
 8004fca:	4621      	mov	r1, r4
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f000 f82b 	bl	8005028 <__swsetup_r>
 8004fd2:	b118      	cbz	r0, 8004fdc <__swbuf_r+0x32>
 8004fd4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004fd8:	4638      	mov	r0, r7
 8004fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fdc:	6823      	ldr	r3, [r4, #0]
 8004fde:	6922      	ldr	r2, [r4, #16]
 8004fe0:	1a98      	subs	r0, r3, r2
 8004fe2:	6963      	ldr	r3, [r4, #20]
 8004fe4:	b2f6      	uxtb	r6, r6
 8004fe6:	4283      	cmp	r3, r0
 8004fe8:	4637      	mov	r7, r6
 8004fea:	dc05      	bgt.n	8004ff8 <__swbuf_r+0x4e>
 8004fec:	4621      	mov	r1, r4
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f001 fef2 	bl	8006dd8 <_fflush_r>
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	d1ed      	bne.n	8004fd4 <__swbuf_r+0x2a>
 8004ff8:	68a3      	ldr	r3, [r4, #8]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	60a3      	str	r3, [r4, #8]
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	6022      	str	r2, [r4, #0]
 8005004:	701e      	strb	r6, [r3, #0]
 8005006:	6962      	ldr	r2, [r4, #20]
 8005008:	1c43      	adds	r3, r0, #1
 800500a:	429a      	cmp	r2, r3
 800500c:	d004      	beq.n	8005018 <__swbuf_r+0x6e>
 800500e:	89a3      	ldrh	r3, [r4, #12]
 8005010:	07db      	lsls	r3, r3, #31
 8005012:	d5e1      	bpl.n	8004fd8 <__swbuf_r+0x2e>
 8005014:	2e0a      	cmp	r6, #10
 8005016:	d1df      	bne.n	8004fd8 <__swbuf_r+0x2e>
 8005018:	4621      	mov	r1, r4
 800501a:	4628      	mov	r0, r5
 800501c:	f001 fedc 	bl	8006dd8 <_fflush_r>
 8005020:	2800      	cmp	r0, #0
 8005022:	d0d9      	beq.n	8004fd8 <__swbuf_r+0x2e>
 8005024:	e7d6      	b.n	8004fd4 <__swbuf_r+0x2a>
	...

08005028 <__swsetup_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	4b29      	ldr	r3, [pc, #164]	@ (80050d0 <__swsetup_r+0xa8>)
 800502c:	4605      	mov	r5, r0
 800502e:	6818      	ldr	r0, [r3, #0]
 8005030:	460c      	mov	r4, r1
 8005032:	b118      	cbz	r0, 800503c <__swsetup_r+0x14>
 8005034:	6a03      	ldr	r3, [r0, #32]
 8005036:	b90b      	cbnz	r3, 800503c <__swsetup_r+0x14>
 8005038:	f7ff fe9a 	bl	8004d70 <__sinit>
 800503c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005040:	0719      	lsls	r1, r3, #28
 8005042:	d422      	bmi.n	800508a <__swsetup_r+0x62>
 8005044:	06da      	lsls	r2, r3, #27
 8005046:	d407      	bmi.n	8005058 <__swsetup_r+0x30>
 8005048:	2209      	movs	r2, #9
 800504a:	602a      	str	r2, [r5, #0]
 800504c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005050:	81a3      	strh	r3, [r4, #12]
 8005052:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005056:	e033      	b.n	80050c0 <__swsetup_r+0x98>
 8005058:	0758      	lsls	r0, r3, #29
 800505a:	d512      	bpl.n	8005082 <__swsetup_r+0x5a>
 800505c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800505e:	b141      	cbz	r1, 8005072 <__swsetup_r+0x4a>
 8005060:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005064:	4299      	cmp	r1, r3
 8005066:	d002      	beq.n	800506e <__swsetup_r+0x46>
 8005068:	4628      	mov	r0, r5
 800506a:	f000 ff15 	bl	8005e98 <_free_r>
 800506e:	2300      	movs	r3, #0
 8005070:	6363      	str	r3, [r4, #52]	@ 0x34
 8005072:	89a3      	ldrh	r3, [r4, #12]
 8005074:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005078:	81a3      	strh	r3, [r4, #12]
 800507a:	2300      	movs	r3, #0
 800507c:	6063      	str	r3, [r4, #4]
 800507e:	6923      	ldr	r3, [r4, #16]
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	89a3      	ldrh	r3, [r4, #12]
 8005084:	f043 0308 	orr.w	r3, r3, #8
 8005088:	81a3      	strh	r3, [r4, #12]
 800508a:	6923      	ldr	r3, [r4, #16]
 800508c:	b94b      	cbnz	r3, 80050a2 <__swsetup_r+0x7a>
 800508e:	89a3      	ldrh	r3, [r4, #12]
 8005090:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005098:	d003      	beq.n	80050a2 <__swsetup_r+0x7a>
 800509a:	4621      	mov	r1, r4
 800509c:	4628      	mov	r0, r5
 800509e:	f001 fee9 	bl	8006e74 <__smakebuf_r>
 80050a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050a6:	f013 0201 	ands.w	r2, r3, #1
 80050aa:	d00a      	beq.n	80050c2 <__swsetup_r+0x9a>
 80050ac:	2200      	movs	r2, #0
 80050ae:	60a2      	str	r2, [r4, #8]
 80050b0:	6962      	ldr	r2, [r4, #20]
 80050b2:	4252      	negs	r2, r2
 80050b4:	61a2      	str	r2, [r4, #24]
 80050b6:	6922      	ldr	r2, [r4, #16]
 80050b8:	b942      	cbnz	r2, 80050cc <__swsetup_r+0xa4>
 80050ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80050be:	d1c5      	bne.n	800504c <__swsetup_r+0x24>
 80050c0:	bd38      	pop	{r3, r4, r5, pc}
 80050c2:	0799      	lsls	r1, r3, #30
 80050c4:	bf58      	it	pl
 80050c6:	6962      	ldrpl	r2, [r4, #20]
 80050c8:	60a2      	str	r2, [r4, #8]
 80050ca:	e7f4      	b.n	80050b6 <__swsetup_r+0x8e>
 80050cc:	2000      	movs	r0, #0
 80050ce:	e7f7      	b.n	80050c0 <__swsetup_r+0x98>
 80050d0:	20000018 	.word	0x20000018

080050d4 <memset>:
 80050d4:	4402      	add	r2, r0
 80050d6:	4603      	mov	r3, r0
 80050d8:	4293      	cmp	r3, r2
 80050da:	d100      	bne.n	80050de <memset+0xa>
 80050dc:	4770      	bx	lr
 80050de:	f803 1b01 	strb.w	r1, [r3], #1
 80050e2:	e7f9      	b.n	80050d8 <memset+0x4>

080050e4 <strstr>:
 80050e4:	780a      	ldrb	r2, [r1, #0]
 80050e6:	b570      	push	{r4, r5, r6, lr}
 80050e8:	b96a      	cbnz	r2, 8005106 <strstr+0x22>
 80050ea:	bd70      	pop	{r4, r5, r6, pc}
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d109      	bne.n	8005104 <strstr+0x20>
 80050f0:	460c      	mov	r4, r1
 80050f2:	4605      	mov	r5, r0
 80050f4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0f6      	beq.n	80050ea <strstr+0x6>
 80050fc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005100:	429e      	cmp	r6, r3
 8005102:	d0f7      	beq.n	80050f4 <strstr+0x10>
 8005104:	3001      	adds	r0, #1
 8005106:	7803      	ldrb	r3, [r0, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1ef      	bne.n	80050ec <strstr+0x8>
 800510c:	4618      	mov	r0, r3
 800510e:	e7ec      	b.n	80050ea <strstr+0x6>

08005110 <_localeconv_r>:
 8005110:	4800      	ldr	r0, [pc, #0]	@ (8005114 <_localeconv_r+0x4>)
 8005112:	4770      	bx	lr
 8005114:	20000158 	.word	0x20000158

08005118 <_close_r>:
 8005118:	b538      	push	{r3, r4, r5, lr}
 800511a:	4d06      	ldr	r5, [pc, #24]	@ (8005134 <_close_r+0x1c>)
 800511c:	2300      	movs	r3, #0
 800511e:	4604      	mov	r4, r0
 8005120:	4608      	mov	r0, r1
 8005122:	602b      	str	r3, [r5, #0]
 8005124:	f7fc fc66 	bl	80019f4 <_close>
 8005128:	1c43      	adds	r3, r0, #1
 800512a:	d102      	bne.n	8005132 <_close_r+0x1a>
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	b103      	cbz	r3, 8005132 <_close_r+0x1a>
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	bd38      	pop	{r3, r4, r5, pc}
 8005134:	20000420 	.word	0x20000420

08005138 <_lseek_r>:
 8005138:	b538      	push	{r3, r4, r5, lr}
 800513a:	4d07      	ldr	r5, [pc, #28]	@ (8005158 <_lseek_r+0x20>)
 800513c:	4604      	mov	r4, r0
 800513e:	4608      	mov	r0, r1
 8005140:	4611      	mov	r1, r2
 8005142:	2200      	movs	r2, #0
 8005144:	602a      	str	r2, [r5, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	f7fc fc7b 	bl	8001a42 <_lseek>
 800514c:	1c43      	adds	r3, r0, #1
 800514e:	d102      	bne.n	8005156 <_lseek_r+0x1e>
 8005150:	682b      	ldr	r3, [r5, #0]
 8005152:	b103      	cbz	r3, 8005156 <_lseek_r+0x1e>
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	bd38      	pop	{r3, r4, r5, pc}
 8005158:	20000420 	.word	0x20000420

0800515c <_read_r>:
 800515c:	b538      	push	{r3, r4, r5, lr}
 800515e:	4d07      	ldr	r5, [pc, #28]	@ (800517c <_read_r+0x20>)
 8005160:	4604      	mov	r4, r0
 8005162:	4608      	mov	r0, r1
 8005164:	4611      	mov	r1, r2
 8005166:	2200      	movs	r2, #0
 8005168:	602a      	str	r2, [r5, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	f7fc fc09 	bl	8001982 <_read>
 8005170:	1c43      	adds	r3, r0, #1
 8005172:	d102      	bne.n	800517a <_read_r+0x1e>
 8005174:	682b      	ldr	r3, [r5, #0]
 8005176:	b103      	cbz	r3, 800517a <_read_r+0x1e>
 8005178:	6023      	str	r3, [r4, #0]
 800517a:	bd38      	pop	{r3, r4, r5, pc}
 800517c:	20000420 	.word	0x20000420

08005180 <_write_r>:
 8005180:	b538      	push	{r3, r4, r5, lr}
 8005182:	4d07      	ldr	r5, [pc, #28]	@ (80051a0 <_write_r+0x20>)
 8005184:	4604      	mov	r4, r0
 8005186:	4608      	mov	r0, r1
 8005188:	4611      	mov	r1, r2
 800518a:	2200      	movs	r2, #0
 800518c:	602a      	str	r2, [r5, #0]
 800518e:	461a      	mov	r2, r3
 8005190:	f7fc fc14 	bl	80019bc <_write>
 8005194:	1c43      	adds	r3, r0, #1
 8005196:	d102      	bne.n	800519e <_write_r+0x1e>
 8005198:	682b      	ldr	r3, [r5, #0]
 800519a:	b103      	cbz	r3, 800519e <_write_r+0x1e>
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	bd38      	pop	{r3, r4, r5, pc}
 80051a0:	20000420 	.word	0x20000420

080051a4 <__errno>:
 80051a4:	4b01      	ldr	r3, [pc, #4]	@ (80051ac <__errno+0x8>)
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	20000018 	.word	0x20000018

080051b0 <__libc_init_array>:
 80051b0:	b570      	push	{r4, r5, r6, lr}
 80051b2:	4d0d      	ldr	r5, [pc, #52]	@ (80051e8 <__libc_init_array+0x38>)
 80051b4:	4c0d      	ldr	r4, [pc, #52]	@ (80051ec <__libc_init_array+0x3c>)
 80051b6:	1b64      	subs	r4, r4, r5
 80051b8:	10a4      	asrs	r4, r4, #2
 80051ba:	2600      	movs	r6, #0
 80051bc:	42a6      	cmp	r6, r4
 80051be:	d109      	bne.n	80051d4 <__libc_init_array+0x24>
 80051c0:	4d0b      	ldr	r5, [pc, #44]	@ (80051f0 <__libc_init_array+0x40>)
 80051c2:	4c0c      	ldr	r4, [pc, #48]	@ (80051f4 <__libc_init_array+0x44>)
 80051c4:	f001 ffd2 	bl	800716c <_init>
 80051c8:	1b64      	subs	r4, r4, r5
 80051ca:	10a4      	asrs	r4, r4, #2
 80051cc:	2600      	movs	r6, #0
 80051ce:	42a6      	cmp	r6, r4
 80051d0:	d105      	bne.n	80051de <__libc_init_array+0x2e>
 80051d2:	bd70      	pop	{r4, r5, r6, pc}
 80051d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d8:	4798      	blx	r3
 80051da:	3601      	adds	r6, #1
 80051dc:	e7ee      	b.n	80051bc <__libc_init_array+0xc>
 80051de:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e2:	4798      	blx	r3
 80051e4:	3601      	adds	r6, #1
 80051e6:	e7f2      	b.n	80051ce <__libc_init_array+0x1e>
 80051e8:	08007770 	.word	0x08007770
 80051ec:	08007770 	.word	0x08007770
 80051f0:	08007770 	.word	0x08007770
 80051f4:	08007774 	.word	0x08007774

080051f8 <__retarget_lock_init_recursive>:
 80051f8:	4770      	bx	lr

080051fa <__retarget_lock_acquire_recursive>:
 80051fa:	4770      	bx	lr

080051fc <__retarget_lock_release_recursive>:
 80051fc:	4770      	bx	lr

080051fe <quorem>:
 80051fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005202:	6903      	ldr	r3, [r0, #16]
 8005204:	690c      	ldr	r4, [r1, #16]
 8005206:	42a3      	cmp	r3, r4
 8005208:	4607      	mov	r7, r0
 800520a:	db7e      	blt.n	800530a <quorem+0x10c>
 800520c:	3c01      	subs	r4, #1
 800520e:	f101 0814 	add.w	r8, r1, #20
 8005212:	00a3      	lsls	r3, r4, #2
 8005214:	f100 0514 	add.w	r5, r0, #20
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800521e:	9301      	str	r3, [sp, #4]
 8005220:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005224:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005228:	3301      	adds	r3, #1
 800522a:	429a      	cmp	r2, r3
 800522c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005230:	fbb2 f6f3 	udiv	r6, r2, r3
 8005234:	d32e      	bcc.n	8005294 <quorem+0x96>
 8005236:	f04f 0a00 	mov.w	sl, #0
 800523a:	46c4      	mov	ip, r8
 800523c:	46ae      	mov	lr, r5
 800523e:	46d3      	mov	fp, sl
 8005240:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005244:	b298      	uxth	r0, r3
 8005246:	fb06 a000 	mla	r0, r6, r0, sl
 800524a:	0c02      	lsrs	r2, r0, #16
 800524c:	0c1b      	lsrs	r3, r3, #16
 800524e:	fb06 2303 	mla	r3, r6, r3, r2
 8005252:	f8de 2000 	ldr.w	r2, [lr]
 8005256:	b280      	uxth	r0, r0
 8005258:	b292      	uxth	r2, r2
 800525a:	1a12      	subs	r2, r2, r0
 800525c:	445a      	add	r2, fp
 800525e:	f8de 0000 	ldr.w	r0, [lr]
 8005262:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005266:	b29b      	uxth	r3, r3
 8005268:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800526c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005270:	b292      	uxth	r2, r2
 8005272:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005276:	45e1      	cmp	r9, ip
 8005278:	f84e 2b04 	str.w	r2, [lr], #4
 800527c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005280:	d2de      	bcs.n	8005240 <quorem+0x42>
 8005282:	9b00      	ldr	r3, [sp, #0]
 8005284:	58eb      	ldr	r3, [r5, r3]
 8005286:	b92b      	cbnz	r3, 8005294 <quorem+0x96>
 8005288:	9b01      	ldr	r3, [sp, #4]
 800528a:	3b04      	subs	r3, #4
 800528c:	429d      	cmp	r5, r3
 800528e:	461a      	mov	r2, r3
 8005290:	d32f      	bcc.n	80052f2 <quorem+0xf4>
 8005292:	613c      	str	r4, [r7, #16]
 8005294:	4638      	mov	r0, r7
 8005296:	f001 f979 	bl	800658c <__mcmp>
 800529a:	2800      	cmp	r0, #0
 800529c:	db25      	blt.n	80052ea <quorem+0xec>
 800529e:	4629      	mov	r1, r5
 80052a0:	2000      	movs	r0, #0
 80052a2:	f858 2b04 	ldr.w	r2, [r8], #4
 80052a6:	f8d1 c000 	ldr.w	ip, [r1]
 80052aa:	fa1f fe82 	uxth.w	lr, r2
 80052ae:	fa1f f38c 	uxth.w	r3, ip
 80052b2:	eba3 030e 	sub.w	r3, r3, lr
 80052b6:	4403      	add	r3, r0
 80052b8:	0c12      	lsrs	r2, r2, #16
 80052ba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80052be:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052c8:	45c1      	cmp	r9, r8
 80052ca:	f841 3b04 	str.w	r3, [r1], #4
 80052ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 80052d2:	d2e6      	bcs.n	80052a2 <quorem+0xa4>
 80052d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052dc:	b922      	cbnz	r2, 80052e8 <quorem+0xea>
 80052de:	3b04      	subs	r3, #4
 80052e0:	429d      	cmp	r5, r3
 80052e2:	461a      	mov	r2, r3
 80052e4:	d30b      	bcc.n	80052fe <quorem+0x100>
 80052e6:	613c      	str	r4, [r7, #16]
 80052e8:	3601      	adds	r6, #1
 80052ea:	4630      	mov	r0, r6
 80052ec:	b003      	add	sp, #12
 80052ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f2:	6812      	ldr	r2, [r2, #0]
 80052f4:	3b04      	subs	r3, #4
 80052f6:	2a00      	cmp	r2, #0
 80052f8:	d1cb      	bne.n	8005292 <quorem+0x94>
 80052fa:	3c01      	subs	r4, #1
 80052fc:	e7c6      	b.n	800528c <quorem+0x8e>
 80052fe:	6812      	ldr	r2, [r2, #0]
 8005300:	3b04      	subs	r3, #4
 8005302:	2a00      	cmp	r2, #0
 8005304:	d1ef      	bne.n	80052e6 <quorem+0xe8>
 8005306:	3c01      	subs	r4, #1
 8005308:	e7ea      	b.n	80052e0 <quorem+0xe2>
 800530a:	2000      	movs	r0, #0
 800530c:	e7ee      	b.n	80052ec <quorem+0xee>
	...

08005310 <_dtoa_r>:
 8005310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005314:	69c7      	ldr	r7, [r0, #28]
 8005316:	b099      	sub	sp, #100	@ 0x64
 8005318:	ed8d 0b02 	vstr	d0, [sp, #8]
 800531c:	ec55 4b10 	vmov	r4, r5, d0
 8005320:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005322:	9109      	str	r1, [sp, #36]	@ 0x24
 8005324:	4683      	mov	fp, r0
 8005326:	920e      	str	r2, [sp, #56]	@ 0x38
 8005328:	9313      	str	r3, [sp, #76]	@ 0x4c
 800532a:	b97f      	cbnz	r7, 800534c <_dtoa_r+0x3c>
 800532c:	2010      	movs	r0, #16
 800532e:	f000 fdfd 	bl	8005f2c <malloc>
 8005332:	4602      	mov	r2, r0
 8005334:	f8cb 001c 	str.w	r0, [fp, #28]
 8005338:	b920      	cbnz	r0, 8005344 <_dtoa_r+0x34>
 800533a:	4ba7      	ldr	r3, [pc, #668]	@ (80055d8 <_dtoa_r+0x2c8>)
 800533c:	21ef      	movs	r1, #239	@ 0xef
 800533e:	48a7      	ldr	r0, [pc, #668]	@ (80055dc <_dtoa_r+0x2cc>)
 8005340:	f001 fe2e 	bl	8006fa0 <__assert_func>
 8005344:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005348:	6007      	str	r7, [r0, #0]
 800534a:	60c7      	str	r7, [r0, #12]
 800534c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005350:	6819      	ldr	r1, [r3, #0]
 8005352:	b159      	cbz	r1, 800536c <_dtoa_r+0x5c>
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	604a      	str	r2, [r1, #4]
 8005358:	2301      	movs	r3, #1
 800535a:	4093      	lsls	r3, r2
 800535c:	608b      	str	r3, [r1, #8]
 800535e:	4658      	mov	r0, fp
 8005360:	f000 feda 	bl	8006118 <_Bfree>
 8005364:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	1e2b      	subs	r3, r5, #0
 800536e:	bfb9      	ittee	lt
 8005370:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005374:	9303      	strlt	r3, [sp, #12]
 8005376:	2300      	movge	r3, #0
 8005378:	6033      	strge	r3, [r6, #0]
 800537a:	9f03      	ldr	r7, [sp, #12]
 800537c:	4b98      	ldr	r3, [pc, #608]	@ (80055e0 <_dtoa_r+0x2d0>)
 800537e:	bfbc      	itt	lt
 8005380:	2201      	movlt	r2, #1
 8005382:	6032      	strlt	r2, [r6, #0]
 8005384:	43bb      	bics	r3, r7
 8005386:	d112      	bne.n	80053ae <_dtoa_r+0x9e>
 8005388:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800538a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005394:	4323      	orrs	r3, r4
 8005396:	f000 854d 	beq.w	8005e34 <_dtoa_r+0xb24>
 800539a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800539c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80055f4 <_dtoa_r+0x2e4>
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 854f 	beq.w	8005e44 <_dtoa_r+0xb34>
 80053a6:	f10a 0303 	add.w	r3, sl, #3
 80053aa:	f000 bd49 	b.w	8005e40 <_dtoa_r+0xb30>
 80053ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80053b2:	2200      	movs	r2, #0
 80053b4:	ec51 0b17 	vmov	r0, r1, d7
 80053b8:	2300      	movs	r3, #0
 80053ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80053be:	f7fb fb8b 	bl	8000ad8 <__aeabi_dcmpeq>
 80053c2:	4680      	mov	r8, r0
 80053c4:	b158      	cbz	r0, 80053de <_dtoa_r+0xce>
 80053c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80053c8:	2301      	movs	r3, #1
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80053ce:	b113      	cbz	r3, 80053d6 <_dtoa_r+0xc6>
 80053d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80053d2:	4b84      	ldr	r3, [pc, #528]	@ (80055e4 <_dtoa_r+0x2d4>)
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80055f8 <_dtoa_r+0x2e8>
 80053da:	f000 bd33 	b.w	8005e44 <_dtoa_r+0xb34>
 80053de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80053e2:	aa16      	add	r2, sp, #88	@ 0x58
 80053e4:	a917      	add	r1, sp, #92	@ 0x5c
 80053e6:	4658      	mov	r0, fp
 80053e8:	f001 f980 	bl	80066ec <__d2b>
 80053ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80053f0:	4681      	mov	r9, r0
 80053f2:	2e00      	cmp	r6, #0
 80053f4:	d077      	beq.n	80054e6 <_dtoa_r+0x1d6>
 80053f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80053fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005404:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005408:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800540c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005410:	4619      	mov	r1, r3
 8005412:	2200      	movs	r2, #0
 8005414:	4b74      	ldr	r3, [pc, #464]	@ (80055e8 <_dtoa_r+0x2d8>)
 8005416:	f7fa ff3f 	bl	8000298 <__aeabi_dsub>
 800541a:	a369      	add	r3, pc, #420	@ (adr r3, 80055c0 <_dtoa_r+0x2b0>)
 800541c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005420:	f7fb f8f2 	bl	8000608 <__aeabi_dmul>
 8005424:	a368      	add	r3, pc, #416	@ (adr r3, 80055c8 <_dtoa_r+0x2b8>)
 8005426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542a:	f7fa ff37 	bl	800029c <__adddf3>
 800542e:	4604      	mov	r4, r0
 8005430:	4630      	mov	r0, r6
 8005432:	460d      	mov	r5, r1
 8005434:	f7fb f87e 	bl	8000534 <__aeabi_i2d>
 8005438:	a365      	add	r3, pc, #404	@ (adr r3, 80055d0 <_dtoa_r+0x2c0>)
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	f7fb f8e3 	bl	8000608 <__aeabi_dmul>
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	4620      	mov	r0, r4
 8005448:	4629      	mov	r1, r5
 800544a:	f7fa ff27 	bl	800029c <__adddf3>
 800544e:	4604      	mov	r4, r0
 8005450:	460d      	mov	r5, r1
 8005452:	f7fb fb89 	bl	8000b68 <__aeabi_d2iz>
 8005456:	2200      	movs	r2, #0
 8005458:	4607      	mov	r7, r0
 800545a:	2300      	movs	r3, #0
 800545c:	4620      	mov	r0, r4
 800545e:	4629      	mov	r1, r5
 8005460:	f7fb fb44 	bl	8000aec <__aeabi_dcmplt>
 8005464:	b140      	cbz	r0, 8005478 <_dtoa_r+0x168>
 8005466:	4638      	mov	r0, r7
 8005468:	f7fb f864 	bl	8000534 <__aeabi_i2d>
 800546c:	4622      	mov	r2, r4
 800546e:	462b      	mov	r3, r5
 8005470:	f7fb fb32 	bl	8000ad8 <__aeabi_dcmpeq>
 8005474:	b900      	cbnz	r0, 8005478 <_dtoa_r+0x168>
 8005476:	3f01      	subs	r7, #1
 8005478:	2f16      	cmp	r7, #22
 800547a:	d851      	bhi.n	8005520 <_dtoa_r+0x210>
 800547c:	4b5b      	ldr	r3, [pc, #364]	@ (80055ec <_dtoa_r+0x2dc>)
 800547e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005486:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800548a:	f7fb fb2f 	bl	8000aec <__aeabi_dcmplt>
 800548e:	2800      	cmp	r0, #0
 8005490:	d048      	beq.n	8005524 <_dtoa_r+0x214>
 8005492:	3f01      	subs	r7, #1
 8005494:	2300      	movs	r3, #0
 8005496:	9312      	str	r3, [sp, #72]	@ 0x48
 8005498:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800549a:	1b9b      	subs	r3, r3, r6
 800549c:	1e5a      	subs	r2, r3, #1
 800549e:	bf44      	itt	mi
 80054a0:	f1c3 0801 	rsbmi	r8, r3, #1
 80054a4:	2300      	movmi	r3, #0
 80054a6:	9208      	str	r2, [sp, #32]
 80054a8:	bf54      	ite	pl
 80054aa:	f04f 0800 	movpl.w	r8, #0
 80054ae:	9308      	strmi	r3, [sp, #32]
 80054b0:	2f00      	cmp	r7, #0
 80054b2:	db39      	blt.n	8005528 <_dtoa_r+0x218>
 80054b4:	9b08      	ldr	r3, [sp, #32]
 80054b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80054b8:	443b      	add	r3, r7
 80054ba:	9308      	str	r3, [sp, #32]
 80054bc:	2300      	movs	r3, #0
 80054be:	930a      	str	r3, [sp, #40]	@ 0x28
 80054c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054c2:	2b09      	cmp	r3, #9
 80054c4:	d864      	bhi.n	8005590 <_dtoa_r+0x280>
 80054c6:	2b05      	cmp	r3, #5
 80054c8:	bfc4      	itt	gt
 80054ca:	3b04      	subgt	r3, #4
 80054cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80054ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054d0:	f1a3 0302 	sub.w	r3, r3, #2
 80054d4:	bfcc      	ite	gt
 80054d6:	2400      	movgt	r4, #0
 80054d8:	2401      	movle	r4, #1
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d863      	bhi.n	80055a6 <_dtoa_r+0x296>
 80054de:	e8df f003 	tbb	[pc, r3]
 80054e2:	372a      	.short	0x372a
 80054e4:	5535      	.short	0x5535
 80054e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80054ea:	441e      	add	r6, r3
 80054ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	bfc1      	itttt	gt
 80054f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80054f8:	409f      	lslgt	r7, r3
 80054fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80054fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005502:	bfd6      	itet	le
 8005504:	f1c3 0320 	rsble	r3, r3, #32
 8005508:	ea47 0003 	orrgt.w	r0, r7, r3
 800550c:	fa04 f003 	lslle.w	r0, r4, r3
 8005510:	f7fb f800 	bl	8000514 <__aeabi_ui2d>
 8005514:	2201      	movs	r2, #1
 8005516:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800551a:	3e01      	subs	r6, #1
 800551c:	9214      	str	r2, [sp, #80]	@ 0x50
 800551e:	e777      	b.n	8005410 <_dtoa_r+0x100>
 8005520:	2301      	movs	r3, #1
 8005522:	e7b8      	b.n	8005496 <_dtoa_r+0x186>
 8005524:	9012      	str	r0, [sp, #72]	@ 0x48
 8005526:	e7b7      	b.n	8005498 <_dtoa_r+0x188>
 8005528:	427b      	negs	r3, r7
 800552a:	930a      	str	r3, [sp, #40]	@ 0x28
 800552c:	2300      	movs	r3, #0
 800552e:	eba8 0807 	sub.w	r8, r8, r7
 8005532:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005534:	e7c4      	b.n	80054c0 <_dtoa_r+0x1b0>
 8005536:	2300      	movs	r3, #0
 8005538:	930b      	str	r3, [sp, #44]	@ 0x2c
 800553a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800553c:	2b00      	cmp	r3, #0
 800553e:	dc35      	bgt.n	80055ac <_dtoa_r+0x29c>
 8005540:	2301      	movs	r3, #1
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	9307      	str	r3, [sp, #28]
 8005546:	461a      	mov	r2, r3
 8005548:	920e      	str	r2, [sp, #56]	@ 0x38
 800554a:	e00b      	b.n	8005564 <_dtoa_r+0x254>
 800554c:	2301      	movs	r3, #1
 800554e:	e7f3      	b.n	8005538 <_dtoa_r+0x228>
 8005550:	2300      	movs	r3, #0
 8005552:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005554:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005556:	18fb      	adds	r3, r7, r3
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	3301      	adds	r3, #1
 800555c:	2b01      	cmp	r3, #1
 800555e:	9307      	str	r3, [sp, #28]
 8005560:	bfb8      	it	lt
 8005562:	2301      	movlt	r3, #1
 8005564:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005568:	2100      	movs	r1, #0
 800556a:	2204      	movs	r2, #4
 800556c:	f102 0514 	add.w	r5, r2, #20
 8005570:	429d      	cmp	r5, r3
 8005572:	d91f      	bls.n	80055b4 <_dtoa_r+0x2a4>
 8005574:	6041      	str	r1, [r0, #4]
 8005576:	4658      	mov	r0, fp
 8005578:	f000 fd8e 	bl	8006098 <_Balloc>
 800557c:	4682      	mov	sl, r0
 800557e:	2800      	cmp	r0, #0
 8005580:	d13c      	bne.n	80055fc <_dtoa_r+0x2ec>
 8005582:	4b1b      	ldr	r3, [pc, #108]	@ (80055f0 <_dtoa_r+0x2e0>)
 8005584:	4602      	mov	r2, r0
 8005586:	f240 11af 	movw	r1, #431	@ 0x1af
 800558a:	e6d8      	b.n	800533e <_dtoa_r+0x2e>
 800558c:	2301      	movs	r3, #1
 800558e:	e7e0      	b.n	8005552 <_dtoa_r+0x242>
 8005590:	2401      	movs	r4, #1
 8005592:	2300      	movs	r3, #0
 8005594:	9309      	str	r3, [sp, #36]	@ 0x24
 8005596:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005598:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	9307      	str	r3, [sp, #28]
 80055a0:	2200      	movs	r2, #0
 80055a2:	2312      	movs	r3, #18
 80055a4:	e7d0      	b.n	8005548 <_dtoa_r+0x238>
 80055a6:	2301      	movs	r3, #1
 80055a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055aa:	e7f5      	b.n	8005598 <_dtoa_r+0x288>
 80055ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	9307      	str	r3, [sp, #28]
 80055b2:	e7d7      	b.n	8005564 <_dtoa_r+0x254>
 80055b4:	3101      	adds	r1, #1
 80055b6:	0052      	lsls	r2, r2, #1
 80055b8:	e7d8      	b.n	800556c <_dtoa_r+0x25c>
 80055ba:	bf00      	nop
 80055bc:	f3af 8000 	nop.w
 80055c0:	636f4361 	.word	0x636f4361
 80055c4:	3fd287a7 	.word	0x3fd287a7
 80055c8:	8b60c8b3 	.word	0x8b60c8b3
 80055cc:	3fc68a28 	.word	0x3fc68a28
 80055d0:	509f79fb 	.word	0x509f79fb
 80055d4:	3fd34413 	.word	0x3fd34413
 80055d8:	08007435 	.word	0x08007435
 80055dc:	0800744c 	.word	0x0800744c
 80055e0:	7ff00000 	.word	0x7ff00000
 80055e4:	08007405 	.word	0x08007405
 80055e8:	3ff80000 	.word	0x3ff80000
 80055ec:	08007548 	.word	0x08007548
 80055f0:	080074a4 	.word	0x080074a4
 80055f4:	08007431 	.word	0x08007431
 80055f8:	08007404 	.word	0x08007404
 80055fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005600:	6018      	str	r0, [r3, #0]
 8005602:	9b07      	ldr	r3, [sp, #28]
 8005604:	2b0e      	cmp	r3, #14
 8005606:	f200 80a4 	bhi.w	8005752 <_dtoa_r+0x442>
 800560a:	2c00      	cmp	r4, #0
 800560c:	f000 80a1 	beq.w	8005752 <_dtoa_r+0x442>
 8005610:	2f00      	cmp	r7, #0
 8005612:	dd33      	ble.n	800567c <_dtoa_r+0x36c>
 8005614:	4bad      	ldr	r3, [pc, #692]	@ (80058cc <_dtoa_r+0x5bc>)
 8005616:	f007 020f 	and.w	r2, r7, #15
 800561a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800561e:	ed93 7b00 	vldr	d7, [r3]
 8005622:	05f8      	lsls	r0, r7, #23
 8005624:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005628:	ea4f 1427 	mov.w	r4, r7, asr #4
 800562c:	d516      	bpl.n	800565c <_dtoa_r+0x34c>
 800562e:	4ba8      	ldr	r3, [pc, #672]	@ (80058d0 <_dtoa_r+0x5c0>)
 8005630:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005634:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005638:	f7fb f910 	bl	800085c <__aeabi_ddiv>
 800563c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005640:	f004 040f 	and.w	r4, r4, #15
 8005644:	2603      	movs	r6, #3
 8005646:	4da2      	ldr	r5, [pc, #648]	@ (80058d0 <_dtoa_r+0x5c0>)
 8005648:	b954      	cbnz	r4, 8005660 <_dtoa_r+0x350>
 800564a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800564e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005652:	f7fb f903 	bl	800085c <__aeabi_ddiv>
 8005656:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800565a:	e028      	b.n	80056ae <_dtoa_r+0x39e>
 800565c:	2602      	movs	r6, #2
 800565e:	e7f2      	b.n	8005646 <_dtoa_r+0x336>
 8005660:	07e1      	lsls	r1, r4, #31
 8005662:	d508      	bpl.n	8005676 <_dtoa_r+0x366>
 8005664:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005668:	e9d5 2300 	ldrd	r2, r3, [r5]
 800566c:	f7fa ffcc 	bl	8000608 <__aeabi_dmul>
 8005670:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005674:	3601      	adds	r6, #1
 8005676:	1064      	asrs	r4, r4, #1
 8005678:	3508      	adds	r5, #8
 800567a:	e7e5      	b.n	8005648 <_dtoa_r+0x338>
 800567c:	f000 80d2 	beq.w	8005824 <_dtoa_r+0x514>
 8005680:	427c      	negs	r4, r7
 8005682:	4b92      	ldr	r3, [pc, #584]	@ (80058cc <_dtoa_r+0x5bc>)
 8005684:	4d92      	ldr	r5, [pc, #584]	@ (80058d0 <_dtoa_r+0x5c0>)
 8005686:	f004 020f 	and.w	r2, r4, #15
 800568a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800568e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005692:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005696:	f7fa ffb7 	bl	8000608 <__aeabi_dmul>
 800569a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800569e:	1124      	asrs	r4, r4, #4
 80056a0:	2300      	movs	r3, #0
 80056a2:	2602      	movs	r6, #2
 80056a4:	2c00      	cmp	r4, #0
 80056a6:	f040 80b2 	bne.w	800580e <_dtoa_r+0x4fe>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1d3      	bne.n	8005656 <_dtoa_r+0x346>
 80056ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80056b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 80b7 	beq.w	8005828 <_dtoa_r+0x518>
 80056ba:	4b86      	ldr	r3, [pc, #536]	@ (80058d4 <_dtoa_r+0x5c4>)
 80056bc:	2200      	movs	r2, #0
 80056be:	4620      	mov	r0, r4
 80056c0:	4629      	mov	r1, r5
 80056c2:	f7fb fa13 	bl	8000aec <__aeabi_dcmplt>
 80056c6:	2800      	cmp	r0, #0
 80056c8:	f000 80ae 	beq.w	8005828 <_dtoa_r+0x518>
 80056cc:	9b07      	ldr	r3, [sp, #28]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 80aa 	beq.w	8005828 <_dtoa_r+0x518>
 80056d4:	9b00      	ldr	r3, [sp, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	dd37      	ble.n	800574a <_dtoa_r+0x43a>
 80056da:	1e7b      	subs	r3, r7, #1
 80056dc:	9304      	str	r3, [sp, #16]
 80056de:	4620      	mov	r0, r4
 80056e0:	4b7d      	ldr	r3, [pc, #500]	@ (80058d8 <_dtoa_r+0x5c8>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	4629      	mov	r1, r5
 80056e6:	f7fa ff8f 	bl	8000608 <__aeabi_dmul>
 80056ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056ee:	9c00      	ldr	r4, [sp, #0]
 80056f0:	3601      	adds	r6, #1
 80056f2:	4630      	mov	r0, r6
 80056f4:	f7fa ff1e 	bl	8000534 <__aeabi_i2d>
 80056f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056fc:	f7fa ff84 	bl	8000608 <__aeabi_dmul>
 8005700:	4b76      	ldr	r3, [pc, #472]	@ (80058dc <_dtoa_r+0x5cc>)
 8005702:	2200      	movs	r2, #0
 8005704:	f7fa fdca 	bl	800029c <__adddf3>
 8005708:	4605      	mov	r5, r0
 800570a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800570e:	2c00      	cmp	r4, #0
 8005710:	f040 808d 	bne.w	800582e <_dtoa_r+0x51e>
 8005714:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005718:	4b71      	ldr	r3, [pc, #452]	@ (80058e0 <_dtoa_r+0x5d0>)
 800571a:	2200      	movs	r2, #0
 800571c:	f7fa fdbc 	bl	8000298 <__aeabi_dsub>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005728:	462a      	mov	r2, r5
 800572a:	4633      	mov	r3, r6
 800572c:	f7fb f9fc 	bl	8000b28 <__aeabi_dcmpgt>
 8005730:	2800      	cmp	r0, #0
 8005732:	f040 828b 	bne.w	8005c4c <_dtoa_r+0x93c>
 8005736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800573a:	462a      	mov	r2, r5
 800573c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005740:	f7fb f9d4 	bl	8000aec <__aeabi_dcmplt>
 8005744:	2800      	cmp	r0, #0
 8005746:	f040 8128 	bne.w	800599a <_dtoa_r+0x68a>
 800574a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800574e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005752:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005754:	2b00      	cmp	r3, #0
 8005756:	f2c0 815a 	blt.w	8005a0e <_dtoa_r+0x6fe>
 800575a:	2f0e      	cmp	r7, #14
 800575c:	f300 8157 	bgt.w	8005a0e <_dtoa_r+0x6fe>
 8005760:	4b5a      	ldr	r3, [pc, #360]	@ (80058cc <_dtoa_r+0x5bc>)
 8005762:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005766:	ed93 7b00 	vldr	d7, [r3]
 800576a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800576c:	2b00      	cmp	r3, #0
 800576e:	ed8d 7b00 	vstr	d7, [sp]
 8005772:	da03      	bge.n	800577c <_dtoa_r+0x46c>
 8005774:	9b07      	ldr	r3, [sp, #28]
 8005776:	2b00      	cmp	r3, #0
 8005778:	f340 8101 	ble.w	800597e <_dtoa_r+0x66e>
 800577c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005780:	4656      	mov	r6, sl
 8005782:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005786:	4620      	mov	r0, r4
 8005788:	4629      	mov	r1, r5
 800578a:	f7fb f867 	bl	800085c <__aeabi_ddiv>
 800578e:	f7fb f9eb 	bl	8000b68 <__aeabi_d2iz>
 8005792:	4680      	mov	r8, r0
 8005794:	f7fa fece 	bl	8000534 <__aeabi_i2d>
 8005798:	e9dd 2300 	ldrd	r2, r3, [sp]
 800579c:	f7fa ff34 	bl	8000608 <__aeabi_dmul>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4620      	mov	r0, r4
 80057a6:	4629      	mov	r1, r5
 80057a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80057ac:	f7fa fd74 	bl	8000298 <__aeabi_dsub>
 80057b0:	f806 4b01 	strb.w	r4, [r6], #1
 80057b4:	9d07      	ldr	r5, [sp, #28]
 80057b6:	eba6 040a 	sub.w	r4, r6, sl
 80057ba:	42a5      	cmp	r5, r4
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	f040 8117 	bne.w	80059f2 <_dtoa_r+0x6e2>
 80057c4:	f7fa fd6a 	bl	800029c <__adddf3>
 80057c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057cc:	4604      	mov	r4, r0
 80057ce:	460d      	mov	r5, r1
 80057d0:	f7fb f9aa 	bl	8000b28 <__aeabi_dcmpgt>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	f040 80f9 	bne.w	80059cc <_dtoa_r+0x6bc>
 80057da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057de:	4620      	mov	r0, r4
 80057e0:	4629      	mov	r1, r5
 80057e2:	f7fb f979 	bl	8000ad8 <__aeabi_dcmpeq>
 80057e6:	b118      	cbz	r0, 80057f0 <_dtoa_r+0x4e0>
 80057e8:	f018 0f01 	tst.w	r8, #1
 80057ec:	f040 80ee 	bne.w	80059cc <_dtoa_r+0x6bc>
 80057f0:	4649      	mov	r1, r9
 80057f2:	4658      	mov	r0, fp
 80057f4:	f000 fc90 	bl	8006118 <_Bfree>
 80057f8:	2300      	movs	r3, #0
 80057fa:	7033      	strb	r3, [r6, #0]
 80057fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80057fe:	3701      	adds	r7, #1
 8005800:	601f      	str	r7, [r3, #0]
 8005802:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 831d 	beq.w	8005e44 <_dtoa_r+0xb34>
 800580a:	601e      	str	r6, [r3, #0]
 800580c:	e31a      	b.n	8005e44 <_dtoa_r+0xb34>
 800580e:	07e2      	lsls	r2, r4, #31
 8005810:	d505      	bpl.n	800581e <_dtoa_r+0x50e>
 8005812:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005816:	f7fa fef7 	bl	8000608 <__aeabi_dmul>
 800581a:	3601      	adds	r6, #1
 800581c:	2301      	movs	r3, #1
 800581e:	1064      	asrs	r4, r4, #1
 8005820:	3508      	adds	r5, #8
 8005822:	e73f      	b.n	80056a4 <_dtoa_r+0x394>
 8005824:	2602      	movs	r6, #2
 8005826:	e742      	b.n	80056ae <_dtoa_r+0x39e>
 8005828:	9c07      	ldr	r4, [sp, #28]
 800582a:	9704      	str	r7, [sp, #16]
 800582c:	e761      	b.n	80056f2 <_dtoa_r+0x3e2>
 800582e:	4b27      	ldr	r3, [pc, #156]	@ (80058cc <_dtoa_r+0x5bc>)
 8005830:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005832:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005836:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800583a:	4454      	add	r4, sl
 800583c:	2900      	cmp	r1, #0
 800583e:	d053      	beq.n	80058e8 <_dtoa_r+0x5d8>
 8005840:	4928      	ldr	r1, [pc, #160]	@ (80058e4 <_dtoa_r+0x5d4>)
 8005842:	2000      	movs	r0, #0
 8005844:	f7fb f80a 	bl	800085c <__aeabi_ddiv>
 8005848:	4633      	mov	r3, r6
 800584a:	462a      	mov	r2, r5
 800584c:	f7fa fd24 	bl	8000298 <__aeabi_dsub>
 8005850:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005854:	4656      	mov	r6, sl
 8005856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800585a:	f7fb f985 	bl	8000b68 <__aeabi_d2iz>
 800585e:	4605      	mov	r5, r0
 8005860:	f7fa fe68 	bl	8000534 <__aeabi_i2d>
 8005864:	4602      	mov	r2, r0
 8005866:	460b      	mov	r3, r1
 8005868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800586c:	f7fa fd14 	bl	8000298 <__aeabi_dsub>
 8005870:	3530      	adds	r5, #48	@ 0x30
 8005872:	4602      	mov	r2, r0
 8005874:	460b      	mov	r3, r1
 8005876:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800587a:	f806 5b01 	strb.w	r5, [r6], #1
 800587e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005882:	f7fb f933 	bl	8000aec <__aeabi_dcmplt>
 8005886:	2800      	cmp	r0, #0
 8005888:	d171      	bne.n	800596e <_dtoa_r+0x65e>
 800588a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800588e:	4911      	ldr	r1, [pc, #68]	@ (80058d4 <_dtoa_r+0x5c4>)
 8005890:	2000      	movs	r0, #0
 8005892:	f7fa fd01 	bl	8000298 <__aeabi_dsub>
 8005896:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800589a:	f7fb f927 	bl	8000aec <__aeabi_dcmplt>
 800589e:	2800      	cmp	r0, #0
 80058a0:	f040 8095 	bne.w	80059ce <_dtoa_r+0x6be>
 80058a4:	42a6      	cmp	r6, r4
 80058a6:	f43f af50 	beq.w	800574a <_dtoa_r+0x43a>
 80058aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80058ae:	4b0a      	ldr	r3, [pc, #40]	@ (80058d8 <_dtoa_r+0x5c8>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	f7fa fea9 	bl	8000608 <__aeabi_dmul>
 80058b6:	4b08      	ldr	r3, [pc, #32]	@ (80058d8 <_dtoa_r+0x5c8>)
 80058b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80058bc:	2200      	movs	r2, #0
 80058be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058c2:	f7fa fea1 	bl	8000608 <__aeabi_dmul>
 80058c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058ca:	e7c4      	b.n	8005856 <_dtoa_r+0x546>
 80058cc:	08007548 	.word	0x08007548
 80058d0:	08007520 	.word	0x08007520
 80058d4:	3ff00000 	.word	0x3ff00000
 80058d8:	40240000 	.word	0x40240000
 80058dc:	401c0000 	.word	0x401c0000
 80058e0:	40140000 	.word	0x40140000
 80058e4:	3fe00000 	.word	0x3fe00000
 80058e8:	4631      	mov	r1, r6
 80058ea:	4628      	mov	r0, r5
 80058ec:	f7fa fe8c 	bl	8000608 <__aeabi_dmul>
 80058f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80058f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80058f6:	4656      	mov	r6, sl
 80058f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058fc:	f7fb f934 	bl	8000b68 <__aeabi_d2iz>
 8005900:	4605      	mov	r5, r0
 8005902:	f7fa fe17 	bl	8000534 <__aeabi_i2d>
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800590e:	f7fa fcc3 	bl	8000298 <__aeabi_dsub>
 8005912:	3530      	adds	r5, #48	@ 0x30
 8005914:	f806 5b01 	strb.w	r5, [r6], #1
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	42a6      	cmp	r6, r4
 800591e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005922:	f04f 0200 	mov.w	r2, #0
 8005926:	d124      	bne.n	8005972 <_dtoa_r+0x662>
 8005928:	4bac      	ldr	r3, [pc, #688]	@ (8005bdc <_dtoa_r+0x8cc>)
 800592a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800592e:	f7fa fcb5 	bl	800029c <__adddf3>
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800593a:	f7fb f8f5 	bl	8000b28 <__aeabi_dcmpgt>
 800593e:	2800      	cmp	r0, #0
 8005940:	d145      	bne.n	80059ce <_dtoa_r+0x6be>
 8005942:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005946:	49a5      	ldr	r1, [pc, #660]	@ (8005bdc <_dtoa_r+0x8cc>)
 8005948:	2000      	movs	r0, #0
 800594a:	f7fa fca5 	bl	8000298 <__aeabi_dsub>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005956:	f7fb f8c9 	bl	8000aec <__aeabi_dcmplt>
 800595a:	2800      	cmp	r0, #0
 800595c:	f43f aef5 	beq.w	800574a <_dtoa_r+0x43a>
 8005960:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005962:	1e73      	subs	r3, r6, #1
 8005964:	9315      	str	r3, [sp, #84]	@ 0x54
 8005966:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800596a:	2b30      	cmp	r3, #48	@ 0x30
 800596c:	d0f8      	beq.n	8005960 <_dtoa_r+0x650>
 800596e:	9f04      	ldr	r7, [sp, #16]
 8005970:	e73e      	b.n	80057f0 <_dtoa_r+0x4e0>
 8005972:	4b9b      	ldr	r3, [pc, #620]	@ (8005be0 <_dtoa_r+0x8d0>)
 8005974:	f7fa fe48 	bl	8000608 <__aeabi_dmul>
 8005978:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800597c:	e7bc      	b.n	80058f8 <_dtoa_r+0x5e8>
 800597e:	d10c      	bne.n	800599a <_dtoa_r+0x68a>
 8005980:	4b98      	ldr	r3, [pc, #608]	@ (8005be4 <_dtoa_r+0x8d4>)
 8005982:	2200      	movs	r2, #0
 8005984:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005988:	f7fa fe3e 	bl	8000608 <__aeabi_dmul>
 800598c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005990:	f7fb f8c0 	bl	8000b14 <__aeabi_dcmpge>
 8005994:	2800      	cmp	r0, #0
 8005996:	f000 8157 	beq.w	8005c48 <_dtoa_r+0x938>
 800599a:	2400      	movs	r4, #0
 800599c:	4625      	mov	r5, r4
 800599e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059a0:	43db      	mvns	r3, r3
 80059a2:	9304      	str	r3, [sp, #16]
 80059a4:	4656      	mov	r6, sl
 80059a6:	2700      	movs	r7, #0
 80059a8:	4621      	mov	r1, r4
 80059aa:	4658      	mov	r0, fp
 80059ac:	f000 fbb4 	bl	8006118 <_Bfree>
 80059b0:	2d00      	cmp	r5, #0
 80059b2:	d0dc      	beq.n	800596e <_dtoa_r+0x65e>
 80059b4:	b12f      	cbz	r7, 80059c2 <_dtoa_r+0x6b2>
 80059b6:	42af      	cmp	r7, r5
 80059b8:	d003      	beq.n	80059c2 <_dtoa_r+0x6b2>
 80059ba:	4639      	mov	r1, r7
 80059bc:	4658      	mov	r0, fp
 80059be:	f000 fbab 	bl	8006118 <_Bfree>
 80059c2:	4629      	mov	r1, r5
 80059c4:	4658      	mov	r0, fp
 80059c6:	f000 fba7 	bl	8006118 <_Bfree>
 80059ca:	e7d0      	b.n	800596e <_dtoa_r+0x65e>
 80059cc:	9704      	str	r7, [sp, #16]
 80059ce:	4633      	mov	r3, r6
 80059d0:	461e      	mov	r6, r3
 80059d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059d6:	2a39      	cmp	r2, #57	@ 0x39
 80059d8:	d107      	bne.n	80059ea <_dtoa_r+0x6da>
 80059da:	459a      	cmp	sl, r3
 80059dc:	d1f8      	bne.n	80059d0 <_dtoa_r+0x6c0>
 80059de:	9a04      	ldr	r2, [sp, #16]
 80059e0:	3201      	adds	r2, #1
 80059e2:	9204      	str	r2, [sp, #16]
 80059e4:	2230      	movs	r2, #48	@ 0x30
 80059e6:	f88a 2000 	strb.w	r2, [sl]
 80059ea:	781a      	ldrb	r2, [r3, #0]
 80059ec:	3201      	adds	r2, #1
 80059ee:	701a      	strb	r2, [r3, #0]
 80059f0:	e7bd      	b.n	800596e <_dtoa_r+0x65e>
 80059f2:	4b7b      	ldr	r3, [pc, #492]	@ (8005be0 <_dtoa_r+0x8d0>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	f7fa fe07 	bl	8000608 <__aeabi_dmul>
 80059fa:	2200      	movs	r2, #0
 80059fc:	2300      	movs	r3, #0
 80059fe:	4604      	mov	r4, r0
 8005a00:	460d      	mov	r5, r1
 8005a02:	f7fb f869 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a06:	2800      	cmp	r0, #0
 8005a08:	f43f aebb 	beq.w	8005782 <_dtoa_r+0x472>
 8005a0c:	e6f0      	b.n	80057f0 <_dtoa_r+0x4e0>
 8005a0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005a10:	2a00      	cmp	r2, #0
 8005a12:	f000 80db 	beq.w	8005bcc <_dtoa_r+0x8bc>
 8005a16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a18:	2a01      	cmp	r2, #1
 8005a1a:	f300 80bf 	bgt.w	8005b9c <_dtoa_r+0x88c>
 8005a1e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005a20:	2a00      	cmp	r2, #0
 8005a22:	f000 80b7 	beq.w	8005b94 <_dtoa_r+0x884>
 8005a26:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005a2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005a2c:	4646      	mov	r6, r8
 8005a2e:	9a08      	ldr	r2, [sp, #32]
 8005a30:	2101      	movs	r1, #1
 8005a32:	441a      	add	r2, r3
 8005a34:	4658      	mov	r0, fp
 8005a36:	4498      	add	r8, r3
 8005a38:	9208      	str	r2, [sp, #32]
 8005a3a:	f000 fc21 	bl	8006280 <__i2b>
 8005a3e:	4605      	mov	r5, r0
 8005a40:	b15e      	cbz	r6, 8005a5a <_dtoa_r+0x74a>
 8005a42:	9b08      	ldr	r3, [sp, #32]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	dd08      	ble.n	8005a5a <_dtoa_r+0x74a>
 8005a48:	42b3      	cmp	r3, r6
 8005a4a:	9a08      	ldr	r2, [sp, #32]
 8005a4c:	bfa8      	it	ge
 8005a4e:	4633      	movge	r3, r6
 8005a50:	eba8 0803 	sub.w	r8, r8, r3
 8005a54:	1af6      	subs	r6, r6, r3
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	9308      	str	r3, [sp, #32]
 8005a5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a5c:	b1f3      	cbz	r3, 8005a9c <_dtoa_r+0x78c>
 8005a5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 80b7 	beq.w	8005bd4 <_dtoa_r+0x8c4>
 8005a66:	b18c      	cbz	r4, 8005a8c <_dtoa_r+0x77c>
 8005a68:	4629      	mov	r1, r5
 8005a6a:	4622      	mov	r2, r4
 8005a6c:	4658      	mov	r0, fp
 8005a6e:	f000 fcc7 	bl	8006400 <__pow5mult>
 8005a72:	464a      	mov	r2, r9
 8005a74:	4601      	mov	r1, r0
 8005a76:	4605      	mov	r5, r0
 8005a78:	4658      	mov	r0, fp
 8005a7a:	f000 fc17 	bl	80062ac <__multiply>
 8005a7e:	4649      	mov	r1, r9
 8005a80:	9004      	str	r0, [sp, #16]
 8005a82:	4658      	mov	r0, fp
 8005a84:	f000 fb48 	bl	8006118 <_Bfree>
 8005a88:	9b04      	ldr	r3, [sp, #16]
 8005a8a:	4699      	mov	r9, r3
 8005a8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a8e:	1b1a      	subs	r2, r3, r4
 8005a90:	d004      	beq.n	8005a9c <_dtoa_r+0x78c>
 8005a92:	4649      	mov	r1, r9
 8005a94:	4658      	mov	r0, fp
 8005a96:	f000 fcb3 	bl	8006400 <__pow5mult>
 8005a9a:	4681      	mov	r9, r0
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	4658      	mov	r0, fp
 8005aa0:	f000 fbee 	bl	8006280 <__i2b>
 8005aa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 81cf 	beq.w	8005e4c <_dtoa_r+0xb3c>
 8005aae:	461a      	mov	r2, r3
 8005ab0:	4601      	mov	r1, r0
 8005ab2:	4658      	mov	r0, fp
 8005ab4:	f000 fca4 	bl	8006400 <__pow5mult>
 8005ab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	4604      	mov	r4, r0
 8005abe:	f300 8095 	bgt.w	8005bec <_dtoa_r+0x8dc>
 8005ac2:	9b02      	ldr	r3, [sp, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f040 8087 	bne.w	8005bd8 <_dtoa_r+0x8c8>
 8005aca:	9b03      	ldr	r3, [sp, #12]
 8005acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f040 8089 	bne.w	8005be8 <_dtoa_r+0x8d8>
 8005ad6:	9b03      	ldr	r3, [sp, #12]
 8005ad8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005adc:	0d1b      	lsrs	r3, r3, #20
 8005ade:	051b      	lsls	r3, r3, #20
 8005ae0:	b12b      	cbz	r3, 8005aee <_dtoa_r+0x7de>
 8005ae2:	9b08      	ldr	r3, [sp, #32]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	9308      	str	r3, [sp, #32]
 8005ae8:	f108 0801 	add.w	r8, r8, #1
 8005aec:	2301      	movs	r3, #1
 8005aee:	930a      	str	r3, [sp, #40]	@ 0x28
 8005af0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 81b0 	beq.w	8005e58 <_dtoa_r+0xb48>
 8005af8:	6923      	ldr	r3, [r4, #16]
 8005afa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005afe:	6918      	ldr	r0, [r3, #16]
 8005b00:	f000 fb72 	bl	80061e8 <__hi0bits>
 8005b04:	f1c0 0020 	rsb	r0, r0, #32
 8005b08:	9b08      	ldr	r3, [sp, #32]
 8005b0a:	4418      	add	r0, r3
 8005b0c:	f010 001f 	ands.w	r0, r0, #31
 8005b10:	d077      	beq.n	8005c02 <_dtoa_r+0x8f2>
 8005b12:	f1c0 0320 	rsb	r3, r0, #32
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	dd6b      	ble.n	8005bf2 <_dtoa_r+0x8e2>
 8005b1a:	9b08      	ldr	r3, [sp, #32]
 8005b1c:	f1c0 001c 	rsb	r0, r0, #28
 8005b20:	4403      	add	r3, r0
 8005b22:	4480      	add	r8, r0
 8005b24:	4406      	add	r6, r0
 8005b26:	9308      	str	r3, [sp, #32]
 8005b28:	f1b8 0f00 	cmp.w	r8, #0
 8005b2c:	dd05      	ble.n	8005b3a <_dtoa_r+0x82a>
 8005b2e:	4649      	mov	r1, r9
 8005b30:	4642      	mov	r2, r8
 8005b32:	4658      	mov	r0, fp
 8005b34:	f000 fcbe 	bl	80064b4 <__lshift>
 8005b38:	4681      	mov	r9, r0
 8005b3a:	9b08      	ldr	r3, [sp, #32]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	dd05      	ble.n	8005b4c <_dtoa_r+0x83c>
 8005b40:	4621      	mov	r1, r4
 8005b42:	461a      	mov	r2, r3
 8005b44:	4658      	mov	r0, fp
 8005b46:	f000 fcb5 	bl	80064b4 <__lshift>
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d059      	beq.n	8005c06 <_dtoa_r+0x8f6>
 8005b52:	4621      	mov	r1, r4
 8005b54:	4648      	mov	r0, r9
 8005b56:	f000 fd19 	bl	800658c <__mcmp>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	da53      	bge.n	8005c06 <_dtoa_r+0x8f6>
 8005b5e:	1e7b      	subs	r3, r7, #1
 8005b60:	9304      	str	r3, [sp, #16]
 8005b62:	4649      	mov	r1, r9
 8005b64:	2300      	movs	r3, #0
 8005b66:	220a      	movs	r2, #10
 8005b68:	4658      	mov	r0, fp
 8005b6a:	f000 faf7 	bl	800615c <__multadd>
 8005b6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b70:	4681      	mov	r9, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f000 8172 	beq.w	8005e5c <_dtoa_r+0xb4c>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	4629      	mov	r1, r5
 8005b7c:	220a      	movs	r2, #10
 8005b7e:	4658      	mov	r0, fp
 8005b80:	f000 faec 	bl	800615c <__multadd>
 8005b84:	9b00      	ldr	r3, [sp, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	4605      	mov	r5, r0
 8005b8a:	dc67      	bgt.n	8005c5c <_dtoa_r+0x94c>
 8005b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	dc41      	bgt.n	8005c16 <_dtoa_r+0x906>
 8005b92:	e063      	b.n	8005c5c <_dtoa_r+0x94c>
 8005b94:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005b96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005b9a:	e746      	b.n	8005a2a <_dtoa_r+0x71a>
 8005b9c:	9b07      	ldr	r3, [sp, #28]
 8005b9e:	1e5c      	subs	r4, r3, #1
 8005ba0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ba2:	42a3      	cmp	r3, r4
 8005ba4:	bfbf      	itttt	lt
 8005ba6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005ba8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005baa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005bac:	1ae3      	sublt	r3, r4, r3
 8005bae:	bfb4      	ite	lt
 8005bb0:	18d2      	addlt	r2, r2, r3
 8005bb2:	1b1c      	subge	r4, r3, r4
 8005bb4:	9b07      	ldr	r3, [sp, #28]
 8005bb6:	bfbc      	itt	lt
 8005bb8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005bba:	2400      	movlt	r4, #0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	bfb5      	itete	lt
 8005bc0:	eba8 0603 	sublt.w	r6, r8, r3
 8005bc4:	9b07      	ldrge	r3, [sp, #28]
 8005bc6:	2300      	movlt	r3, #0
 8005bc8:	4646      	movge	r6, r8
 8005bca:	e730      	b.n	8005a2e <_dtoa_r+0x71e>
 8005bcc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005bce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005bd0:	4646      	mov	r6, r8
 8005bd2:	e735      	b.n	8005a40 <_dtoa_r+0x730>
 8005bd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005bd6:	e75c      	b.n	8005a92 <_dtoa_r+0x782>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	e788      	b.n	8005aee <_dtoa_r+0x7de>
 8005bdc:	3fe00000 	.word	0x3fe00000
 8005be0:	40240000 	.word	0x40240000
 8005be4:	40140000 	.word	0x40140000
 8005be8:	9b02      	ldr	r3, [sp, #8]
 8005bea:	e780      	b.n	8005aee <_dtoa_r+0x7de>
 8005bec:	2300      	movs	r3, #0
 8005bee:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bf0:	e782      	b.n	8005af8 <_dtoa_r+0x7e8>
 8005bf2:	d099      	beq.n	8005b28 <_dtoa_r+0x818>
 8005bf4:	9a08      	ldr	r2, [sp, #32]
 8005bf6:	331c      	adds	r3, #28
 8005bf8:	441a      	add	r2, r3
 8005bfa:	4498      	add	r8, r3
 8005bfc:	441e      	add	r6, r3
 8005bfe:	9208      	str	r2, [sp, #32]
 8005c00:	e792      	b.n	8005b28 <_dtoa_r+0x818>
 8005c02:	4603      	mov	r3, r0
 8005c04:	e7f6      	b.n	8005bf4 <_dtoa_r+0x8e4>
 8005c06:	9b07      	ldr	r3, [sp, #28]
 8005c08:	9704      	str	r7, [sp, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	dc20      	bgt.n	8005c50 <_dtoa_r+0x940>
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	dd1e      	ble.n	8005c54 <_dtoa_r+0x944>
 8005c16:	9b00      	ldr	r3, [sp, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f47f aec0 	bne.w	800599e <_dtoa_r+0x68e>
 8005c1e:	4621      	mov	r1, r4
 8005c20:	2205      	movs	r2, #5
 8005c22:	4658      	mov	r0, fp
 8005c24:	f000 fa9a 	bl	800615c <__multadd>
 8005c28:	4601      	mov	r1, r0
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	4648      	mov	r0, r9
 8005c2e:	f000 fcad 	bl	800658c <__mcmp>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	f77f aeb3 	ble.w	800599e <_dtoa_r+0x68e>
 8005c38:	4656      	mov	r6, sl
 8005c3a:	2331      	movs	r3, #49	@ 0x31
 8005c3c:	f806 3b01 	strb.w	r3, [r6], #1
 8005c40:	9b04      	ldr	r3, [sp, #16]
 8005c42:	3301      	adds	r3, #1
 8005c44:	9304      	str	r3, [sp, #16]
 8005c46:	e6ae      	b.n	80059a6 <_dtoa_r+0x696>
 8005c48:	9c07      	ldr	r4, [sp, #28]
 8005c4a:	9704      	str	r7, [sp, #16]
 8005c4c:	4625      	mov	r5, r4
 8005c4e:	e7f3      	b.n	8005c38 <_dtoa_r+0x928>
 8005c50:	9b07      	ldr	r3, [sp, #28]
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 8104 	beq.w	8005e64 <_dtoa_r+0xb54>
 8005c5c:	2e00      	cmp	r6, #0
 8005c5e:	dd05      	ble.n	8005c6c <_dtoa_r+0x95c>
 8005c60:	4629      	mov	r1, r5
 8005c62:	4632      	mov	r2, r6
 8005c64:	4658      	mov	r0, fp
 8005c66:	f000 fc25 	bl	80064b4 <__lshift>
 8005c6a:	4605      	mov	r5, r0
 8005c6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d05a      	beq.n	8005d28 <_dtoa_r+0xa18>
 8005c72:	6869      	ldr	r1, [r5, #4]
 8005c74:	4658      	mov	r0, fp
 8005c76:	f000 fa0f 	bl	8006098 <_Balloc>
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	b928      	cbnz	r0, 8005c8a <_dtoa_r+0x97a>
 8005c7e:	4b84      	ldr	r3, [pc, #528]	@ (8005e90 <_dtoa_r+0xb80>)
 8005c80:	4602      	mov	r2, r0
 8005c82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005c86:	f7ff bb5a 	b.w	800533e <_dtoa_r+0x2e>
 8005c8a:	692a      	ldr	r2, [r5, #16]
 8005c8c:	3202      	adds	r2, #2
 8005c8e:	0092      	lsls	r2, r2, #2
 8005c90:	f105 010c 	add.w	r1, r5, #12
 8005c94:	300c      	adds	r0, #12
 8005c96:	f001 f975 	bl	8006f84 <memcpy>
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	4631      	mov	r1, r6
 8005c9e:	4658      	mov	r0, fp
 8005ca0:	f000 fc08 	bl	80064b4 <__lshift>
 8005ca4:	f10a 0301 	add.w	r3, sl, #1
 8005ca8:	9307      	str	r3, [sp, #28]
 8005caa:	9b00      	ldr	r3, [sp, #0]
 8005cac:	4453      	add	r3, sl
 8005cae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005cb0:	9b02      	ldr	r3, [sp, #8]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	462f      	mov	r7, r5
 8005cb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cba:	4605      	mov	r5, r0
 8005cbc:	9b07      	ldr	r3, [sp, #28]
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	4648      	mov	r0, r9
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	f7ff fa9a 	bl	80051fe <quorem>
 8005cca:	4639      	mov	r1, r7
 8005ccc:	9002      	str	r0, [sp, #8]
 8005cce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005cd2:	4648      	mov	r0, r9
 8005cd4:	f000 fc5a 	bl	800658c <__mcmp>
 8005cd8:	462a      	mov	r2, r5
 8005cda:	9008      	str	r0, [sp, #32]
 8005cdc:	4621      	mov	r1, r4
 8005cde:	4658      	mov	r0, fp
 8005ce0:	f000 fc70 	bl	80065c4 <__mdiff>
 8005ce4:	68c2      	ldr	r2, [r0, #12]
 8005ce6:	4606      	mov	r6, r0
 8005ce8:	bb02      	cbnz	r2, 8005d2c <_dtoa_r+0xa1c>
 8005cea:	4601      	mov	r1, r0
 8005cec:	4648      	mov	r0, r9
 8005cee:	f000 fc4d 	bl	800658c <__mcmp>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	4631      	mov	r1, r6
 8005cf6:	4658      	mov	r0, fp
 8005cf8:	920e      	str	r2, [sp, #56]	@ 0x38
 8005cfa:	f000 fa0d 	bl	8006118 <_Bfree>
 8005cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d02:	9e07      	ldr	r6, [sp, #28]
 8005d04:	ea43 0102 	orr.w	r1, r3, r2
 8005d08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d0a:	4319      	orrs	r1, r3
 8005d0c:	d110      	bne.n	8005d30 <_dtoa_r+0xa20>
 8005d0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005d12:	d029      	beq.n	8005d68 <_dtoa_r+0xa58>
 8005d14:	9b08      	ldr	r3, [sp, #32]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	dd02      	ble.n	8005d20 <_dtoa_r+0xa10>
 8005d1a:	9b02      	ldr	r3, [sp, #8]
 8005d1c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005d20:	9b00      	ldr	r3, [sp, #0]
 8005d22:	f883 8000 	strb.w	r8, [r3]
 8005d26:	e63f      	b.n	80059a8 <_dtoa_r+0x698>
 8005d28:	4628      	mov	r0, r5
 8005d2a:	e7bb      	b.n	8005ca4 <_dtoa_r+0x994>
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	e7e1      	b.n	8005cf4 <_dtoa_r+0x9e4>
 8005d30:	9b08      	ldr	r3, [sp, #32]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	db04      	blt.n	8005d40 <_dtoa_r+0xa30>
 8005d36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d38:	430b      	orrs	r3, r1
 8005d3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	d120      	bne.n	8005d82 <_dtoa_r+0xa72>
 8005d40:	2a00      	cmp	r2, #0
 8005d42:	dded      	ble.n	8005d20 <_dtoa_r+0xa10>
 8005d44:	4649      	mov	r1, r9
 8005d46:	2201      	movs	r2, #1
 8005d48:	4658      	mov	r0, fp
 8005d4a:	f000 fbb3 	bl	80064b4 <__lshift>
 8005d4e:	4621      	mov	r1, r4
 8005d50:	4681      	mov	r9, r0
 8005d52:	f000 fc1b 	bl	800658c <__mcmp>
 8005d56:	2800      	cmp	r0, #0
 8005d58:	dc03      	bgt.n	8005d62 <_dtoa_r+0xa52>
 8005d5a:	d1e1      	bne.n	8005d20 <_dtoa_r+0xa10>
 8005d5c:	f018 0f01 	tst.w	r8, #1
 8005d60:	d0de      	beq.n	8005d20 <_dtoa_r+0xa10>
 8005d62:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005d66:	d1d8      	bne.n	8005d1a <_dtoa_r+0xa0a>
 8005d68:	9a00      	ldr	r2, [sp, #0]
 8005d6a:	2339      	movs	r3, #57	@ 0x39
 8005d6c:	7013      	strb	r3, [r2, #0]
 8005d6e:	4633      	mov	r3, r6
 8005d70:	461e      	mov	r6, r3
 8005d72:	3b01      	subs	r3, #1
 8005d74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005d78:	2a39      	cmp	r2, #57	@ 0x39
 8005d7a:	d052      	beq.n	8005e22 <_dtoa_r+0xb12>
 8005d7c:	3201      	adds	r2, #1
 8005d7e:	701a      	strb	r2, [r3, #0]
 8005d80:	e612      	b.n	80059a8 <_dtoa_r+0x698>
 8005d82:	2a00      	cmp	r2, #0
 8005d84:	dd07      	ble.n	8005d96 <_dtoa_r+0xa86>
 8005d86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005d8a:	d0ed      	beq.n	8005d68 <_dtoa_r+0xa58>
 8005d8c:	9a00      	ldr	r2, [sp, #0]
 8005d8e:	f108 0301 	add.w	r3, r8, #1
 8005d92:	7013      	strb	r3, [r2, #0]
 8005d94:	e608      	b.n	80059a8 <_dtoa_r+0x698>
 8005d96:	9b07      	ldr	r3, [sp, #28]
 8005d98:	9a07      	ldr	r2, [sp, #28]
 8005d9a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005d9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d028      	beq.n	8005df6 <_dtoa_r+0xae6>
 8005da4:	4649      	mov	r1, r9
 8005da6:	2300      	movs	r3, #0
 8005da8:	220a      	movs	r2, #10
 8005daa:	4658      	mov	r0, fp
 8005dac:	f000 f9d6 	bl	800615c <__multadd>
 8005db0:	42af      	cmp	r7, r5
 8005db2:	4681      	mov	r9, r0
 8005db4:	f04f 0300 	mov.w	r3, #0
 8005db8:	f04f 020a 	mov.w	r2, #10
 8005dbc:	4639      	mov	r1, r7
 8005dbe:	4658      	mov	r0, fp
 8005dc0:	d107      	bne.n	8005dd2 <_dtoa_r+0xac2>
 8005dc2:	f000 f9cb 	bl	800615c <__multadd>
 8005dc6:	4607      	mov	r7, r0
 8005dc8:	4605      	mov	r5, r0
 8005dca:	9b07      	ldr	r3, [sp, #28]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	9307      	str	r3, [sp, #28]
 8005dd0:	e774      	b.n	8005cbc <_dtoa_r+0x9ac>
 8005dd2:	f000 f9c3 	bl	800615c <__multadd>
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	4607      	mov	r7, r0
 8005dda:	2300      	movs	r3, #0
 8005ddc:	220a      	movs	r2, #10
 8005dde:	4658      	mov	r0, fp
 8005de0:	f000 f9bc 	bl	800615c <__multadd>
 8005de4:	4605      	mov	r5, r0
 8005de6:	e7f0      	b.n	8005dca <_dtoa_r+0xaba>
 8005de8:	9b00      	ldr	r3, [sp, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	bfcc      	ite	gt
 8005dee:	461e      	movgt	r6, r3
 8005df0:	2601      	movle	r6, #1
 8005df2:	4456      	add	r6, sl
 8005df4:	2700      	movs	r7, #0
 8005df6:	4649      	mov	r1, r9
 8005df8:	2201      	movs	r2, #1
 8005dfa:	4658      	mov	r0, fp
 8005dfc:	f000 fb5a 	bl	80064b4 <__lshift>
 8005e00:	4621      	mov	r1, r4
 8005e02:	4681      	mov	r9, r0
 8005e04:	f000 fbc2 	bl	800658c <__mcmp>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	dcb0      	bgt.n	8005d6e <_dtoa_r+0xa5e>
 8005e0c:	d102      	bne.n	8005e14 <_dtoa_r+0xb04>
 8005e0e:	f018 0f01 	tst.w	r8, #1
 8005e12:	d1ac      	bne.n	8005d6e <_dtoa_r+0xa5e>
 8005e14:	4633      	mov	r3, r6
 8005e16:	461e      	mov	r6, r3
 8005e18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e1c:	2a30      	cmp	r2, #48	@ 0x30
 8005e1e:	d0fa      	beq.n	8005e16 <_dtoa_r+0xb06>
 8005e20:	e5c2      	b.n	80059a8 <_dtoa_r+0x698>
 8005e22:	459a      	cmp	sl, r3
 8005e24:	d1a4      	bne.n	8005d70 <_dtoa_r+0xa60>
 8005e26:	9b04      	ldr	r3, [sp, #16]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	9304      	str	r3, [sp, #16]
 8005e2c:	2331      	movs	r3, #49	@ 0x31
 8005e2e:	f88a 3000 	strb.w	r3, [sl]
 8005e32:	e5b9      	b.n	80059a8 <_dtoa_r+0x698>
 8005e34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005e36:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005e94 <_dtoa_r+0xb84>
 8005e3a:	b11b      	cbz	r3, 8005e44 <_dtoa_r+0xb34>
 8005e3c:	f10a 0308 	add.w	r3, sl, #8
 8005e40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005e42:	6013      	str	r3, [r2, #0]
 8005e44:	4650      	mov	r0, sl
 8005e46:	b019      	add	sp, #100	@ 0x64
 8005e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	f77f ae37 	ble.w	8005ac2 <_dtoa_r+0x7b2>
 8005e54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e56:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e58:	2001      	movs	r0, #1
 8005e5a:	e655      	b.n	8005b08 <_dtoa_r+0x7f8>
 8005e5c:	9b00      	ldr	r3, [sp, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f77f aed6 	ble.w	8005c10 <_dtoa_r+0x900>
 8005e64:	4656      	mov	r6, sl
 8005e66:	4621      	mov	r1, r4
 8005e68:	4648      	mov	r0, r9
 8005e6a:	f7ff f9c8 	bl	80051fe <quorem>
 8005e6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005e72:	f806 8b01 	strb.w	r8, [r6], #1
 8005e76:	9b00      	ldr	r3, [sp, #0]
 8005e78:	eba6 020a 	sub.w	r2, r6, sl
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	ddb3      	ble.n	8005de8 <_dtoa_r+0xad8>
 8005e80:	4649      	mov	r1, r9
 8005e82:	2300      	movs	r3, #0
 8005e84:	220a      	movs	r2, #10
 8005e86:	4658      	mov	r0, fp
 8005e88:	f000 f968 	bl	800615c <__multadd>
 8005e8c:	4681      	mov	r9, r0
 8005e8e:	e7ea      	b.n	8005e66 <_dtoa_r+0xb56>
 8005e90:	080074a4 	.word	0x080074a4
 8005e94:	08007428 	.word	0x08007428

08005e98 <_free_r>:
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	4605      	mov	r5, r0
 8005e9c:	2900      	cmp	r1, #0
 8005e9e:	d041      	beq.n	8005f24 <_free_r+0x8c>
 8005ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ea4:	1f0c      	subs	r4, r1, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	bfb8      	it	lt
 8005eaa:	18e4      	addlt	r4, r4, r3
 8005eac:	f000 f8e8 	bl	8006080 <__malloc_lock>
 8005eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f28 <_free_r+0x90>)
 8005eb2:	6813      	ldr	r3, [r2, #0]
 8005eb4:	b933      	cbnz	r3, 8005ec4 <_free_r+0x2c>
 8005eb6:	6063      	str	r3, [r4, #4]
 8005eb8:	6014      	str	r4, [r2, #0]
 8005eba:	4628      	mov	r0, r5
 8005ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ec0:	f000 b8e4 	b.w	800608c <__malloc_unlock>
 8005ec4:	42a3      	cmp	r3, r4
 8005ec6:	d908      	bls.n	8005eda <_free_r+0x42>
 8005ec8:	6820      	ldr	r0, [r4, #0]
 8005eca:	1821      	adds	r1, r4, r0
 8005ecc:	428b      	cmp	r3, r1
 8005ece:	bf01      	itttt	eq
 8005ed0:	6819      	ldreq	r1, [r3, #0]
 8005ed2:	685b      	ldreq	r3, [r3, #4]
 8005ed4:	1809      	addeq	r1, r1, r0
 8005ed6:	6021      	streq	r1, [r4, #0]
 8005ed8:	e7ed      	b.n	8005eb6 <_free_r+0x1e>
 8005eda:	461a      	mov	r2, r3
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	b10b      	cbz	r3, 8005ee4 <_free_r+0x4c>
 8005ee0:	42a3      	cmp	r3, r4
 8005ee2:	d9fa      	bls.n	8005eda <_free_r+0x42>
 8005ee4:	6811      	ldr	r1, [r2, #0]
 8005ee6:	1850      	adds	r0, r2, r1
 8005ee8:	42a0      	cmp	r0, r4
 8005eea:	d10b      	bne.n	8005f04 <_free_r+0x6c>
 8005eec:	6820      	ldr	r0, [r4, #0]
 8005eee:	4401      	add	r1, r0
 8005ef0:	1850      	adds	r0, r2, r1
 8005ef2:	4283      	cmp	r3, r0
 8005ef4:	6011      	str	r1, [r2, #0]
 8005ef6:	d1e0      	bne.n	8005eba <_free_r+0x22>
 8005ef8:	6818      	ldr	r0, [r3, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	6053      	str	r3, [r2, #4]
 8005efe:	4408      	add	r0, r1
 8005f00:	6010      	str	r0, [r2, #0]
 8005f02:	e7da      	b.n	8005eba <_free_r+0x22>
 8005f04:	d902      	bls.n	8005f0c <_free_r+0x74>
 8005f06:	230c      	movs	r3, #12
 8005f08:	602b      	str	r3, [r5, #0]
 8005f0a:	e7d6      	b.n	8005eba <_free_r+0x22>
 8005f0c:	6820      	ldr	r0, [r4, #0]
 8005f0e:	1821      	adds	r1, r4, r0
 8005f10:	428b      	cmp	r3, r1
 8005f12:	bf04      	itt	eq
 8005f14:	6819      	ldreq	r1, [r3, #0]
 8005f16:	685b      	ldreq	r3, [r3, #4]
 8005f18:	6063      	str	r3, [r4, #4]
 8005f1a:	bf04      	itt	eq
 8005f1c:	1809      	addeq	r1, r1, r0
 8005f1e:	6021      	streq	r1, [r4, #0]
 8005f20:	6054      	str	r4, [r2, #4]
 8005f22:	e7ca      	b.n	8005eba <_free_r+0x22>
 8005f24:	bd38      	pop	{r3, r4, r5, pc}
 8005f26:	bf00      	nop
 8005f28:	2000042c 	.word	0x2000042c

08005f2c <malloc>:
 8005f2c:	4b02      	ldr	r3, [pc, #8]	@ (8005f38 <malloc+0xc>)
 8005f2e:	4601      	mov	r1, r0
 8005f30:	6818      	ldr	r0, [r3, #0]
 8005f32:	f000 b825 	b.w	8005f80 <_malloc_r>
 8005f36:	bf00      	nop
 8005f38:	20000018 	.word	0x20000018

08005f3c <sbrk_aligned>:
 8005f3c:	b570      	push	{r4, r5, r6, lr}
 8005f3e:	4e0f      	ldr	r6, [pc, #60]	@ (8005f7c <sbrk_aligned+0x40>)
 8005f40:	460c      	mov	r4, r1
 8005f42:	6831      	ldr	r1, [r6, #0]
 8005f44:	4605      	mov	r5, r0
 8005f46:	b911      	cbnz	r1, 8005f4e <sbrk_aligned+0x12>
 8005f48:	f001 f80c 	bl	8006f64 <_sbrk_r>
 8005f4c:	6030      	str	r0, [r6, #0]
 8005f4e:	4621      	mov	r1, r4
 8005f50:	4628      	mov	r0, r5
 8005f52:	f001 f807 	bl	8006f64 <_sbrk_r>
 8005f56:	1c43      	adds	r3, r0, #1
 8005f58:	d103      	bne.n	8005f62 <sbrk_aligned+0x26>
 8005f5a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005f5e:	4620      	mov	r0, r4
 8005f60:	bd70      	pop	{r4, r5, r6, pc}
 8005f62:	1cc4      	adds	r4, r0, #3
 8005f64:	f024 0403 	bic.w	r4, r4, #3
 8005f68:	42a0      	cmp	r0, r4
 8005f6a:	d0f8      	beq.n	8005f5e <sbrk_aligned+0x22>
 8005f6c:	1a21      	subs	r1, r4, r0
 8005f6e:	4628      	mov	r0, r5
 8005f70:	f000 fff8 	bl	8006f64 <_sbrk_r>
 8005f74:	3001      	adds	r0, #1
 8005f76:	d1f2      	bne.n	8005f5e <sbrk_aligned+0x22>
 8005f78:	e7ef      	b.n	8005f5a <sbrk_aligned+0x1e>
 8005f7a:	bf00      	nop
 8005f7c:	20000428 	.word	0x20000428

08005f80 <_malloc_r>:
 8005f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f84:	1ccd      	adds	r5, r1, #3
 8005f86:	f025 0503 	bic.w	r5, r5, #3
 8005f8a:	3508      	adds	r5, #8
 8005f8c:	2d0c      	cmp	r5, #12
 8005f8e:	bf38      	it	cc
 8005f90:	250c      	movcc	r5, #12
 8005f92:	2d00      	cmp	r5, #0
 8005f94:	4606      	mov	r6, r0
 8005f96:	db01      	blt.n	8005f9c <_malloc_r+0x1c>
 8005f98:	42a9      	cmp	r1, r5
 8005f9a:	d904      	bls.n	8005fa6 <_malloc_r+0x26>
 8005f9c:	230c      	movs	r3, #12
 8005f9e:	6033      	str	r3, [r6, #0]
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800607c <_malloc_r+0xfc>
 8005faa:	f000 f869 	bl	8006080 <__malloc_lock>
 8005fae:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb2:	461c      	mov	r4, r3
 8005fb4:	bb44      	cbnz	r4, 8006008 <_malloc_r+0x88>
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f7ff ffbf 	bl	8005f3c <sbrk_aligned>
 8005fbe:	1c43      	adds	r3, r0, #1
 8005fc0:	4604      	mov	r4, r0
 8005fc2:	d158      	bne.n	8006076 <_malloc_r+0xf6>
 8005fc4:	f8d8 4000 	ldr.w	r4, [r8]
 8005fc8:	4627      	mov	r7, r4
 8005fca:	2f00      	cmp	r7, #0
 8005fcc:	d143      	bne.n	8006056 <_malloc_r+0xd6>
 8005fce:	2c00      	cmp	r4, #0
 8005fd0:	d04b      	beq.n	800606a <_malloc_r+0xea>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	4639      	mov	r1, r7
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	eb04 0903 	add.w	r9, r4, r3
 8005fdc:	f000 ffc2 	bl	8006f64 <_sbrk_r>
 8005fe0:	4581      	cmp	r9, r0
 8005fe2:	d142      	bne.n	800606a <_malloc_r+0xea>
 8005fe4:	6821      	ldr	r1, [r4, #0]
 8005fe6:	1a6d      	subs	r5, r5, r1
 8005fe8:	4629      	mov	r1, r5
 8005fea:	4630      	mov	r0, r6
 8005fec:	f7ff ffa6 	bl	8005f3c <sbrk_aligned>
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	d03a      	beq.n	800606a <_malloc_r+0xea>
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	442b      	add	r3, r5
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	bb62      	cbnz	r2, 800605c <_malloc_r+0xdc>
 8006002:	f8c8 7000 	str.w	r7, [r8]
 8006006:	e00f      	b.n	8006028 <_malloc_r+0xa8>
 8006008:	6822      	ldr	r2, [r4, #0]
 800600a:	1b52      	subs	r2, r2, r5
 800600c:	d420      	bmi.n	8006050 <_malloc_r+0xd0>
 800600e:	2a0b      	cmp	r2, #11
 8006010:	d917      	bls.n	8006042 <_malloc_r+0xc2>
 8006012:	1961      	adds	r1, r4, r5
 8006014:	42a3      	cmp	r3, r4
 8006016:	6025      	str	r5, [r4, #0]
 8006018:	bf18      	it	ne
 800601a:	6059      	strne	r1, [r3, #4]
 800601c:	6863      	ldr	r3, [r4, #4]
 800601e:	bf08      	it	eq
 8006020:	f8c8 1000 	streq.w	r1, [r8]
 8006024:	5162      	str	r2, [r4, r5]
 8006026:	604b      	str	r3, [r1, #4]
 8006028:	4630      	mov	r0, r6
 800602a:	f000 f82f 	bl	800608c <__malloc_unlock>
 800602e:	f104 000b 	add.w	r0, r4, #11
 8006032:	1d23      	adds	r3, r4, #4
 8006034:	f020 0007 	bic.w	r0, r0, #7
 8006038:	1ac2      	subs	r2, r0, r3
 800603a:	bf1c      	itt	ne
 800603c:	1a1b      	subne	r3, r3, r0
 800603e:	50a3      	strne	r3, [r4, r2]
 8006040:	e7af      	b.n	8005fa2 <_malloc_r+0x22>
 8006042:	6862      	ldr	r2, [r4, #4]
 8006044:	42a3      	cmp	r3, r4
 8006046:	bf0c      	ite	eq
 8006048:	f8c8 2000 	streq.w	r2, [r8]
 800604c:	605a      	strne	r2, [r3, #4]
 800604e:	e7eb      	b.n	8006028 <_malloc_r+0xa8>
 8006050:	4623      	mov	r3, r4
 8006052:	6864      	ldr	r4, [r4, #4]
 8006054:	e7ae      	b.n	8005fb4 <_malloc_r+0x34>
 8006056:	463c      	mov	r4, r7
 8006058:	687f      	ldr	r7, [r7, #4]
 800605a:	e7b6      	b.n	8005fca <_malloc_r+0x4a>
 800605c:	461a      	mov	r2, r3
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	42a3      	cmp	r3, r4
 8006062:	d1fb      	bne.n	800605c <_malloc_r+0xdc>
 8006064:	2300      	movs	r3, #0
 8006066:	6053      	str	r3, [r2, #4]
 8006068:	e7de      	b.n	8006028 <_malloc_r+0xa8>
 800606a:	230c      	movs	r3, #12
 800606c:	6033      	str	r3, [r6, #0]
 800606e:	4630      	mov	r0, r6
 8006070:	f000 f80c 	bl	800608c <__malloc_unlock>
 8006074:	e794      	b.n	8005fa0 <_malloc_r+0x20>
 8006076:	6005      	str	r5, [r0, #0]
 8006078:	e7d6      	b.n	8006028 <_malloc_r+0xa8>
 800607a:	bf00      	nop
 800607c:	2000042c 	.word	0x2000042c

08006080 <__malloc_lock>:
 8006080:	4801      	ldr	r0, [pc, #4]	@ (8006088 <__malloc_lock+0x8>)
 8006082:	f7ff b8ba 	b.w	80051fa <__retarget_lock_acquire_recursive>
 8006086:	bf00      	nop
 8006088:	20000424 	.word	0x20000424

0800608c <__malloc_unlock>:
 800608c:	4801      	ldr	r0, [pc, #4]	@ (8006094 <__malloc_unlock+0x8>)
 800608e:	f7ff b8b5 	b.w	80051fc <__retarget_lock_release_recursive>
 8006092:	bf00      	nop
 8006094:	20000424 	.word	0x20000424

08006098 <_Balloc>:
 8006098:	b570      	push	{r4, r5, r6, lr}
 800609a:	69c6      	ldr	r6, [r0, #28]
 800609c:	4604      	mov	r4, r0
 800609e:	460d      	mov	r5, r1
 80060a0:	b976      	cbnz	r6, 80060c0 <_Balloc+0x28>
 80060a2:	2010      	movs	r0, #16
 80060a4:	f7ff ff42 	bl	8005f2c <malloc>
 80060a8:	4602      	mov	r2, r0
 80060aa:	61e0      	str	r0, [r4, #28]
 80060ac:	b920      	cbnz	r0, 80060b8 <_Balloc+0x20>
 80060ae:	4b18      	ldr	r3, [pc, #96]	@ (8006110 <_Balloc+0x78>)
 80060b0:	4818      	ldr	r0, [pc, #96]	@ (8006114 <_Balloc+0x7c>)
 80060b2:	216b      	movs	r1, #107	@ 0x6b
 80060b4:	f000 ff74 	bl	8006fa0 <__assert_func>
 80060b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060bc:	6006      	str	r6, [r0, #0]
 80060be:	60c6      	str	r6, [r0, #12]
 80060c0:	69e6      	ldr	r6, [r4, #28]
 80060c2:	68f3      	ldr	r3, [r6, #12]
 80060c4:	b183      	cbz	r3, 80060e8 <_Balloc+0x50>
 80060c6:	69e3      	ldr	r3, [r4, #28]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80060ce:	b9b8      	cbnz	r0, 8006100 <_Balloc+0x68>
 80060d0:	2101      	movs	r1, #1
 80060d2:	fa01 f605 	lsl.w	r6, r1, r5
 80060d6:	1d72      	adds	r2, r6, #5
 80060d8:	0092      	lsls	r2, r2, #2
 80060da:	4620      	mov	r0, r4
 80060dc:	f000 ff7e 	bl	8006fdc <_calloc_r>
 80060e0:	b160      	cbz	r0, 80060fc <_Balloc+0x64>
 80060e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80060e6:	e00e      	b.n	8006106 <_Balloc+0x6e>
 80060e8:	2221      	movs	r2, #33	@ 0x21
 80060ea:	2104      	movs	r1, #4
 80060ec:	4620      	mov	r0, r4
 80060ee:	f000 ff75 	bl	8006fdc <_calloc_r>
 80060f2:	69e3      	ldr	r3, [r4, #28]
 80060f4:	60f0      	str	r0, [r6, #12]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e4      	bne.n	80060c6 <_Balloc+0x2e>
 80060fc:	2000      	movs	r0, #0
 80060fe:	bd70      	pop	{r4, r5, r6, pc}
 8006100:	6802      	ldr	r2, [r0, #0]
 8006102:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006106:	2300      	movs	r3, #0
 8006108:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800610c:	e7f7      	b.n	80060fe <_Balloc+0x66>
 800610e:	bf00      	nop
 8006110:	08007435 	.word	0x08007435
 8006114:	080074b5 	.word	0x080074b5

08006118 <_Bfree>:
 8006118:	b570      	push	{r4, r5, r6, lr}
 800611a:	69c6      	ldr	r6, [r0, #28]
 800611c:	4605      	mov	r5, r0
 800611e:	460c      	mov	r4, r1
 8006120:	b976      	cbnz	r6, 8006140 <_Bfree+0x28>
 8006122:	2010      	movs	r0, #16
 8006124:	f7ff ff02 	bl	8005f2c <malloc>
 8006128:	4602      	mov	r2, r0
 800612a:	61e8      	str	r0, [r5, #28]
 800612c:	b920      	cbnz	r0, 8006138 <_Bfree+0x20>
 800612e:	4b09      	ldr	r3, [pc, #36]	@ (8006154 <_Bfree+0x3c>)
 8006130:	4809      	ldr	r0, [pc, #36]	@ (8006158 <_Bfree+0x40>)
 8006132:	218f      	movs	r1, #143	@ 0x8f
 8006134:	f000 ff34 	bl	8006fa0 <__assert_func>
 8006138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800613c:	6006      	str	r6, [r0, #0]
 800613e:	60c6      	str	r6, [r0, #12]
 8006140:	b13c      	cbz	r4, 8006152 <_Bfree+0x3a>
 8006142:	69eb      	ldr	r3, [r5, #28]
 8006144:	6862      	ldr	r2, [r4, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800614c:	6021      	str	r1, [r4, #0]
 800614e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006152:	bd70      	pop	{r4, r5, r6, pc}
 8006154:	08007435 	.word	0x08007435
 8006158:	080074b5 	.word	0x080074b5

0800615c <__multadd>:
 800615c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006160:	690d      	ldr	r5, [r1, #16]
 8006162:	4607      	mov	r7, r0
 8006164:	460c      	mov	r4, r1
 8006166:	461e      	mov	r6, r3
 8006168:	f101 0c14 	add.w	ip, r1, #20
 800616c:	2000      	movs	r0, #0
 800616e:	f8dc 3000 	ldr.w	r3, [ip]
 8006172:	b299      	uxth	r1, r3
 8006174:	fb02 6101 	mla	r1, r2, r1, r6
 8006178:	0c1e      	lsrs	r6, r3, #16
 800617a:	0c0b      	lsrs	r3, r1, #16
 800617c:	fb02 3306 	mla	r3, r2, r6, r3
 8006180:	b289      	uxth	r1, r1
 8006182:	3001      	adds	r0, #1
 8006184:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006188:	4285      	cmp	r5, r0
 800618a:	f84c 1b04 	str.w	r1, [ip], #4
 800618e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006192:	dcec      	bgt.n	800616e <__multadd+0x12>
 8006194:	b30e      	cbz	r6, 80061da <__multadd+0x7e>
 8006196:	68a3      	ldr	r3, [r4, #8]
 8006198:	42ab      	cmp	r3, r5
 800619a:	dc19      	bgt.n	80061d0 <__multadd+0x74>
 800619c:	6861      	ldr	r1, [r4, #4]
 800619e:	4638      	mov	r0, r7
 80061a0:	3101      	adds	r1, #1
 80061a2:	f7ff ff79 	bl	8006098 <_Balloc>
 80061a6:	4680      	mov	r8, r0
 80061a8:	b928      	cbnz	r0, 80061b6 <__multadd+0x5a>
 80061aa:	4602      	mov	r2, r0
 80061ac:	4b0c      	ldr	r3, [pc, #48]	@ (80061e0 <__multadd+0x84>)
 80061ae:	480d      	ldr	r0, [pc, #52]	@ (80061e4 <__multadd+0x88>)
 80061b0:	21ba      	movs	r1, #186	@ 0xba
 80061b2:	f000 fef5 	bl	8006fa0 <__assert_func>
 80061b6:	6922      	ldr	r2, [r4, #16]
 80061b8:	3202      	adds	r2, #2
 80061ba:	f104 010c 	add.w	r1, r4, #12
 80061be:	0092      	lsls	r2, r2, #2
 80061c0:	300c      	adds	r0, #12
 80061c2:	f000 fedf 	bl	8006f84 <memcpy>
 80061c6:	4621      	mov	r1, r4
 80061c8:	4638      	mov	r0, r7
 80061ca:	f7ff ffa5 	bl	8006118 <_Bfree>
 80061ce:	4644      	mov	r4, r8
 80061d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80061d4:	3501      	adds	r5, #1
 80061d6:	615e      	str	r6, [r3, #20]
 80061d8:	6125      	str	r5, [r4, #16]
 80061da:	4620      	mov	r0, r4
 80061dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061e0:	080074a4 	.word	0x080074a4
 80061e4:	080074b5 	.word	0x080074b5

080061e8 <__hi0bits>:
 80061e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80061ec:	4603      	mov	r3, r0
 80061ee:	bf36      	itet	cc
 80061f0:	0403      	lslcc	r3, r0, #16
 80061f2:	2000      	movcs	r0, #0
 80061f4:	2010      	movcc	r0, #16
 80061f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061fa:	bf3c      	itt	cc
 80061fc:	021b      	lslcc	r3, r3, #8
 80061fe:	3008      	addcc	r0, #8
 8006200:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006204:	bf3c      	itt	cc
 8006206:	011b      	lslcc	r3, r3, #4
 8006208:	3004      	addcc	r0, #4
 800620a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800620e:	bf3c      	itt	cc
 8006210:	009b      	lslcc	r3, r3, #2
 8006212:	3002      	addcc	r0, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	db05      	blt.n	8006224 <__hi0bits+0x3c>
 8006218:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800621c:	f100 0001 	add.w	r0, r0, #1
 8006220:	bf08      	it	eq
 8006222:	2020      	moveq	r0, #32
 8006224:	4770      	bx	lr

08006226 <__lo0bits>:
 8006226:	6803      	ldr	r3, [r0, #0]
 8006228:	4602      	mov	r2, r0
 800622a:	f013 0007 	ands.w	r0, r3, #7
 800622e:	d00b      	beq.n	8006248 <__lo0bits+0x22>
 8006230:	07d9      	lsls	r1, r3, #31
 8006232:	d421      	bmi.n	8006278 <__lo0bits+0x52>
 8006234:	0798      	lsls	r0, r3, #30
 8006236:	bf49      	itett	mi
 8006238:	085b      	lsrmi	r3, r3, #1
 800623a:	089b      	lsrpl	r3, r3, #2
 800623c:	2001      	movmi	r0, #1
 800623e:	6013      	strmi	r3, [r2, #0]
 8006240:	bf5c      	itt	pl
 8006242:	6013      	strpl	r3, [r2, #0]
 8006244:	2002      	movpl	r0, #2
 8006246:	4770      	bx	lr
 8006248:	b299      	uxth	r1, r3
 800624a:	b909      	cbnz	r1, 8006250 <__lo0bits+0x2a>
 800624c:	0c1b      	lsrs	r3, r3, #16
 800624e:	2010      	movs	r0, #16
 8006250:	b2d9      	uxtb	r1, r3
 8006252:	b909      	cbnz	r1, 8006258 <__lo0bits+0x32>
 8006254:	3008      	adds	r0, #8
 8006256:	0a1b      	lsrs	r3, r3, #8
 8006258:	0719      	lsls	r1, r3, #28
 800625a:	bf04      	itt	eq
 800625c:	091b      	lsreq	r3, r3, #4
 800625e:	3004      	addeq	r0, #4
 8006260:	0799      	lsls	r1, r3, #30
 8006262:	bf04      	itt	eq
 8006264:	089b      	lsreq	r3, r3, #2
 8006266:	3002      	addeq	r0, #2
 8006268:	07d9      	lsls	r1, r3, #31
 800626a:	d403      	bmi.n	8006274 <__lo0bits+0x4e>
 800626c:	085b      	lsrs	r3, r3, #1
 800626e:	f100 0001 	add.w	r0, r0, #1
 8006272:	d003      	beq.n	800627c <__lo0bits+0x56>
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	4770      	bx	lr
 8006278:	2000      	movs	r0, #0
 800627a:	4770      	bx	lr
 800627c:	2020      	movs	r0, #32
 800627e:	4770      	bx	lr

08006280 <__i2b>:
 8006280:	b510      	push	{r4, lr}
 8006282:	460c      	mov	r4, r1
 8006284:	2101      	movs	r1, #1
 8006286:	f7ff ff07 	bl	8006098 <_Balloc>
 800628a:	4602      	mov	r2, r0
 800628c:	b928      	cbnz	r0, 800629a <__i2b+0x1a>
 800628e:	4b05      	ldr	r3, [pc, #20]	@ (80062a4 <__i2b+0x24>)
 8006290:	4805      	ldr	r0, [pc, #20]	@ (80062a8 <__i2b+0x28>)
 8006292:	f240 1145 	movw	r1, #325	@ 0x145
 8006296:	f000 fe83 	bl	8006fa0 <__assert_func>
 800629a:	2301      	movs	r3, #1
 800629c:	6144      	str	r4, [r0, #20]
 800629e:	6103      	str	r3, [r0, #16]
 80062a0:	bd10      	pop	{r4, pc}
 80062a2:	bf00      	nop
 80062a4:	080074a4 	.word	0x080074a4
 80062a8:	080074b5 	.word	0x080074b5

080062ac <__multiply>:
 80062ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b0:	4614      	mov	r4, r2
 80062b2:	690a      	ldr	r2, [r1, #16]
 80062b4:	6923      	ldr	r3, [r4, #16]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	bfa8      	it	ge
 80062ba:	4623      	movge	r3, r4
 80062bc:	460f      	mov	r7, r1
 80062be:	bfa4      	itt	ge
 80062c0:	460c      	movge	r4, r1
 80062c2:	461f      	movge	r7, r3
 80062c4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80062c8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80062cc:	68a3      	ldr	r3, [r4, #8]
 80062ce:	6861      	ldr	r1, [r4, #4]
 80062d0:	eb0a 0609 	add.w	r6, sl, r9
 80062d4:	42b3      	cmp	r3, r6
 80062d6:	b085      	sub	sp, #20
 80062d8:	bfb8      	it	lt
 80062da:	3101      	addlt	r1, #1
 80062dc:	f7ff fedc 	bl	8006098 <_Balloc>
 80062e0:	b930      	cbnz	r0, 80062f0 <__multiply+0x44>
 80062e2:	4602      	mov	r2, r0
 80062e4:	4b44      	ldr	r3, [pc, #272]	@ (80063f8 <__multiply+0x14c>)
 80062e6:	4845      	ldr	r0, [pc, #276]	@ (80063fc <__multiply+0x150>)
 80062e8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80062ec:	f000 fe58 	bl	8006fa0 <__assert_func>
 80062f0:	f100 0514 	add.w	r5, r0, #20
 80062f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80062f8:	462b      	mov	r3, r5
 80062fa:	2200      	movs	r2, #0
 80062fc:	4543      	cmp	r3, r8
 80062fe:	d321      	bcc.n	8006344 <__multiply+0x98>
 8006300:	f107 0114 	add.w	r1, r7, #20
 8006304:	f104 0214 	add.w	r2, r4, #20
 8006308:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800630c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006310:	9302      	str	r3, [sp, #8]
 8006312:	1b13      	subs	r3, r2, r4
 8006314:	3b15      	subs	r3, #21
 8006316:	f023 0303 	bic.w	r3, r3, #3
 800631a:	3304      	adds	r3, #4
 800631c:	f104 0715 	add.w	r7, r4, #21
 8006320:	42ba      	cmp	r2, r7
 8006322:	bf38      	it	cc
 8006324:	2304      	movcc	r3, #4
 8006326:	9301      	str	r3, [sp, #4]
 8006328:	9b02      	ldr	r3, [sp, #8]
 800632a:	9103      	str	r1, [sp, #12]
 800632c:	428b      	cmp	r3, r1
 800632e:	d80c      	bhi.n	800634a <__multiply+0x9e>
 8006330:	2e00      	cmp	r6, #0
 8006332:	dd03      	ble.n	800633c <__multiply+0x90>
 8006334:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006338:	2b00      	cmp	r3, #0
 800633a:	d05b      	beq.n	80063f4 <__multiply+0x148>
 800633c:	6106      	str	r6, [r0, #16]
 800633e:	b005      	add	sp, #20
 8006340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006344:	f843 2b04 	str.w	r2, [r3], #4
 8006348:	e7d8      	b.n	80062fc <__multiply+0x50>
 800634a:	f8b1 a000 	ldrh.w	sl, [r1]
 800634e:	f1ba 0f00 	cmp.w	sl, #0
 8006352:	d024      	beq.n	800639e <__multiply+0xf2>
 8006354:	f104 0e14 	add.w	lr, r4, #20
 8006358:	46a9      	mov	r9, r5
 800635a:	f04f 0c00 	mov.w	ip, #0
 800635e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006362:	f8d9 3000 	ldr.w	r3, [r9]
 8006366:	fa1f fb87 	uxth.w	fp, r7
 800636a:	b29b      	uxth	r3, r3
 800636c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006370:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006374:	f8d9 7000 	ldr.w	r7, [r9]
 8006378:	4463      	add	r3, ip
 800637a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800637e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006382:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006386:	b29b      	uxth	r3, r3
 8006388:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800638c:	4572      	cmp	r2, lr
 800638e:	f849 3b04 	str.w	r3, [r9], #4
 8006392:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006396:	d8e2      	bhi.n	800635e <__multiply+0xb2>
 8006398:	9b01      	ldr	r3, [sp, #4]
 800639a:	f845 c003 	str.w	ip, [r5, r3]
 800639e:	9b03      	ldr	r3, [sp, #12]
 80063a0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80063a4:	3104      	adds	r1, #4
 80063a6:	f1b9 0f00 	cmp.w	r9, #0
 80063aa:	d021      	beq.n	80063f0 <__multiply+0x144>
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	f104 0c14 	add.w	ip, r4, #20
 80063b2:	46ae      	mov	lr, r5
 80063b4:	f04f 0a00 	mov.w	sl, #0
 80063b8:	f8bc b000 	ldrh.w	fp, [ip]
 80063bc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80063c0:	fb09 770b 	mla	r7, r9, fp, r7
 80063c4:	4457      	add	r7, sl
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80063cc:	f84e 3b04 	str.w	r3, [lr], #4
 80063d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80063d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063d8:	f8be 3000 	ldrh.w	r3, [lr]
 80063dc:	fb09 330a 	mla	r3, r9, sl, r3
 80063e0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80063e4:	4562      	cmp	r2, ip
 80063e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063ea:	d8e5      	bhi.n	80063b8 <__multiply+0x10c>
 80063ec:	9f01      	ldr	r7, [sp, #4]
 80063ee:	51eb      	str	r3, [r5, r7]
 80063f0:	3504      	adds	r5, #4
 80063f2:	e799      	b.n	8006328 <__multiply+0x7c>
 80063f4:	3e01      	subs	r6, #1
 80063f6:	e79b      	b.n	8006330 <__multiply+0x84>
 80063f8:	080074a4 	.word	0x080074a4
 80063fc:	080074b5 	.word	0x080074b5

08006400 <__pow5mult>:
 8006400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006404:	4615      	mov	r5, r2
 8006406:	f012 0203 	ands.w	r2, r2, #3
 800640a:	4607      	mov	r7, r0
 800640c:	460e      	mov	r6, r1
 800640e:	d007      	beq.n	8006420 <__pow5mult+0x20>
 8006410:	4c25      	ldr	r4, [pc, #148]	@ (80064a8 <__pow5mult+0xa8>)
 8006412:	3a01      	subs	r2, #1
 8006414:	2300      	movs	r3, #0
 8006416:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800641a:	f7ff fe9f 	bl	800615c <__multadd>
 800641e:	4606      	mov	r6, r0
 8006420:	10ad      	asrs	r5, r5, #2
 8006422:	d03d      	beq.n	80064a0 <__pow5mult+0xa0>
 8006424:	69fc      	ldr	r4, [r7, #28]
 8006426:	b97c      	cbnz	r4, 8006448 <__pow5mult+0x48>
 8006428:	2010      	movs	r0, #16
 800642a:	f7ff fd7f 	bl	8005f2c <malloc>
 800642e:	4602      	mov	r2, r0
 8006430:	61f8      	str	r0, [r7, #28]
 8006432:	b928      	cbnz	r0, 8006440 <__pow5mult+0x40>
 8006434:	4b1d      	ldr	r3, [pc, #116]	@ (80064ac <__pow5mult+0xac>)
 8006436:	481e      	ldr	r0, [pc, #120]	@ (80064b0 <__pow5mult+0xb0>)
 8006438:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800643c:	f000 fdb0 	bl	8006fa0 <__assert_func>
 8006440:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006444:	6004      	str	r4, [r0, #0]
 8006446:	60c4      	str	r4, [r0, #12]
 8006448:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800644c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006450:	b94c      	cbnz	r4, 8006466 <__pow5mult+0x66>
 8006452:	f240 2171 	movw	r1, #625	@ 0x271
 8006456:	4638      	mov	r0, r7
 8006458:	f7ff ff12 	bl	8006280 <__i2b>
 800645c:	2300      	movs	r3, #0
 800645e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006462:	4604      	mov	r4, r0
 8006464:	6003      	str	r3, [r0, #0]
 8006466:	f04f 0900 	mov.w	r9, #0
 800646a:	07eb      	lsls	r3, r5, #31
 800646c:	d50a      	bpl.n	8006484 <__pow5mult+0x84>
 800646e:	4631      	mov	r1, r6
 8006470:	4622      	mov	r2, r4
 8006472:	4638      	mov	r0, r7
 8006474:	f7ff ff1a 	bl	80062ac <__multiply>
 8006478:	4631      	mov	r1, r6
 800647a:	4680      	mov	r8, r0
 800647c:	4638      	mov	r0, r7
 800647e:	f7ff fe4b 	bl	8006118 <_Bfree>
 8006482:	4646      	mov	r6, r8
 8006484:	106d      	asrs	r5, r5, #1
 8006486:	d00b      	beq.n	80064a0 <__pow5mult+0xa0>
 8006488:	6820      	ldr	r0, [r4, #0]
 800648a:	b938      	cbnz	r0, 800649c <__pow5mult+0x9c>
 800648c:	4622      	mov	r2, r4
 800648e:	4621      	mov	r1, r4
 8006490:	4638      	mov	r0, r7
 8006492:	f7ff ff0b 	bl	80062ac <__multiply>
 8006496:	6020      	str	r0, [r4, #0]
 8006498:	f8c0 9000 	str.w	r9, [r0]
 800649c:	4604      	mov	r4, r0
 800649e:	e7e4      	b.n	800646a <__pow5mult+0x6a>
 80064a0:	4630      	mov	r0, r6
 80064a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064a6:	bf00      	nop
 80064a8:	08007510 	.word	0x08007510
 80064ac:	08007435 	.word	0x08007435
 80064b0:	080074b5 	.word	0x080074b5

080064b4 <__lshift>:
 80064b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064b8:	460c      	mov	r4, r1
 80064ba:	6849      	ldr	r1, [r1, #4]
 80064bc:	6923      	ldr	r3, [r4, #16]
 80064be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80064c2:	68a3      	ldr	r3, [r4, #8]
 80064c4:	4607      	mov	r7, r0
 80064c6:	4691      	mov	r9, r2
 80064c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80064cc:	f108 0601 	add.w	r6, r8, #1
 80064d0:	42b3      	cmp	r3, r6
 80064d2:	db0b      	blt.n	80064ec <__lshift+0x38>
 80064d4:	4638      	mov	r0, r7
 80064d6:	f7ff fddf 	bl	8006098 <_Balloc>
 80064da:	4605      	mov	r5, r0
 80064dc:	b948      	cbnz	r0, 80064f2 <__lshift+0x3e>
 80064de:	4602      	mov	r2, r0
 80064e0:	4b28      	ldr	r3, [pc, #160]	@ (8006584 <__lshift+0xd0>)
 80064e2:	4829      	ldr	r0, [pc, #164]	@ (8006588 <__lshift+0xd4>)
 80064e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80064e8:	f000 fd5a 	bl	8006fa0 <__assert_func>
 80064ec:	3101      	adds	r1, #1
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	e7ee      	b.n	80064d0 <__lshift+0x1c>
 80064f2:	2300      	movs	r3, #0
 80064f4:	f100 0114 	add.w	r1, r0, #20
 80064f8:	f100 0210 	add.w	r2, r0, #16
 80064fc:	4618      	mov	r0, r3
 80064fe:	4553      	cmp	r3, sl
 8006500:	db33      	blt.n	800656a <__lshift+0xb6>
 8006502:	6920      	ldr	r0, [r4, #16]
 8006504:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006508:	f104 0314 	add.w	r3, r4, #20
 800650c:	f019 091f 	ands.w	r9, r9, #31
 8006510:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006514:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006518:	d02b      	beq.n	8006572 <__lshift+0xbe>
 800651a:	f1c9 0e20 	rsb	lr, r9, #32
 800651e:	468a      	mov	sl, r1
 8006520:	2200      	movs	r2, #0
 8006522:	6818      	ldr	r0, [r3, #0]
 8006524:	fa00 f009 	lsl.w	r0, r0, r9
 8006528:	4310      	orrs	r0, r2
 800652a:	f84a 0b04 	str.w	r0, [sl], #4
 800652e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006532:	459c      	cmp	ip, r3
 8006534:	fa22 f20e 	lsr.w	r2, r2, lr
 8006538:	d8f3      	bhi.n	8006522 <__lshift+0x6e>
 800653a:	ebac 0304 	sub.w	r3, ip, r4
 800653e:	3b15      	subs	r3, #21
 8006540:	f023 0303 	bic.w	r3, r3, #3
 8006544:	3304      	adds	r3, #4
 8006546:	f104 0015 	add.w	r0, r4, #21
 800654a:	4584      	cmp	ip, r0
 800654c:	bf38      	it	cc
 800654e:	2304      	movcc	r3, #4
 8006550:	50ca      	str	r2, [r1, r3]
 8006552:	b10a      	cbz	r2, 8006558 <__lshift+0xa4>
 8006554:	f108 0602 	add.w	r6, r8, #2
 8006558:	3e01      	subs	r6, #1
 800655a:	4638      	mov	r0, r7
 800655c:	612e      	str	r6, [r5, #16]
 800655e:	4621      	mov	r1, r4
 8006560:	f7ff fdda 	bl	8006118 <_Bfree>
 8006564:	4628      	mov	r0, r5
 8006566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800656a:	f842 0f04 	str.w	r0, [r2, #4]!
 800656e:	3301      	adds	r3, #1
 8006570:	e7c5      	b.n	80064fe <__lshift+0x4a>
 8006572:	3904      	subs	r1, #4
 8006574:	f853 2b04 	ldr.w	r2, [r3], #4
 8006578:	f841 2f04 	str.w	r2, [r1, #4]!
 800657c:	459c      	cmp	ip, r3
 800657e:	d8f9      	bhi.n	8006574 <__lshift+0xc0>
 8006580:	e7ea      	b.n	8006558 <__lshift+0xa4>
 8006582:	bf00      	nop
 8006584:	080074a4 	.word	0x080074a4
 8006588:	080074b5 	.word	0x080074b5

0800658c <__mcmp>:
 800658c:	690a      	ldr	r2, [r1, #16]
 800658e:	4603      	mov	r3, r0
 8006590:	6900      	ldr	r0, [r0, #16]
 8006592:	1a80      	subs	r0, r0, r2
 8006594:	b530      	push	{r4, r5, lr}
 8006596:	d10e      	bne.n	80065b6 <__mcmp+0x2a>
 8006598:	3314      	adds	r3, #20
 800659a:	3114      	adds	r1, #20
 800659c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80065a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80065a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80065a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80065ac:	4295      	cmp	r5, r2
 80065ae:	d003      	beq.n	80065b8 <__mcmp+0x2c>
 80065b0:	d205      	bcs.n	80065be <__mcmp+0x32>
 80065b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065b6:	bd30      	pop	{r4, r5, pc}
 80065b8:	42a3      	cmp	r3, r4
 80065ba:	d3f3      	bcc.n	80065a4 <__mcmp+0x18>
 80065bc:	e7fb      	b.n	80065b6 <__mcmp+0x2a>
 80065be:	2001      	movs	r0, #1
 80065c0:	e7f9      	b.n	80065b6 <__mcmp+0x2a>
	...

080065c4 <__mdiff>:
 80065c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c8:	4689      	mov	r9, r1
 80065ca:	4606      	mov	r6, r0
 80065cc:	4611      	mov	r1, r2
 80065ce:	4648      	mov	r0, r9
 80065d0:	4614      	mov	r4, r2
 80065d2:	f7ff ffdb 	bl	800658c <__mcmp>
 80065d6:	1e05      	subs	r5, r0, #0
 80065d8:	d112      	bne.n	8006600 <__mdiff+0x3c>
 80065da:	4629      	mov	r1, r5
 80065dc:	4630      	mov	r0, r6
 80065de:	f7ff fd5b 	bl	8006098 <_Balloc>
 80065e2:	4602      	mov	r2, r0
 80065e4:	b928      	cbnz	r0, 80065f2 <__mdiff+0x2e>
 80065e6:	4b3f      	ldr	r3, [pc, #252]	@ (80066e4 <__mdiff+0x120>)
 80065e8:	f240 2137 	movw	r1, #567	@ 0x237
 80065ec:	483e      	ldr	r0, [pc, #248]	@ (80066e8 <__mdiff+0x124>)
 80065ee:	f000 fcd7 	bl	8006fa0 <__assert_func>
 80065f2:	2301      	movs	r3, #1
 80065f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80065f8:	4610      	mov	r0, r2
 80065fa:	b003      	add	sp, #12
 80065fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006600:	bfbc      	itt	lt
 8006602:	464b      	movlt	r3, r9
 8006604:	46a1      	movlt	r9, r4
 8006606:	4630      	mov	r0, r6
 8006608:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800660c:	bfba      	itte	lt
 800660e:	461c      	movlt	r4, r3
 8006610:	2501      	movlt	r5, #1
 8006612:	2500      	movge	r5, #0
 8006614:	f7ff fd40 	bl	8006098 <_Balloc>
 8006618:	4602      	mov	r2, r0
 800661a:	b918      	cbnz	r0, 8006624 <__mdiff+0x60>
 800661c:	4b31      	ldr	r3, [pc, #196]	@ (80066e4 <__mdiff+0x120>)
 800661e:	f240 2145 	movw	r1, #581	@ 0x245
 8006622:	e7e3      	b.n	80065ec <__mdiff+0x28>
 8006624:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006628:	6926      	ldr	r6, [r4, #16]
 800662a:	60c5      	str	r5, [r0, #12]
 800662c:	f109 0310 	add.w	r3, r9, #16
 8006630:	f109 0514 	add.w	r5, r9, #20
 8006634:	f104 0e14 	add.w	lr, r4, #20
 8006638:	f100 0b14 	add.w	fp, r0, #20
 800663c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006640:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006644:	9301      	str	r3, [sp, #4]
 8006646:	46d9      	mov	r9, fp
 8006648:	f04f 0c00 	mov.w	ip, #0
 800664c:	9b01      	ldr	r3, [sp, #4]
 800664e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006652:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006656:	9301      	str	r3, [sp, #4]
 8006658:	fa1f f38a 	uxth.w	r3, sl
 800665c:	4619      	mov	r1, r3
 800665e:	b283      	uxth	r3, r0
 8006660:	1acb      	subs	r3, r1, r3
 8006662:	0c00      	lsrs	r0, r0, #16
 8006664:	4463      	add	r3, ip
 8006666:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800666a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800666e:	b29b      	uxth	r3, r3
 8006670:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006674:	4576      	cmp	r6, lr
 8006676:	f849 3b04 	str.w	r3, [r9], #4
 800667a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800667e:	d8e5      	bhi.n	800664c <__mdiff+0x88>
 8006680:	1b33      	subs	r3, r6, r4
 8006682:	3b15      	subs	r3, #21
 8006684:	f023 0303 	bic.w	r3, r3, #3
 8006688:	3415      	adds	r4, #21
 800668a:	3304      	adds	r3, #4
 800668c:	42a6      	cmp	r6, r4
 800668e:	bf38      	it	cc
 8006690:	2304      	movcc	r3, #4
 8006692:	441d      	add	r5, r3
 8006694:	445b      	add	r3, fp
 8006696:	461e      	mov	r6, r3
 8006698:	462c      	mov	r4, r5
 800669a:	4544      	cmp	r4, r8
 800669c:	d30e      	bcc.n	80066bc <__mdiff+0xf8>
 800669e:	f108 0103 	add.w	r1, r8, #3
 80066a2:	1b49      	subs	r1, r1, r5
 80066a4:	f021 0103 	bic.w	r1, r1, #3
 80066a8:	3d03      	subs	r5, #3
 80066aa:	45a8      	cmp	r8, r5
 80066ac:	bf38      	it	cc
 80066ae:	2100      	movcc	r1, #0
 80066b0:	440b      	add	r3, r1
 80066b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80066b6:	b191      	cbz	r1, 80066de <__mdiff+0x11a>
 80066b8:	6117      	str	r7, [r2, #16]
 80066ba:	e79d      	b.n	80065f8 <__mdiff+0x34>
 80066bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80066c0:	46e6      	mov	lr, ip
 80066c2:	0c08      	lsrs	r0, r1, #16
 80066c4:	fa1c fc81 	uxtah	ip, ip, r1
 80066c8:	4471      	add	r1, lr
 80066ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80066ce:	b289      	uxth	r1, r1
 80066d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80066d4:	f846 1b04 	str.w	r1, [r6], #4
 80066d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80066dc:	e7dd      	b.n	800669a <__mdiff+0xd6>
 80066de:	3f01      	subs	r7, #1
 80066e0:	e7e7      	b.n	80066b2 <__mdiff+0xee>
 80066e2:	bf00      	nop
 80066e4:	080074a4 	.word	0x080074a4
 80066e8:	080074b5 	.word	0x080074b5

080066ec <__d2b>:
 80066ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80066f0:	460f      	mov	r7, r1
 80066f2:	2101      	movs	r1, #1
 80066f4:	ec59 8b10 	vmov	r8, r9, d0
 80066f8:	4616      	mov	r6, r2
 80066fa:	f7ff fccd 	bl	8006098 <_Balloc>
 80066fe:	4604      	mov	r4, r0
 8006700:	b930      	cbnz	r0, 8006710 <__d2b+0x24>
 8006702:	4602      	mov	r2, r0
 8006704:	4b23      	ldr	r3, [pc, #140]	@ (8006794 <__d2b+0xa8>)
 8006706:	4824      	ldr	r0, [pc, #144]	@ (8006798 <__d2b+0xac>)
 8006708:	f240 310f 	movw	r1, #783	@ 0x30f
 800670c:	f000 fc48 	bl	8006fa0 <__assert_func>
 8006710:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006714:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006718:	b10d      	cbz	r5, 800671e <__d2b+0x32>
 800671a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800671e:	9301      	str	r3, [sp, #4]
 8006720:	f1b8 0300 	subs.w	r3, r8, #0
 8006724:	d023      	beq.n	800676e <__d2b+0x82>
 8006726:	4668      	mov	r0, sp
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	f7ff fd7c 	bl	8006226 <__lo0bits>
 800672e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006732:	b1d0      	cbz	r0, 800676a <__d2b+0x7e>
 8006734:	f1c0 0320 	rsb	r3, r0, #32
 8006738:	fa02 f303 	lsl.w	r3, r2, r3
 800673c:	430b      	orrs	r3, r1
 800673e:	40c2      	lsrs	r2, r0
 8006740:	6163      	str	r3, [r4, #20]
 8006742:	9201      	str	r2, [sp, #4]
 8006744:	9b01      	ldr	r3, [sp, #4]
 8006746:	61a3      	str	r3, [r4, #24]
 8006748:	2b00      	cmp	r3, #0
 800674a:	bf0c      	ite	eq
 800674c:	2201      	moveq	r2, #1
 800674e:	2202      	movne	r2, #2
 8006750:	6122      	str	r2, [r4, #16]
 8006752:	b1a5      	cbz	r5, 800677e <__d2b+0x92>
 8006754:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006758:	4405      	add	r5, r0
 800675a:	603d      	str	r5, [r7, #0]
 800675c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006760:	6030      	str	r0, [r6, #0]
 8006762:	4620      	mov	r0, r4
 8006764:	b003      	add	sp, #12
 8006766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800676a:	6161      	str	r1, [r4, #20]
 800676c:	e7ea      	b.n	8006744 <__d2b+0x58>
 800676e:	a801      	add	r0, sp, #4
 8006770:	f7ff fd59 	bl	8006226 <__lo0bits>
 8006774:	9b01      	ldr	r3, [sp, #4]
 8006776:	6163      	str	r3, [r4, #20]
 8006778:	3020      	adds	r0, #32
 800677a:	2201      	movs	r2, #1
 800677c:	e7e8      	b.n	8006750 <__d2b+0x64>
 800677e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006782:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006786:	6038      	str	r0, [r7, #0]
 8006788:	6918      	ldr	r0, [r3, #16]
 800678a:	f7ff fd2d 	bl	80061e8 <__hi0bits>
 800678e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006792:	e7e5      	b.n	8006760 <__d2b+0x74>
 8006794:	080074a4 	.word	0x080074a4
 8006798:	080074b5 	.word	0x080074b5

0800679c <__ssputs_r>:
 800679c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a0:	688e      	ldr	r6, [r1, #8]
 80067a2:	461f      	mov	r7, r3
 80067a4:	42be      	cmp	r6, r7
 80067a6:	680b      	ldr	r3, [r1, #0]
 80067a8:	4682      	mov	sl, r0
 80067aa:	460c      	mov	r4, r1
 80067ac:	4690      	mov	r8, r2
 80067ae:	d82d      	bhi.n	800680c <__ssputs_r+0x70>
 80067b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80067b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80067b8:	d026      	beq.n	8006808 <__ssputs_r+0x6c>
 80067ba:	6965      	ldr	r5, [r4, #20]
 80067bc:	6909      	ldr	r1, [r1, #16]
 80067be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067c2:	eba3 0901 	sub.w	r9, r3, r1
 80067c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067ca:	1c7b      	adds	r3, r7, #1
 80067cc:	444b      	add	r3, r9
 80067ce:	106d      	asrs	r5, r5, #1
 80067d0:	429d      	cmp	r5, r3
 80067d2:	bf38      	it	cc
 80067d4:	461d      	movcc	r5, r3
 80067d6:	0553      	lsls	r3, r2, #21
 80067d8:	d527      	bpl.n	800682a <__ssputs_r+0x8e>
 80067da:	4629      	mov	r1, r5
 80067dc:	f7ff fbd0 	bl	8005f80 <_malloc_r>
 80067e0:	4606      	mov	r6, r0
 80067e2:	b360      	cbz	r0, 800683e <__ssputs_r+0xa2>
 80067e4:	6921      	ldr	r1, [r4, #16]
 80067e6:	464a      	mov	r2, r9
 80067e8:	f000 fbcc 	bl	8006f84 <memcpy>
 80067ec:	89a3      	ldrh	r3, [r4, #12]
 80067ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80067f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067f6:	81a3      	strh	r3, [r4, #12]
 80067f8:	6126      	str	r6, [r4, #16]
 80067fa:	6165      	str	r5, [r4, #20]
 80067fc:	444e      	add	r6, r9
 80067fe:	eba5 0509 	sub.w	r5, r5, r9
 8006802:	6026      	str	r6, [r4, #0]
 8006804:	60a5      	str	r5, [r4, #8]
 8006806:	463e      	mov	r6, r7
 8006808:	42be      	cmp	r6, r7
 800680a:	d900      	bls.n	800680e <__ssputs_r+0x72>
 800680c:	463e      	mov	r6, r7
 800680e:	6820      	ldr	r0, [r4, #0]
 8006810:	4632      	mov	r2, r6
 8006812:	4641      	mov	r1, r8
 8006814:	f000 fb6a 	bl	8006eec <memmove>
 8006818:	68a3      	ldr	r3, [r4, #8]
 800681a:	1b9b      	subs	r3, r3, r6
 800681c:	60a3      	str	r3, [r4, #8]
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	4433      	add	r3, r6
 8006822:	6023      	str	r3, [r4, #0]
 8006824:	2000      	movs	r0, #0
 8006826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800682a:	462a      	mov	r2, r5
 800682c:	f000 fbfc 	bl	8007028 <_realloc_r>
 8006830:	4606      	mov	r6, r0
 8006832:	2800      	cmp	r0, #0
 8006834:	d1e0      	bne.n	80067f8 <__ssputs_r+0x5c>
 8006836:	6921      	ldr	r1, [r4, #16]
 8006838:	4650      	mov	r0, sl
 800683a:	f7ff fb2d 	bl	8005e98 <_free_r>
 800683e:	230c      	movs	r3, #12
 8006840:	f8ca 3000 	str.w	r3, [sl]
 8006844:	89a3      	ldrh	r3, [r4, #12]
 8006846:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800684a:	81a3      	strh	r3, [r4, #12]
 800684c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006850:	e7e9      	b.n	8006826 <__ssputs_r+0x8a>
	...

08006854 <_svfiprintf_r>:
 8006854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006858:	4698      	mov	r8, r3
 800685a:	898b      	ldrh	r3, [r1, #12]
 800685c:	061b      	lsls	r3, r3, #24
 800685e:	b09d      	sub	sp, #116	@ 0x74
 8006860:	4607      	mov	r7, r0
 8006862:	460d      	mov	r5, r1
 8006864:	4614      	mov	r4, r2
 8006866:	d510      	bpl.n	800688a <_svfiprintf_r+0x36>
 8006868:	690b      	ldr	r3, [r1, #16]
 800686a:	b973      	cbnz	r3, 800688a <_svfiprintf_r+0x36>
 800686c:	2140      	movs	r1, #64	@ 0x40
 800686e:	f7ff fb87 	bl	8005f80 <_malloc_r>
 8006872:	6028      	str	r0, [r5, #0]
 8006874:	6128      	str	r0, [r5, #16]
 8006876:	b930      	cbnz	r0, 8006886 <_svfiprintf_r+0x32>
 8006878:	230c      	movs	r3, #12
 800687a:	603b      	str	r3, [r7, #0]
 800687c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006880:	b01d      	add	sp, #116	@ 0x74
 8006882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006886:	2340      	movs	r3, #64	@ 0x40
 8006888:	616b      	str	r3, [r5, #20]
 800688a:	2300      	movs	r3, #0
 800688c:	9309      	str	r3, [sp, #36]	@ 0x24
 800688e:	2320      	movs	r3, #32
 8006890:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006894:	f8cd 800c 	str.w	r8, [sp, #12]
 8006898:	2330      	movs	r3, #48	@ 0x30
 800689a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006a38 <_svfiprintf_r+0x1e4>
 800689e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80068a2:	f04f 0901 	mov.w	r9, #1
 80068a6:	4623      	mov	r3, r4
 80068a8:	469a      	mov	sl, r3
 80068aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068ae:	b10a      	cbz	r2, 80068b4 <_svfiprintf_r+0x60>
 80068b0:	2a25      	cmp	r2, #37	@ 0x25
 80068b2:	d1f9      	bne.n	80068a8 <_svfiprintf_r+0x54>
 80068b4:	ebba 0b04 	subs.w	fp, sl, r4
 80068b8:	d00b      	beq.n	80068d2 <_svfiprintf_r+0x7e>
 80068ba:	465b      	mov	r3, fp
 80068bc:	4622      	mov	r2, r4
 80068be:	4629      	mov	r1, r5
 80068c0:	4638      	mov	r0, r7
 80068c2:	f7ff ff6b 	bl	800679c <__ssputs_r>
 80068c6:	3001      	adds	r0, #1
 80068c8:	f000 80a7 	beq.w	8006a1a <_svfiprintf_r+0x1c6>
 80068cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068ce:	445a      	add	r2, fp
 80068d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80068d2:	f89a 3000 	ldrb.w	r3, [sl]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 809f 	beq.w	8006a1a <_svfiprintf_r+0x1c6>
 80068dc:	2300      	movs	r3, #0
 80068de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80068e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068e6:	f10a 0a01 	add.w	sl, sl, #1
 80068ea:	9304      	str	r3, [sp, #16]
 80068ec:	9307      	str	r3, [sp, #28]
 80068ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80068f4:	4654      	mov	r4, sl
 80068f6:	2205      	movs	r2, #5
 80068f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068fc:	484e      	ldr	r0, [pc, #312]	@ (8006a38 <_svfiprintf_r+0x1e4>)
 80068fe:	f7f9 fc6f 	bl	80001e0 <memchr>
 8006902:	9a04      	ldr	r2, [sp, #16]
 8006904:	b9d8      	cbnz	r0, 800693e <_svfiprintf_r+0xea>
 8006906:	06d0      	lsls	r0, r2, #27
 8006908:	bf44      	itt	mi
 800690a:	2320      	movmi	r3, #32
 800690c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006910:	0711      	lsls	r1, r2, #28
 8006912:	bf44      	itt	mi
 8006914:	232b      	movmi	r3, #43	@ 0x2b
 8006916:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800691a:	f89a 3000 	ldrb.w	r3, [sl]
 800691e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006920:	d015      	beq.n	800694e <_svfiprintf_r+0xfa>
 8006922:	9a07      	ldr	r2, [sp, #28]
 8006924:	4654      	mov	r4, sl
 8006926:	2000      	movs	r0, #0
 8006928:	f04f 0c0a 	mov.w	ip, #10
 800692c:	4621      	mov	r1, r4
 800692e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006932:	3b30      	subs	r3, #48	@ 0x30
 8006934:	2b09      	cmp	r3, #9
 8006936:	d94b      	bls.n	80069d0 <_svfiprintf_r+0x17c>
 8006938:	b1b0      	cbz	r0, 8006968 <_svfiprintf_r+0x114>
 800693a:	9207      	str	r2, [sp, #28]
 800693c:	e014      	b.n	8006968 <_svfiprintf_r+0x114>
 800693e:	eba0 0308 	sub.w	r3, r0, r8
 8006942:	fa09 f303 	lsl.w	r3, r9, r3
 8006946:	4313      	orrs	r3, r2
 8006948:	9304      	str	r3, [sp, #16]
 800694a:	46a2      	mov	sl, r4
 800694c:	e7d2      	b.n	80068f4 <_svfiprintf_r+0xa0>
 800694e:	9b03      	ldr	r3, [sp, #12]
 8006950:	1d19      	adds	r1, r3, #4
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	9103      	str	r1, [sp, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	bfbb      	ittet	lt
 800695a:	425b      	neglt	r3, r3
 800695c:	f042 0202 	orrlt.w	r2, r2, #2
 8006960:	9307      	strge	r3, [sp, #28]
 8006962:	9307      	strlt	r3, [sp, #28]
 8006964:	bfb8      	it	lt
 8006966:	9204      	strlt	r2, [sp, #16]
 8006968:	7823      	ldrb	r3, [r4, #0]
 800696a:	2b2e      	cmp	r3, #46	@ 0x2e
 800696c:	d10a      	bne.n	8006984 <_svfiprintf_r+0x130>
 800696e:	7863      	ldrb	r3, [r4, #1]
 8006970:	2b2a      	cmp	r3, #42	@ 0x2a
 8006972:	d132      	bne.n	80069da <_svfiprintf_r+0x186>
 8006974:	9b03      	ldr	r3, [sp, #12]
 8006976:	1d1a      	adds	r2, r3, #4
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	9203      	str	r2, [sp, #12]
 800697c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006980:	3402      	adds	r4, #2
 8006982:	9305      	str	r3, [sp, #20]
 8006984:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006a48 <_svfiprintf_r+0x1f4>
 8006988:	7821      	ldrb	r1, [r4, #0]
 800698a:	2203      	movs	r2, #3
 800698c:	4650      	mov	r0, sl
 800698e:	f7f9 fc27 	bl	80001e0 <memchr>
 8006992:	b138      	cbz	r0, 80069a4 <_svfiprintf_r+0x150>
 8006994:	9b04      	ldr	r3, [sp, #16]
 8006996:	eba0 000a 	sub.w	r0, r0, sl
 800699a:	2240      	movs	r2, #64	@ 0x40
 800699c:	4082      	lsls	r2, r0
 800699e:	4313      	orrs	r3, r2
 80069a0:	3401      	adds	r4, #1
 80069a2:	9304      	str	r3, [sp, #16]
 80069a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069a8:	4824      	ldr	r0, [pc, #144]	@ (8006a3c <_svfiprintf_r+0x1e8>)
 80069aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80069ae:	2206      	movs	r2, #6
 80069b0:	f7f9 fc16 	bl	80001e0 <memchr>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	d036      	beq.n	8006a26 <_svfiprintf_r+0x1d2>
 80069b8:	4b21      	ldr	r3, [pc, #132]	@ (8006a40 <_svfiprintf_r+0x1ec>)
 80069ba:	bb1b      	cbnz	r3, 8006a04 <_svfiprintf_r+0x1b0>
 80069bc:	9b03      	ldr	r3, [sp, #12]
 80069be:	3307      	adds	r3, #7
 80069c0:	f023 0307 	bic.w	r3, r3, #7
 80069c4:	3308      	adds	r3, #8
 80069c6:	9303      	str	r3, [sp, #12]
 80069c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ca:	4433      	add	r3, r6
 80069cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80069ce:	e76a      	b.n	80068a6 <_svfiprintf_r+0x52>
 80069d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80069d4:	460c      	mov	r4, r1
 80069d6:	2001      	movs	r0, #1
 80069d8:	e7a8      	b.n	800692c <_svfiprintf_r+0xd8>
 80069da:	2300      	movs	r3, #0
 80069dc:	3401      	adds	r4, #1
 80069de:	9305      	str	r3, [sp, #20]
 80069e0:	4619      	mov	r1, r3
 80069e2:	f04f 0c0a 	mov.w	ip, #10
 80069e6:	4620      	mov	r0, r4
 80069e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069ec:	3a30      	subs	r2, #48	@ 0x30
 80069ee:	2a09      	cmp	r2, #9
 80069f0:	d903      	bls.n	80069fa <_svfiprintf_r+0x1a6>
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0c6      	beq.n	8006984 <_svfiprintf_r+0x130>
 80069f6:	9105      	str	r1, [sp, #20]
 80069f8:	e7c4      	b.n	8006984 <_svfiprintf_r+0x130>
 80069fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80069fe:	4604      	mov	r4, r0
 8006a00:	2301      	movs	r3, #1
 8006a02:	e7f0      	b.n	80069e6 <_svfiprintf_r+0x192>
 8006a04:	ab03      	add	r3, sp, #12
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	462a      	mov	r2, r5
 8006a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8006a44 <_svfiprintf_r+0x1f0>)
 8006a0c:	a904      	add	r1, sp, #16
 8006a0e:	4638      	mov	r0, r7
 8006a10:	f7fd fd6a 	bl	80044e8 <_printf_float>
 8006a14:	1c42      	adds	r2, r0, #1
 8006a16:	4606      	mov	r6, r0
 8006a18:	d1d6      	bne.n	80069c8 <_svfiprintf_r+0x174>
 8006a1a:	89ab      	ldrh	r3, [r5, #12]
 8006a1c:	065b      	lsls	r3, r3, #25
 8006a1e:	f53f af2d 	bmi.w	800687c <_svfiprintf_r+0x28>
 8006a22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a24:	e72c      	b.n	8006880 <_svfiprintf_r+0x2c>
 8006a26:	ab03      	add	r3, sp, #12
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	462a      	mov	r2, r5
 8006a2c:	4b05      	ldr	r3, [pc, #20]	@ (8006a44 <_svfiprintf_r+0x1f0>)
 8006a2e:	a904      	add	r1, sp, #16
 8006a30:	4638      	mov	r0, r7
 8006a32:	f7fd fff1 	bl	8004a18 <_printf_i>
 8006a36:	e7ed      	b.n	8006a14 <_svfiprintf_r+0x1c0>
 8006a38:	08007610 	.word	0x08007610
 8006a3c:	0800761a 	.word	0x0800761a
 8006a40:	080044e9 	.word	0x080044e9
 8006a44:	0800679d 	.word	0x0800679d
 8006a48:	08007616 	.word	0x08007616

08006a4c <__sfputc_r>:
 8006a4c:	6893      	ldr	r3, [r2, #8]
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	b410      	push	{r4}
 8006a54:	6093      	str	r3, [r2, #8]
 8006a56:	da08      	bge.n	8006a6a <__sfputc_r+0x1e>
 8006a58:	6994      	ldr	r4, [r2, #24]
 8006a5a:	42a3      	cmp	r3, r4
 8006a5c:	db01      	blt.n	8006a62 <__sfputc_r+0x16>
 8006a5e:	290a      	cmp	r1, #10
 8006a60:	d103      	bne.n	8006a6a <__sfputc_r+0x1e>
 8006a62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a66:	f7fe baa0 	b.w	8004faa <__swbuf_r>
 8006a6a:	6813      	ldr	r3, [r2, #0]
 8006a6c:	1c58      	adds	r0, r3, #1
 8006a6e:	6010      	str	r0, [r2, #0]
 8006a70:	7019      	strb	r1, [r3, #0]
 8006a72:	4608      	mov	r0, r1
 8006a74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <__sfputs_r>:
 8006a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	460f      	mov	r7, r1
 8006a80:	4614      	mov	r4, r2
 8006a82:	18d5      	adds	r5, r2, r3
 8006a84:	42ac      	cmp	r4, r5
 8006a86:	d101      	bne.n	8006a8c <__sfputs_r+0x12>
 8006a88:	2000      	movs	r0, #0
 8006a8a:	e007      	b.n	8006a9c <__sfputs_r+0x22>
 8006a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a90:	463a      	mov	r2, r7
 8006a92:	4630      	mov	r0, r6
 8006a94:	f7ff ffda 	bl	8006a4c <__sfputc_r>
 8006a98:	1c43      	adds	r3, r0, #1
 8006a9a:	d1f3      	bne.n	8006a84 <__sfputs_r+0xa>
 8006a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006aa0 <_vfiprintf_r>:
 8006aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa4:	460d      	mov	r5, r1
 8006aa6:	b09d      	sub	sp, #116	@ 0x74
 8006aa8:	4614      	mov	r4, r2
 8006aaa:	4698      	mov	r8, r3
 8006aac:	4606      	mov	r6, r0
 8006aae:	b118      	cbz	r0, 8006ab8 <_vfiprintf_r+0x18>
 8006ab0:	6a03      	ldr	r3, [r0, #32]
 8006ab2:	b90b      	cbnz	r3, 8006ab8 <_vfiprintf_r+0x18>
 8006ab4:	f7fe f95c 	bl	8004d70 <__sinit>
 8006ab8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006aba:	07d9      	lsls	r1, r3, #31
 8006abc:	d405      	bmi.n	8006aca <_vfiprintf_r+0x2a>
 8006abe:	89ab      	ldrh	r3, [r5, #12]
 8006ac0:	059a      	lsls	r2, r3, #22
 8006ac2:	d402      	bmi.n	8006aca <_vfiprintf_r+0x2a>
 8006ac4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ac6:	f7fe fb98 	bl	80051fa <__retarget_lock_acquire_recursive>
 8006aca:	89ab      	ldrh	r3, [r5, #12]
 8006acc:	071b      	lsls	r3, r3, #28
 8006ace:	d501      	bpl.n	8006ad4 <_vfiprintf_r+0x34>
 8006ad0:	692b      	ldr	r3, [r5, #16]
 8006ad2:	b99b      	cbnz	r3, 8006afc <_vfiprintf_r+0x5c>
 8006ad4:	4629      	mov	r1, r5
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	f7fe faa6 	bl	8005028 <__swsetup_r>
 8006adc:	b170      	cbz	r0, 8006afc <_vfiprintf_r+0x5c>
 8006ade:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ae0:	07dc      	lsls	r4, r3, #31
 8006ae2:	d504      	bpl.n	8006aee <_vfiprintf_r+0x4e>
 8006ae4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ae8:	b01d      	add	sp, #116	@ 0x74
 8006aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aee:	89ab      	ldrh	r3, [r5, #12]
 8006af0:	0598      	lsls	r0, r3, #22
 8006af2:	d4f7      	bmi.n	8006ae4 <_vfiprintf_r+0x44>
 8006af4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006af6:	f7fe fb81 	bl	80051fc <__retarget_lock_release_recursive>
 8006afa:	e7f3      	b.n	8006ae4 <_vfiprintf_r+0x44>
 8006afc:	2300      	movs	r3, #0
 8006afe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b00:	2320      	movs	r3, #32
 8006b02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b06:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b0a:	2330      	movs	r3, #48	@ 0x30
 8006b0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006cbc <_vfiprintf_r+0x21c>
 8006b10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b14:	f04f 0901 	mov.w	r9, #1
 8006b18:	4623      	mov	r3, r4
 8006b1a:	469a      	mov	sl, r3
 8006b1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b20:	b10a      	cbz	r2, 8006b26 <_vfiprintf_r+0x86>
 8006b22:	2a25      	cmp	r2, #37	@ 0x25
 8006b24:	d1f9      	bne.n	8006b1a <_vfiprintf_r+0x7a>
 8006b26:	ebba 0b04 	subs.w	fp, sl, r4
 8006b2a:	d00b      	beq.n	8006b44 <_vfiprintf_r+0xa4>
 8006b2c:	465b      	mov	r3, fp
 8006b2e:	4622      	mov	r2, r4
 8006b30:	4629      	mov	r1, r5
 8006b32:	4630      	mov	r0, r6
 8006b34:	f7ff ffa1 	bl	8006a7a <__sfputs_r>
 8006b38:	3001      	adds	r0, #1
 8006b3a:	f000 80a7 	beq.w	8006c8c <_vfiprintf_r+0x1ec>
 8006b3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b40:	445a      	add	r2, fp
 8006b42:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b44:	f89a 3000 	ldrb.w	r3, [sl]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 809f 	beq.w	8006c8c <_vfiprintf_r+0x1ec>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b58:	f10a 0a01 	add.w	sl, sl, #1
 8006b5c:	9304      	str	r3, [sp, #16]
 8006b5e:	9307      	str	r3, [sp, #28]
 8006b60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b64:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b66:	4654      	mov	r4, sl
 8006b68:	2205      	movs	r2, #5
 8006b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b6e:	4853      	ldr	r0, [pc, #332]	@ (8006cbc <_vfiprintf_r+0x21c>)
 8006b70:	f7f9 fb36 	bl	80001e0 <memchr>
 8006b74:	9a04      	ldr	r2, [sp, #16]
 8006b76:	b9d8      	cbnz	r0, 8006bb0 <_vfiprintf_r+0x110>
 8006b78:	06d1      	lsls	r1, r2, #27
 8006b7a:	bf44      	itt	mi
 8006b7c:	2320      	movmi	r3, #32
 8006b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b82:	0713      	lsls	r3, r2, #28
 8006b84:	bf44      	itt	mi
 8006b86:	232b      	movmi	r3, #43	@ 0x2b
 8006b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b90:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b92:	d015      	beq.n	8006bc0 <_vfiprintf_r+0x120>
 8006b94:	9a07      	ldr	r2, [sp, #28]
 8006b96:	4654      	mov	r4, sl
 8006b98:	2000      	movs	r0, #0
 8006b9a:	f04f 0c0a 	mov.w	ip, #10
 8006b9e:	4621      	mov	r1, r4
 8006ba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ba4:	3b30      	subs	r3, #48	@ 0x30
 8006ba6:	2b09      	cmp	r3, #9
 8006ba8:	d94b      	bls.n	8006c42 <_vfiprintf_r+0x1a2>
 8006baa:	b1b0      	cbz	r0, 8006bda <_vfiprintf_r+0x13a>
 8006bac:	9207      	str	r2, [sp, #28]
 8006bae:	e014      	b.n	8006bda <_vfiprintf_r+0x13a>
 8006bb0:	eba0 0308 	sub.w	r3, r0, r8
 8006bb4:	fa09 f303 	lsl.w	r3, r9, r3
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	9304      	str	r3, [sp, #16]
 8006bbc:	46a2      	mov	sl, r4
 8006bbe:	e7d2      	b.n	8006b66 <_vfiprintf_r+0xc6>
 8006bc0:	9b03      	ldr	r3, [sp, #12]
 8006bc2:	1d19      	adds	r1, r3, #4
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	9103      	str	r1, [sp, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	bfbb      	ittet	lt
 8006bcc:	425b      	neglt	r3, r3
 8006bce:	f042 0202 	orrlt.w	r2, r2, #2
 8006bd2:	9307      	strge	r3, [sp, #28]
 8006bd4:	9307      	strlt	r3, [sp, #28]
 8006bd6:	bfb8      	it	lt
 8006bd8:	9204      	strlt	r2, [sp, #16]
 8006bda:	7823      	ldrb	r3, [r4, #0]
 8006bdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bde:	d10a      	bne.n	8006bf6 <_vfiprintf_r+0x156>
 8006be0:	7863      	ldrb	r3, [r4, #1]
 8006be2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006be4:	d132      	bne.n	8006c4c <_vfiprintf_r+0x1ac>
 8006be6:	9b03      	ldr	r3, [sp, #12]
 8006be8:	1d1a      	adds	r2, r3, #4
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	9203      	str	r2, [sp, #12]
 8006bee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006bf2:	3402      	adds	r4, #2
 8006bf4:	9305      	str	r3, [sp, #20]
 8006bf6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006ccc <_vfiprintf_r+0x22c>
 8006bfa:	7821      	ldrb	r1, [r4, #0]
 8006bfc:	2203      	movs	r2, #3
 8006bfe:	4650      	mov	r0, sl
 8006c00:	f7f9 faee 	bl	80001e0 <memchr>
 8006c04:	b138      	cbz	r0, 8006c16 <_vfiprintf_r+0x176>
 8006c06:	9b04      	ldr	r3, [sp, #16]
 8006c08:	eba0 000a 	sub.w	r0, r0, sl
 8006c0c:	2240      	movs	r2, #64	@ 0x40
 8006c0e:	4082      	lsls	r2, r0
 8006c10:	4313      	orrs	r3, r2
 8006c12:	3401      	adds	r4, #1
 8006c14:	9304      	str	r3, [sp, #16]
 8006c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c1a:	4829      	ldr	r0, [pc, #164]	@ (8006cc0 <_vfiprintf_r+0x220>)
 8006c1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c20:	2206      	movs	r2, #6
 8006c22:	f7f9 fadd 	bl	80001e0 <memchr>
 8006c26:	2800      	cmp	r0, #0
 8006c28:	d03f      	beq.n	8006caa <_vfiprintf_r+0x20a>
 8006c2a:	4b26      	ldr	r3, [pc, #152]	@ (8006cc4 <_vfiprintf_r+0x224>)
 8006c2c:	bb1b      	cbnz	r3, 8006c76 <_vfiprintf_r+0x1d6>
 8006c2e:	9b03      	ldr	r3, [sp, #12]
 8006c30:	3307      	adds	r3, #7
 8006c32:	f023 0307 	bic.w	r3, r3, #7
 8006c36:	3308      	adds	r3, #8
 8006c38:	9303      	str	r3, [sp, #12]
 8006c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c3c:	443b      	add	r3, r7
 8006c3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c40:	e76a      	b.n	8006b18 <_vfiprintf_r+0x78>
 8006c42:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c46:	460c      	mov	r4, r1
 8006c48:	2001      	movs	r0, #1
 8006c4a:	e7a8      	b.n	8006b9e <_vfiprintf_r+0xfe>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	3401      	adds	r4, #1
 8006c50:	9305      	str	r3, [sp, #20]
 8006c52:	4619      	mov	r1, r3
 8006c54:	f04f 0c0a 	mov.w	ip, #10
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c5e:	3a30      	subs	r2, #48	@ 0x30
 8006c60:	2a09      	cmp	r2, #9
 8006c62:	d903      	bls.n	8006c6c <_vfiprintf_r+0x1cc>
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d0c6      	beq.n	8006bf6 <_vfiprintf_r+0x156>
 8006c68:	9105      	str	r1, [sp, #20]
 8006c6a:	e7c4      	b.n	8006bf6 <_vfiprintf_r+0x156>
 8006c6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c70:	4604      	mov	r4, r0
 8006c72:	2301      	movs	r3, #1
 8006c74:	e7f0      	b.n	8006c58 <_vfiprintf_r+0x1b8>
 8006c76:	ab03      	add	r3, sp, #12
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	462a      	mov	r2, r5
 8006c7c:	4b12      	ldr	r3, [pc, #72]	@ (8006cc8 <_vfiprintf_r+0x228>)
 8006c7e:	a904      	add	r1, sp, #16
 8006c80:	4630      	mov	r0, r6
 8006c82:	f7fd fc31 	bl	80044e8 <_printf_float>
 8006c86:	4607      	mov	r7, r0
 8006c88:	1c78      	adds	r0, r7, #1
 8006c8a:	d1d6      	bne.n	8006c3a <_vfiprintf_r+0x19a>
 8006c8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c8e:	07d9      	lsls	r1, r3, #31
 8006c90:	d405      	bmi.n	8006c9e <_vfiprintf_r+0x1fe>
 8006c92:	89ab      	ldrh	r3, [r5, #12]
 8006c94:	059a      	lsls	r2, r3, #22
 8006c96:	d402      	bmi.n	8006c9e <_vfiprintf_r+0x1fe>
 8006c98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c9a:	f7fe faaf 	bl	80051fc <__retarget_lock_release_recursive>
 8006c9e:	89ab      	ldrh	r3, [r5, #12]
 8006ca0:	065b      	lsls	r3, r3, #25
 8006ca2:	f53f af1f 	bmi.w	8006ae4 <_vfiprintf_r+0x44>
 8006ca6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ca8:	e71e      	b.n	8006ae8 <_vfiprintf_r+0x48>
 8006caa:	ab03      	add	r3, sp, #12
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	462a      	mov	r2, r5
 8006cb0:	4b05      	ldr	r3, [pc, #20]	@ (8006cc8 <_vfiprintf_r+0x228>)
 8006cb2:	a904      	add	r1, sp, #16
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	f7fd feaf 	bl	8004a18 <_printf_i>
 8006cba:	e7e4      	b.n	8006c86 <_vfiprintf_r+0x1e6>
 8006cbc:	08007610 	.word	0x08007610
 8006cc0:	0800761a 	.word	0x0800761a
 8006cc4:	080044e9 	.word	0x080044e9
 8006cc8:	08006a7b 	.word	0x08006a7b
 8006ccc:	08007616 	.word	0x08007616

08006cd0 <__sflush_r>:
 8006cd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd8:	0716      	lsls	r6, r2, #28
 8006cda:	4605      	mov	r5, r0
 8006cdc:	460c      	mov	r4, r1
 8006cde:	d454      	bmi.n	8006d8a <__sflush_r+0xba>
 8006ce0:	684b      	ldr	r3, [r1, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	dc02      	bgt.n	8006cec <__sflush_r+0x1c>
 8006ce6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	dd48      	ble.n	8006d7e <__sflush_r+0xae>
 8006cec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cee:	2e00      	cmp	r6, #0
 8006cf0:	d045      	beq.n	8006d7e <__sflush_r+0xae>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006cf8:	682f      	ldr	r7, [r5, #0]
 8006cfa:	6a21      	ldr	r1, [r4, #32]
 8006cfc:	602b      	str	r3, [r5, #0]
 8006cfe:	d030      	beq.n	8006d62 <__sflush_r+0x92>
 8006d00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d02:	89a3      	ldrh	r3, [r4, #12]
 8006d04:	0759      	lsls	r1, r3, #29
 8006d06:	d505      	bpl.n	8006d14 <__sflush_r+0x44>
 8006d08:	6863      	ldr	r3, [r4, #4]
 8006d0a:	1ad2      	subs	r2, r2, r3
 8006d0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d0e:	b10b      	cbz	r3, 8006d14 <__sflush_r+0x44>
 8006d10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d12:	1ad2      	subs	r2, r2, r3
 8006d14:	2300      	movs	r3, #0
 8006d16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d18:	6a21      	ldr	r1, [r4, #32]
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	47b0      	blx	r6
 8006d1e:	1c43      	adds	r3, r0, #1
 8006d20:	89a3      	ldrh	r3, [r4, #12]
 8006d22:	d106      	bne.n	8006d32 <__sflush_r+0x62>
 8006d24:	6829      	ldr	r1, [r5, #0]
 8006d26:	291d      	cmp	r1, #29
 8006d28:	d82b      	bhi.n	8006d82 <__sflush_r+0xb2>
 8006d2a:	4a2a      	ldr	r2, [pc, #168]	@ (8006dd4 <__sflush_r+0x104>)
 8006d2c:	410a      	asrs	r2, r1
 8006d2e:	07d6      	lsls	r6, r2, #31
 8006d30:	d427      	bmi.n	8006d82 <__sflush_r+0xb2>
 8006d32:	2200      	movs	r2, #0
 8006d34:	6062      	str	r2, [r4, #4]
 8006d36:	04d9      	lsls	r1, r3, #19
 8006d38:	6922      	ldr	r2, [r4, #16]
 8006d3a:	6022      	str	r2, [r4, #0]
 8006d3c:	d504      	bpl.n	8006d48 <__sflush_r+0x78>
 8006d3e:	1c42      	adds	r2, r0, #1
 8006d40:	d101      	bne.n	8006d46 <__sflush_r+0x76>
 8006d42:	682b      	ldr	r3, [r5, #0]
 8006d44:	b903      	cbnz	r3, 8006d48 <__sflush_r+0x78>
 8006d46:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d4a:	602f      	str	r7, [r5, #0]
 8006d4c:	b1b9      	cbz	r1, 8006d7e <__sflush_r+0xae>
 8006d4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d52:	4299      	cmp	r1, r3
 8006d54:	d002      	beq.n	8006d5c <__sflush_r+0x8c>
 8006d56:	4628      	mov	r0, r5
 8006d58:	f7ff f89e 	bl	8005e98 <_free_r>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d60:	e00d      	b.n	8006d7e <__sflush_r+0xae>
 8006d62:	2301      	movs	r3, #1
 8006d64:	4628      	mov	r0, r5
 8006d66:	47b0      	blx	r6
 8006d68:	4602      	mov	r2, r0
 8006d6a:	1c50      	adds	r0, r2, #1
 8006d6c:	d1c9      	bne.n	8006d02 <__sflush_r+0x32>
 8006d6e:	682b      	ldr	r3, [r5, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0c6      	beq.n	8006d02 <__sflush_r+0x32>
 8006d74:	2b1d      	cmp	r3, #29
 8006d76:	d001      	beq.n	8006d7c <__sflush_r+0xac>
 8006d78:	2b16      	cmp	r3, #22
 8006d7a:	d11e      	bne.n	8006dba <__sflush_r+0xea>
 8006d7c:	602f      	str	r7, [r5, #0]
 8006d7e:	2000      	movs	r0, #0
 8006d80:	e022      	b.n	8006dc8 <__sflush_r+0xf8>
 8006d82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d86:	b21b      	sxth	r3, r3
 8006d88:	e01b      	b.n	8006dc2 <__sflush_r+0xf2>
 8006d8a:	690f      	ldr	r7, [r1, #16]
 8006d8c:	2f00      	cmp	r7, #0
 8006d8e:	d0f6      	beq.n	8006d7e <__sflush_r+0xae>
 8006d90:	0793      	lsls	r3, r2, #30
 8006d92:	680e      	ldr	r6, [r1, #0]
 8006d94:	bf08      	it	eq
 8006d96:	694b      	ldreq	r3, [r1, #20]
 8006d98:	600f      	str	r7, [r1, #0]
 8006d9a:	bf18      	it	ne
 8006d9c:	2300      	movne	r3, #0
 8006d9e:	eba6 0807 	sub.w	r8, r6, r7
 8006da2:	608b      	str	r3, [r1, #8]
 8006da4:	f1b8 0f00 	cmp.w	r8, #0
 8006da8:	dde9      	ble.n	8006d7e <__sflush_r+0xae>
 8006daa:	6a21      	ldr	r1, [r4, #32]
 8006dac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006dae:	4643      	mov	r3, r8
 8006db0:	463a      	mov	r2, r7
 8006db2:	4628      	mov	r0, r5
 8006db4:	47b0      	blx	r6
 8006db6:	2800      	cmp	r0, #0
 8006db8:	dc08      	bgt.n	8006dcc <__sflush_r+0xfc>
 8006dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dc2:	81a3      	strh	r3, [r4, #12]
 8006dc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dcc:	4407      	add	r7, r0
 8006dce:	eba8 0800 	sub.w	r8, r8, r0
 8006dd2:	e7e7      	b.n	8006da4 <__sflush_r+0xd4>
 8006dd4:	dfbffffe 	.word	0xdfbffffe

08006dd8 <_fflush_r>:
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	690b      	ldr	r3, [r1, #16]
 8006ddc:	4605      	mov	r5, r0
 8006dde:	460c      	mov	r4, r1
 8006de0:	b913      	cbnz	r3, 8006de8 <_fflush_r+0x10>
 8006de2:	2500      	movs	r5, #0
 8006de4:	4628      	mov	r0, r5
 8006de6:	bd38      	pop	{r3, r4, r5, pc}
 8006de8:	b118      	cbz	r0, 8006df2 <_fflush_r+0x1a>
 8006dea:	6a03      	ldr	r3, [r0, #32]
 8006dec:	b90b      	cbnz	r3, 8006df2 <_fflush_r+0x1a>
 8006dee:	f7fd ffbf 	bl	8004d70 <__sinit>
 8006df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d0f3      	beq.n	8006de2 <_fflush_r+0xa>
 8006dfa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006dfc:	07d0      	lsls	r0, r2, #31
 8006dfe:	d404      	bmi.n	8006e0a <_fflush_r+0x32>
 8006e00:	0599      	lsls	r1, r3, #22
 8006e02:	d402      	bmi.n	8006e0a <_fflush_r+0x32>
 8006e04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e06:	f7fe f9f8 	bl	80051fa <__retarget_lock_acquire_recursive>
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	f7ff ff5f 	bl	8006cd0 <__sflush_r>
 8006e12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e14:	07da      	lsls	r2, r3, #31
 8006e16:	4605      	mov	r5, r0
 8006e18:	d4e4      	bmi.n	8006de4 <_fflush_r+0xc>
 8006e1a:	89a3      	ldrh	r3, [r4, #12]
 8006e1c:	059b      	lsls	r3, r3, #22
 8006e1e:	d4e1      	bmi.n	8006de4 <_fflush_r+0xc>
 8006e20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e22:	f7fe f9eb 	bl	80051fc <__retarget_lock_release_recursive>
 8006e26:	e7dd      	b.n	8006de4 <_fflush_r+0xc>

08006e28 <__swhatbuf_r>:
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e30:	2900      	cmp	r1, #0
 8006e32:	b096      	sub	sp, #88	@ 0x58
 8006e34:	4615      	mov	r5, r2
 8006e36:	461e      	mov	r6, r3
 8006e38:	da0d      	bge.n	8006e56 <__swhatbuf_r+0x2e>
 8006e3a:	89a3      	ldrh	r3, [r4, #12]
 8006e3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006e40:	f04f 0100 	mov.w	r1, #0
 8006e44:	bf14      	ite	ne
 8006e46:	2340      	movne	r3, #64	@ 0x40
 8006e48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	6031      	str	r1, [r6, #0]
 8006e50:	602b      	str	r3, [r5, #0]
 8006e52:	b016      	add	sp, #88	@ 0x58
 8006e54:	bd70      	pop	{r4, r5, r6, pc}
 8006e56:	466a      	mov	r2, sp
 8006e58:	f000 f862 	bl	8006f20 <_fstat_r>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	dbec      	blt.n	8006e3a <__swhatbuf_r+0x12>
 8006e60:	9901      	ldr	r1, [sp, #4]
 8006e62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006e66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006e6a:	4259      	negs	r1, r3
 8006e6c:	4159      	adcs	r1, r3
 8006e6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e72:	e7eb      	b.n	8006e4c <__swhatbuf_r+0x24>

08006e74 <__smakebuf_r>:
 8006e74:	898b      	ldrh	r3, [r1, #12]
 8006e76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e78:	079d      	lsls	r5, r3, #30
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	460c      	mov	r4, r1
 8006e7e:	d507      	bpl.n	8006e90 <__smakebuf_r+0x1c>
 8006e80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006e84:	6023      	str	r3, [r4, #0]
 8006e86:	6123      	str	r3, [r4, #16]
 8006e88:	2301      	movs	r3, #1
 8006e8a:	6163      	str	r3, [r4, #20]
 8006e8c:	b003      	add	sp, #12
 8006e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e90:	ab01      	add	r3, sp, #4
 8006e92:	466a      	mov	r2, sp
 8006e94:	f7ff ffc8 	bl	8006e28 <__swhatbuf_r>
 8006e98:	9f00      	ldr	r7, [sp, #0]
 8006e9a:	4605      	mov	r5, r0
 8006e9c:	4639      	mov	r1, r7
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	f7ff f86e 	bl	8005f80 <_malloc_r>
 8006ea4:	b948      	cbnz	r0, 8006eba <__smakebuf_r+0x46>
 8006ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eaa:	059a      	lsls	r2, r3, #22
 8006eac:	d4ee      	bmi.n	8006e8c <__smakebuf_r+0x18>
 8006eae:	f023 0303 	bic.w	r3, r3, #3
 8006eb2:	f043 0302 	orr.w	r3, r3, #2
 8006eb6:	81a3      	strh	r3, [r4, #12]
 8006eb8:	e7e2      	b.n	8006e80 <__smakebuf_r+0xc>
 8006eba:	89a3      	ldrh	r3, [r4, #12]
 8006ebc:	6020      	str	r0, [r4, #0]
 8006ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ec2:	81a3      	strh	r3, [r4, #12]
 8006ec4:	9b01      	ldr	r3, [sp, #4]
 8006ec6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006eca:	b15b      	cbz	r3, 8006ee4 <__smakebuf_r+0x70>
 8006ecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	f000 f837 	bl	8006f44 <_isatty_r>
 8006ed6:	b128      	cbz	r0, 8006ee4 <__smakebuf_r+0x70>
 8006ed8:	89a3      	ldrh	r3, [r4, #12]
 8006eda:	f023 0303 	bic.w	r3, r3, #3
 8006ede:	f043 0301 	orr.w	r3, r3, #1
 8006ee2:	81a3      	strh	r3, [r4, #12]
 8006ee4:	89a3      	ldrh	r3, [r4, #12]
 8006ee6:	431d      	orrs	r5, r3
 8006ee8:	81a5      	strh	r5, [r4, #12]
 8006eea:	e7cf      	b.n	8006e8c <__smakebuf_r+0x18>

08006eec <memmove>:
 8006eec:	4288      	cmp	r0, r1
 8006eee:	b510      	push	{r4, lr}
 8006ef0:	eb01 0402 	add.w	r4, r1, r2
 8006ef4:	d902      	bls.n	8006efc <memmove+0x10>
 8006ef6:	4284      	cmp	r4, r0
 8006ef8:	4623      	mov	r3, r4
 8006efa:	d807      	bhi.n	8006f0c <memmove+0x20>
 8006efc:	1e43      	subs	r3, r0, #1
 8006efe:	42a1      	cmp	r1, r4
 8006f00:	d008      	beq.n	8006f14 <memmove+0x28>
 8006f02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f0a:	e7f8      	b.n	8006efe <memmove+0x12>
 8006f0c:	4402      	add	r2, r0
 8006f0e:	4601      	mov	r1, r0
 8006f10:	428a      	cmp	r2, r1
 8006f12:	d100      	bne.n	8006f16 <memmove+0x2a>
 8006f14:	bd10      	pop	{r4, pc}
 8006f16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f1e:	e7f7      	b.n	8006f10 <memmove+0x24>

08006f20 <_fstat_r>:
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	4d07      	ldr	r5, [pc, #28]	@ (8006f40 <_fstat_r+0x20>)
 8006f24:	2300      	movs	r3, #0
 8006f26:	4604      	mov	r4, r0
 8006f28:	4608      	mov	r0, r1
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	602b      	str	r3, [r5, #0]
 8006f2e:	f7fa fd6d 	bl	8001a0c <_fstat>
 8006f32:	1c43      	adds	r3, r0, #1
 8006f34:	d102      	bne.n	8006f3c <_fstat_r+0x1c>
 8006f36:	682b      	ldr	r3, [r5, #0]
 8006f38:	b103      	cbz	r3, 8006f3c <_fstat_r+0x1c>
 8006f3a:	6023      	str	r3, [r4, #0]
 8006f3c:	bd38      	pop	{r3, r4, r5, pc}
 8006f3e:	bf00      	nop
 8006f40:	20000420 	.word	0x20000420

08006f44 <_isatty_r>:
 8006f44:	b538      	push	{r3, r4, r5, lr}
 8006f46:	4d06      	ldr	r5, [pc, #24]	@ (8006f60 <_isatty_r+0x1c>)
 8006f48:	2300      	movs	r3, #0
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	4608      	mov	r0, r1
 8006f4e:	602b      	str	r3, [r5, #0]
 8006f50:	f7fa fd6c 	bl	8001a2c <_isatty>
 8006f54:	1c43      	adds	r3, r0, #1
 8006f56:	d102      	bne.n	8006f5e <_isatty_r+0x1a>
 8006f58:	682b      	ldr	r3, [r5, #0]
 8006f5a:	b103      	cbz	r3, 8006f5e <_isatty_r+0x1a>
 8006f5c:	6023      	str	r3, [r4, #0]
 8006f5e:	bd38      	pop	{r3, r4, r5, pc}
 8006f60:	20000420 	.word	0x20000420

08006f64 <_sbrk_r>:
 8006f64:	b538      	push	{r3, r4, r5, lr}
 8006f66:	4d06      	ldr	r5, [pc, #24]	@ (8006f80 <_sbrk_r+0x1c>)
 8006f68:	2300      	movs	r3, #0
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	4608      	mov	r0, r1
 8006f6e:	602b      	str	r3, [r5, #0]
 8006f70:	f7fa fd74 	bl	8001a5c <_sbrk>
 8006f74:	1c43      	adds	r3, r0, #1
 8006f76:	d102      	bne.n	8006f7e <_sbrk_r+0x1a>
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	b103      	cbz	r3, 8006f7e <_sbrk_r+0x1a>
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	bd38      	pop	{r3, r4, r5, pc}
 8006f80:	20000420 	.word	0x20000420

08006f84 <memcpy>:
 8006f84:	440a      	add	r2, r1
 8006f86:	4291      	cmp	r1, r2
 8006f88:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006f8c:	d100      	bne.n	8006f90 <memcpy+0xc>
 8006f8e:	4770      	bx	lr
 8006f90:	b510      	push	{r4, lr}
 8006f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f9a:	4291      	cmp	r1, r2
 8006f9c:	d1f9      	bne.n	8006f92 <memcpy+0xe>
 8006f9e:	bd10      	pop	{r4, pc}

08006fa0 <__assert_func>:
 8006fa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fa2:	4614      	mov	r4, r2
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	4b09      	ldr	r3, [pc, #36]	@ (8006fcc <__assert_func+0x2c>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4605      	mov	r5, r0
 8006fac:	68d8      	ldr	r0, [r3, #12]
 8006fae:	b954      	cbnz	r4, 8006fc6 <__assert_func+0x26>
 8006fb0:	4b07      	ldr	r3, [pc, #28]	@ (8006fd0 <__assert_func+0x30>)
 8006fb2:	461c      	mov	r4, r3
 8006fb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fb8:	9100      	str	r1, [sp, #0]
 8006fba:	462b      	mov	r3, r5
 8006fbc:	4905      	ldr	r1, [pc, #20]	@ (8006fd4 <__assert_func+0x34>)
 8006fbe:	f000 f86f 	bl	80070a0 <fiprintf>
 8006fc2:	f000 f87f 	bl	80070c4 <abort>
 8006fc6:	4b04      	ldr	r3, [pc, #16]	@ (8006fd8 <__assert_func+0x38>)
 8006fc8:	e7f4      	b.n	8006fb4 <__assert_func+0x14>
 8006fca:	bf00      	nop
 8006fcc:	20000018 	.word	0x20000018
 8006fd0:	08007666 	.word	0x08007666
 8006fd4:	08007638 	.word	0x08007638
 8006fd8:	0800762b 	.word	0x0800762b

08006fdc <_calloc_r>:
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	fba1 5402 	umull	r5, r4, r1, r2
 8006fe2:	b93c      	cbnz	r4, 8006ff4 <_calloc_r+0x18>
 8006fe4:	4629      	mov	r1, r5
 8006fe6:	f7fe ffcb 	bl	8005f80 <_malloc_r>
 8006fea:	4606      	mov	r6, r0
 8006fec:	b928      	cbnz	r0, 8006ffa <_calloc_r+0x1e>
 8006fee:	2600      	movs	r6, #0
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	bd70      	pop	{r4, r5, r6, pc}
 8006ff4:	220c      	movs	r2, #12
 8006ff6:	6002      	str	r2, [r0, #0]
 8006ff8:	e7f9      	b.n	8006fee <_calloc_r+0x12>
 8006ffa:	462a      	mov	r2, r5
 8006ffc:	4621      	mov	r1, r4
 8006ffe:	f7fe f869 	bl	80050d4 <memset>
 8007002:	e7f5      	b.n	8006ff0 <_calloc_r+0x14>

08007004 <__ascii_mbtowc>:
 8007004:	b082      	sub	sp, #8
 8007006:	b901      	cbnz	r1, 800700a <__ascii_mbtowc+0x6>
 8007008:	a901      	add	r1, sp, #4
 800700a:	b142      	cbz	r2, 800701e <__ascii_mbtowc+0x1a>
 800700c:	b14b      	cbz	r3, 8007022 <__ascii_mbtowc+0x1e>
 800700e:	7813      	ldrb	r3, [r2, #0]
 8007010:	600b      	str	r3, [r1, #0]
 8007012:	7812      	ldrb	r2, [r2, #0]
 8007014:	1e10      	subs	r0, r2, #0
 8007016:	bf18      	it	ne
 8007018:	2001      	movne	r0, #1
 800701a:	b002      	add	sp, #8
 800701c:	4770      	bx	lr
 800701e:	4610      	mov	r0, r2
 8007020:	e7fb      	b.n	800701a <__ascii_mbtowc+0x16>
 8007022:	f06f 0001 	mvn.w	r0, #1
 8007026:	e7f8      	b.n	800701a <__ascii_mbtowc+0x16>

08007028 <_realloc_r>:
 8007028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800702c:	4680      	mov	r8, r0
 800702e:	4615      	mov	r5, r2
 8007030:	460c      	mov	r4, r1
 8007032:	b921      	cbnz	r1, 800703e <_realloc_r+0x16>
 8007034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007038:	4611      	mov	r1, r2
 800703a:	f7fe bfa1 	b.w	8005f80 <_malloc_r>
 800703e:	b92a      	cbnz	r2, 800704c <_realloc_r+0x24>
 8007040:	f7fe ff2a 	bl	8005e98 <_free_r>
 8007044:	2400      	movs	r4, #0
 8007046:	4620      	mov	r0, r4
 8007048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800704c:	f000 f841 	bl	80070d2 <_malloc_usable_size_r>
 8007050:	4285      	cmp	r5, r0
 8007052:	4606      	mov	r6, r0
 8007054:	d802      	bhi.n	800705c <_realloc_r+0x34>
 8007056:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800705a:	d8f4      	bhi.n	8007046 <_realloc_r+0x1e>
 800705c:	4629      	mov	r1, r5
 800705e:	4640      	mov	r0, r8
 8007060:	f7fe ff8e 	bl	8005f80 <_malloc_r>
 8007064:	4607      	mov	r7, r0
 8007066:	2800      	cmp	r0, #0
 8007068:	d0ec      	beq.n	8007044 <_realloc_r+0x1c>
 800706a:	42b5      	cmp	r5, r6
 800706c:	462a      	mov	r2, r5
 800706e:	4621      	mov	r1, r4
 8007070:	bf28      	it	cs
 8007072:	4632      	movcs	r2, r6
 8007074:	f7ff ff86 	bl	8006f84 <memcpy>
 8007078:	4621      	mov	r1, r4
 800707a:	4640      	mov	r0, r8
 800707c:	f7fe ff0c 	bl	8005e98 <_free_r>
 8007080:	463c      	mov	r4, r7
 8007082:	e7e0      	b.n	8007046 <_realloc_r+0x1e>

08007084 <__ascii_wctomb>:
 8007084:	4603      	mov	r3, r0
 8007086:	4608      	mov	r0, r1
 8007088:	b141      	cbz	r1, 800709c <__ascii_wctomb+0x18>
 800708a:	2aff      	cmp	r2, #255	@ 0xff
 800708c:	d904      	bls.n	8007098 <__ascii_wctomb+0x14>
 800708e:	228a      	movs	r2, #138	@ 0x8a
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007096:	4770      	bx	lr
 8007098:	700a      	strb	r2, [r1, #0]
 800709a:	2001      	movs	r0, #1
 800709c:	4770      	bx	lr
	...

080070a0 <fiprintf>:
 80070a0:	b40e      	push	{r1, r2, r3}
 80070a2:	b503      	push	{r0, r1, lr}
 80070a4:	4601      	mov	r1, r0
 80070a6:	ab03      	add	r3, sp, #12
 80070a8:	4805      	ldr	r0, [pc, #20]	@ (80070c0 <fiprintf+0x20>)
 80070aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80070ae:	6800      	ldr	r0, [r0, #0]
 80070b0:	9301      	str	r3, [sp, #4]
 80070b2:	f7ff fcf5 	bl	8006aa0 <_vfiprintf_r>
 80070b6:	b002      	add	sp, #8
 80070b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80070bc:	b003      	add	sp, #12
 80070be:	4770      	bx	lr
 80070c0:	20000018 	.word	0x20000018

080070c4 <abort>:
 80070c4:	b508      	push	{r3, lr}
 80070c6:	2006      	movs	r0, #6
 80070c8:	f000 f834 	bl	8007134 <raise>
 80070cc:	2001      	movs	r0, #1
 80070ce:	f7fa fc4d 	bl	800196c <_exit>

080070d2 <_malloc_usable_size_r>:
 80070d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070d6:	1f18      	subs	r0, r3, #4
 80070d8:	2b00      	cmp	r3, #0
 80070da:	bfbc      	itt	lt
 80070dc:	580b      	ldrlt	r3, [r1, r0]
 80070de:	18c0      	addlt	r0, r0, r3
 80070e0:	4770      	bx	lr

080070e2 <_raise_r>:
 80070e2:	291f      	cmp	r1, #31
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	4605      	mov	r5, r0
 80070e8:	460c      	mov	r4, r1
 80070ea:	d904      	bls.n	80070f6 <_raise_r+0x14>
 80070ec:	2316      	movs	r3, #22
 80070ee:	6003      	str	r3, [r0, #0]
 80070f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070f4:	bd38      	pop	{r3, r4, r5, pc}
 80070f6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80070f8:	b112      	cbz	r2, 8007100 <_raise_r+0x1e>
 80070fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070fe:	b94b      	cbnz	r3, 8007114 <_raise_r+0x32>
 8007100:	4628      	mov	r0, r5
 8007102:	f000 f831 	bl	8007168 <_getpid_r>
 8007106:	4622      	mov	r2, r4
 8007108:	4601      	mov	r1, r0
 800710a:	4628      	mov	r0, r5
 800710c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007110:	f000 b818 	b.w	8007144 <_kill_r>
 8007114:	2b01      	cmp	r3, #1
 8007116:	d00a      	beq.n	800712e <_raise_r+0x4c>
 8007118:	1c59      	adds	r1, r3, #1
 800711a:	d103      	bne.n	8007124 <_raise_r+0x42>
 800711c:	2316      	movs	r3, #22
 800711e:	6003      	str	r3, [r0, #0]
 8007120:	2001      	movs	r0, #1
 8007122:	e7e7      	b.n	80070f4 <_raise_r+0x12>
 8007124:	2100      	movs	r1, #0
 8007126:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800712a:	4620      	mov	r0, r4
 800712c:	4798      	blx	r3
 800712e:	2000      	movs	r0, #0
 8007130:	e7e0      	b.n	80070f4 <_raise_r+0x12>
	...

08007134 <raise>:
 8007134:	4b02      	ldr	r3, [pc, #8]	@ (8007140 <raise+0xc>)
 8007136:	4601      	mov	r1, r0
 8007138:	6818      	ldr	r0, [r3, #0]
 800713a:	f7ff bfd2 	b.w	80070e2 <_raise_r>
 800713e:	bf00      	nop
 8007140:	20000018 	.word	0x20000018

08007144 <_kill_r>:
 8007144:	b538      	push	{r3, r4, r5, lr}
 8007146:	4d07      	ldr	r5, [pc, #28]	@ (8007164 <_kill_r+0x20>)
 8007148:	2300      	movs	r3, #0
 800714a:	4604      	mov	r4, r0
 800714c:	4608      	mov	r0, r1
 800714e:	4611      	mov	r1, r2
 8007150:	602b      	str	r3, [r5, #0]
 8007152:	f7fa fbfb 	bl	800194c <_kill>
 8007156:	1c43      	adds	r3, r0, #1
 8007158:	d102      	bne.n	8007160 <_kill_r+0x1c>
 800715a:	682b      	ldr	r3, [r5, #0]
 800715c:	b103      	cbz	r3, 8007160 <_kill_r+0x1c>
 800715e:	6023      	str	r3, [r4, #0]
 8007160:	bd38      	pop	{r3, r4, r5, pc}
 8007162:	bf00      	nop
 8007164:	20000420 	.word	0x20000420

08007168 <_getpid_r>:
 8007168:	f7fa bbe8 	b.w	800193c <_getpid>

0800716c <_init>:
 800716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716e:	bf00      	nop
 8007170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007172:	bc08      	pop	{r3}
 8007174:	469e      	mov	lr, r3
 8007176:	4770      	bx	lr

08007178 <_fini>:
 8007178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717a:	bf00      	nop
 800717c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717e:	bc08      	pop	{r3}
 8007180:	469e      	mov	lr, r3
 8007182:	4770      	bx	lr
