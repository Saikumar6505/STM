
fsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa04  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0800aba8  0800aba8  0000bba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b190  0800b190  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b190  0800b190  0000c190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b198  0800b198  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b198  0800b198  0000c198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b19c  0800b19c  0000c19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b1a0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042a4  200001d8  0800b378  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000447c  0800b378  0000d47c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017852  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003620  00000000  00000000  00024a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  00028080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001045  00000000  00000000  00029558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d8d  00000000  00000000  0002a59d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ba6  00000000  00000000  0004432a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b6b6  00000000  00000000  0005bed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7586  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ccc  00000000  00000000  000f75cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000fe298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ab8c 	.word	0x0800ab8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800ab8c 	.word	0x0800ab8c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4a07      	ldr	r2, [pc, #28]	@ (8001020 <vApplicationGetIdleTaskMemory+0x2c>)
 8001004:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	4a06      	ldr	r2, [pc, #24]	@ (8001024 <vApplicationGetIdleTaskMemory+0x30>)
 800100a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2280      	movs	r2, #128	@ 0x80
 8001010:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	200001f4 	.word	0x200001f4
 8001024:	20000294 	.word	0x20000294

08001028 <lcd_init>:
#include "lcd_i2c.h"

// Adjust these macros to match your LCD address and configuration
#define SLAVE_ADDRESS_LCD 0x4E  // Change according to your LCD module's I2C address

void lcd_init(I2C_HandleTypeDef *hi2c) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    // Wait for LCD to power up
    HAL_Delay(50);
 8001030:	2032      	movs	r0, #50	@ 0x32
 8001032:	f001 f8ad 	bl	8002190 <HAL_Delay>

    // Initialization sequence
    lcd_send_cmd(hi2c, 0x30);  // Wake up
 8001036:	2130      	movs	r1, #48	@ 0x30
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f874 	bl	8001126 <lcd_send_cmd>
    HAL_Delay(5);
 800103e:	2005      	movs	r0, #5
 8001040:	f001 f8a6 	bl	8002190 <HAL_Delay>
    lcd_send_cmd(hi2c, 0x30);  // Wake up
 8001044:	2130      	movs	r1, #48	@ 0x30
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 f86d 	bl	8001126 <lcd_send_cmd>
    HAL_Delay(1);
 800104c:	2001      	movs	r0, #1
 800104e:	f001 f89f 	bl	8002190 <HAL_Delay>
    lcd_send_cmd(hi2c, 0x30);  // Wake up
 8001052:	2130      	movs	r1, #48	@ 0x30
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 f866 	bl	8001126 <lcd_send_cmd>
    HAL_Delay(10);
 800105a:	200a      	movs	r0, #10
 800105c:	f001 f898 	bl	8002190 <HAL_Delay>

    // 4-bit mode
    lcd_send_cmd(hi2c, 0x20);  // Function set: 4-bit mode
 8001060:	2120      	movs	r1, #32
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f85f 	bl	8001126 <lcd_send_cmd>

    // LCD configuration
    lcd_send_cmd(hi2c, 0x28);  // 2-line, 5x8 dots
 8001068:	2128      	movs	r1, #40	@ 0x28
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f85b 	bl	8001126 <lcd_send_cmd>
    lcd_send_cmd(hi2c, 0x08);  // Display off, cursor off, blink off
 8001070:	2108      	movs	r1, #8
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f857 	bl	8001126 <lcd_send_cmd>
    lcd_send_cmd(hi2c, 0x01);  // Clear display
 8001078:	2101      	movs	r1, #1
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f853 	bl	8001126 <lcd_send_cmd>
    HAL_Delay(2);
 8001080:	2002      	movs	r0, #2
 8001082:	f001 f885 	bl	8002190 <HAL_Delay>
    lcd_send_cmd(hi2c, 0x06);  // Entry mode set: shift right, cursor right
 8001086:	2106      	movs	r1, #6
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 f84c 	bl	8001126 <lcd_send_cmd>
    lcd_send_cmd(hi2c, 0x0C);  // Display on, cursor off, blink off
 800108e:	210c      	movs	r1, #12
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 f848 	bl	8001126 <lcd_send_cmd>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <lcd_clear>:

void lcd_clear(I2C_HandleTypeDef *hi2c) {
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(hi2c, LCD_CLEARDISPLAY);
 80010a6:	2101      	movs	r1, #1
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 f83c 	bl	8001126 <lcd_send_cmd>
    HAL_Delay(2);  // LCD clear command requires a delay
 80010ae:	2002      	movs	r0, #2
 80010b0:	f001 f86e 	bl	8002190 <HAL_Delay>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <lcd_set_cursor>:

void lcd_set_cursor(I2C_HandleTypeDef *hi2c, uint8_t row, uint8_t col) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
 80010c8:	4613      	mov	r3, r2
 80010ca:	70bb      	strb	r3, [r7, #2]
    uint8_t pos = (row == 0) ? (0x80 | col) : (0xC0 | col);
 80010cc:	78fb      	ldrb	r3, [r7, #3]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d104      	bne.n	80010dc <lcd_set_cursor+0x20>
 80010d2:	78bb      	ldrb	r3, [r7, #2]
 80010d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	e003      	b.n	80010e4 <lcd_set_cursor+0x28>
 80010dc:	78bb      	ldrb	r3, [r7, #2]
 80010de:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(hi2c, pos);
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	4619      	mov	r1, r3
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f81b 	bl	8001126 <lcd_send_cmd>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <lcd_send_string>:

void lcd_send_string(I2C_HandleTypeDef *hi2c, char *str) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    while (*str) {
 8001102:	e007      	b.n	8001114 <lcd_send_string+0x1c>
        lcd_send_data(hi2c, *str++);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	603a      	str	r2, [r7, #0]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f837 	bl	8001182 <lcd_send_data>
    while (*str) {
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1f3      	bne.n	8001104 <lcd_send_string+0xc>
    }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <lcd_send_cmd>:

void lcd_send_cmd(I2C_HandleTypeDef *hi2c, char cmd) {
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af02      	add	r7, sp, #8
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	460b      	mov	r3, r1
 8001130:	70fb      	strb	r3, [r7, #3]
    char data_u, data_l;
    uint8_t data_t[4];

    data_u = (cmd & 0xf0);
 8001132:	78fb      	ldrb	r3, [r7, #3]
 8001134:	f023 030f 	bic.w	r3, r3, #15
 8001138:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xf0);
 800113a:	78fb      	ldrb	r3, [r7, #3]
 800113c:	011b      	lsls	r3, r3, #4
 800113e:	73bb      	strb	r3, [r7, #14]

    // Send upper nibble
    data_t[0] = data_u | 0x0C;  // en=1, rs=0
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	f043 030c 	orr.w	r3, r3, #12
 8001146:	b2db      	uxtb	r3, r3
 8001148:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08;  // en=0, rs=0
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	b2db      	uxtb	r3, r3
 8001152:	727b      	strb	r3, [r7, #9]
    // Send lower nibble
    data_t[2] = data_l | 0x0C;  // en=1, rs=0
 8001154:	7bbb      	ldrb	r3, [r7, #14]
 8001156:	f043 030c 	orr.w	r3, r3, #12
 800115a:	b2db      	uxtb	r3, r3
 800115c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08;  // en=0, rs=0
 800115e:	7bbb      	ldrb	r3, [r7, #14]
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	b2db      	uxtb	r3, r3
 8001166:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8001168:	f107 0208 	add.w	r2, r7, #8
 800116c:	2364      	movs	r3, #100	@ 0x64
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2304      	movs	r3, #4
 8001172:	214e      	movs	r1, #78	@ 0x4e
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f001 fbf3 	bl	8002960 <HAL_I2C_Master_Transmit>
}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <lcd_send_data>:

void lcd_send_data(I2C_HandleTypeDef *hi2c, char data) {
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af02      	add	r7, sp, #8
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	460b      	mov	r3, r1
 800118c:	70fb      	strb	r3, [r7, #3]
    char data_u, data_l;
    uint8_t data_t[4];

    data_u = (data & 0xf0);
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	f023 030f 	bic.w	r3, r3, #15
 8001194:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xf0);
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	011b      	lsls	r3, r3, #4
 800119a:	73bb      	strb	r3, [r7, #14]

    // Send upper nibble
    data_t[0] = data_u | 0x0D;  // en=1, rs=1
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	f043 030d 	orr.w	r3, r3, #13
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  // en=0, rs=1
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	f043 0309 	orr.w	r3, r3, #9
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	727b      	strb	r3, [r7, #9]
    // Send lower nibble
    data_t[2] = data_l | 0x0D;  // en=1, rs=1
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	f043 030d 	orr.w	r3, r3, #13
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  // en=0, rs=1
 80011ba:	7bbb      	ldrb	r3, [r7, #14]
 80011bc:	f043 0309 	orr.w	r3, r3, #9
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 80011c4:	f107 0208 	add.w	r2, r7, #8
 80011c8:	2364      	movs	r3, #100	@ 0x64
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2304      	movs	r3, #4
 80011ce:	214e      	movs	r1, #78	@ 0x4e
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f001 fbc5 	bl	8002960 <HAL_I2C_Master_Transmit>
}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <main>:
int __io_putchar(int ch) {
    ITM_SendChar(ch);
    return ch;
}

int main(void) {
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b08e      	sub	sp, #56	@ 0x38
 80011e4:	af00      	add	r7, sp, #0
    HAL_Init();
 80011e6:	f000 ff91 	bl	800210c <HAL_Init>
    SystemClock_Config();
 80011ea:	f000 f947 	bl	800147c <SystemClock_Config>
    MX_GPIO_Init();
 80011ee:	f000 fa31 	bl	8001654 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80011f2:	f000 fa05 	bl	8001600 <MX_USART2_UART_Init>
    MX_I2C1_Init();
 80011f6:	f000 f9ab 	bl	8001550 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 80011fa:	f000 f9d7 	bl	80015ac <MX_USART1_UART_Init>
    WE10_RestartInitialization();
 80011fe:	f000 ff4d 	bl	800209c <WE10_RestartInitialization>

    lcd_init(&hi2c1);
 8001202:	481b      	ldr	r0, [pc, #108]	@ (8001270 <main+0x90>)
 8001204:	f7ff ff10 	bl	8001028 <lcd_init>
    lcd_clear(&hi2c1);
 8001208:	4819      	ldr	r0, [pc, #100]	@ (8001270 <main+0x90>)
 800120a:	f7ff ff48 	bl	800109e <lcd_clear>
    lcd_set_cursor(&hi2c1, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	4817      	ldr	r0, [pc, #92]	@ (8001270 <main+0x90>)
 8001214:	f7ff ff52 	bl	80010bc <lcd_set_cursor>
    lcd_send_string(&hi2c1, "Initializing...");
 8001218:	4916      	ldr	r1, [pc, #88]	@ (8001274 <main+0x94>)
 800121a:	4815      	ldr	r0, [pc, #84]	@ (8001270 <main+0x90>)
 800121c:	f7ff ff6c 	bl	80010f8 <lcd_send_string>

    osThreadDef(mqttTask, mqtt_Task, osPriorityNormal, 0, 128);
 8001220:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <main+0x98>)
 8001222:	f107 041c 	add.w	r4, r7, #28
 8001226:	461d      	mov	r5, r3
 8001228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001230:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    mqttTaskHandle = osThreadCreate(osThread(mqttTask), NULL);
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f003 fe45 	bl	8004eca <osThreadCreate>
 8001240:	4603      	mov	r3, r0
 8001242:	4a0e      	ldr	r2, [pc, #56]	@ (800127c <main+0x9c>)
 8001244:	6013      	str	r3, [r2, #0]

    osThreadDef(fsmTask, fsm_Task, osPriorityIdle, 0, 256); // Increased stack size
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <main+0xa0>)
 8001248:	463c      	mov	r4, r7
 800124a:	461d      	mov	r5, r3
 800124c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800124e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001250:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001254:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    fsmTaskHandle = osThreadCreate(osThread(fsmTask), NULL);
 8001258:	463b      	mov	r3, r7
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f003 fe34 	bl	8004eca <osThreadCreate>
 8001262:	4603      	mov	r3, r0
 8001264:	4a07      	ldr	r2, [pc, #28]	@ (8001284 <main+0xa4>)
 8001266:	6013      	str	r3, [r2, #0]

    osKernelStart();
 8001268:	f003 fe28 	bl	8004ebc <osKernelStart>

    while (1) {}
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <main+0x8c>
 8001270:	20000498 	.word	0x20000498
 8001274:	0800aba8 	.word	0x0800aba8
 8001278:	0800abc4 	.word	0x0800abc4
 800127c:	20000584 	.word	0x20000584
 8001280:	0800abe8 	.word	0x0800abe8
 8001284:	20000588 	.word	0x20000588

08001288 <fsm_Task>:
}

void fsm_Task(void const * argument) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
    char device_status[] = "ON";
 8001290:	4a21      	ldr	r2, [pc, #132]	@ (8001318 <fsm_Task+0x90>)
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	6812      	ldr	r2, [r2, #0]
 8001298:	4611      	mov	r1, r2
 800129a:	8019      	strh	r1, [r3, #0]
 800129c:	3302      	adds	r3, #2
 800129e:	0c12      	lsrs	r2, r2, #16
 80012a0:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (state) {
 80012a2:	4b1e      	ldr	r3, [pc, #120]	@ (800131c <fsm_Task+0x94>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d012      	beq.n	80012d0 <fsm_Task+0x48>
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	dc2f      	bgt.n	800130e <fsm_Task+0x86>
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d002      	beq.n	80012b8 <fsm_Task+0x30>
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d004      	beq.n	80012c0 <fsm_Task+0x38>
 80012b6:	e02a      	b.n	800130e <fsm_Task+0x86>
            case STATE_INIT:
                state = STATE_READ_SENSOR;
 80012b8:	4b18      	ldr	r3, [pc, #96]	@ (800131c <fsm_Task+0x94>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
                break;
 80012be:	e026      	b.n	800130e <fsm_Task+0x86>

            case STATE_READ_SENSOR:
                read_sensor_values(&temperature, &humidity);
 80012c0:	4917      	ldr	r1, [pc, #92]	@ (8001320 <fsm_Task+0x98>)
 80012c2:	4818      	ldr	r0, [pc, #96]	@ (8001324 <fsm_Task+0x9c>)
 80012c4:	f000 f830 	bl	8001328 <read_sensor_values>
                state = STATE_PUBLISH_MQTT;
 80012c8:	4b14      	ldr	r3, [pc, #80]	@ (800131c <fsm_Task+0x94>)
 80012ca:	2202      	movs	r2, #2
 80012cc:	701a      	strb	r2, [r3, #0]
                break;
 80012ce:	e01e      	b.n	800130e <fsm_Task+0x86>

            case STATE_PUBLISH_MQTT:
                mqtt_data_send(temperature, humidity);
 80012d0:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <fsm_Task+0x9c>)
 80012d2:	edd3 7a00 	vldr	s15, [r3]
 80012d6:	4b12      	ldr	r3, [pc, #72]	@ (8001320 <fsm_Task+0x98>)
 80012d8:	ed93 7a00 	vldr	s14, [r3]
 80012dc:	eef0 0a47 	vmov.f32	s1, s14
 80012e0:	eeb0 0a67 	vmov.f32	s0, s15
 80012e4:	f000 f888 	bl	80013f8 <mqtt_data_send>
                lcd_display(temperature, humidity, device_status);
 80012e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <fsm_Task+0x9c>)
 80012ea:	edd3 7a00 	vldr	s15, [r3]
 80012ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <fsm_Task+0x98>)
 80012f0:	ed93 7a00 	vldr	s14, [r3]
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4618      	mov	r0, r3
 80012fa:	eef0 0a47 	vmov.f32	s1, s14
 80012fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001302:	f000 f831 	bl	8001368 <lcd_display>

                state = STATE_READ_SENSOR; // Loop back to reading
 8001306:	4b05      	ldr	r3, [pc, #20]	@ (800131c <fsm_Task+0x94>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
                break;
 800130c:	bf00      	nop
        }
        osDelay(1000); // Delay to reduce CPU load
 800130e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001312:	f003 fe26 	bl	8004f62 <osDelay>
        switch (state) {
 8001316:	e7c4      	b.n	80012a2 <fsm_Task+0x1a>
 8001318:	0800ac04 	.word	0x0800ac04
 800131c:	20000494 	.word	0x20000494
 8001320:	20000580 	.word	0x20000580
 8001324:	2000057c 	.word	0x2000057c

08001328 <read_sensor_values>:
    }
}

void read_sensor_values(float *temp, float *hum) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
    *temp = SHT25_ReadTemperature();
 8001332:	f000 fa15 	bl	8001760 <SHT25_ReadTemperature>
 8001336:	eef0 7a40 	vmov.f32	s15, s0
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	edc3 7a00 	vstr	s15, [r3]
    *hum = SHT25_ReadHumidity();
 8001340:	f000 fa6e 	bl	8001820 <SHT25_ReadHumidity>
 8001344:	eef0 7a40 	vmov.f32	s15, s0
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	edc3 7a00 	vstr	s15, [r3]
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <mqtt_Task>:

void mqtt_Task(void const * argument) {
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
    while (1) {
        osDelay(1000);
 800135e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001362:	f003 fdfe 	bl	8004f62 <osDelay>
 8001366:	e7fa      	b.n	800135e <mqtt_Task+0x8>

08001368 <lcd_display>:
    }
}

void lcd_display(float temp, float hum, char *deviceStatus) {
 8001368:	b5b0      	push	{r4, r5, r7, lr}
 800136a:	b08a      	sub	sp, #40	@ 0x28
 800136c:	af02      	add	r7, sp, #8
 800136e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001372:	edc7 0a02 	vstr	s1, [r7, #8]
 8001376:	6078      	str	r0, [r7, #4]
    char buffer[16];
    lcd_set_cursor(&hi2c1, 0, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	2100      	movs	r1, #0
 800137c:	481a      	ldr	r0, [pc, #104]	@ (80013e8 <lcd_display+0x80>)
 800137e:	f7ff fe9d 	bl	80010bc <lcd_set_cursor>
    sprintf(buffer, "T: %.2fC H: %.2f%%", temp, hum);
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f7ff f8e8 	bl	8000558 <__aeabi_f2d>
 8001388:	4604      	mov	r4, r0
 800138a:	460d      	mov	r5, r1
 800138c:	68b8      	ldr	r0, [r7, #8]
 800138e:	f7ff f8e3 	bl	8000558 <__aeabi_f2d>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	f107 0010 	add.w	r0, r7, #16
 800139a:	e9cd 2300 	strd	r2, r3, [sp]
 800139e:	4622      	mov	r2, r4
 80013a0:	462b      	mov	r3, r5
 80013a2:	4912      	ldr	r1, [pc, #72]	@ (80013ec <lcd_display+0x84>)
 80013a4:	f005 ff60 	bl	8007268 <siprintf>
    lcd_send_string(&hi2c1, buffer);
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	4619      	mov	r1, r3
 80013ae:	480e      	ldr	r0, [pc, #56]	@ (80013e8 <lcd_display+0x80>)
 80013b0:	f7ff fea2 	bl	80010f8 <lcd_send_string>

    lcd_set_cursor(&hi2c1, 1, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2101      	movs	r1, #1
 80013b8:	480b      	ldr	r0, [pc, #44]	@ (80013e8 <lcd_display+0x80>)
 80013ba:	f7ff fe7f 	bl	80010bc <lcd_set_cursor>
    if (deviceStatus[0] == 'O') {
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b4f      	cmp	r3, #79	@ 0x4f
 80013c4:	d104      	bne.n	80013d0 <lcd_display+0x68>
        lcd_send_string(&hi2c1, "Device: ON");
 80013c6:	490a      	ldr	r1, [pc, #40]	@ (80013f0 <lcd_display+0x88>)
 80013c8:	4807      	ldr	r0, [pc, #28]	@ (80013e8 <lcd_display+0x80>)
 80013ca:	f7ff fe95 	bl	80010f8 <lcd_send_string>
 80013ce:	e003      	b.n	80013d8 <lcd_display+0x70>
    } else {
        lcd_send_string(&hi2c1, "Device: OFF");
 80013d0:	4908      	ldr	r1, [pc, #32]	@ (80013f4 <lcd_display+0x8c>)
 80013d2:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <lcd_display+0x80>)
 80013d4:	f7ff fe90 	bl	80010f8 <lcd_send_string>
    }
    HAL_Delay(10);
 80013d8:	200a      	movs	r0, #10
 80013da:	f000 fed9 	bl	8002190 <HAL_Delay>
}
 80013de:	bf00      	nop
 80013e0:	3720      	adds	r7, #32
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bdb0      	pop	{r4, r5, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000498 	.word	0x20000498
 80013ec:	0800ac08 	.word	0x0800ac08
 80013f0:	0800ac1c 	.word	0x0800ac1c
 80013f4:	0800ac28 	.word	0x0800ac28

080013f8 <mqtt_data_send>:
void mqtt_data_send(float temp, float hum) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b09c      	sub	sp, #112	@ 0x70
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001402:	edc7 0a00 	vstr	s1, [r7]
    char buffer[100];

    sprintf(buffer, "CMD+MQTTPUB=base/state/temperature,%.2f C\r\n", temp);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff f8a6 	bl	8000558 <__aeabi_f2d>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	f107 000c 	add.w	r0, r7, #12
 8001414:	4916      	ldr	r1, [pc, #88]	@ (8001470 <mqtt_data_send+0x78>)
 8001416:	f005 ff27 	bl	8007268 <siprintf>
    if (HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000) != HAL_OK) {
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	4618      	mov	r0, r3
 8001420:	f7fe ff2e 	bl	8000280 <strlen>
 8001424:	4603      	mov	r3, r0
 8001426:	b29a      	uxth	r2, r3
 8001428:	f107 010c 	add.w	r1, r7, #12
 800142c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001430:	4810      	ldr	r0, [pc, #64]	@ (8001474 <mqtt_data_send+0x7c>)
 8001432:	f003 f8d9 	bl	80045e8 <HAL_UART_Transmit>
        // Handle error
    }

    sprintf(buffer, "CMD+MQTTPUB=base/state/humidity,%.2f %%\r\n", hum);
 8001436:	6838      	ldr	r0, [r7, #0]
 8001438:	f7ff f88e 	bl	8000558 <__aeabi_f2d>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	f107 000c 	add.w	r0, r7, #12
 8001444:	490c      	ldr	r1, [pc, #48]	@ (8001478 <mqtt_data_send+0x80>)
 8001446:	f005 ff0f 	bl	8007268 <siprintf>
    if (HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000) != HAL_OK) {
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	4618      	mov	r0, r3
 8001450:	f7fe ff16 	bl	8000280 <strlen>
 8001454:	4603      	mov	r3, r0
 8001456:	b29a      	uxth	r2, r3
 8001458:	f107 010c 	add.w	r1, r7, #12
 800145c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001460:	4804      	ldr	r0, [pc, #16]	@ (8001474 <mqtt_data_send+0x7c>)
 8001462:	f003 f8c1 	bl	80045e8 <HAL_UART_Transmit>
        // Handle error
    }
}
 8001466:	bf00      	nop
 8001468:	3770      	adds	r7, #112	@ 0x70
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	0800ac34 	.word	0x0800ac34
 8001474:	200004ec 	.word	0x200004ec
 8001478:	0800ac60 	.word	0x0800ac60

0800147c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b094      	sub	sp, #80	@ 0x50
 8001480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001482:	f107 0320 	add.w	r3, r7, #32
 8001486:	2230      	movs	r2, #48	@ 0x30
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f005 ff4f 	bl	800732e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	4b28      	ldr	r3, [pc, #160]	@ (8001548 <SystemClock_Config+0xcc>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a8:	4a27      	ldr	r2, [pc, #156]	@ (8001548 <SystemClock_Config+0xcc>)
 80014aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b0:	4b25      	ldr	r3, [pc, #148]	@ (8001548 <SystemClock_Config+0xcc>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	4b22      	ldr	r3, [pc, #136]	@ (800154c <SystemClock_Config+0xd0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a21      	ldr	r2, [pc, #132]	@ (800154c <SystemClock_Config+0xd0>)
 80014c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b1f      	ldr	r3, [pc, #124]	@ (800154c <SystemClock_Config+0xd0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d8:	2302      	movs	r3, #2
 80014da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014dc:	2301      	movs	r3, #1
 80014de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e0:	2310      	movs	r3, #16
 80014e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e4:	2302      	movs	r3, #2
 80014e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e8:	2300      	movs	r3, #0
 80014ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014ec:	2310      	movs	r3, #16
 80014ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014f0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80014f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014f6:	2304      	movs	r3, #4
 80014f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014fa:	2304      	movs	r3, #4
 80014fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fe:	f107 0320 	add.w	r3, r7, #32
 8001502:	4618      	mov	r0, r3
 8001504:	f002 f8e2 	bl	80036cc <HAL_RCC_OscConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800150e:	f000 f91e 	bl	800174e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001512:	230f      	movs	r3, #15
 8001514:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001516:	2302      	movs	r3, #2
 8001518:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800151e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001522:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	2102      	movs	r1, #2
 800152e:	4618      	mov	r0, r3
 8001530:	f002 fb44 	bl	8003bbc <HAL_RCC_ClockConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800153a:	f000 f908 	bl	800174e <Error_Handler>
  }
}
 800153e:	bf00      	nop
 8001540:	3750      	adds	r7, #80	@ 0x50
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800
 800154c:	40007000 	.word	0x40007000

08001550 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001554:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <MX_I2C1_Init+0x50>)
 8001556:	4a13      	ldr	r2, [pc, #76]	@ (80015a4 <MX_I2C1_Init+0x54>)
 8001558:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800155a:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <MX_I2C1_Init+0x50>)
 800155c:	4a12      	ldr	r2, [pc, #72]	@ (80015a8 <MX_I2C1_Init+0x58>)
 800155e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001560:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <MX_I2C1_Init+0x50>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001566:	4b0e      	ldr	r3, [pc, #56]	@ (80015a0 <MX_I2C1_Init+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800156c:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <MX_I2C1_Init+0x50>)
 800156e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001572:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001574:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <MX_I2C1_Init+0x50>)
 8001576:	2200      	movs	r2, #0
 8001578:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800157a:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <MX_I2C1_Init+0x50>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001580:	4b07      	ldr	r3, [pc, #28]	@ (80015a0 <MX_I2C1_Init+0x50>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <MX_I2C1_Init+0x50>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800158c:	4804      	ldr	r0, [pc, #16]	@ (80015a0 <MX_I2C1_Init+0x50>)
 800158e:	f001 f8a3 	bl	80026d8 <HAL_I2C_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001598:	f000 f8d9 	bl	800174e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000498 	.word	0x20000498
 80015a4:	40005400 	.word	0x40005400
 80015a8:	000186a0 	.word	0x000186a0

080015ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015b0:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <MX_USART1_UART_Init+0x4c>)
 80015b2:	4a12      	ldr	r2, [pc, #72]	@ (80015fc <MX_USART1_UART_Init+0x50>)
 80015b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80015b6:	4b10      	ldr	r3, [pc, #64]	@ (80015f8 <MX_USART1_UART_Init+0x4c>)
 80015b8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80015bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015be:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <MX_USART1_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <MX_USART1_UART_Init+0x4c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <MX_USART1_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015d0:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <MX_USART1_UART_Init+0x4c>)
 80015d2:	220c      	movs	r2, #12
 80015d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d6:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <MX_USART1_UART_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <MX_USART1_UART_Init+0x4c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	@ (80015f8 <MX_USART1_UART_Init+0x4c>)
 80015e4:	f002 ffb0 	bl	8004548 <HAL_UART_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015ee:	f000 f8ae 	bl	800174e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200004ec 	.word	0x200004ec
 80015fc:	40011000 	.word	0x40011000

08001600 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001604:	4b11      	ldr	r3, [pc, #68]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 8001606:	4a12      	ldr	r2, [pc, #72]	@ (8001650 <MX_USART2_UART_Init+0x50>)
 8001608:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 800160c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001610:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b09      	ldr	r3, [pc, #36]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b08      	ldr	r3, [pc, #32]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 8001638:	f002 ff86 	bl	8004548 <HAL_UART_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001642:	f000 f884 	bl	800174e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000534 	.word	0x20000534
 8001650:	40004400 	.word	0x40004400

08001654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	@ 0x28
 8001658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b2d      	ldr	r3, [pc, #180]	@ (8001724 <MX_GPIO_Init+0xd0>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a2c      	ldr	r2, [pc, #176]	@ (8001724 <MX_GPIO_Init+0xd0>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b2a      	ldr	r3, [pc, #168]	@ (8001724 <MX_GPIO_Init+0xd0>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b26      	ldr	r3, [pc, #152]	@ (8001724 <MX_GPIO_Init+0xd0>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4a25      	ldr	r2, [pc, #148]	@ (8001724 <MX_GPIO_Init+0xd0>)
 8001690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4b23      	ldr	r3, [pc, #140]	@ (8001724 <MX_GPIO_Init+0xd0>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001724 <MX_GPIO_Init+0xd0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001724 <MX_GPIO_Init+0xd0>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001724 <MX_GPIO_Init+0xd0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	4b18      	ldr	r3, [pc, #96]	@ (8001724 <MX_GPIO_Init+0xd0>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	4a17      	ldr	r2, [pc, #92]	@ (8001724 <MX_GPIO_Init+0xd0>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ce:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <MX_GPIO_Init+0xd0>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	2120      	movs	r1, #32
 80016de:	4812      	ldr	r0, [pc, #72]	@ (8001728 <MX_GPIO_Init+0xd4>)
 80016e0:	f000 ffe0 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016ea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4619      	mov	r1, r3
 80016fa:	480c      	ldr	r0, [pc, #48]	@ (800172c <MX_GPIO_Init+0xd8>)
 80016fc:	f000 fe4e 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001700:	2320      	movs	r3, #32
 8001702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001704:	2301      	movs	r3, #1
 8001706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4619      	mov	r1, r3
 8001716:	4804      	ldr	r0, [pc, #16]	@ (8001728 <MX_GPIO_Init+0xd4>)
 8001718:	f000 fe40 	bl	800239c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800171c:	bf00      	nop
 800171e:	3728      	adds	r7, #40	@ 0x28
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40023800 	.word	0x40023800
 8001728:	40020000 	.word	0x40020000
 800172c:	40020800 	.word	0x40020800

08001730 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001740:	d101      	bne.n	8001746 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001742:	f000 fd05 	bl	8002150 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001752:	b672      	cpsid	i
}
 8001754:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001756:	bf00      	nop
 8001758:	e7fd      	b.n	8001756 <Error_Handler+0x8>
 800175a:	0000      	movs	r0, r0
 800175c:	0000      	movs	r0, r0
	...

08001760 <SHT25_ReadTemperature>:

#include "sht25.h"

extern I2C_HandleTypeDef hi2c1;

float SHT25_ReadTemperature(void) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af02      	add	r7, sp, #8
    uint8_t command = 0xE3;  // Command to read temperature
 8001766:	23e3      	movs	r3, #227	@ 0xe3
 8001768:	717b      	strb	r3, [r7, #5]
    uint8_t data[2];

    HAL_I2C_Master_Transmit(&hi2c1, SHT25_I2C_ADDRESS << 1, &command, 1, HAL_MAX_DELAY);
 800176a:	1d7a      	adds	r2, r7, #5
 800176c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2301      	movs	r3, #1
 8001774:	2180      	movs	r1, #128	@ 0x80
 8001776:	4828      	ldr	r0, [pc, #160]	@ (8001818 <SHT25_ReadTemperature+0xb8>)
 8001778:	f001 f8f2 	bl	8002960 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, SHT25_I2C_ADDRESS << 1, data, 2, HAL_MAX_DELAY);
 800177c:	463a      	mov	r2, r7
 800177e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2302      	movs	r3, #2
 8001786:	2180      	movs	r1, #128	@ 0x80
 8001788:	4823      	ldr	r0, [pc, #140]	@ (8001818 <SHT25_ReadTemperature+0xb8>)
 800178a:	f001 f9e7 	bl	8002b5c <HAL_I2C_Master_Receive>

    uint16_t tempRaw = (data[0] << 8) | data[1];
 800178e:	783b      	ldrb	r3, [r7, #0]
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	b21a      	sxth	r2, r3
 8001794:	787b      	ldrb	r3, [r7, #1]
 8001796:	b21b      	sxth	r3, r3
 8001798:	4313      	orrs	r3, r2
 800179a:	b21b      	sxth	r3, r3
 800179c:	80fb      	strh	r3, [r7, #6]
    tempRaw &= ~0x0003;  // Clear the status bits
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	f023 0303 	bic.w	r3, r3, #3
 80017a4:	80fb      	strh	r3, [r7, #6]
    return -46.85 + (175.72 * (float)tempRaw / 65536.0);
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017b0:	ee17 0a90 	vmov	r0, s15
 80017b4:	f7fe fed0 	bl	8000558 <__aeabi_f2d>
 80017b8:	a313      	add	r3, pc, #76	@ (adr r3, 8001808 <SHT25_ReadTemperature+0xa8>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7fe ff23 	bl	8000608 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	4b13      	ldr	r3, [pc, #76]	@ (800181c <SHT25_ReadTemperature+0xbc>)
 80017d0:	f7ff f844 	bl	800085c <__aeabi_ddiv>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	a30c      	add	r3, pc, #48	@ (adr r3, 8001810 <SHT25_ReadTemperature+0xb0>)
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	f7fe fd59 	bl	8000298 <__aeabi_dsub>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	f7ff fa03 	bl	8000bf8 <__aeabi_d2f>
 80017f2:	4603      	mov	r3, r0
 80017f4:	ee07 3a90 	vmov	s15, r3
}
 80017f8:	eeb0 0a67 	vmov.f32	s0, s15
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	f3af 8000 	nop.w
 8001808:	3d70a3d7 	.word	0x3d70a3d7
 800180c:	4065f70a 	.word	0x4065f70a
 8001810:	cccccccd 	.word	0xcccccccd
 8001814:	40476ccc 	.word	0x40476ccc
 8001818:	20000498 	.word	0x20000498
 800181c:	40f00000 	.word	0x40f00000

08001820 <SHT25_ReadHumidity>:

float SHT25_ReadHumidity(void) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af02      	add	r7, sp, #8
    uint8_t command = 0xE5;  // Command to read humidity
 8001826:	23e5      	movs	r3, #229	@ 0xe5
 8001828:	717b      	strb	r3, [r7, #5]
    uint8_t data[2];

    HAL_I2C_Master_Transmit(&hi2c1, SHT25_I2C_ADDRESS << 1, &command, 1, HAL_MAX_DELAY);
 800182a:	1d7a      	adds	r2, r7, #5
 800182c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2301      	movs	r3, #1
 8001834:	2180      	movs	r1, #128	@ 0x80
 8001836:	4823      	ldr	r0, [pc, #140]	@ (80018c4 <SHT25_ReadHumidity+0xa4>)
 8001838:	f001 f892 	bl	8002960 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, SHT25_I2C_ADDRESS << 1, data, 2, HAL_MAX_DELAY);
 800183c:	463a      	mov	r2, r7
 800183e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	2302      	movs	r3, #2
 8001846:	2180      	movs	r1, #128	@ 0x80
 8001848:	481e      	ldr	r0, [pc, #120]	@ (80018c4 <SHT25_ReadHumidity+0xa4>)
 800184a:	f001 f987 	bl	8002b5c <HAL_I2C_Master_Receive>

    uint16_t humRaw = (data[0] << 8) | data[1];
 800184e:	783b      	ldrb	r3, [r7, #0]
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	b21a      	sxth	r2, r3
 8001854:	787b      	ldrb	r3, [r7, #1]
 8001856:	b21b      	sxth	r3, r3
 8001858:	4313      	orrs	r3, r2
 800185a:	b21b      	sxth	r3, r3
 800185c:	80fb      	strh	r3, [r7, #6]
    humRaw &= ~0x0003;  // Clear the status bits
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	f023 0303 	bic.w	r3, r3, #3
 8001864:	80fb      	strh	r3, [r7, #6]
    return -6.0 + (125.0 * (float)humRaw / 65536.0);
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	ee07 3a90 	vmov	s15, r3
 800186c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001870:	ee17 0a90 	vmov	r0, s15
 8001874:	f7fe fe70 	bl	8000558 <__aeabi_f2d>
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <SHT25_ReadHumidity+0xa8>)
 800187e:	f7fe fec3 	bl	8000608 <__aeabi_dmul>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <SHT25_ReadHumidity+0xac>)
 8001890:	f7fe ffe4 	bl	800085c <__aeabi_ddiv>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	4b0b      	ldr	r3, [pc, #44]	@ (80018d0 <SHT25_ReadHumidity+0xb0>)
 80018a2:	f7fe fcf9 	bl	8000298 <__aeabi_dsub>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	f7ff f9a3 	bl	8000bf8 <__aeabi_d2f>
 80018b2:	4603      	mov	r3, r0
 80018b4:	ee07 3a90 	vmov	s15, r3
}
 80018b8:	eeb0 0a67 	vmov.f32	s0, s15
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000498 	.word	0x20000498
 80018c8:	405f4000 	.word	0x405f4000
 80018cc:	40f00000 	.word	0x40f00000
 80018d0:	40180000 	.word	0x40180000

080018d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <HAL_MspInit+0x54>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	4a11      	ldr	r2, [pc, #68]	@ (8001928 <HAL_MspInit+0x54>)
 80018e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <HAL_MspInit+0x54>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <HAL_MspInit+0x54>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001928 <HAL_MspInit+0x54>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001904:	6413      	str	r3, [r2, #64]	@ 0x40
 8001906:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <HAL_MspInit+0x54>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	210f      	movs	r1, #15
 8001916:	f06f 0001 	mvn.w	r0, #1
 800191a:	f000 fd15 	bl	8002348 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800

0800192c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	@ 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a19      	ldr	r2, [pc, #100]	@ (80019b0 <HAL_I2C_MspInit+0x84>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d12b      	bne.n	80019a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	4b18      	ldr	r3, [pc, #96]	@ (80019b4 <HAL_I2C_MspInit+0x88>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	4a17      	ldr	r2, [pc, #92]	@ (80019b4 <HAL_I2C_MspInit+0x88>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	6313      	str	r3, [r2, #48]	@ 0x30
 800195e:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <HAL_I2C_MspInit+0x88>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800196a:	23c0      	movs	r3, #192	@ 0xc0
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800196e:	2312      	movs	r3, #18
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001972:	2301      	movs	r3, #1
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800197a:	2304      	movs	r3, #4
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	480c      	ldr	r0, [pc, #48]	@ (80019b8 <HAL_I2C_MspInit+0x8c>)
 8001986:	f000 fd09 	bl	800239c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <HAL_I2C_MspInit+0x88>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	4a08      	ldr	r2, [pc, #32]	@ (80019b4 <HAL_I2C_MspInit+0x88>)
 8001994:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001998:	6413      	str	r3, [r2, #64]	@ 0x40
 800199a:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <HAL_I2C_MspInit+0x88>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80019a6:	bf00      	nop
 80019a8:	3728      	adds	r7, #40	@ 0x28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40005400 	.word	0x40005400
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020400 	.word	0x40020400

080019bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08c      	sub	sp, #48	@ 0x30
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a32      	ldr	r2, [pc, #200]	@ (8001aa4 <HAL_UART_MspInit+0xe8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d12d      	bne.n	8001a3a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
 80019e2:	4b31      	ldr	r3, [pc, #196]	@ (8001aa8 <HAL_UART_MspInit+0xec>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e6:	4a30      	ldr	r2, [pc, #192]	@ (8001aa8 <HAL_UART_MspInit+0xec>)
 80019e8:	f043 0310 	orr.w	r3, r3, #16
 80019ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ee:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa8 <HAL_UART_MspInit+0xec>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	61bb      	str	r3, [r7, #24]
 80019f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa8 <HAL_UART_MspInit+0xec>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	4a29      	ldr	r2, [pc, #164]	@ (8001aa8 <HAL_UART_MspInit+0xec>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0a:	4b27      	ldr	r3, [pc, #156]	@ (8001aa8 <HAL_UART_MspInit+0xec>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a16:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a24:	2303      	movs	r3, #3
 8001a26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a28:	2307      	movs	r3, #7
 8001a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	481e      	ldr	r0, [pc, #120]	@ (8001aac <HAL_UART_MspInit+0xf0>)
 8001a34:	f000 fcb2 	bl	800239c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a38:	e030      	b.n	8001a9c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab0 <HAL_UART_MspInit+0xf4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d12b      	bne.n	8001a9c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	4b17      	ldr	r3, [pc, #92]	@ (8001aa8 <HAL_UART_MspInit+0xec>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4c:	4a16      	ldr	r2, [pc, #88]	@ (8001aa8 <HAL_UART_MspInit+0xec>)
 8001a4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a52:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a54:	4b14      	ldr	r3, [pc, #80]	@ (8001aa8 <HAL_UART_MspInit+0xec>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <HAL_UART_MspInit+0xec>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a68:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa8 <HAL_UART_MspInit+0xec>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a70:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa8 <HAL_UART_MspInit+0xec>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a7c:	230c      	movs	r3, #12
 8001a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a8c:	2307      	movs	r3, #7
 8001a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	4619      	mov	r1, r3
 8001a96:	4805      	ldr	r0, [pc, #20]	@ (8001aac <HAL_UART_MspInit+0xf0>)
 8001a98:	f000 fc80 	bl	800239c <HAL_GPIO_Init>
}
 8001a9c:	bf00      	nop
 8001a9e:	3730      	adds	r7, #48	@ 0x30
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40011000 	.word	0x40011000
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020000 	.word	0x40020000
 8001ab0:	40004400 	.word	0x40004400

08001ab4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08e      	sub	sp, #56	@ 0x38
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	4b34      	ldr	r3, [pc, #208]	@ (8001b9c <HAL_InitTick+0xe8>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001acc:	4a33      	ldr	r2, [pc, #204]	@ (8001b9c <HAL_InitTick+0xe8>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad4:	4b31      	ldr	r3, [pc, #196]	@ (8001b9c <HAL_InitTick+0xe8>)
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ae0:	f107 0210 	add.w	r2, r7, #16
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f002 fa86 	bl	8003ffc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d103      	bne.n	8001b02 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001afa:	f002 fa57 	bl	8003fac <HAL_RCC_GetPCLK1Freq>
 8001afe:	6378      	str	r0, [r7, #52]	@ 0x34
 8001b00:	e004      	b.n	8001b0c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b02:	f002 fa53 	bl	8003fac <HAL_RCC_GetPCLK1Freq>
 8001b06:	4603      	mov	r3, r0
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b0e:	4a24      	ldr	r2, [pc, #144]	@ (8001ba0 <HAL_InitTick+0xec>)
 8001b10:	fba2 2303 	umull	r2, r3, r2, r3
 8001b14:	0c9b      	lsrs	r3, r3, #18
 8001b16:	3b01      	subs	r3, #1
 8001b18:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001b1a:	4b22      	ldr	r3, [pc, #136]	@ (8001ba4 <HAL_InitTick+0xf0>)
 8001b1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001b22:	4b20      	ldr	r3, [pc, #128]	@ (8001ba4 <HAL_InitTick+0xf0>)
 8001b24:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b28:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ba4 <HAL_InitTick+0xf0>)
 8001b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b2e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001b30:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba4 <HAL_InitTick+0xf0>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b36:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba4 <HAL_InitTick+0xf0>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ba4 <HAL_InitTick+0xf0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001b42:	4818      	ldr	r0, [pc, #96]	@ (8001ba4 <HAL_InitTick+0xf0>)
 8001b44:	f002 fa8c 	bl	8004060 <HAL_TIM_Base_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001b4e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d11b      	bne.n	8001b8e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001b56:	4813      	ldr	r0, [pc, #76]	@ (8001ba4 <HAL_InitTick+0xf0>)
 8001b58:	f002 fadc 	bl	8004114 <HAL_TIM_Base_Start_IT>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001b62:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d111      	bne.n	8001b8e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b6a:	201c      	movs	r0, #28
 8001b6c:	f000 fc08 	bl	8002380 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b0f      	cmp	r3, #15
 8001b74:	d808      	bhi.n	8001b88 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001b76:	2200      	movs	r2, #0
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	201c      	movs	r0, #28
 8001b7c:	f000 fbe4 	bl	8002348 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b80:	4a09      	ldr	r2, [pc, #36]	@ (8001ba8 <HAL_InitTick+0xf4>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e002      	b.n	8001b8e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001b8e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3738      	adds	r7, #56	@ 0x38
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	431bde83 	.word	0x431bde83
 8001ba4:	2000058c 	.word	0x2000058c
 8001ba8:	20000004 	.word	0x20000004

08001bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <NMI_Handler+0x4>

08001bb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <HardFault_Handler+0x4>

08001bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <MemManage_Handler+0x4>

08001bc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <BusFault_Handler+0x4>

08001bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <UsageFault_Handler+0x4>

08001bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001be8:	4802      	ldr	r0, [pc, #8]	@ (8001bf4 <TIM2_IRQHandler+0x10>)
 8001bea:	f002 faf5 	bl	80041d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2000058c 	.word	0x2000058c

08001bf8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001c02:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <ITM_SendChar+0x48>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a0e      	ldr	r2, [pc, #56]	@ (8001c40 <ITM_SendChar+0x48>)
 8001c08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c0c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c44 <ITM_SendChar+0x4c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a0c      	ldr	r2, [pc, #48]	@ (8001c44 <ITM_SendChar+0x4c>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001c1a:	bf00      	nop
 8001c1c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f8      	beq.n	8001c1c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001c2a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	6013      	str	r3, [r2, #0]
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000edfc 	.word	0xe000edfc
 8001c44:	e0000e00 	.word	0xe0000e00

08001c48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return 1;
 8001c4c:	2301      	movs	r3, #1
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_kill>:

int _kill(int pid, int sig)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c62:	f005 fc0d 	bl	8007480 <__errno>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2216      	movs	r2, #22
 8001c6a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_exit>:

void _exit (int status)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ffe7 	bl	8001c58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c8a:	bf00      	nop
 8001c8c:	e7fd      	b.n	8001c8a <_exit+0x12>

08001c8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	e00a      	b.n	8001cb6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ca0:	f3af 8000 	nop.w
 8001ca4:	4601      	mov	r1, r0
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	60ba      	str	r2, [r7, #8]
 8001cac:	b2ca      	uxtb	r2, r1
 8001cae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	dbf0      	blt.n	8001ca0 <_read+0x12>
  }

  return len;
 8001cbe:	687b      	ldr	r3, [r7, #4]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	e009      	b.n	8001cee <_write+0x26>
  {
	  //__io_putchar(*ptr++);
	 	  	  ITM_SendChar(*ptr++);
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	60ba      	str	r2, [r7, #8]
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ff88 	bl	8001bf8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3301      	adds	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	dbf1      	blt.n	8001cda <_write+0x12>
  }
  return len;
 8001cf6:	687b      	ldr	r3, [r7, #4]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <_close>:

int _close(int file)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d28:	605a      	str	r2, [r3, #4]
  return 0;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <_isatty>:

int _isatty(int file)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d40:	2301      	movs	r3, #1
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b085      	sub	sp, #20
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d70:	4a14      	ldr	r2, [pc, #80]	@ (8001dc4 <_sbrk+0x5c>)
 8001d72:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <_sbrk+0x60>)
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d7c:	4b13      	ldr	r3, [pc, #76]	@ (8001dcc <_sbrk+0x64>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d102      	bne.n	8001d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d84:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <_sbrk+0x64>)
 8001d86:	4a12      	ldr	r2, [pc, #72]	@ (8001dd0 <_sbrk+0x68>)
 8001d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d8a:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d207      	bcs.n	8001da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d98:	f005 fb72 	bl	8007480 <__errno>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	220c      	movs	r2, #12
 8001da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001da6:	e009      	b.n	8001dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da8:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dae:	4b07      	ldr	r3, [pc, #28]	@ (8001dcc <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	4a05      	ldr	r2, [pc, #20]	@ (8001dcc <_sbrk+0x64>)
 8001db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dba:	68fb      	ldr	r3, [r7, #12]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20020000 	.word	0x20020000
 8001dc8:	00000400 	.word	0x00000400
 8001dcc:	200005d4 	.word	0x200005d4
 8001dd0:	20004480 	.word	0x20004480

08001dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd8:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <SystemInit+0x20>)
 8001dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dde:	4a05      	ldr	r2, [pc, #20]	@ (8001df4 <SystemInit+0x20>)
 8001de0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001de4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <WE10_reset>:
#include <stdio.h>

extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;

void WE10_reset(void) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b0a0      	sub	sp, #128	@ 0x80
 8001dfc:	af00      	add	r7, sp, #0
    char buffer[128];
    snprintf(buffer, sizeof(buffer), "CMD+RESET\r\n");
 8001dfe:	463b      	mov	r3, r7
 8001e00:	4a18      	ldr	r2, [pc, #96]	@ (8001e64 <WE10_reset+0x6c>)
 8001e02:	2180      	movs	r1, #128	@ 0x80
 8001e04:	4618      	mov	r0, r3
 8001e06:	f005 f9fb 	bl	8007200 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fa37 	bl	8000280 <strlen>
 8001e12:	4603      	mov	r3, r0
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	4639      	mov	r1, r7
 8001e18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e1c:	4812      	ldr	r0, [pc, #72]	@ (8001e68 <WE10_reset+0x70>)
 8001e1e:	f002 fbe3 	bl	80045e8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001e22:	463b      	mov	r3, r7
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fa2b 	bl	8000280 <strlen>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	4639      	mov	r1, r7
 8001e30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e34:	480d      	ldr	r0, [pc, #52]	@ (8001e6c <WE10_reset+0x74>)
 8001e36:	f002 fbd7 	bl	80045e8 <HAL_UART_Transmit>

    HAL_Delay(2000); // Allow time for reset
 8001e3a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001e3e:	f000 f9a7 	bl	8002190 <HAL_Delay>

    // Clear buffer before receiving
    memset(buffer, 0, sizeof(buffer));
 8001e42:	463b      	mov	r3, r7
 8001e44:	2280      	movs	r2, #128	@ 0x80
 8001e46:	2100      	movs	r1, #0
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f005 fa70 	bl	800732e <memset>
    HAL_UART_Receive(&huart1, (uint8_t*)buffer, sizeof(buffer), 1000);
 8001e4e:	4639      	mov	r1, r7
 8001e50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e54:	2280      	movs	r2, #128	@ 0x80
 8001e56:	4804      	ldr	r0, [pc, #16]	@ (8001e68 <WE10_reset+0x70>)
 8001e58:	f002 fc51 	bl	80046fe <HAL_UART_Receive>
}
 8001e5c:	bf00      	nop
 8001e5e:	3780      	adds	r7, #128	@ 0x80
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	0800ac8c 	.word	0x0800ac8c
 8001e68:	200004ec 	.word	0x200004ec
 8001e6c:	20000534 	.word	0x20000534

08001e70 <WE10_wifimode>:

void WE10_wifimode(void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b0a0      	sub	sp, #128	@ 0x80
 8001e74:	af00      	add	r7, sp, #0
    char buffer[128];
    snprintf(buffer, sizeof(buffer), "CMD+WIFIMODE=1\r\n");
 8001e76:	463b      	mov	r3, r7
 8001e78:	4a15      	ldr	r2, [pc, #84]	@ (8001ed0 <WE10_wifimode+0x60>)
 8001e7a:	2180      	movs	r1, #128	@ 0x80
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f005 f9bf 	bl	8007200 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001e82:	463b      	mov	r3, r7
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe f9fb 	bl	8000280 <strlen>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	4639      	mov	r1, r7
 8001e90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e94:	480f      	ldr	r0, [pc, #60]	@ (8001ed4 <WE10_wifimode+0x64>)
 8001e96:	f002 fba7 	bl	80045e8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001e9a:	463b      	mov	r3, r7
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe f9ef 	bl	8000280 <strlen>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	4639      	mov	r1, r7
 8001ea8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eac:	480a      	ldr	r0, [pc, #40]	@ (8001ed8 <WE10_wifimode+0x68>)
 8001eae:	f002 fb9b 	bl	80045e8 <HAL_UART_Transmit>

    // Wait for the response
    HAL_Delay(2000);
 8001eb2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001eb6:	f000 f96b 	bl	8002190 <HAL_Delay>
    memset(buffer, 0, sizeof(buffer));
 8001eba:	463b      	mov	r3, r7
 8001ebc:	2280      	movs	r2, #128	@ 0x80
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f005 fa34 	bl	800732e <memset>
}
 8001ec6:	bf00      	nop
 8001ec8:	3780      	adds	r7, #128	@ 0x80
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	0800ac98 	.word	0x0800ac98
 8001ed4:	200004ec 	.word	0x200004ec
 8001ed8:	20000534 	.word	0x20000534

08001edc <WE10_contoap>:

void WE10_contoap(void) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b0a0      	sub	sp, #128	@ 0x80
 8001ee0:	af00      	add	r7, sp, #0
    char buffer[128];
    snprintf(buffer, sizeof(buffer), "CMD+CONTOAP=VIVO,12345678\r\n");
 8001ee2:	463b      	mov	r3, r7
 8001ee4:	4a15      	ldr	r2, [pc, #84]	@ (8001f3c <WE10_contoap+0x60>)
 8001ee6:	2180      	movs	r1, #128	@ 0x80
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f005 f989 	bl	8007200 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001eee:	463b      	mov	r3, r7
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe f9c5 	bl	8000280 <strlen>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	4639      	mov	r1, r7
 8001efc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f00:	480f      	ldr	r0, [pc, #60]	@ (8001f40 <WE10_contoap+0x64>)
 8001f02:	f002 fb71 	bl	80045e8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001f06:	463b      	mov	r3, r7
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe f9b9 	bl	8000280 <strlen>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	4639      	mov	r1, r7
 8001f14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f18:	480a      	ldr	r0, [pc, #40]	@ (8001f44 <WE10_contoap+0x68>)
 8001f1a:	f002 fb65 	bl	80045e8 <HAL_UART_Transmit>

    HAL_Delay(5000);
 8001f1e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001f22:	f000 f935 	bl	8002190 <HAL_Delay>
    memset(buffer, 0, sizeof(buffer));
 8001f26:	463b      	mov	r3, r7
 8001f28:	2280      	movs	r2, #128	@ 0x80
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f005 f9fe 	bl	800732e <memset>

}
 8001f32:	bf00      	nop
 8001f34:	3780      	adds	r7, #128	@ 0x80
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	0800acac 	.word	0x0800acac
 8001f40:	200004ec 	.word	0x200004ec
 8001f44:	20000534 	.word	0x20000534

08001f48 <MQTT_netcfg>:

void MQTT_netcfg(void) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b0a0      	sub	sp, #128	@ 0x80
 8001f4c:	af00      	add	r7, sp, #0
    char buffer[128];
    snprintf(buffer, sizeof(buffer), "CMD+MQTTNETCFG=dev.rightech.io,1883\r\n");
 8001f4e:	463b      	mov	r3, r7
 8001f50:	4a30      	ldr	r2, [pc, #192]	@ (8002014 <MQTT_netcfg+0xcc>)
 8001f52:	2180      	movs	r1, #128	@ 0x80
 8001f54:	4618      	mov	r0, r3
 8001f56:	f005 f953 	bl	8007200 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001f5a:	463b      	mov	r3, r7
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe f98f 	bl	8000280 <strlen>
 8001f62:	4603      	mov	r3, r0
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	4639      	mov	r1, r7
 8001f68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f6c:	482a      	ldr	r0, [pc, #168]	@ (8002018 <MQTT_netcfg+0xd0>)
 8001f6e:	f002 fb3b 	bl	80045e8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001f72:	463b      	mov	r3, r7
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe f983 	bl	8000280 <strlen>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	4639      	mov	r1, r7
 8001f80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f84:	4825      	ldr	r0, [pc, #148]	@ (800201c <MQTT_netcfg+0xd4>)
 8001f86:	f002 fb2f 	bl	80045e8 <HAL_UART_Transmit>
    HAL_Delay(500); // Short delay for processing
 8001f8a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f8e:	f000 f8ff 	bl	8002190 <HAL_Delay>
    memset(buffer, 0, sizeof(buffer));
 8001f92:	463b      	mov	r3, r7
 8001f94:	2280      	movs	r2, #128	@ 0x80
 8001f96:	2100      	movs	r1, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f005 f9c8 	bl	800732e <memset>
    HAL_UART_Receive(&huart1, (uint8_t*)buffer, sizeof(buffer), 1000);
 8001f9e:	4639      	mov	r1, r7
 8001fa0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fa4:	2280      	movs	r2, #128	@ 0x80
 8001fa6:	481c      	ldr	r0, [pc, #112]	@ (8002018 <MQTT_netcfg+0xd0>)
 8001fa8:	f002 fba9 	bl	80046fe <HAL_UART_Receive>

    snprintf(buffer, sizeof(buffer), "CMD+MQTTCONCFG=3,mqtt-saikumarsunny2002-3ruesz,,,,,,,,,\r\n");
 8001fac:	463b      	mov	r3, r7
 8001fae:	4a1c      	ldr	r2, [pc, #112]	@ (8002020 <MQTT_netcfg+0xd8>)
 8001fb0:	2180      	movs	r1, #128	@ 0x80
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f005 f924 	bl	8007200 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001fb8:	463b      	mov	r3, r7
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe f960 	bl	8000280 <strlen>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	4639      	mov	r1, r7
 8001fc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fca:	4813      	ldr	r0, [pc, #76]	@ (8002018 <MQTT_netcfg+0xd0>)
 8001fcc:	f002 fb0c 	bl	80045e8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001fd0:	463b      	mov	r3, r7
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe f954 	bl	8000280 <strlen>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	4639      	mov	r1, r7
 8001fde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fe2:	480e      	ldr	r0, [pc, #56]	@ (800201c <MQTT_netcfg+0xd4>)
 8001fe4:	f002 fb00 	bl	80045e8 <HAL_UART_Transmit>
    HAL_Delay(500); // Short delay for processing
 8001fe8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001fec:	f000 f8d0 	bl	8002190 <HAL_Delay>
    memset(buffer, 0, sizeof(buffer));
 8001ff0:	463b      	mov	r3, r7
 8001ff2:	2280      	movs	r2, #128	@ 0x80
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f005 f999 	bl	800732e <memset>
    HAL_UART_Receive(&huart1, (uint8_t*)buffer, sizeof(buffer), 1000);
 8001ffc:	4639      	mov	r1, r7
 8001ffe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002002:	2280      	movs	r2, #128	@ 0x80
 8002004:	4804      	ldr	r0, [pc, #16]	@ (8002018 <MQTT_netcfg+0xd0>)
 8002006:	f002 fb7a 	bl	80046fe <HAL_UART_Receive>
}
 800200a:	bf00      	nop
 800200c:	3780      	adds	r7, #128	@ 0x80
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	0800acc8 	.word	0x0800acc8
 8002018:	200004ec 	.word	0x200004ec
 800201c:	20000534 	.word	0x20000534
 8002020:	0800acf0 	.word	0x0800acf0

08002024 <MQTT_start>:

void MQTT_start(void) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b0a0      	sub	sp, #128	@ 0x80
 8002028:	af00      	add	r7, sp, #0
    char buffer[128];
    snprintf(buffer, sizeof(buffer), "CMD+MQTTSTART=1\r\n");
 800202a:	463b      	mov	r3, r7
 800202c:	4a18      	ldr	r2, [pc, #96]	@ (8002090 <MQTT_start+0x6c>)
 800202e:	2180      	movs	r1, #128	@ 0x80
 8002030:	4618      	mov	r0, r3
 8002032:	f005 f8e5 	bl	8007200 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8002036:	463b      	mov	r3, r7
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe f921 	bl	8000280 <strlen>
 800203e:	4603      	mov	r3, r0
 8002040:	b29a      	uxth	r2, r3
 8002042:	4639      	mov	r1, r7
 8002044:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002048:	4812      	ldr	r0, [pc, #72]	@ (8002094 <MQTT_start+0x70>)
 800204a:	f002 facd 	bl	80045e8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800204e:	463b      	mov	r3, r7
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe f915 	bl	8000280 <strlen>
 8002056:	4603      	mov	r3, r0
 8002058:	b29a      	uxth	r2, r3
 800205a:	4639      	mov	r1, r7
 800205c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002060:	480d      	ldr	r0, [pc, #52]	@ (8002098 <MQTT_start+0x74>)
 8002062:	f002 fac1 	bl	80045e8 <HAL_UART_Transmit>
    HAL_Delay(5000); // Allow time for starting MQTT
 8002066:	f241 3088 	movw	r0, #5000	@ 0x1388
 800206a:	f000 f891 	bl	8002190 <HAL_Delay>
    memset(buffer, 0, sizeof(buffer));
 800206e:	463b      	mov	r3, r7
 8002070:	2280      	movs	r2, #128	@ 0x80
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f005 f95a 	bl	800732e <memset>
    HAL_UART_Receive(&huart1, (uint8_t*)buffer, sizeof(buffer), 1000);
 800207a:	4639      	mov	r1, r7
 800207c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002080:	2280      	movs	r2, #128	@ 0x80
 8002082:	4804      	ldr	r0, [pc, #16]	@ (8002094 <MQTT_start+0x70>)
 8002084:	f002 fb3b 	bl	80046fe <HAL_UART_Receive>
}
 8002088:	bf00      	nop
 800208a:	3780      	adds	r7, #128	@ 0x80
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	0800ad2c 	.word	0x0800ad2c
 8002094:	200004ec 	.word	0x200004ec
 8002098:	20000534 	.word	0x20000534

0800209c <WE10_RestartInitialization>:

void WE10_RestartInitialization(void) {
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
    WE10_reset();
 80020a0:	f7ff feaa 	bl	8001df8 <WE10_reset>
    WE10_wifimode();
 80020a4:	f7ff fee4 	bl	8001e70 <WE10_wifimode>
    WE10_contoap();
 80020a8:	f7ff ff18 	bl	8001edc <WE10_contoap>
    MQTT_netcfg();
 80020ac:	f7ff ff4c 	bl	8001f48 <MQTT_netcfg>
    MQTT_start();
 80020b0:	f7ff ffb8 	bl	8002024 <MQTT_start>
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020bc:	f7ff fe8a 	bl	8001dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c0:	480c      	ldr	r0, [pc, #48]	@ (80020f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020c2:	490d      	ldr	r1, [pc, #52]	@ (80020f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020c4:	4a0d      	ldr	r2, [pc, #52]	@ (80020fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c8:	e002      	b.n	80020d0 <LoopCopyDataInit>

080020ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ce:	3304      	adds	r3, #4

080020d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d4:	d3f9      	bcc.n	80020ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002100 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002104 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020dc:	e001      	b.n	80020e2 <LoopFillZerobss>

080020de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e0:	3204      	adds	r2, #4

080020e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e4:	d3fb      	bcc.n	80020de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020e6:	f005 f9d1 	bl	800748c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ea:	f7ff f879 	bl	80011e0 <main>
  bx  lr    
 80020ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80020fc:	0800b1a0 	.word	0x0800b1a0
  ldr r2, =_sbss
 8002100:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002104:	2000447c 	.word	0x2000447c

08002108 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002108:	e7fe      	b.n	8002108 <ADC_IRQHandler>
	...

0800210c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002110:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <HAL_Init+0x40>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0d      	ldr	r2, [pc, #52]	@ (800214c <HAL_Init+0x40>)
 8002116:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800211a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800211c:	4b0b      	ldr	r3, [pc, #44]	@ (800214c <HAL_Init+0x40>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0a      	ldr	r2, [pc, #40]	@ (800214c <HAL_Init+0x40>)
 8002122:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002126:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002128:	4b08      	ldr	r3, [pc, #32]	@ (800214c <HAL_Init+0x40>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a07      	ldr	r2, [pc, #28]	@ (800214c <HAL_Init+0x40>)
 800212e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002132:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002134:	2003      	movs	r0, #3
 8002136:	f000 f8fc 	bl	8002332 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800213a:	200f      	movs	r0, #15
 800213c:	f7ff fcba 	bl	8001ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002140:	f7ff fbc8 	bl	80018d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40023c00 	.word	0x40023c00

08002150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002154:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <HAL_IncTick+0x20>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <HAL_IncTick+0x24>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4413      	add	r3, r2
 8002160:	4a04      	ldr	r2, [pc, #16]	@ (8002174 <HAL_IncTick+0x24>)
 8002162:	6013      	str	r3, [r2, #0]
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000008 	.word	0x20000008
 8002174:	200005d8 	.word	0x200005d8

08002178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return uwTick;
 800217c:	4b03      	ldr	r3, [pc, #12]	@ (800218c <HAL_GetTick+0x14>)
 800217e:	681b      	ldr	r3, [r3, #0]
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	200005d8 	.word	0x200005d8

08002190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002198:	f7ff ffee 	bl	8002178 <HAL_GetTick>
 800219c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021a8:	d005      	beq.n	80021b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021aa:	4b0a      	ldr	r3, [pc, #40]	@ (80021d4 <HAL_Delay+0x44>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4413      	add	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021b6:	bf00      	nop
 80021b8:	f7ff ffde 	bl	8002178 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d8f7      	bhi.n	80021b8 <HAL_Delay+0x28>
  {
  }
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000008 	.word	0x20000008

080021d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e8:	4b0c      	ldr	r3, [pc, #48]	@ (800221c <__NVIC_SetPriorityGrouping+0x44>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021f4:	4013      	ands	r3, r2
 80021f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002200:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220a:	4a04      	ldr	r2, [pc, #16]	@ (800221c <__NVIC_SetPriorityGrouping+0x44>)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	60d3      	str	r3, [r2, #12]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002224:	4b04      	ldr	r3, [pc, #16]	@ (8002238 <__NVIC_GetPriorityGrouping+0x18>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	0a1b      	lsrs	r3, r3, #8
 800222a:	f003 0307 	and.w	r3, r3, #7
}
 800222e:	4618      	mov	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	2b00      	cmp	r3, #0
 800224c:	db0b      	blt.n	8002266 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	f003 021f 	and.w	r2, r3, #31
 8002254:	4907      	ldr	r1, [pc, #28]	@ (8002274 <__NVIC_EnableIRQ+0x38>)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	2001      	movs	r0, #1
 800225e:	fa00 f202 	lsl.w	r2, r0, r2
 8002262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000e100 	.word	0xe000e100

08002278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	6039      	str	r1, [r7, #0]
 8002282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	2b00      	cmp	r3, #0
 800228a:	db0a      	blt.n	80022a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	490c      	ldr	r1, [pc, #48]	@ (80022c4 <__NVIC_SetPriority+0x4c>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	0112      	lsls	r2, r2, #4
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	440b      	add	r3, r1
 800229c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a0:	e00a      	b.n	80022b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4908      	ldr	r1, [pc, #32]	@ (80022c8 <__NVIC_SetPriority+0x50>)
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	3b04      	subs	r3, #4
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	440b      	add	r3, r1
 80022b6:	761a      	strb	r2, [r3, #24]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000e100 	.word	0xe000e100
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b089      	sub	sp, #36	@ 0x24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f1c3 0307 	rsb	r3, r3, #7
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	bf28      	it	cs
 80022ea:	2304      	movcs	r3, #4
 80022ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3304      	adds	r3, #4
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d902      	bls.n	80022fc <NVIC_EncodePriority+0x30>
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3b03      	subs	r3, #3
 80022fa:	e000      	b.n	80022fe <NVIC_EncodePriority+0x32>
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43da      	mvns	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	401a      	ands	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002314:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	43d9      	mvns	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	4313      	orrs	r3, r2
         );
}
 8002326:	4618      	mov	r0, r3
 8002328:	3724      	adds	r7, #36	@ 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ff4c 	bl	80021d8 <__NVIC_SetPriorityGrouping>
}
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800235a:	f7ff ff61 	bl	8002220 <__NVIC_GetPriorityGrouping>
 800235e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	68b9      	ldr	r1, [r7, #8]
 8002364:	6978      	ldr	r0, [r7, #20]
 8002366:	f7ff ffb1 	bl	80022cc <NVIC_EncodePriority>
 800236a:	4602      	mov	r2, r0
 800236c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002370:	4611      	mov	r1, r2
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff ff80 	bl	8002278 <__NVIC_SetPriority>
}
 8002378:	bf00      	nop
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ff54 	bl	800223c <__NVIC_EnableIRQ>
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	@ 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	e159      	b.n	800266c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023b8:	2201      	movs	r2, #1
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	f040 8148 	bne.w	8002666 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d005      	beq.n	80023ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d130      	bne.n	8002450 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	2203      	movs	r2, #3
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002424:	2201      	movs	r2, #1
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f003 0201 	and.w	r2, r3, #1
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	2b03      	cmp	r3, #3
 800245a:	d017      	beq.n	800248c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	2203      	movs	r2, #3
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d123      	bne.n	80024e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	08da      	lsrs	r2, r3, #3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3208      	adds	r2, #8
 80024a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	220f      	movs	r2, #15
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	08da      	lsrs	r2, r3, #3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3208      	adds	r2, #8
 80024da:	69b9      	ldr	r1, [r7, #24]
 80024dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	2203      	movs	r2, #3
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0203 	and.w	r2, r3, #3
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80a2 	beq.w	8002666 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	4b57      	ldr	r3, [pc, #348]	@ (8002684 <HAL_GPIO_Init+0x2e8>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252a:	4a56      	ldr	r2, [pc, #344]	@ (8002684 <HAL_GPIO_Init+0x2e8>)
 800252c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002530:	6453      	str	r3, [r2, #68]	@ 0x44
 8002532:	4b54      	ldr	r3, [pc, #336]	@ (8002684 <HAL_GPIO_Init+0x2e8>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800253e:	4a52      	ldr	r2, [pc, #328]	@ (8002688 <HAL_GPIO_Init+0x2ec>)
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	089b      	lsrs	r3, r3, #2
 8002544:	3302      	adds	r3, #2
 8002546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	220f      	movs	r2, #15
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a49      	ldr	r2, [pc, #292]	@ (800268c <HAL_GPIO_Init+0x2f0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d019      	beq.n	800259e <HAL_GPIO_Init+0x202>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a48      	ldr	r2, [pc, #288]	@ (8002690 <HAL_GPIO_Init+0x2f4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d013      	beq.n	800259a <HAL_GPIO_Init+0x1fe>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a47      	ldr	r2, [pc, #284]	@ (8002694 <HAL_GPIO_Init+0x2f8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00d      	beq.n	8002596 <HAL_GPIO_Init+0x1fa>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a46      	ldr	r2, [pc, #280]	@ (8002698 <HAL_GPIO_Init+0x2fc>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d007      	beq.n	8002592 <HAL_GPIO_Init+0x1f6>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a45      	ldr	r2, [pc, #276]	@ (800269c <HAL_GPIO_Init+0x300>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d101      	bne.n	800258e <HAL_GPIO_Init+0x1f2>
 800258a:	2304      	movs	r3, #4
 800258c:	e008      	b.n	80025a0 <HAL_GPIO_Init+0x204>
 800258e:	2307      	movs	r3, #7
 8002590:	e006      	b.n	80025a0 <HAL_GPIO_Init+0x204>
 8002592:	2303      	movs	r3, #3
 8002594:	e004      	b.n	80025a0 <HAL_GPIO_Init+0x204>
 8002596:	2302      	movs	r3, #2
 8002598:	e002      	b.n	80025a0 <HAL_GPIO_Init+0x204>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <HAL_GPIO_Init+0x204>
 800259e:	2300      	movs	r3, #0
 80025a0:	69fa      	ldr	r2, [r7, #28]
 80025a2:	f002 0203 	and.w	r2, r2, #3
 80025a6:	0092      	lsls	r2, r2, #2
 80025a8:	4093      	lsls	r3, r2
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025b0:	4935      	ldr	r1, [pc, #212]	@ (8002688 <HAL_GPIO_Init+0x2ec>)
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	089b      	lsrs	r3, r3, #2
 80025b6:	3302      	adds	r3, #2
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025be:	4b38      	ldr	r3, [pc, #224]	@ (80026a0 <HAL_GPIO_Init+0x304>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025e2:	4a2f      	ldr	r2, [pc, #188]	@ (80026a0 <HAL_GPIO_Init+0x304>)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025e8:	4b2d      	ldr	r3, [pc, #180]	@ (80026a0 <HAL_GPIO_Init+0x304>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800260c:	4a24      	ldr	r2, [pc, #144]	@ (80026a0 <HAL_GPIO_Init+0x304>)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002612:	4b23      	ldr	r3, [pc, #140]	@ (80026a0 <HAL_GPIO_Init+0x304>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	43db      	mvns	r3, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002636:	4a1a      	ldr	r2, [pc, #104]	@ (80026a0 <HAL_GPIO_Init+0x304>)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800263c:	4b18      	ldr	r3, [pc, #96]	@ (80026a0 <HAL_GPIO_Init+0x304>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002660:	4a0f      	ldr	r2, [pc, #60]	@ (80026a0 <HAL_GPIO_Init+0x304>)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3301      	adds	r3, #1
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	2b0f      	cmp	r3, #15
 8002670:	f67f aea2 	bls.w	80023b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002674:	bf00      	nop
 8002676:	bf00      	nop
 8002678:	3724      	adds	r7, #36	@ 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800
 8002688:	40013800 	.word	0x40013800
 800268c:	40020000 	.word	0x40020000
 8002690:	40020400 	.word	0x40020400
 8002694:	40020800 	.word	0x40020800
 8002698:	40020c00 	.word	0x40020c00
 800269c:	40021000 	.word	0x40021000
 80026a0:	40013c00 	.word	0x40013c00

080026a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	807b      	strh	r3, [r7, #2]
 80026b0:	4613      	mov	r3, r2
 80026b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026b4:	787b      	ldrb	r3, [r7, #1]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ba:	887a      	ldrh	r2, [r7, #2]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026c0:	e003      	b.n	80026ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026c2:	887b      	ldrh	r3, [r7, #2]
 80026c4:	041a      	lsls	r2, r3, #16
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	619a      	str	r2, [r3, #24]
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e12b      	b.n	8002942 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d106      	bne.n	8002704 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff f914 	bl	800192c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2224      	movs	r2, #36	@ 0x24
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800272a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800273a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800273c:	f001 fc36 	bl	8003fac <HAL_RCC_GetPCLK1Freq>
 8002740:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4a81      	ldr	r2, [pc, #516]	@ (800294c <HAL_I2C_Init+0x274>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d807      	bhi.n	800275c <HAL_I2C_Init+0x84>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4a80      	ldr	r2, [pc, #512]	@ (8002950 <HAL_I2C_Init+0x278>)
 8002750:	4293      	cmp	r3, r2
 8002752:	bf94      	ite	ls
 8002754:	2301      	movls	r3, #1
 8002756:	2300      	movhi	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	e006      	b.n	800276a <HAL_I2C_Init+0x92>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4a7d      	ldr	r2, [pc, #500]	@ (8002954 <HAL_I2C_Init+0x27c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	bf94      	ite	ls
 8002764:	2301      	movls	r3, #1
 8002766:	2300      	movhi	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e0e7      	b.n	8002942 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4a78      	ldr	r2, [pc, #480]	@ (8002958 <HAL_I2C_Init+0x280>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	0c9b      	lsrs	r3, r3, #18
 800277c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	430a      	orrs	r2, r1
 8002790:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	4a6a      	ldr	r2, [pc, #424]	@ (800294c <HAL_I2C_Init+0x274>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d802      	bhi.n	80027ac <HAL_I2C_Init+0xd4>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	3301      	adds	r3, #1
 80027aa:	e009      	b.n	80027c0 <HAL_I2C_Init+0xe8>
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027b2:	fb02 f303 	mul.w	r3, r2, r3
 80027b6:	4a69      	ldr	r2, [pc, #420]	@ (800295c <HAL_I2C_Init+0x284>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	099b      	lsrs	r3, r3, #6
 80027be:	3301      	adds	r3, #1
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	430b      	orrs	r3, r1
 80027c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80027d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	495c      	ldr	r1, [pc, #368]	@ (800294c <HAL_I2C_Init+0x274>)
 80027dc:	428b      	cmp	r3, r1
 80027de:	d819      	bhi.n	8002814 <HAL_I2C_Init+0x13c>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1e59      	subs	r1, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ee:	1c59      	adds	r1, r3, #1
 80027f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80027f4:	400b      	ands	r3, r1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_I2C_Init+0x138>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1e59      	subs	r1, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	fbb1 f3f3 	udiv	r3, r1, r3
 8002808:	3301      	adds	r3, #1
 800280a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280e:	e051      	b.n	80028b4 <HAL_I2C_Init+0x1dc>
 8002810:	2304      	movs	r3, #4
 8002812:	e04f      	b.n	80028b4 <HAL_I2C_Init+0x1dc>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d111      	bne.n	8002840 <HAL_I2C_Init+0x168>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1e58      	subs	r0, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	440b      	add	r3, r1
 800282a:	fbb0 f3f3 	udiv	r3, r0, r3
 800282e:	3301      	adds	r3, #1
 8002830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	e012      	b.n	8002866 <HAL_I2C_Init+0x18e>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1e58      	subs	r0, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6859      	ldr	r1, [r3, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	0099      	lsls	r1, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	fbb0 f3f3 	udiv	r3, r0, r3
 8002856:	3301      	adds	r3, #1
 8002858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf0c      	ite	eq
 8002860:	2301      	moveq	r3, #1
 8002862:	2300      	movne	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_I2C_Init+0x196>
 800286a:	2301      	movs	r3, #1
 800286c:	e022      	b.n	80028b4 <HAL_I2C_Init+0x1dc>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10e      	bne.n	8002894 <HAL_I2C_Init+0x1bc>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1e58      	subs	r0, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6859      	ldr	r1, [r3, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	440b      	add	r3, r1
 8002884:	fbb0 f3f3 	udiv	r3, r0, r3
 8002888:	3301      	adds	r3, #1
 800288a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002892:	e00f      	b.n	80028b4 <HAL_I2C_Init+0x1dc>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1e58      	subs	r0, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6859      	ldr	r1, [r3, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	0099      	lsls	r1, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028aa:	3301      	adds	r3, #1
 80028ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	6809      	ldr	r1, [r1, #0]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69da      	ldr	r2, [r3, #28]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80028e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6911      	ldr	r1, [r2, #16]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68d2      	ldr	r2, [r2, #12]
 80028ee:	4311      	orrs	r1, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	430b      	orrs	r3, r1
 80028f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2220      	movs	r2, #32
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	000186a0 	.word	0x000186a0
 8002950:	001e847f 	.word	0x001e847f
 8002954:	003d08ff 	.word	0x003d08ff
 8002958:	431bde83 	.word	0x431bde83
 800295c:	10624dd3 	.word	0x10624dd3

08002960 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	461a      	mov	r2, r3
 800296c:	460b      	mov	r3, r1
 800296e:	817b      	strh	r3, [r7, #10]
 8002970:	4613      	mov	r3, r2
 8002972:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002974:	f7ff fc00 	bl	8002178 <HAL_GetTick>
 8002978:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b20      	cmp	r3, #32
 8002984:	f040 80e0 	bne.w	8002b48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	2319      	movs	r3, #25
 800298e:	2201      	movs	r2, #1
 8002990:	4970      	ldr	r1, [pc, #448]	@ (8002b54 <HAL_I2C_Master_Transmit+0x1f4>)
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 fc64 	bl	8003260 <I2C_WaitOnFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800299e:	2302      	movs	r3, #2
 80029a0:	e0d3      	b.n	8002b4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_I2C_Master_Transmit+0x50>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e0cc      	b.n	8002b4a <HAL_I2C_Master_Transmit+0x1ea>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d007      	beq.n	80029d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0201 	orr.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2221      	movs	r2, #33	@ 0x21
 80029ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2210      	movs	r2, #16
 80029f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	893a      	ldrh	r2, [r7, #8]
 8002a06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4a50      	ldr	r2, [pc, #320]	@ (8002b58 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a18:	8979      	ldrh	r1, [r7, #10]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	6a3a      	ldr	r2, [r7, #32]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 face 	bl	8002fc0 <I2C_MasterRequestWrite>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e08d      	b.n	8002b4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a44:	e066      	b.n	8002b14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	6a39      	ldr	r1, [r7, #32]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 fd22 	bl	8003494 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00d      	beq.n	8002a72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d107      	bne.n	8002a6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e06b      	b.n	8002b4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a76:	781a      	ldrb	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d11b      	bne.n	8002ae8 <HAL_I2C_Master_Transmit+0x188>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d017      	beq.n	8002ae8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abc:	781a      	ldrb	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	6a39      	ldr	r1, [r7, #32]
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 fd19 	bl	8003524 <I2C_WaitOnBTFFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00d      	beq.n	8002b14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d107      	bne.n	8002b10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e01a      	b.n	8002b4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d194      	bne.n	8002a46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e000      	b.n	8002b4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b48:	2302      	movs	r3, #2
  }
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	00100002 	.word	0x00100002
 8002b58:	ffff0000 	.word	0xffff0000

08002b5c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08c      	sub	sp, #48	@ 0x30
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	607a      	str	r2, [r7, #4]
 8002b66:	461a      	mov	r2, r3
 8002b68:	460b      	mov	r3, r1
 8002b6a:	817b      	strh	r3, [r7, #10]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b70:	f7ff fb02 	bl	8002178 <HAL_GetTick>
 8002b74:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	f040 8217 	bne.w	8002fb2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	2319      	movs	r3, #25
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	497c      	ldr	r1, [pc, #496]	@ (8002d80 <HAL_I2C_Master_Receive+0x224>)
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fb66 	bl	8003260 <I2C_WaitOnFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e20a      	b.n	8002fb4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_I2C_Master_Receive+0x50>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e203      	b.n	8002fb4 <HAL_I2C_Master_Receive+0x458>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d007      	beq.n	8002bd2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0201 	orr.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002be0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2222      	movs	r2, #34	@ 0x22
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2210      	movs	r2, #16
 8002bee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	893a      	ldrh	r2, [r7, #8]
 8002c02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4a5c      	ldr	r2, [pc, #368]	@ (8002d84 <HAL_I2C_Master_Receive+0x228>)
 8002c12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c14:	8979      	ldrh	r1, [r7, #10]
 8002c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 fa52 	bl	80030c4 <I2C_MasterRequestRead>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e1c4      	b.n	8002fb4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d113      	bne.n	8002c5a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c32:	2300      	movs	r3, #0
 8002c34:	623b      	str	r3, [r7, #32]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	623b      	str	r3, [r7, #32]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	623b      	str	r3, [r7, #32]
 8002c46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	e198      	b.n	8002f8c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d11b      	bne.n	8002c9a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	e178      	b.n	8002f8c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d11b      	bne.n	8002cda <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cb0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	61bb      	str	r3, [r7, #24]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	e158      	b.n	8002f8c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ce8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d00:	e144      	b.n	8002f8c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	f200 80f1 	bhi.w	8002eee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d123      	bne.n	8002d5c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d16:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 fc4b 	bl	80035b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e145      	b.n	8002fb4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d5a:	e117      	b.n	8002f8c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d14e      	bne.n	8002e02 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	4906      	ldr	r1, [pc, #24]	@ (8002d88 <HAL_I2C_Master_Receive+0x22c>)
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fa76 	bl	8003260 <I2C_WaitOnFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d008      	beq.n	8002d8c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e11a      	b.n	8002fb4 <HAL_I2C_Master_Receive+0x458>
 8002d7e:	bf00      	nop
 8002d80:	00100002 	.word	0x00100002
 8002d84:	ffff0000 	.word	0xffff0000
 8002d88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e00:	e0c4      	b.n	8002f8c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e08:	2200      	movs	r2, #0
 8002e0a:	496c      	ldr	r1, [pc, #432]	@ (8002fbc <HAL_I2C_Master_Receive+0x460>)
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fa27 	bl	8003260 <I2C_WaitOnFlagUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0cb      	b.n	8002fb4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e64:	2200      	movs	r2, #0
 8002e66:	4955      	ldr	r1, [pc, #340]	@ (8002fbc <HAL_I2C_Master_Receive+0x460>)
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f9f9 	bl	8003260 <I2C_WaitOnFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e09d      	b.n	8002fb4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691a      	ldr	r2, [r3, #16]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002eec:	e04e      	b.n	8002f8c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 fb5e 	bl	80035b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e058      	b.n	8002fb4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d124      	bne.n	8002f8c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	d107      	bne.n	8002f5a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f58:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f47f aeb6 	bne.w	8002d02 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e000      	b.n	8002fb4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002fb2:	2302      	movs	r3, #2
  }
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3728      	adds	r7, #40	@ 0x28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	00010004 	.word	0x00010004

08002fc0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d006      	beq.n	8002fea <I2C_MasterRequestWrite+0x2a>
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d003      	beq.n	8002fea <I2C_MasterRequestWrite+0x2a>
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fe8:	d108      	bne.n	8002ffc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	e00b      	b.n	8003014 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003000:	2b12      	cmp	r3, #18
 8003002:	d107      	bne.n	8003014 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003012:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f91d 	bl	8003260 <I2C_WaitOnFlagUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00d      	beq.n	8003048 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800303a:	d103      	bne.n	8003044 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003042:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e035      	b.n	80030b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003050:	d108      	bne.n	8003064 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003052:	897b      	ldrh	r3, [r7, #10]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003060:	611a      	str	r2, [r3, #16]
 8003062:	e01b      	b.n	800309c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003064:	897b      	ldrh	r3, [r7, #10]
 8003066:	11db      	asrs	r3, r3, #7
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f003 0306 	and.w	r3, r3, #6
 800306e:	b2db      	uxtb	r3, r3
 8003070:	f063 030f 	orn	r3, r3, #15
 8003074:	b2da      	uxtb	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	490e      	ldr	r1, [pc, #56]	@ (80030bc <I2C_MasterRequestWrite+0xfc>)
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f966 	bl	8003354 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e010      	b.n	80030b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003092:	897b      	ldrh	r3, [r7, #10]
 8003094:	b2da      	uxtb	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	4907      	ldr	r1, [pc, #28]	@ (80030c0 <I2C_MasterRequestWrite+0x100>)
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f956 	bl	8003354 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	00010008 	.word	0x00010008
 80030c0:	00010002 	.word	0x00010002

080030c4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af02      	add	r7, sp, #8
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	607a      	str	r2, [r7, #4]
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	460b      	mov	r3, r1
 80030d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030e8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d006      	beq.n	80030fe <I2C_MasterRequestRead+0x3a>
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d003      	beq.n	80030fe <I2C_MasterRequestRead+0x3a>
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030fc:	d108      	bne.n	8003110 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	e00b      	b.n	8003128 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003114:	2b11      	cmp	r3, #17
 8003116:	d107      	bne.n	8003128 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003126:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f893 	bl	8003260 <I2C_WaitOnFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00d      	beq.n	800315c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800314e:	d103      	bne.n	8003158 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003156:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e079      	b.n	8003250 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003164:	d108      	bne.n	8003178 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003166:	897b      	ldrh	r3, [r7, #10]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	b2da      	uxtb	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	611a      	str	r2, [r3, #16]
 8003176:	e05f      	b.n	8003238 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003178:	897b      	ldrh	r3, [r7, #10]
 800317a:	11db      	asrs	r3, r3, #7
 800317c:	b2db      	uxtb	r3, r3
 800317e:	f003 0306 	and.w	r3, r3, #6
 8003182:	b2db      	uxtb	r3, r3
 8003184:	f063 030f 	orn	r3, r3, #15
 8003188:	b2da      	uxtb	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	4930      	ldr	r1, [pc, #192]	@ (8003258 <I2C_MasterRequestRead+0x194>)
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 f8dc 	bl	8003354 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e054      	b.n	8003250 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031a6:	897b      	ldrh	r3, [r7, #10]
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	4929      	ldr	r1, [pc, #164]	@ (800325c <I2C_MasterRequestRead+0x198>)
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f8cc 	bl	8003354 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e044      	b.n	8003250 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031ea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 f831 	bl	8003260 <I2C_WaitOnFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00d      	beq.n	8003220 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003212:	d103      	bne.n	800321c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800321a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e017      	b.n	8003250 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003220:	897b      	ldrh	r3, [r7, #10]
 8003222:	11db      	asrs	r3, r3, #7
 8003224:	b2db      	uxtb	r3, r3
 8003226:	f003 0306 	and.w	r3, r3, #6
 800322a:	b2db      	uxtb	r3, r3
 800322c:	f063 030e 	orn	r3, r3, #14
 8003230:	b2da      	uxtb	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	4907      	ldr	r1, [pc, #28]	@ (800325c <I2C_MasterRequestRead+0x198>)
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 f888 	bl	8003354 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	00010008 	.word	0x00010008
 800325c:	00010002 	.word	0x00010002

08003260 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	4613      	mov	r3, r2
 800326e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003270:	e048      	b.n	8003304 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003278:	d044      	beq.n	8003304 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800327a:	f7fe ff7d 	bl	8002178 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d302      	bcc.n	8003290 <I2C_WaitOnFlagUntilTimeout+0x30>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d139      	bne.n	8003304 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	0c1b      	lsrs	r3, r3, #16
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d10d      	bne.n	80032b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	43da      	mvns	r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	4013      	ands	r3, r2
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	bf0c      	ite	eq
 80032ac:	2301      	moveq	r3, #1
 80032ae:	2300      	movne	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	e00c      	b.n	80032d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	43da      	mvns	r2, r3
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	4013      	ands	r3, r2
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	bf0c      	ite	eq
 80032c8:	2301      	moveq	r3, #1
 80032ca:	2300      	movne	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d116      	bne.n	8003304 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f0:	f043 0220 	orr.w	r2, r3, #32
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e023      	b.n	800334c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	0c1b      	lsrs	r3, r3, #16
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b01      	cmp	r3, #1
 800330c:	d10d      	bne.n	800332a <I2C_WaitOnFlagUntilTimeout+0xca>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	43da      	mvns	r2, r3
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	4013      	ands	r3, r2
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	bf0c      	ite	eq
 8003320:	2301      	moveq	r3, #1
 8003322:	2300      	movne	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	461a      	mov	r2, r3
 8003328:	e00c      	b.n	8003344 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	43da      	mvns	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	4013      	ands	r3, r2
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	461a      	mov	r2, r3
 8003344:	79fb      	ldrb	r3, [r7, #7]
 8003346:	429a      	cmp	r2, r3
 8003348:	d093      	beq.n	8003272 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003362:	e071      	b.n	8003448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800336e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003372:	d123      	bne.n	80033bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003382:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800338c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a8:	f043 0204 	orr.w	r2, r3, #4
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e067      	b.n	800348c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033c2:	d041      	beq.n	8003448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c4:	f7fe fed8 	bl	8002178 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d302      	bcc.n	80033da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d136      	bne.n	8003448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	0c1b      	lsrs	r3, r3, #16
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d10c      	bne.n	80033fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	43da      	mvns	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4013      	ands	r3, r2
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	bf14      	ite	ne
 80033f6:	2301      	movne	r3, #1
 80033f8:	2300      	moveq	r3, #0
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	e00b      	b.n	8003416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	43da      	mvns	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	4013      	ands	r3, r2
 800340a:	b29b      	uxth	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	bf14      	ite	ne
 8003410:	2301      	movne	r3, #1
 8003412:	2300      	moveq	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d016      	beq.n	8003448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003434:	f043 0220 	orr.w	r2, r3, #32
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e021      	b.n	800348c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	0c1b      	lsrs	r3, r3, #16
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b01      	cmp	r3, #1
 8003450:	d10c      	bne.n	800346c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	43da      	mvns	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	4013      	ands	r3, r2
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf14      	ite	ne
 8003464:	2301      	movne	r3, #1
 8003466:	2300      	moveq	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	e00b      	b.n	8003484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	43da      	mvns	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4013      	ands	r3, r2
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	bf14      	ite	ne
 800347e:	2301      	movne	r3, #1
 8003480:	2300      	moveq	r3, #0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	f47f af6d 	bne.w	8003364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034a0:	e034      	b.n	800350c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f8e3 	bl	800366e <I2C_IsAcknowledgeFailed>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e034      	b.n	800351c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034b8:	d028      	beq.n	800350c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ba:	f7fe fe5d 	bl	8002178 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d302      	bcc.n	80034d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d11d      	bne.n	800350c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034da:	2b80      	cmp	r3, #128	@ 0x80
 80034dc:	d016      	beq.n	800350c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	f043 0220 	orr.w	r2, r3, #32
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e007      	b.n	800351c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003516:	2b80      	cmp	r3, #128	@ 0x80
 8003518:	d1c3      	bne.n	80034a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003530:	e034      	b.n	800359c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f89b 	bl	800366e <I2C_IsAcknowledgeFailed>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e034      	b.n	80035ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003548:	d028      	beq.n	800359c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354a:	f7fe fe15 	bl	8002178 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	429a      	cmp	r2, r3
 8003558:	d302      	bcc.n	8003560 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d11d      	bne.n	800359c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	2b04      	cmp	r3, #4
 800356c:	d016      	beq.n	800359c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003588:	f043 0220 	orr.w	r2, r3, #32
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e007      	b.n	80035ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d1c3      	bne.n	8003532 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035c0:	e049      	b.n	8003656 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	f003 0310 	and.w	r3, r3, #16
 80035cc:	2b10      	cmp	r3, #16
 80035ce:	d119      	bne.n	8003604 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0210 	mvn.w	r2, #16
 80035d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e030      	b.n	8003666 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003604:	f7fe fdb8 	bl	8002178 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	429a      	cmp	r2, r3
 8003612:	d302      	bcc.n	800361a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d11d      	bne.n	8003656 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003624:	2b40      	cmp	r3, #64	@ 0x40
 8003626:	d016      	beq.n	8003656 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2220      	movs	r2, #32
 8003632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	f043 0220 	orr.w	r2, r3, #32
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e007      	b.n	8003666 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003660:	2b40      	cmp	r3, #64	@ 0x40
 8003662:	d1ae      	bne.n	80035c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003680:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003684:	d11b      	bne.n	80036be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800368e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	f043 0204 	orr.w	r2, r3, #4
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e267      	b.n	8003bae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d075      	beq.n	80037d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036ea:	4b88      	ldr	r3, [pc, #544]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d00c      	beq.n	8003710 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036f6:	4b85      	ldr	r3, [pc, #532]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d112      	bne.n	8003728 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003702:	4b82      	ldr	r3, [pc, #520]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800370a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800370e:	d10b      	bne.n	8003728 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003710:	4b7e      	ldr	r3, [pc, #504]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d05b      	beq.n	80037d4 <HAL_RCC_OscConfig+0x108>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d157      	bne.n	80037d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e242      	b.n	8003bae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003730:	d106      	bne.n	8003740 <HAL_RCC_OscConfig+0x74>
 8003732:	4b76      	ldr	r3, [pc, #472]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a75      	ldr	r2, [pc, #468]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 8003738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	e01d      	b.n	800377c <HAL_RCC_OscConfig+0xb0>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003748:	d10c      	bne.n	8003764 <HAL_RCC_OscConfig+0x98>
 800374a:	4b70      	ldr	r3, [pc, #448]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a6f      	ldr	r2, [pc, #444]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 8003750:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	4b6d      	ldr	r3, [pc, #436]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a6c      	ldr	r2, [pc, #432]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 800375c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	e00b      	b.n	800377c <HAL_RCC_OscConfig+0xb0>
 8003764:	4b69      	ldr	r3, [pc, #420]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a68      	ldr	r2, [pc, #416]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 800376a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	4b66      	ldr	r3, [pc, #408]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a65      	ldr	r2, [pc, #404]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 8003776:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800377a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d013      	beq.n	80037ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fe fcf8 	bl	8002178 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800378c:	f7fe fcf4 	bl	8002178 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	@ 0x64
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e207      	b.n	8003bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379e:	4b5b      	ldr	r3, [pc, #364]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0xc0>
 80037aa:	e014      	b.n	80037d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ac:	f7fe fce4 	bl	8002178 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b4:	f7fe fce0 	bl	8002178 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b64      	cmp	r3, #100	@ 0x64
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e1f3      	b.n	8003bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c6:	4b51      	ldr	r3, [pc, #324]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0xe8>
 80037d2:	e000      	b.n	80037d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d063      	beq.n	80038aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037e2:	4b4a      	ldr	r3, [pc, #296]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00b      	beq.n	8003806 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ee:	4b47      	ldr	r3, [pc, #284]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d11c      	bne.n	8003834 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037fa:	4b44      	ldr	r3, [pc, #272]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d116      	bne.n	8003834 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003806:	4b41      	ldr	r3, [pc, #260]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d005      	beq.n	800381e <HAL_RCC_OscConfig+0x152>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d001      	beq.n	800381e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e1c7      	b.n	8003bae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381e:	4b3b      	ldr	r3, [pc, #236]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	4937      	ldr	r1, [pc, #220]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 800382e:	4313      	orrs	r3, r2
 8003830:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003832:	e03a      	b.n	80038aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d020      	beq.n	800387e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800383c:	4b34      	ldr	r3, [pc, #208]	@ (8003910 <HAL_RCC_OscConfig+0x244>)
 800383e:	2201      	movs	r2, #1
 8003840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003842:	f7fe fc99 	bl	8002178 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800384a:	f7fe fc95 	bl	8002178 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e1a8      	b.n	8003bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385c:	4b2b      	ldr	r3, [pc, #172]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0f0      	beq.n	800384a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003868:	4b28      	ldr	r3, [pc, #160]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4925      	ldr	r1, [pc, #148]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 8003878:	4313      	orrs	r3, r2
 800387a:	600b      	str	r3, [r1, #0]
 800387c:	e015      	b.n	80038aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800387e:	4b24      	ldr	r3, [pc, #144]	@ (8003910 <HAL_RCC_OscConfig+0x244>)
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7fe fc78 	bl	8002178 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800388c:	f7fe fc74 	bl	8002178 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e187      	b.n	8003bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389e:	4b1b      	ldr	r3, [pc, #108]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d036      	beq.n	8003924 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d016      	beq.n	80038ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038be:	4b15      	ldr	r3, [pc, #84]	@ (8003914 <HAL_RCC_OscConfig+0x248>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c4:	f7fe fc58 	bl	8002178 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038cc:	f7fe fc54 	bl	8002178 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e167      	b.n	8003bae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038de:	4b0b      	ldr	r3, [pc, #44]	@ (800390c <HAL_RCC_OscConfig+0x240>)
 80038e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0x200>
 80038ea:	e01b      	b.n	8003924 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ec:	4b09      	ldr	r3, [pc, #36]	@ (8003914 <HAL_RCC_OscConfig+0x248>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f2:	f7fe fc41 	bl	8002178 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f8:	e00e      	b.n	8003918 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038fa:	f7fe fc3d 	bl	8002178 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d907      	bls.n	8003918 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e150      	b.n	8003bae <HAL_RCC_OscConfig+0x4e2>
 800390c:	40023800 	.word	0x40023800
 8003910:	42470000 	.word	0x42470000
 8003914:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003918:	4b88      	ldr	r3, [pc, #544]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 800391a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1ea      	bne.n	80038fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 8097 	beq.w	8003a60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003932:	2300      	movs	r3, #0
 8003934:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003936:	4b81      	ldr	r3, [pc, #516]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10f      	bne.n	8003962 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	4b7d      	ldr	r3, [pc, #500]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394a:	4a7c      	ldr	r2, [pc, #496]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 800394c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003950:	6413      	str	r3, [r2, #64]	@ 0x40
 8003952:	4b7a      	ldr	r3, [pc, #488]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800395e:	2301      	movs	r3, #1
 8003960:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003962:	4b77      	ldr	r3, [pc, #476]	@ (8003b40 <HAL_RCC_OscConfig+0x474>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800396a:	2b00      	cmp	r3, #0
 800396c:	d118      	bne.n	80039a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800396e:	4b74      	ldr	r3, [pc, #464]	@ (8003b40 <HAL_RCC_OscConfig+0x474>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a73      	ldr	r2, [pc, #460]	@ (8003b40 <HAL_RCC_OscConfig+0x474>)
 8003974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800397a:	f7fe fbfd 	bl	8002178 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003982:	f7fe fbf9 	bl	8002178 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e10c      	b.n	8003bae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003994:	4b6a      	ldr	r3, [pc, #424]	@ (8003b40 <HAL_RCC_OscConfig+0x474>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f0      	beq.n	8003982 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d106      	bne.n	80039b6 <HAL_RCC_OscConfig+0x2ea>
 80039a8:	4b64      	ldr	r3, [pc, #400]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 80039aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ac:	4a63      	ldr	r2, [pc, #396]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80039b4:	e01c      	b.n	80039f0 <HAL_RCC_OscConfig+0x324>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2b05      	cmp	r3, #5
 80039bc:	d10c      	bne.n	80039d8 <HAL_RCC_OscConfig+0x30c>
 80039be:	4b5f      	ldr	r3, [pc, #380]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 80039c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c2:	4a5e      	ldr	r2, [pc, #376]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 80039c4:	f043 0304 	orr.w	r3, r3, #4
 80039c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80039ca:	4b5c      	ldr	r3, [pc, #368]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ce:	4a5b      	ldr	r2, [pc, #364]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80039d6:	e00b      	b.n	80039f0 <HAL_RCC_OscConfig+0x324>
 80039d8:	4b58      	ldr	r3, [pc, #352]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039dc:	4a57      	ldr	r2, [pc, #348]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 80039de:	f023 0301 	bic.w	r3, r3, #1
 80039e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80039e4:	4b55      	ldr	r3, [pc, #340]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 80039e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e8:	4a54      	ldr	r2, [pc, #336]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 80039ea:	f023 0304 	bic.w	r3, r3, #4
 80039ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d015      	beq.n	8003a24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f8:	f7fe fbbe 	bl	8002178 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fe:	e00a      	b.n	8003a16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a00:	f7fe fbba 	bl	8002178 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e0cb      	b.n	8003bae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a16:	4b49      	ldr	r3, [pc, #292]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 8003a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0ee      	beq.n	8003a00 <HAL_RCC_OscConfig+0x334>
 8003a22:	e014      	b.n	8003a4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a24:	f7fe fba8 	bl	8002178 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a2a:	e00a      	b.n	8003a42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a2c:	f7fe fba4 	bl	8002178 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e0b5      	b.n	8003bae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a42:	4b3e      	ldr	r3, [pc, #248]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 8003a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1ee      	bne.n	8003a2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a4e:	7dfb      	ldrb	r3, [r7, #23]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d105      	bne.n	8003a60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a54:	4b39      	ldr	r3, [pc, #228]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 8003a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a58:	4a38      	ldr	r2, [pc, #224]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 8003a5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80a1 	beq.w	8003bac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a6a:	4b34      	ldr	r3, [pc, #208]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d05c      	beq.n	8003b30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d141      	bne.n	8003b02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a7e:	4b31      	ldr	r3, [pc, #196]	@ (8003b44 <HAL_RCC_OscConfig+0x478>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7fe fb78 	bl	8002178 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8c:	f7fe fb74 	bl	8002178 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e087      	b.n	8003bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9e:	4b27      	ldr	r3, [pc, #156]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69da      	ldr	r2, [r3, #28]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	019b      	lsls	r3, r3, #6
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac0:	085b      	lsrs	r3, r3, #1
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	041b      	lsls	r3, r3, #16
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003acc:	061b      	lsls	r3, r3, #24
 8003ace:	491b      	ldr	r1, [pc, #108]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b44 <HAL_RCC_OscConfig+0x478>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ada:	f7fe fb4d 	bl	8002178 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae2:	f7fe fb49 	bl	8002178 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e05c      	b.n	8003bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af4:	4b11      	ldr	r3, [pc, #68]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x416>
 8003b00:	e054      	b.n	8003bac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b02:	4b10      	ldr	r3, [pc, #64]	@ (8003b44 <HAL_RCC_OscConfig+0x478>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b08:	f7fe fb36 	bl	8002178 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b10:	f7fe fb32 	bl	8002178 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e045      	b.n	8003bae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b22:	4b06      	ldr	r3, [pc, #24]	@ (8003b3c <HAL_RCC_OscConfig+0x470>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0x444>
 8003b2e:	e03d      	b.n	8003bac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d107      	bne.n	8003b48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e038      	b.n	8003bae <HAL_RCC_OscConfig+0x4e2>
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	40007000 	.word	0x40007000
 8003b44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b48:	4b1b      	ldr	r3, [pc, #108]	@ (8003bb8 <HAL_RCC_OscConfig+0x4ec>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d028      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d121      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d11a      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b78:	4013      	ands	r3, r2
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d111      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8e:	085b      	lsrs	r3, r3, #1
 8003b90:	3b01      	subs	r3, #1
 8003b92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d107      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d001      	beq.n	8003bac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e000      	b.n	8003bae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40023800 	.word	0x40023800

08003bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0cc      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd0:	4b68      	ldr	r3, [pc, #416]	@ (8003d74 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d90c      	bls.n	8003bf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bde:	4b65      	ldr	r3, [pc, #404]	@ (8003d74 <HAL_RCC_ClockConfig+0x1b8>)
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be6:	4b63      	ldr	r3, [pc, #396]	@ (8003d74 <HAL_RCC_ClockConfig+0x1b8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0b8      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d020      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c10:	4b59      	ldr	r3, [pc, #356]	@ (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	4a58      	ldr	r2, [pc, #352]	@ (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c28:	4b53      	ldr	r3, [pc, #332]	@ (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	4a52      	ldr	r2, [pc, #328]	@ (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c34:	4b50      	ldr	r3, [pc, #320]	@ (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	494d      	ldr	r1, [pc, #308]	@ (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d044      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d107      	bne.n	8003c6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5a:	4b47      	ldr	r3, [pc, #284]	@ (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d119      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e07f      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d003      	beq.n	8003c7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d107      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d109      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e06f      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e067      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c9a:	4b37      	ldr	r3, [pc, #220]	@ (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f023 0203 	bic.w	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	4934      	ldr	r1, [pc, #208]	@ (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cac:	f7fe fa64 	bl	8002178 <HAL_GetTick>
 8003cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb4:	f7fe fa60 	bl	8002178 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e04f      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cca:	4b2b      	ldr	r3, [pc, #172]	@ (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 020c 	and.w	r2, r3, #12
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d1eb      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b25      	ldr	r3, [pc, #148]	@ (8003d74 <HAL_RCC_ClockConfig+0x1b8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d20c      	bcs.n	8003d04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b22      	ldr	r3, [pc, #136]	@ (8003d74 <HAL_RCC_ClockConfig+0x1b8>)
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf2:	4b20      	ldr	r3, [pc, #128]	@ (8003d74 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d001      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e032      	b.n	8003d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d008      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d10:	4b19      	ldr	r3, [pc, #100]	@ (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	4916      	ldr	r1, [pc, #88]	@ (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d009      	beq.n	8003d42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d2e:	4b12      	ldr	r3, [pc, #72]	@ (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	490e      	ldr	r1, [pc, #56]	@ (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d42:	f000 f821 	bl	8003d88 <HAL_RCC_GetSysClockFreq>
 8003d46:	4602      	mov	r2, r0
 8003d48:	4b0b      	ldr	r3, [pc, #44]	@ (8003d78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	091b      	lsrs	r3, r3, #4
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	490a      	ldr	r1, [pc, #40]	@ (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003d54:	5ccb      	ldrb	r3, [r1, r3]
 8003d56:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5a:	4a09      	ldr	r2, [pc, #36]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d5e:	4b09      	ldr	r3, [pc, #36]	@ (8003d84 <HAL_RCC_ClockConfig+0x1c8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fd fea6 	bl	8001ab4 <HAL_InitTick>

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40023c00 	.word	0x40023c00
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	0800ad48 	.word	0x0800ad48
 8003d80:	20000000 	.word	0x20000000
 8003d84:	20000004 	.word	0x20000004

08003d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d8c:	b094      	sub	sp, #80	@ 0x50
 8003d8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003da0:	4b79      	ldr	r3, [pc, #484]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 030c 	and.w	r3, r3, #12
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d00d      	beq.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x40>
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	f200 80e1 	bhi.w	8003f74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_RCC_GetSysClockFreq+0x34>
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d003      	beq.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dba:	e0db      	b.n	8003f74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dbc:	4b73      	ldr	r3, [pc, #460]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x204>)
 8003dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dc0:	e0db      	b.n	8003f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dc2:	4b73      	ldr	r3, [pc, #460]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x208>)
 8003dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dc6:	e0d8      	b.n	8003f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dc8:	4b6f      	ldr	r3, [pc, #444]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dd0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dd2:	4b6d      	ldr	r3, [pc, #436]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d063      	beq.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dde:	4b6a      	ldr	r3, [pc, #424]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	099b      	lsrs	r3, r3, #6
 8003de4:	2200      	movs	r2, #0
 8003de6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003de8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003df2:	2300      	movs	r3, #0
 8003df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003df6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003dfa:	4622      	mov	r2, r4
 8003dfc:	462b      	mov	r3, r5
 8003dfe:	f04f 0000 	mov.w	r0, #0
 8003e02:	f04f 0100 	mov.w	r1, #0
 8003e06:	0159      	lsls	r1, r3, #5
 8003e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e0c:	0150      	lsls	r0, r2, #5
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	4621      	mov	r1, r4
 8003e14:	1a51      	subs	r1, r2, r1
 8003e16:	6139      	str	r1, [r7, #16]
 8003e18:	4629      	mov	r1, r5
 8003e1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e2c:	4659      	mov	r1, fp
 8003e2e:	018b      	lsls	r3, r1, #6
 8003e30:	4651      	mov	r1, sl
 8003e32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e36:	4651      	mov	r1, sl
 8003e38:	018a      	lsls	r2, r1, #6
 8003e3a:	4651      	mov	r1, sl
 8003e3c:	ebb2 0801 	subs.w	r8, r2, r1
 8003e40:	4659      	mov	r1, fp
 8003e42:	eb63 0901 	sbc.w	r9, r3, r1
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	f04f 0300 	mov.w	r3, #0
 8003e4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e5a:	4690      	mov	r8, r2
 8003e5c:	4699      	mov	r9, r3
 8003e5e:	4623      	mov	r3, r4
 8003e60:	eb18 0303 	adds.w	r3, r8, r3
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	462b      	mov	r3, r5
 8003e68:	eb49 0303 	adc.w	r3, r9, r3
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e7a:	4629      	mov	r1, r5
 8003e7c:	024b      	lsls	r3, r1, #9
 8003e7e:	4621      	mov	r1, r4
 8003e80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e84:	4621      	mov	r1, r4
 8003e86:	024a      	lsls	r2, r1, #9
 8003e88:	4610      	mov	r0, r2
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e8e:	2200      	movs	r2, #0
 8003e90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e98:	f7fc fefe 	bl	8000c98 <__aeabi_uldivmod>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ea4:	e058      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea6:	4b38      	ldr	r3, [pc, #224]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	099b      	lsrs	r3, r3, #6
 8003eac:	2200      	movs	r2, #0
 8003eae:	4618      	mov	r0, r3
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003eb6:	623b      	str	r3, [r7, #32]
 8003eb8:	2300      	movs	r3, #0
 8003eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ebc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ec0:	4642      	mov	r2, r8
 8003ec2:	464b      	mov	r3, r9
 8003ec4:	f04f 0000 	mov.w	r0, #0
 8003ec8:	f04f 0100 	mov.w	r1, #0
 8003ecc:	0159      	lsls	r1, r3, #5
 8003ece:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ed2:	0150      	lsls	r0, r2, #5
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4641      	mov	r1, r8
 8003eda:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ede:	4649      	mov	r1, r9
 8003ee0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ef0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ef4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ef8:	ebb2 040a 	subs.w	r4, r2, sl
 8003efc:	eb63 050b 	sbc.w	r5, r3, fp
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	00eb      	lsls	r3, r5, #3
 8003f0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f0e:	00e2      	lsls	r2, r4, #3
 8003f10:	4614      	mov	r4, r2
 8003f12:	461d      	mov	r5, r3
 8003f14:	4643      	mov	r3, r8
 8003f16:	18e3      	adds	r3, r4, r3
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	464b      	mov	r3, r9
 8003f1c:	eb45 0303 	adc.w	r3, r5, r3
 8003f20:	607b      	str	r3, [r7, #4]
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f2e:	4629      	mov	r1, r5
 8003f30:	028b      	lsls	r3, r1, #10
 8003f32:	4621      	mov	r1, r4
 8003f34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f38:	4621      	mov	r1, r4
 8003f3a:	028a      	lsls	r2, r1, #10
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	4619      	mov	r1, r3
 8003f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f42:	2200      	movs	r2, #0
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	61fa      	str	r2, [r7, #28]
 8003f48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f4c:	f7fc fea4 	bl	8000c98 <__aeabi_uldivmod>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4613      	mov	r3, r2
 8003f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f58:	4b0b      	ldr	r3, [pc, #44]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	0c1b      	lsrs	r3, r3, #16
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	3301      	adds	r3, #1
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003f68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f72:	e002      	b.n	8003f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f74:	4b05      	ldr	r3, [pc, #20]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x204>)
 8003f76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3750      	adds	r7, #80	@ 0x50
 8003f80:	46bd      	mov	sp, r7
 8003f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f86:	bf00      	nop
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	00f42400 	.word	0x00f42400
 8003f90:	007a1200 	.word	0x007a1200

08003f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f98:	4b03      	ldr	r3, [pc, #12]	@ (8003fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	20000000 	.word	0x20000000

08003fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fb0:	f7ff fff0 	bl	8003f94 <HAL_RCC_GetHCLKFreq>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	4b05      	ldr	r3, [pc, #20]	@ (8003fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	0a9b      	lsrs	r3, r3, #10
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	4903      	ldr	r1, [pc, #12]	@ (8003fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fc2:	5ccb      	ldrb	r3, [r1, r3]
 8003fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	0800ad58 	.word	0x0800ad58

08003fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fd8:	f7ff ffdc 	bl	8003f94 <HAL_RCC_GetHCLKFreq>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	4b05      	ldr	r3, [pc, #20]	@ (8003ff4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	0b5b      	lsrs	r3, r3, #13
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	4903      	ldr	r1, [pc, #12]	@ (8003ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fea:	5ccb      	ldrb	r3, [r1, r3]
 8003fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	0800ad58 	.word	0x0800ad58

08003ffc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	220f      	movs	r2, #15
 800400a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800400c:	4b12      	ldr	r3, [pc, #72]	@ (8004058 <HAL_RCC_GetClockConfig+0x5c>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 0203 	and.w	r2, r3, #3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004018:	4b0f      	ldr	r3, [pc, #60]	@ (8004058 <HAL_RCC_GetClockConfig+0x5c>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004024:	4b0c      	ldr	r3, [pc, #48]	@ (8004058 <HAL_RCC_GetClockConfig+0x5c>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004030:	4b09      	ldr	r3, [pc, #36]	@ (8004058 <HAL_RCC_GetClockConfig+0x5c>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	08db      	lsrs	r3, r3, #3
 8004036:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800403e:	4b07      	ldr	r3, [pc, #28]	@ (800405c <HAL_RCC_GetClockConfig+0x60>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0207 	and.w	r2, r3, #7
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	601a      	str	r2, [r3, #0]
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40023800 	.word	0x40023800
 800405c:	40023c00 	.word	0x40023c00

08004060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e041      	b.n	80040f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f839 	bl	80040fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3304      	adds	r3, #4
 800409c:	4619      	mov	r1, r3
 800409e:	4610      	mov	r0, r2
 80040a0:	f000 f9b2 	bl	8004408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b01      	cmp	r3, #1
 8004126:	d001      	beq.n	800412c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e044      	b.n	80041b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0201 	orr.w	r2, r2, #1
 8004142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1e      	ldr	r2, [pc, #120]	@ (80041c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d018      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x6c>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004156:	d013      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x6c>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a1a      	ldr	r2, [pc, #104]	@ (80041c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00e      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x6c>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a19      	ldr	r2, [pc, #100]	@ (80041cc <HAL_TIM_Base_Start_IT+0xb8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d009      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x6c>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a17      	ldr	r2, [pc, #92]	@ (80041d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d004      	beq.n	8004180 <HAL_TIM_Base_Start_IT+0x6c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a16      	ldr	r2, [pc, #88]	@ (80041d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d111      	bne.n	80041a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b06      	cmp	r3, #6
 8004190:	d010      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0201 	orr.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a2:	e007      	b.n	80041b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40010000 	.word	0x40010000
 80041c8:	40000400 	.word	0x40000400
 80041cc:	40000800 	.word	0x40000800
 80041d0:	40000c00 	.word	0x40000c00
 80041d4:	40014000 	.word	0x40014000

080041d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d020      	beq.n	800423c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01b      	beq.n	800423c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0202 	mvn.w	r2, #2
 800420c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f8d2 	bl	80043cc <HAL_TIM_IC_CaptureCallback>
 8004228:	e005      	b.n	8004236 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f8c4 	bl	80043b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f8d5 	bl	80043e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d020      	beq.n	8004288 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d01b      	beq.n	8004288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0204 	mvn.w	r2, #4
 8004258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2202      	movs	r2, #2
 800425e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f8ac 	bl	80043cc <HAL_TIM_IC_CaptureCallback>
 8004274:	e005      	b.n	8004282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f89e 	bl	80043b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f8af 	bl	80043e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d020      	beq.n	80042d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01b      	beq.n	80042d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f06f 0208 	mvn.w	r2, #8
 80042a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2204      	movs	r2, #4
 80042aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f886 	bl	80043cc <HAL_TIM_IC_CaptureCallback>
 80042c0:	e005      	b.n	80042ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f878 	bl	80043b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f889 	bl	80043e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f003 0310 	and.w	r3, r3, #16
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d020      	beq.n	8004320 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f003 0310 	and.w	r3, r3, #16
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d01b      	beq.n	8004320 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f06f 0210 	mvn.w	r2, #16
 80042f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2208      	movs	r2, #8
 80042f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f860 	bl	80043cc <HAL_TIM_IC_CaptureCallback>
 800430c:	e005      	b.n	800431a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f852 	bl	80043b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f863 	bl	80043e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00c      	beq.n	8004344 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d007      	beq.n	8004344 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f06f 0201 	mvn.w	r2, #1
 800433c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fd f9f6 	bl	8001730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00c      	beq.n	8004368 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004354:	2b00      	cmp	r3, #0
 8004356:	d007      	beq.n	8004368 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f8e6 	bl	8004534 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00c      	beq.n	800438c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004378:	2b00      	cmp	r3, #0
 800437a:	d007      	beq.n	800438c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f834 	bl	80043f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f003 0320 	and.w	r3, r3, #32
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00c      	beq.n	80043b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d007      	beq.n	80043b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0220 	mvn.w	r2, #32
 80043a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f8b8 	bl	8004520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043b0:	bf00      	nop
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a3a      	ldr	r2, [pc, #232]	@ (8004504 <TIM_Base_SetConfig+0xfc>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00f      	beq.n	8004440 <TIM_Base_SetConfig+0x38>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004426:	d00b      	beq.n	8004440 <TIM_Base_SetConfig+0x38>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a37      	ldr	r2, [pc, #220]	@ (8004508 <TIM_Base_SetConfig+0x100>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d007      	beq.n	8004440 <TIM_Base_SetConfig+0x38>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a36      	ldr	r2, [pc, #216]	@ (800450c <TIM_Base_SetConfig+0x104>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d003      	beq.n	8004440 <TIM_Base_SetConfig+0x38>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a35      	ldr	r2, [pc, #212]	@ (8004510 <TIM_Base_SetConfig+0x108>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d108      	bne.n	8004452 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a2b      	ldr	r2, [pc, #172]	@ (8004504 <TIM_Base_SetConfig+0xfc>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d01b      	beq.n	8004492 <TIM_Base_SetConfig+0x8a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004460:	d017      	beq.n	8004492 <TIM_Base_SetConfig+0x8a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a28      	ldr	r2, [pc, #160]	@ (8004508 <TIM_Base_SetConfig+0x100>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d013      	beq.n	8004492 <TIM_Base_SetConfig+0x8a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a27      	ldr	r2, [pc, #156]	@ (800450c <TIM_Base_SetConfig+0x104>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00f      	beq.n	8004492 <TIM_Base_SetConfig+0x8a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a26      	ldr	r2, [pc, #152]	@ (8004510 <TIM_Base_SetConfig+0x108>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d00b      	beq.n	8004492 <TIM_Base_SetConfig+0x8a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a25      	ldr	r2, [pc, #148]	@ (8004514 <TIM_Base_SetConfig+0x10c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d007      	beq.n	8004492 <TIM_Base_SetConfig+0x8a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a24      	ldr	r2, [pc, #144]	@ (8004518 <TIM_Base_SetConfig+0x110>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d003      	beq.n	8004492 <TIM_Base_SetConfig+0x8a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a23      	ldr	r2, [pc, #140]	@ (800451c <TIM_Base_SetConfig+0x114>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d108      	bne.n	80044a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a0e      	ldr	r2, [pc, #56]	@ (8004504 <TIM_Base_SetConfig+0xfc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d103      	bne.n	80044d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d105      	bne.n	80044f6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f023 0201 	bic.w	r2, r3, #1
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	611a      	str	r2, [r3, #16]
  }
}
 80044f6:	bf00      	nop
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40010000 	.word	0x40010000
 8004508:	40000400 	.word	0x40000400
 800450c:	40000800 	.word	0x40000800
 8004510:	40000c00 	.word	0x40000c00
 8004514:	40014000 	.word	0x40014000
 8004518:	40014400 	.word	0x40014400
 800451c:	40014800 	.word	0x40014800

08004520 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e042      	b.n	80045e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fd fa24 	bl	80019bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2224      	movs	r2, #36	@ 0x24
 8004578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800458a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 fa09 	bl	80049a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	695a      	ldr	r2, [r3, #20]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	@ 0x28
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	4613      	mov	r3, r2
 80045f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b20      	cmp	r3, #32
 8004606:	d175      	bne.n	80046f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <HAL_UART_Transmit+0x2c>
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e06e      	b.n	80046f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2221      	movs	r2, #33	@ 0x21
 8004622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004626:	f7fd fda7 	bl	8002178 <HAL_GetTick>
 800462a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	88fa      	ldrh	r2, [r7, #6]
 8004630:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	88fa      	ldrh	r2, [r7, #6]
 8004636:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004640:	d108      	bne.n	8004654 <HAL_UART_Transmit+0x6c>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d104      	bne.n	8004654 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800464a:	2300      	movs	r3, #0
 800464c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	61bb      	str	r3, [r7, #24]
 8004652:	e003      	b.n	800465c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004658:	2300      	movs	r3, #0
 800465a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800465c:	e02e      	b.n	80046bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2200      	movs	r2, #0
 8004666:	2180      	movs	r1, #128	@ 0x80
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f8df 	bl	800482c <UART_WaitOnFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e03a      	b.n	80046f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10b      	bne.n	800469e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004694:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	3302      	adds	r3, #2
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	e007      	b.n	80046ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	781a      	ldrb	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	3301      	adds	r3, #1
 80046ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1cb      	bne.n	800465e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2200      	movs	r2, #0
 80046ce:	2140      	movs	r1, #64	@ 0x40
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f8ab 	bl	800482c <UART_WaitOnFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e006      	b.n	80046f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e000      	b.n	80046f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80046f4:	2302      	movs	r3, #2
  }
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3720      	adds	r7, #32
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b08a      	sub	sp, #40	@ 0x28
 8004702:	af02      	add	r7, sp, #8
 8004704:	60f8      	str	r0, [r7, #12]
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	603b      	str	r3, [r7, #0]
 800470a:	4613      	mov	r3, r2
 800470c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b20      	cmp	r3, #32
 800471c:	f040 8081 	bne.w	8004822 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <HAL_UART_Receive+0x2e>
 8004726:	88fb      	ldrh	r3, [r7, #6]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e079      	b.n	8004824 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2222      	movs	r2, #34	@ 0x22
 800473a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004744:	f7fd fd18 	bl	8002178 <HAL_GetTick>
 8004748:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	88fa      	ldrh	r2, [r7, #6]
 800474e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	88fa      	ldrh	r2, [r7, #6]
 8004754:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800475e:	d108      	bne.n	8004772 <HAL_UART_Receive+0x74>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d104      	bne.n	8004772 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004768:	2300      	movs	r3, #0
 800476a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	61bb      	str	r3, [r7, #24]
 8004770:	e003      	b.n	800477a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004776:	2300      	movs	r3, #0
 8004778:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800477a:	e047      	b.n	800480c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2200      	movs	r2, #0
 8004784:	2120      	movs	r1, #32
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f850 	bl	800482c <UART_WaitOnFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d005      	beq.n	800479e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e042      	b.n	8004824 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10c      	bne.n	80047be <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	3302      	adds	r3, #2
 80047ba:	61bb      	str	r3, [r7, #24]
 80047bc:	e01f      	b.n	80047fe <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047c6:	d007      	beq.n	80047d8 <HAL_UART_Receive+0xda>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10a      	bne.n	80047e6 <HAL_UART_Receive+0xe8>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d106      	bne.n	80047e6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	701a      	strb	r2, [r3, #0]
 80047e4:	e008      	b.n	80047f8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	3301      	adds	r3, #1
 80047fc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1b2      	bne.n	800477c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	e000      	b.n	8004824 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004822:	2302      	movs	r3, #2
  }
}
 8004824:	4618      	mov	r0, r3
 8004826:	3720      	adds	r7, #32
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	603b      	str	r3, [r7, #0]
 8004838:	4613      	mov	r3, r2
 800483a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800483c:	e03b      	b.n	80048b6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004844:	d037      	beq.n	80048b6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004846:	f7fd fc97 	bl	8002178 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	6a3a      	ldr	r2, [r7, #32]
 8004852:	429a      	cmp	r2, r3
 8004854:	d302      	bcc.n	800485c <UART_WaitOnFlagUntilTimeout+0x30>
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e03a      	b.n	80048d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	2b00      	cmp	r3, #0
 800486c:	d023      	beq.n	80048b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b80      	cmp	r3, #128	@ 0x80
 8004872:	d020      	beq.n	80048b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2b40      	cmp	r3, #64	@ 0x40
 8004878:	d01d      	beq.n	80048b6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b08      	cmp	r3, #8
 8004886:	d116      	bne.n	80048b6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f81d 	bl	80048de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2208      	movs	r2, #8
 80048a8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e00f      	b.n	80048d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4013      	ands	r3, r2
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	bf0c      	ite	eq
 80048c6:	2301      	moveq	r3, #1
 80048c8:	2300      	movne	r3, #0
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	461a      	mov	r2, r3
 80048ce:	79fb      	ldrb	r3, [r7, #7]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d0b4      	beq.n	800483e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048de:	b480      	push	{r7}
 80048e0:	b095      	sub	sp, #84	@ 0x54
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	330c      	adds	r3, #12
 80048ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048f0:	e853 3f00 	ldrex	r3, [r3]
 80048f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	330c      	adds	r3, #12
 8004904:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004906:	643a      	str	r2, [r7, #64]	@ 0x40
 8004908:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800490c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e5      	bne.n	80048e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3314      	adds	r3, #20
 8004920:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	e853 3f00 	ldrex	r3, [r3]
 8004928:	61fb      	str	r3, [r7, #28]
   return(result);
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	f023 0301 	bic.w	r3, r3, #1
 8004930:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3314      	adds	r3, #20
 8004938:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800493a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800493c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004942:	e841 2300 	strex	r3, r2, [r1]
 8004946:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1e5      	bne.n	800491a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004952:	2b01      	cmp	r3, #1
 8004954:	d119      	bne.n	800498a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	330c      	adds	r3, #12
 800495c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	e853 3f00 	ldrex	r3, [r3]
 8004964:	60bb      	str	r3, [r7, #8]
   return(result);
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f023 0310 	bic.w	r3, r3, #16
 800496c:	647b      	str	r3, [r7, #68]	@ 0x44
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	330c      	adds	r3, #12
 8004974:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004976:	61ba      	str	r2, [r7, #24]
 8004978:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	6979      	ldr	r1, [r7, #20]
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	613b      	str	r3, [r7, #16]
   return(result);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e5      	bne.n	8004956 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004998:	bf00      	nop
 800499a:	3754      	adds	r7, #84	@ 0x54
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049a8:	b0c0      	sub	sp, #256	@ 0x100
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c0:	68d9      	ldr	r1, [r3, #12]
 80049c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	ea40 0301 	orr.w	r3, r0, r1
 80049cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	431a      	orrs	r2, r3
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	431a      	orrs	r2, r3
 80049e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80049fc:	f021 010c 	bic.w	r1, r1, #12
 8004a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a0a:	430b      	orrs	r3, r1
 8004a0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1e:	6999      	ldr	r1, [r3, #24]
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	ea40 0301 	orr.w	r3, r0, r1
 8004a2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	4b8f      	ldr	r3, [pc, #572]	@ (8004c70 <UART_SetConfig+0x2cc>)
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d005      	beq.n	8004a44 <UART_SetConfig+0xa0>
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4b8d      	ldr	r3, [pc, #564]	@ (8004c74 <UART_SetConfig+0x2d0>)
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d104      	bne.n	8004a4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a44:	f7ff fac6 	bl	8003fd4 <HAL_RCC_GetPCLK2Freq>
 8004a48:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a4c:	e003      	b.n	8004a56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a4e:	f7ff faad 	bl	8003fac <HAL_RCC_GetPCLK1Freq>
 8004a52:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a60:	f040 810c 	bne.w	8004c7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a76:	4622      	mov	r2, r4
 8004a78:	462b      	mov	r3, r5
 8004a7a:	1891      	adds	r1, r2, r2
 8004a7c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a7e:	415b      	adcs	r3, r3
 8004a80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a86:	4621      	mov	r1, r4
 8004a88:	eb12 0801 	adds.w	r8, r2, r1
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	eb43 0901 	adc.w	r9, r3, r1
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aa6:	4690      	mov	r8, r2
 8004aa8:	4699      	mov	r9, r3
 8004aaa:	4623      	mov	r3, r4
 8004aac:	eb18 0303 	adds.w	r3, r8, r3
 8004ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ab4:	462b      	mov	r3, r5
 8004ab6:	eb49 0303 	adc.w	r3, r9, r3
 8004aba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004aca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ace:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	18db      	adds	r3, r3, r3
 8004ad6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ad8:	4613      	mov	r3, r2
 8004ada:	eb42 0303 	adc.w	r3, r2, r3
 8004ade:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ae0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ae4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ae8:	f7fc f8d6 	bl	8000c98 <__aeabi_uldivmod>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4b61      	ldr	r3, [pc, #388]	@ (8004c78 <UART_SetConfig+0x2d4>)
 8004af2:	fba3 2302 	umull	r2, r3, r3, r2
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	011c      	lsls	r4, r3, #4
 8004afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004afe:	2200      	movs	r2, #0
 8004b00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	464b      	mov	r3, r9
 8004b10:	1891      	adds	r1, r2, r2
 8004b12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b14:	415b      	adcs	r3, r3
 8004b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b1c:	4641      	mov	r1, r8
 8004b1e:	eb12 0a01 	adds.w	sl, r2, r1
 8004b22:	4649      	mov	r1, r9
 8004b24:	eb43 0b01 	adc.w	fp, r3, r1
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b3c:	4692      	mov	sl, r2
 8004b3e:	469b      	mov	fp, r3
 8004b40:	4643      	mov	r3, r8
 8004b42:	eb1a 0303 	adds.w	r3, sl, r3
 8004b46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b4a:	464b      	mov	r3, r9
 8004b4c:	eb4b 0303 	adc.w	r3, fp, r3
 8004b50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	18db      	adds	r3, r3, r3
 8004b6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b6e:	4613      	mov	r3, r2
 8004b70:	eb42 0303 	adc.w	r3, r2, r3
 8004b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b7e:	f7fc f88b 	bl	8000c98 <__aeabi_uldivmod>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4611      	mov	r1, r2
 8004b88:	4b3b      	ldr	r3, [pc, #236]	@ (8004c78 <UART_SetConfig+0x2d4>)
 8004b8a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	2264      	movs	r2, #100	@ 0x64
 8004b92:	fb02 f303 	mul.w	r3, r2, r3
 8004b96:	1acb      	subs	r3, r1, r3
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b9e:	4b36      	ldr	r3, [pc, #216]	@ (8004c78 <UART_SetConfig+0x2d4>)
 8004ba0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ba4:	095b      	lsrs	r3, r3, #5
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004bac:	441c      	add	r4, r3
 8004bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bb8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004bbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004bc0:	4642      	mov	r2, r8
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	1891      	adds	r1, r2, r2
 8004bc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004bc8:	415b      	adcs	r3, r3
 8004bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004bd0:	4641      	mov	r1, r8
 8004bd2:	1851      	adds	r1, r2, r1
 8004bd4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004bd6:	4649      	mov	r1, r9
 8004bd8:	414b      	adcs	r3, r1
 8004bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004be8:	4659      	mov	r1, fp
 8004bea:	00cb      	lsls	r3, r1, #3
 8004bec:	4651      	mov	r1, sl
 8004bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bf2:	4651      	mov	r1, sl
 8004bf4:	00ca      	lsls	r2, r1, #3
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4642      	mov	r2, r8
 8004bfe:	189b      	adds	r3, r3, r2
 8004c00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c04:	464b      	mov	r3, r9
 8004c06:	460a      	mov	r2, r1
 8004c08:	eb42 0303 	adc.w	r3, r2, r3
 8004c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c24:	460b      	mov	r3, r1
 8004c26:	18db      	adds	r3, r3, r3
 8004c28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	eb42 0303 	adc.w	r3, r2, r3
 8004c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c3a:	f7fc f82d 	bl	8000c98 <__aeabi_uldivmod>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4b0d      	ldr	r3, [pc, #52]	@ (8004c78 <UART_SetConfig+0x2d4>)
 8004c44:	fba3 1302 	umull	r1, r3, r3, r2
 8004c48:	095b      	lsrs	r3, r3, #5
 8004c4a:	2164      	movs	r1, #100	@ 0x64
 8004c4c:	fb01 f303 	mul.w	r3, r1, r3
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	3332      	adds	r3, #50	@ 0x32
 8004c56:	4a08      	ldr	r2, [pc, #32]	@ (8004c78 <UART_SetConfig+0x2d4>)
 8004c58:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5c:	095b      	lsrs	r3, r3, #5
 8004c5e:	f003 0207 	and.w	r2, r3, #7
 8004c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4422      	add	r2, r4
 8004c6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c6c:	e106      	b.n	8004e7c <UART_SetConfig+0x4d8>
 8004c6e:	bf00      	nop
 8004c70:	40011000 	.word	0x40011000
 8004c74:	40011400 	.word	0x40011400
 8004c78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c80:	2200      	movs	r2, #0
 8004c82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c8e:	4642      	mov	r2, r8
 8004c90:	464b      	mov	r3, r9
 8004c92:	1891      	adds	r1, r2, r2
 8004c94:	6239      	str	r1, [r7, #32]
 8004c96:	415b      	adcs	r3, r3
 8004c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c9e:	4641      	mov	r1, r8
 8004ca0:	1854      	adds	r4, r2, r1
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	eb43 0501 	adc.w	r5, r3, r1
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	00eb      	lsls	r3, r5, #3
 8004cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cb6:	00e2      	lsls	r2, r4, #3
 8004cb8:	4614      	mov	r4, r2
 8004cba:	461d      	mov	r5, r3
 8004cbc:	4643      	mov	r3, r8
 8004cbe:	18e3      	adds	r3, r4, r3
 8004cc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004cc4:	464b      	mov	r3, r9
 8004cc6:	eb45 0303 	adc.w	r3, r5, r3
 8004cca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004cea:	4629      	mov	r1, r5
 8004cec:	008b      	lsls	r3, r1, #2
 8004cee:	4621      	mov	r1, r4
 8004cf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	008a      	lsls	r2, r1, #2
 8004cf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004cfc:	f7fb ffcc 	bl	8000c98 <__aeabi_uldivmod>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4b60      	ldr	r3, [pc, #384]	@ (8004e88 <UART_SetConfig+0x4e4>)
 8004d06:	fba3 2302 	umull	r2, r3, r3, r2
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	011c      	lsls	r4, r3, #4
 8004d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d20:	4642      	mov	r2, r8
 8004d22:	464b      	mov	r3, r9
 8004d24:	1891      	adds	r1, r2, r2
 8004d26:	61b9      	str	r1, [r7, #24]
 8004d28:	415b      	adcs	r3, r3
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d30:	4641      	mov	r1, r8
 8004d32:	1851      	adds	r1, r2, r1
 8004d34:	6139      	str	r1, [r7, #16]
 8004d36:	4649      	mov	r1, r9
 8004d38:	414b      	adcs	r3, r1
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	f04f 0300 	mov.w	r3, #0
 8004d44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d48:	4659      	mov	r1, fp
 8004d4a:	00cb      	lsls	r3, r1, #3
 8004d4c:	4651      	mov	r1, sl
 8004d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d52:	4651      	mov	r1, sl
 8004d54:	00ca      	lsls	r2, r1, #3
 8004d56:	4610      	mov	r0, r2
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	189b      	adds	r3, r3, r2
 8004d60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d64:	464b      	mov	r3, r9
 8004d66:	460a      	mov	r2, r1
 8004d68:	eb42 0303 	adc.w	r3, r2, r3
 8004d6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d88:	4649      	mov	r1, r9
 8004d8a:	008b      	lsls	r3, r1, #2
 8004d8c:	4641      	mov	r1, r8
 8004d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d92:	4641      	mov	r1, r8
 8004d94:	008a      	lsls	r2, r1, #2
 8004d96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d9a:	f7fb ff7d 	bl	8000c98 <__aeabi_uldivmod>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4611      	mov	r1, r2
 8004da4:	4b38      	ldr	r3, [pc, #224]	@ (8004e88 <UART_SetConfig+0x4e4>)
 8004da6:	fba3 2301 	umull	r2, r3, r3, r1
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	2264      	movs	r2, #100	@ 0x64
 8004dae:	fb02 f303 	mul.w	r3, r2, r3
 8004db2:	1acb      	subs	r3, r1, r3
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	3332      	adds	r3, #50	@ 0x32
 8004db8:	4a33      	ldr	r2, [pc, #204]	@ (8004e88 <UART_SetConfig+0x4e4>)
 8004dba:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dc4:	441c      	add	r4, r3
 8004dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dca:	2200      	movs	r2, #0
 8004dcc:	673b      	str	r3, [r7, #112]	@ 0x70
 8004dce:	677a      	str	r2, [r7, #116]	@ 0x74
 8004dd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004dd4:	4642      	mov	r2, r8
 8004dd6:	464b      	mov	r3, r9
 8004dd8:	1891      	adds	r1, r2, r2
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	415b      	adcs	r3, r3
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004de4:	4641      	mov	r1, r8
 8004de6:	1851      	adds	r1, r2, r1
 8004de8:	6039      	str	r1, [r7, #0]
 8004dea:	4649      	mov	r1, r9
 8004dec:	414b      	adcs	r3, r1
 8004dee:	607b      	str	r3, [r7, #4]
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004dfc:	4659      	mov	r1, fp
 8004dfe:	00cb      	lsls	r3, r1, #3
 8004e00:	4651      	mov	r1, sl
 8004e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e06:	4651      	mov	r1, sl
 8004e08:	00ca      	lsls	r2, r1, #3
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4603      	mov	r3, r0
 8004e10:	4642      	mov	r2, r8
 8004e12:	189b      	adds	r3, r3, r2
 8004e14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e16:	464b      	mov	r3, r9
 8004e18:	460a      	mov	r2, r1
 8004e1a:	eb42 0303 	adc.w	r3, r2, r3
 8004e1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e38:	4649      	mov	r1, r9
 8004e3a:	008b      	lsls	r3, r1, #2
 8004e3c:	4641      	mov	r1, r8
 8004e3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e42:	4641      	mov	r1, r8
 8004e44:	008a      	lsls	r2, r1, #2
 8004e46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e4a:	f7fb ff25 	bl	8000c98 <__aeabi_uldivmod>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	4b0d      	ldr	r3, [pc, #52]	@ (8004e88 <UART_SetConfig+0x4e4>)
 8004e54:	fba3 1302 	umull	r1, r3, r3, r2
 8004e58:	095b      	lsrs	r3, r3, #5
 8004e5a:	2164      	movs	r1, #100	@ 0x64
 8004e5c:	fb01 f303 	mul.w	r3, r1, r3
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	3332      	adds	r3, #50	@ 0x32
 8004e66:	4a08      	ldr	r2, [pc, #32]	@ (8004e88 <UART_SetConfig+0x4e4>)
 8004e68:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6c:	095b      	lsrs	r3, r3, #5
 8004e6e:	f003 020f 	and.w	r2, r3, #15
 8004e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4422      	add	r2, r4
 8004e7a:	609a      	str	r2, [r3, #8]
}
 8004e7c:	bf00      	nop
 8004e7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e82:	46bd      	mov	sp, r7
 8004e84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e88:	51eb851f 	.word	0x51eb851f

08004e8c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	4603      	mov	r3, r0
 8004e94:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e9e:	2b84      	cmp	r3, #132	@ 0x84
 8004ea0:	d005      	beq.n	8004eae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004ea2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	3303      	adds	r3, #3
 8004eac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004eae:	68fb      	ldr	r3, [r7, #12]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004ec0:	f000 fafc 	bl	80054bc <vTaskStartScheduler>
  
  return osOK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004eca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ecc:	b089      	sub	sp, #36	@ 0x24
 8004ece:	af04      	add	r7, sp, #16
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d020      	beq.n	8004f1e <osThreadCreate+0x54>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01c      	beq.n	8004f1e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685c      	ldr	r4, [r3, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691e      	ldr	r6, [r3, #16]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7ff ffc8 	bl	8004e8c <makeFreeRtosPriority>
 8004efc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f06:	9202      	str	r2, [sp, #8]
 8004f08:	9301      	str	r3, [sp, #4]
 8004f0a:	9100      	str	r1, [sp, #0]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	4632      	mov	r2, r6
 8004f10:	4629      	mov	r1, r5
 8004f12:	4620      	mov	r0, r4
 8004f14:	f000 f8ed 	bl	80050f2 <xTaskCreateStatic>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	e01c      	b.n	8004f58 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685c      	ldr	r4, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f2a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff ffaa 	bl	8004e8c <makeFreeRtosPriority>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	f107 030c 	add.w	r3, r7, #12
 8004f3e:	9301      	str	r3, [sp, #4]
 8004f40:	9200      	str	r2, [sp, #0]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	4632      	mov	r2, r6
 8004f46:	4629      	mov	r1, r5
 8004f48:	4620      	mov	r0, r4
 8004f4a:	f000 f932 	bl	80051b2 <xTaskCreate>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d001      	beq.n	8004f58 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e000      	b.n	8004f5a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004f58:	68fb      	ldr	r3, [r7, #12]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f62 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <osDelay+0x16>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	e000      	b.n	8004f7a <osDelay+0x18>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fa68 	bl	8005450 <vTaskDelay>
  
  return osOK;
 8004f80:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f103 0208 	add.w	r2, r3, #8
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004fa2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f103 0208 	add.w	r2, r3, #8
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f103 0208 	add.w	r2, r3, #8
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	601a      	str	r2, [r3, #0]
}
 8005020:	bf00      	nop
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005042:	d103      	bne.n	800504c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	e00c      	b.n	8005066 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3308      	adds	r3, #8
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	e002      	b.n	800505a <vListInsert+0x2e>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	429a      	cmp	r2, r3
 8005064:	d2f6      	bcs.n	8005054 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	601a      	str	r2, [r3, #0]
}
 8005092:	bf00      	nop
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800509e:	b480      	push	{r7}
 80050a0:	b085      	sub	sp, #20
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6892      	ldr	r2, [r2, #8]
 80050b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6852      	ldr	r2, [r2, #4]
 80050be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d103      	bne.n	80050d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689a      	ldr	r2, [r3, #8]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	1e5a      	subs	r2, r3, #1
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b08e      	sub	sp, #56	@ 0x38
 80050f6:	af04      	add	r7, sp, #16
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	607a      	str	r2, [r7, #4]
 80050fe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10b      	bne.n	800511e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005118:	bf00      	nop
 800511a:	bf00      	nop
 800511c:	e7fd      	b.n	800511a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800511e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10b      	bne.n	800513c <xTaskCreateStatic+0x4a>
	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	61fb      	str	r3, [r7, #28]
}
 8005136:	bf00      	nop
 8005138:	bf00      	nop
 800513a:	e7fd      	b.n	8005138 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800513c:	23a0      	movs	r3, #160	@ 0xa0
 800513e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	2ba0      	cmp	r3, #160	@ 0xa0
 8005144:	d00b      	beq.n	800515e <xTaskCreateStatic+0x6c>
	__asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	61bb      	str	r3, [r7, #24]
}
 8005158:	bf00      	nop
 800515a:	bf00      	nop
 800515c:	e7fd      	b.n	800515a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800515e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005162:	2b00      	cmp	r3, #0
 8005164:	d01e      	beq.n	80051a4 <xTaskCreateStatic+0xb2>
 8005166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005168:	2b00      	cmp	r3, #0
 800516a:	d01b      	beq.n	80051a4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800516c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005172:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005174:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005178:	2202      	movs	r2, #2
 800517a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800517e:	2300      	movs	r3, #0
 8005180:	9303      	str	r3, [sp, #12]
 8005182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005184:	9302      	str	r3, [sp, #8]
 8005186:	f107 0314 	add.w	r3, r7, #20
 800518a:	9301      	str	r3, [sp, #4]
 800518c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 f850 	bl	800523c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800519c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800519e:	f000 f8ed 	bl	800537c <prvAddNewTaskToReadyList>
 80051a2:	e001      	b.n	80051a8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051a8:	697b      	ldr	r3, [r7, #20]
	}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3728      	adds	r7, #40	@ 0x28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b08c      	sub	sp, #48	@ 0x30
 80051b6:	af04      	add	r7, sp, #16
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	603b      	str	r3, [r7, #0]
 80051be:	4613      	mov	r3, r2
 80051c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80051c2:	88fb      	ldrh	r3, [r7, #6]
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fefe 	bl	8005fc8 <pvPortMalloc>
 80051cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00e      	beq.n	80051f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051d4:	20a0      	movs	r0, #160	@ 0xa0
 80051d6:	f000 fef7 	bl	8005fc8 <pvPortMalloc>
 80051da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80051e8:	e005      	b.n	80051f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051ea:	6978      	ldr	r0, [r7, #20]
 80051ec:	f000 ffba 	bl	8006164 <vPortFree>
 80051f0:	e001      	b.n	80051f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d017      	beq.n	800522c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005204:	88fa      	ldrh	r2, [r7, #6]
 8005206:	2300      	movs	r3, #0
 8005208:	9303      	str	r3, [sp, #12]
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	9302      	str	r3, [sp, #8]
 800520e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005210:	9301      	str	r3, [sp, #4]
 8005212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68b9      	ldr	r1, [r7, #8]
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 f80e 	bl	800523c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005220:	69f8      	ldr	r0, [r7, #28]
 8005222:	f000 f8ab 	bl	800537c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005226:	2301      	movs	r3, #1
 8005228:	61bb      	str	r3, [r7, #24]
 800522a:	e002      	b.n	8005232 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800522c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005230:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005232:	69bb      	ldr	r3, [r7, #24]
	}
 8005234:	4618      	mov	r0, r3
 8005236:	3720      	adds	r7, #32
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800524a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005254:	3b01      	subs	r3, #1
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	f023 0307 	bic.w	r3, r3, #7
 8005262:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00b      	beq.n	8005286 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	617b      	str	r3, [r7, #20]
}
 8005280:	bf00      	nop
 8005282:	bf00      	nop
 8005284:	e7fd      	b.n	8005282 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01f      	beq.n	80052cc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800528c:	2300      	movs	r3, #0
 800528e:	61fb      	str	r3, [r7, #28]
 8005290:	e012      	b.n	80052b8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	4413      	add	r3, r2
 8005298:	7819      	ldrb	r1, [r3, #0]
 800529a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	4413      	add	r3, r2
 80052a0:	3334      	adds	r3, #52	@ 0x34
 80052a2:	460a      	mov	r2, r1
 80052a4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	4413      	add	r3, r2
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d006      	beq.n	80052c0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	3301      	adds	r3, #1
 80052b6:	61fb      	str	r3, [r7, #28]
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	2b0f      	cmp	r3, #15
 80052bc:	d9e9      	bls.n	8005292 <prvInitialiseNewTask+0x56>
 80052be:	e000      	b.n	80052c2 <prvInitialiseNewTask+0x86>
			{
				break;
 80052c0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052ca:	e003      	b.n	80052d4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d6:	2b06      	cmp	r3, #6
 80052d8:	d901      	bls.n	80052de <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052da:	2306      	movs	r3, #6
 80052dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052e8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80052ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ec:	2200      	movs	r2, #0
 80052ee:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f2:	3304      	adds	r3, #4
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff fe68 	bl	8004fca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fc:	3318      	adds	r3, #24
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff fe63 	bl	8004fca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005306:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005308:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800530a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530c:	f1c3 0207 	rsb	r2, r3, #7
 8005310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005312:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005318:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800531a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531c:	2200      	movs	r2, #0
 800531e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005324:	2200      	movs	r2, #0
 8005326:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800532a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532c:	334c      	adds	r3, #76	@ 0x4c
 800532e:	224c      	movs	r2, #76	@ 0x4c
 8005330:	2100      	movs	r1, #0
 8005332:	4618      	mov	r0, r3
 8005334:	f001 fffb 	bl	800732e <memset>
 8005338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533a:	4a0d      	ldr	r2, [pc, #52]	@ (8005370 <prvInitialiseNewTask+0x134>)
 800533c:	651a      	str	r2, [r3, #80]	@ 0x50
 800533e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005340:	4a0c      	ldr	r2, [pc, #48]	@ (8005374 <prvInitialiseNewTask+0x138>)
 8005342:	655a      	str	r2, [r3, #84]	@ 0x54
 8005344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005346:	4a0c      	ldr	r2, [pc, #48]	@ (8005378 <prvInitialiseNewTask+0x13c>)
 8005348:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	68f9      	ldr	r1, [r7, #12]
 800534e:	69b8      	ldr	r0, [r7, #24]
 8005350:	f000 fc2a 	bl	8005ba8 <pxPortInitialiseStack>
 8005354:	4602      	mov	r2, r0
 8005356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005358:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800535a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005366:	bf00      	nop
 8005368:	3720      	adds	r7, #32
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	20004330 	.word	0x20004330
 8005374:	20004398 	.word	0x20004398
 8005378:	20004400 	.word	0x20004400

0800537c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005384:	f000 fd40 	bl	8005e08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005388:	4b2a      	ldr	r3, [pc, #168]	@ (8005434 <prvAddNewTaskToReadyList+0xb8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3301      	adds	r3, #1
 800538e:	4a29      	ldr	r2, [pc, #164]	@ (8005434 <prvAddNewTaskToReadyList+0xb8>)
 8005390:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005392:	4b29      	ldr	r3, [pc, #164]	@ (8005438 <prvAddNewTaskToReadyList+0xbc>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d109      	bne.n	80053ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800539a:	4a27      	ldr	r2, [pc, #156]	@ (8005438 <prvAddNewTaskToReadyList+0xbc>)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053a0:	4b24      	ldr	r3, [pc, #144]	@ (8005434 <prvAddNewTaskToReadyList+0xb8>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d110      	bne.n	80053ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053a8:	f000 fad4 	bl	8005954 <prvInitialiseTaskLists>
 80053ac:	e00d      	b.n	80053ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053ae:	4b23      	ldr	r3, [pc, #140]	@ (800543c <prvAddNewTaskToReadyList+0xc0>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053b6:	4b20      	ldr	r3, [pc, #128]	@ (8005438 <prvAddNewTaskToReadyList+0xbc>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d802      	bhi.n	80053ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005438 <prvAddNewTaskToReadyList+0xbc>)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005440 <prvAddNewTaskToReadyList+0xc4>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3301      	adds	r3, #1
 80053d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005440 <prvAddNewTaskToReadyList+0xc4>)
 80053d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d8:	2201      	movs	r2, #1
 80053da:	409a      	lsls	r2, r3
 80053dc:	4b19      	ldr	r3, [pc, #100]	@ (8005444 <prvAddNewTaskToReadyList+0xc8>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	4a18      	ldr	r2, [pc, #96]	@ (8005444 <prvAddNewTaskToReadyList+0xc8>)
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ea:	4613      	mov	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4a15      	ldr	r2, [pc, #84]	@ (8005448 <prvAddNewTaskToReadyList+0xcc>)
 80053f4:	441a      	add	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3304      	adds	r3, #4
 80053fa:	4619      	mov	r1, r3
 80053fc:	4610      	mov	r0, r2
 80053fe:	f7ff fdf1 	bl	8004fe4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005402:	f000 fd33 	bl	8005e6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005406:	4b0d      	ldr	r3, [pc, #52]	@ (800543c <prvAddNewTaskToReadyList+0xc0>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00e      	beq.n	800542c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800540e:	4b0a      	ldr	r3, [pc, #40]	@ (8005438 <prvAddNewTaskToReadyList+0xbc>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005418:	429a      	cmp	r2, r3
 800541a:	d207      	bcs.n	800542c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800541c:	4b0b      	ldr	r3, [pc, #44]	@ (800544c <prvAddNewTaskToReadyList+0xd0>)
 800541e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800542c:	bf00      	nop
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	200006dc 	.word	0x200006dc
 8005438:	200005dc 	.word	0x200005dc
 800543c:	200006e8 	.word	0x200006e8
 8005440:	200006f8 	.word	0x200006f8
 8005444:	200006e4 	.word	0x200006e4
 8005448:	200005e0 	.word	0x200005e0
 800544c:	e000ed04 	.word	0xe000ed04

08005450 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d018      	beq.n	8005494 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005462:	4b14      	ldr	r3, [pc, #80]	@ (80054b4 <vTaskDelay+0x64>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00b      	beq.n	8005482 <vTaskDelay+0x32>
	__asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	60bb      	str	r3, [r7, #8]
}
 800547c:	bf00      	nop
 800547e:	bf00      	nop
 8005480:	e7fd      	b.n	800547e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005482:	f000 f885 	bl	8005590 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005486:	2100      	movs	r1, #0
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fb27 	bl	8005adc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800548e:	f000 f88d 	bl	80055ac <xTaskResumeAll>
 8005492:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d107      	bne.n	80054aa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800549a:	4b07      	ldr	r3, [pc, #28]	@ (80054b8 <vTaskDelay+0x68>)
 800549c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054aa:	bf00      	nop
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20000704 	.word	0x20000704
 80054b8:	e000ed04 	.word	0xe000ed04

080054bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08a      	sub	sp, #40	@ 0x28
 80054c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054c6:	2300      	movs	r3, #0
 80054c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054ca:	463a      	mov	r2, r7
 80054cc:	1d39      	adds	r1, r7, #4
 80054ce:	f107 0308 	add.w	r3, r7, #8
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fb fd8e 	bl	8000ff4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054d8:	6839      	ldr	r1, [r7, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	9202      	str	r2, [sp, #8]
 80054e0:	9301      	str	r3, [sp, #4]
 80054e2:	2300      	movs	r3, #0
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	2300      	movs	r3, #0
 80054e8:	460a      	mov	r2, r1
 80054ea:	4921      	ldr	r1, [pc, #132]	@ (8005570 <vTaskStartScheduler+0xb4>)
 80054ec:	4821      	ldr	r0, [pc, #132]	@ (8005574 <vTaskStartScheduler+0xb8>)
 80054ee:	f7ff fe00 	bl	80050f2 <xTaskCreateStatic>
 80054f2:	4603      	mov	r3, r0
 80054f4:	4a20      	ldr	r2, [pc, #128]	@ (8005578 <vTaskStartScheduler+0xbc>)
 80054f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054f8:	4b1f      	ldr	r3, [pc, #124]	@ (8005578 <vTaskStartScheduler+0xbc>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005500:	2301      	movs	r3, #1
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	e001      	b.n	800550a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005506:	2300      	movs	r3, #0
 8005508:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d11b      	bne.n	8005548 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	613b      	str	r3, [r7, #16]
}
 8005522:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005524:	4b15      	ldr	r3, [pc, #84]	@ (800557c <vTaskStartScheduler+0xc0>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	334c      	adds	r3, #76	@ 0x4c
 800552a:	4a15      	ldr	r2, [pc, #84]	@ (8005580 <vTaskStartScheduler+0xc4>)
 800552c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800552e:	4b15      	ldr	r3, [pc, #84]	@ (8005584 <vTaskStartScheduler+0xc8>)
 8005530:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005534:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005536:	4b14      	ldr	r3, [pc, #80]	@ (8005588 <vTaskStartScheduler+0xcc>)
 8005538:	2201      	movs	r2, #1
 800553a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800553c:	4b13      	ldr	r3, [pc, #76]	@ (800558c <vTaskStartScheduler+0xd0>)
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005542:	f000 fbbd 	bl	8005cc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005546:	e00f      	b.n	8005568 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800554e:	d10b      	bne.n	8005568 <vTaskStartScheduler+0xac>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	60fb      	str	r3, [r7, #12]
}
 8005562:	bf00      	nop
 8005564:	bf00      	nop
 8005566:	e7fd      	b.n	8005564 <vTaskStartScheduler+0xa8>
}
 8005568:	bf00      	nop
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	0800ad40 	.word	0x0800ad40
 8005574:	08005925 	.word	0x08005925
 8005578:	20000700 	.word	0x20000700
 800557c:	200005dc 	.word	0x200005dc
 8005580:	2000001c 	.word	0x2000001c
 8005584:	200006fc 	.word	0x200006fc
 8005588:	200006e8 	.word	0x200006e8
 800558c:	200006e0 	.word	0x200006e0

08005590 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005594:	4b04      	ldr	r3, [pc, #16]	@ (80055a8 <vTaskSuspendAll+0x18>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3301      	adds	r3, #1
 800559a:	4a03      	ldr	r2, [pc, #12]	@ (80055a8 <vTaskSuspendAll+0x18>)
 800559c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800559e:	bf00      	nop
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	20000704 	.word	0x20000704

080055ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055b2:	2300      	movs	r3, #0
 80055b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055b6:	2300      	movs	r3, #0
 80055b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055ba:	4b42      	ldr	r3, [pc, #264]	@ (80056c4 <xTaskResumeAll+0x118>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10b      	bne.n	80055da <xTaskResumeAll+0x2e>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	603b      	str	r3, [r7, #0]
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop
 80055d8:	e7fd      	b.n	80055d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055da:	f000 fc15 	bl	8005e08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055de:	4b39      	ldr	r3, [pc, #228]	@ (80056c4 <xTaskResumeAll+0x118>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	4a37      	ldr	r2, [pc, #220]	@ (80056c4 <xTaskResumeAll+0x118>)
 80055e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055e8:	4b36      	ldr	r3, [pc, #216]	@ (80056c4 <xTaskResumeAll+0x118>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d161      	bne.n	80056b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055f0:	4b35      	ldr	r3, [pc, #212]	@ (80056c8 <xTaskResumeAll+0x11c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d05d      	beq.n	80056b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055f8:	e02e      	b.n	8005658 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055fa:	4b34      	ldr	r3, [pc, #208]	@ (80056cc <xTaskResumeAll+0x120>)
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	3318      	adds	r3, #24
 8005606:	4618      	mov	r0, r3
 8005608:	f7ff fd49 	bl	800509e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	3304      	adds	r3, #4
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff fd44 	bl	800509e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561a:	2201      	movs	r2, #1
 800561c:	409a      	lsls	r2, r3
 800561e:	4b2c      	ldr	r3, [pc, #176]	@ (80056d0 <xTaskResumeAll+0x124>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4313      	orrs	r3, r2
 8005624:	4a2a      	ldr	r2, [pc, #168]	@ (80056d0 <xTaskResumeAll+0x124>)
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800562c:	4613      	mov	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4a27      	ldr	r2, [pc, #156]	@ (80056d4 <xTaskResumeAll+0x128>)
 8005636:	441a      	add	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3304      	adds	r3, #4
 800563c:	4619      	mov	r1, r3
 800563e:	4610      	mov	r0, r2
 8005640:	f7ff fcd0 	bl	8004fe4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005648:	4b23      	ldr	r3, [pc, #140]	@ (80056d8 <xTaskResumeAll+0x12c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564e:	429a      	cmp	r2, r3
 8005650:	d302      	bcc.n	8005658 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005652:	4b22      	ldr	r3, [pc, #136]	@ (80056dc <xTaskResumeAll+0x130>)
 8005654:	2201      	movs	r2, #1
 8005656:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005658:	4b1c      	ldr	r3, [pc, #112]	@ (80056cc <xTaskResumeAll+0x120>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1cc      	bne.n	80055fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005666:	f000 fa19 	bl	8005a9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800566a:	4b1d      	ldr	r3, [pc, #116]	@ (80056e0 <xTaskResumeAll+0x134>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d010      	beq.n	8005698 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005676:	f000 f837 	bl	80056e8 <xTaskIncrementTick>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005680:	4b16      	ldr	r3, [pc, #88]	@ (80056dc <xTaskResumeAll+0x130>)
 8005682:	2201      	movs	r2, #1
 8005684:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	3b01      	subs	r3, #1
 800568a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1f1      	bne.n	8005676 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005692:	4b13      	ldr	r3, [pc, #76]	@ (80056e0 <xTaskResumeAll+0x134>)
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005698:	4b10      	ldr	r3, [pc, #64]	@ (80056dc <xTaskResumeAll+0x130>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d009      	beq.n	80056b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056a0:	2301      	movs	r3, #1
 80056a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056a4:	4b0f      	ldr	r3, [pc, #60]	@ (80056e4 <xTaskResumeAll+0x138>)
 80056a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056b4:	f000 fbda 	bl	8005e6c <vPortExitCritical>

	return xAlreadyYielded;
 80056b8:	68bb      	ldr	r3, [r7, #8]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000704 	.word	0x20000704
 80056c8:	200006dc 	.word	0x200006dc
 80056cc:	2000069c 	.word	0x2000069c
 80056d0:	200006e4 	.word	0x200006e4
 80056d4:	200005e0 	.word	0x200005e0
 80056d8:	200005dc 	.word	0x200005dc
 80056dc:	200006f0 	.word	0x200006f0
 80056e0:	200006ec 	.word	0x200006ec
 80056e4:	e000ed04 	.word	0xe000ed04

080056e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056f2:	4b4f      	ldr	r3, [pc, #316]	@ (8005830 <xTaskIncrementTick+0x148>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f040 808f 	bne.w	800581a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056fc:	4b4d      	ldr	r3, [pc, #308]	@ (8005834 <xTaskIncrementTick+0x14c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3301      	adds	r3, #1
 8005702:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005704:	4a4b      	ldr	r2, [pc, #300]	@ (8005834 <xTaskIncrementTick+0x14c>)
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d121      	bne.n	8005754 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005710:	4b49      	ldr	r3, [pc, #292]	@ (8005838 <xTaskIncrementTick+0x150>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00b      	beq.n	8005732 <xTaskIncrementTick+0x4a>
	__asm volatile
 800571a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	603b      	str	r3, [r7, #0]
}
 800572c:	bf00      	nop
 800572e:	bf00      	nop
 8005730:	e7fd      	b.n	800572e <xTaskIncrementTick+0x46>
 8005732:	4b41      	ldr	r3, [pc, #260]	@ (8005838 <xTaskIncrementTick+0x150>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	4b40      	ldr	r3, [pc, #256]	@ (800583c <xTaskIncrementTick+0x154>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a3e      	ldr	r2, [pc, #248]	@ (8005838 <xTaskIncrementTick+0x150>)
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	4a3e      	ldr	r2, [pc, #248]	@ (800583c <xTaskIncrementTick+0x154>)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	4b3e      	ldr	r3, [pc, #248]	@ (8005840 <xTaskIncrementTick+0x158>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3301      	adds	r3, #1
 800574c:	4a3c      	ldr	r2, [pc, #240]	@ (8005840 <xTaskIncrementTick+0x158>)
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	f000 f9a4 	bl	8005a9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005754:	4b3b      	ldr	r3, [pc, #236]	@ (8005844 <xTaskIncrementTick+0x15c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	429a      	cmp	r2, r3
 800575c:	d348      	bcc.n	80057f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800575e:	4b36      	ldr	r3, [pc, #216]	@ (8005838 <xTaskIncrementTick+0x150>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d104      	bne.n	8005772 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005768:	4b36      	ldr	r3, [pc, #216]	@ (8005844 <xTaskIncrementTick+0x15c>)
 800576a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800576e:	601a      	str	r2, [r3, #0]
					break;
 8005770:	e03e      	b.n	80057f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005772:	4b31      	ldr	r3, [pc, #196]	@ (8005838 <xTaskIncrementTick+0x150>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	429a      	cmp	r2, r3
 8005788:	d203      	bcs.n	8005792 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800578a:	4a2e      	ldr	r2, [pc, #184]	@ (8005844 <xTaskIncrementTick+0x15c>)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005790:	e02e      	b.n	80057f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	3304      	adds	r3, #4
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff fc81 	bl	800509e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d004      	beq.n	80057ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	3318      	adds	r3, #24
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff fc78 	bl	800509e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b2:	2201      	movs	r2, #1
 80057b4:	409a      	lsls	r2, r3
 80057b6:	4b24      	ldr	r3, [pc, #144]	@ (8005848 <xTaskIncrementTick+0x160>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	4a22      	ldr	r2, [pc, #136]	@ (8005848 <xTaskIncrementTick+0x160>)
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057c4:	4613      	mov	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4a1f      	ldr	r2, [pc, #124]	@ (800584c <xTaskIncrementTick+0x164>)
 80057ce:	441a      	add	r2, r3
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	3304      	adds	r3, #4
 80057d4:	4619      	mov	r1, r3
 80057d6:	4610      	mov	r0, r2
 80057d8:	f7ff fc04 	bl	8004fe4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005850 <xTaskIncrementTick+0x168>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d3b9      	bcc.n	800575e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80057ea:	2301      	movs	r3, #1
 80057ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057ee:	e7b6      	b.n	800575e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057f0:	4b17      	ldr	r3, [pc, #92]	@ (8005850 <xTaskIncrementTick+0x168>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057f6:	4915      	ldr	r1, [pc, #84]	@ (800584c <xTaskIncrementTick+0x164>)
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	440b      	add	r3, r1
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d901      	bls.n	800580c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005808:	2301      	movs	r3, #1
 800580a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800580c:	4b11      	ldr	r3, [pc, #68]	@ (8005854 <xTaskIncrementTick+0x16c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d007      	beq.n	8005824 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005814:	2301      	movs	r3, #1
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	e004      	b.n	8005824 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800581a:	4b0f      	ldr	r3, [pc, #60]	@ (8005858 <xTaskIncrementTick+0x170>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3301      	adds	r3, #1
 8005820:	4a0d      	ldr	r2, [pc, #52]	@ (8005858 <xTaskIncrementTick+0x170>)
 8005822:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005824:	697b      	ldr	r3, [r7, #20]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20000704 	.word	0x20000704
 8005834:	200006e0 	.word	0x200006e0
 8005838:	20000694 	.word	0x20000694
 800583c:	20000698 	.word	0x20000698
 8005840:	200006f4 	.word	0x200006f4
 8005844:	200006fc 	.word	0x200006fc
 8005848:	200006e4 	.word	0x200006e4
 800584c:	200005e0 	.word	0x200005e0
 8005850:	200005dc 	.word	0x200005dc
 8005854:	200006f0 	.word	0x200006f0
 8005858:	200006ec 	.word	0x200006ec

0800585c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005862:	4b2a      	ldr	r3, [pc, #168]	@ (800590c <vTaskSwitchContext+0xb0>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800586a:	4b29      	ldr	r3, [pc, #164]	@ (8005910 <vTaskSwitchContext+0xb4>)
 800586c:	2201      	movs	r2, #1
 800586e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005870:	e045      	b.n	80058fe <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005872:	4b27      	ldr	r3, [pc, #156]	@ (8005910 <vTaskSwitchContext+0xb4>)
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005878:	4b26      	ldr	r3, [pc, #152]	@ (8005914 <vTaskSwitchContext+0xb8>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	fab3 f383 	clz	r3, r3
 8005884:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005886:	7afb      	ldrb	r3, [r7, #11]
 8005888:	f1c3 031f 	rsb	r3, r3, #31
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	4922      	ldr	r1, [pc, #136]	@ (8005918 <vTaskSwitchContext+0xbc>)
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10b      	bne.n	80058ba <vTaskSwitchContext+0x5e>
	__asm volatile
 80058a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	607b      	str	r3, [r7, #4]
}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop
 80058b8:	e7fd      	b.n	80058b6 <vTaskSwitchContext+0x5a>
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4613      	mov	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4a14      	ldr	r2, [pc, #80]	@ (8005918 <vTaskSwitchContext+0xbc>)
 80058c6:	4413      	add	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	605a      	str	r2, [r3, #4]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	3308      	adds	r3, #8
 80058dc:	429a      	cmp	r2, r3
 80058de:	d104      	bne.n	80058ea <vTaskSwitchContext+0x8e>
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	605a      	str	r2, [r3, #4]
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	4a0a      	ldr	r2, [pc, #40]	@ (800591c <vTaskSwitchContext+0xc0>)
 80058f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058f4:	4b09      	ldr	r3, [pc, #36]	@ (800591c <vTaskSwitchContext+0xc0>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	334c      	adds	r3, #76	@ 0x4c
 80058fa:	4a09      	ldr	r2, [pc, #36]	@ (8005920 <vTaskSwitchContext+0xc4>)
 80058fc:	6013      	str	r3, [r2, #0]
}
 80058fe:	bf00      	nop
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	20000704 	.word	0x20000704
 8005910:	200006f0 	.word	0x200006f0
 8005914:	200006e4 	.word	0x200006e4
 8005918:	200005e0 	.word	0x200005e0
 800591c:	200005dc 	.word	0x200005dc
 8005920:	2000001c 	.word	0x2000001c

08005924 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800592c:	f000 f852 	bl	80059d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005930:	4b06      	ldr	r3, [pc, #24]	@ (800594c <prvIdleTask+0x28>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d9f9      	bls.n	800592c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005938:	4b05      	ldr	r3, [pc, #20]	@ (8005950 <prvIdleTask+0x2c>)
 800593a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005948:	e7f0      	b.n	800592c <prvIdleTask+0x8>
 800594a:	bf00      	nop
 800594c:	200005e0 	.word	0x200005e0
 8005950:	e000ed04 	.word	0xe000ed04

08005954 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800595a:	2300      	movs	r3, #0
 800595c:	607b      	str	r3, [r7, #4]
 800595e:	e00c      	b.n	800597a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	4613      	mov	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4a12      	ldr	r2, [pc, #72]	@ (80059b4 <prvInitialiseTaskLists+0x60>)
 800596c:	4413      	add	r3, r2
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff fb0b 	bl	8004f8a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3301      	adds	r3, #1
 8005978:	607b      	str	r3, [r7, #4]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b06      	cmp	r3, #6
 800597e:	d9ef      	bls.n	8005960 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005980:	480d      	ldr	r0, [pc, #52]	@ (80059b8 <prvInitialiseTaskLists+0x64>)
 8005982:	f7ff fb02 	bl	8004f8a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005986:	480d      	ldr	r0, [pc, #52]	@ (80059bc <prvInitialiseTaskLists+0x68>)
 8005988:	f7ff faff 	bl	8004f8a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800598c:	480c      	ldr	r0, [pc, #48]	@ (80059c0 <prvInitialiseTaskLists+0x6c>)
 800598e:	f7ff fafc 	bl	8004f8a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005992:	480c      	ldr	r0, [pc, #48]	@ (80059c4 <prvInitialiseTaskLists+0x70>)
 8005994:	f7ff faf9 	bl	8004f8a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005998:	480b      	ldr	r0, [pc, #44]	@ (80059c8 <prvInitialiseTaskLists+0x74>)
 800599a:	f7ff faf6 	bl	8004f8a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800599e:	4b0b      	ldr	r3, [pc, #44]	@ (80059cc <prvInitialiseTaskLists+0x78>)
 80059a0:	4a05      	ldr	r2, [pc, #20]	@ (80059b8 <prvInitialiseTaskLists+0x64>)
 80059a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059a4:	4b0a      	ldr	r3, [pc, #40]	@ (80059d0 <prvInitialiseTaskLists+0x7c>)
 80059a6:	4a05      	ldr	r2, [pc, #20]	@ (80059bc <prvInitialiseTaskLists+0x68>)
 80059a8:	601a      	str	r2, [r3, #0]
}
 80059aa:	bf00      	nop
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	200005e0 	.word	0x200005e0
 80059b8:	2000066c 	.word	0x2000066c
 80059bc:	20000680 	.word	0x20000680
 80059c0:	2000069c 	.word	0x2000069c
 80059c4:	200006b0 	.word	0x200006b0
 80059c8:	200006c8 	.word	0x200006c8
 80059cc:	20000694 	.word	0x20000694
 80059d0:	20000698 	.word	0x20000698

080059d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059da:	e019      	b.n	8005a10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059dc:	f000 fa14 	bl	8005e08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059e0:	4b10      	ldr	r3, [pc, #64]	@ (8005a24 <prvCheckTasksWaitingTermination+0x50>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3304      	adds	r3, #4
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff fb56 	bl	800509e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005a28 <prvCheckTasksWaitingTermination+0x54>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	4a0b      	ldr	r2, [pc, #44]	@ (8005a28 <prvCheckTasksWaitingTermination+0x54>)
 80059fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059fc:	4b0b      	ldr	r3, [pc, #44]	@ (8005a2c <prvCheckTasksWaitingTermination+0x58>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	4a0a      	ldr	r2, [pc, #40]	@ (8005a2c <prvCheckTasksWaitingTermination+0x58>)
 8005a04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a06:	f000 fa31 	bl	8005e6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f810 	bl	8005a30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a10:	4b06      	ldr	r3, [pc, #24]	@ (8005a2c <prvCheckTasksWaitingTermination+0x58>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1e1      	bne.n	80059dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a18:	bf00      	nop
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	200006b0 	.word	0x200006b0
 8005a28:	200006dc 	.word	0x200006dc
 8005a2c:	200006c4 	.word	0x200006c4

08005a30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	334c      	adds	r3, #76	@ 0x4c
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f001 fc93 	bl	8007368 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d108      	bne.n	8005a5e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 fb87 	bl	8006164 <vPortFree>
				vPortFree( pxTCB );
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fb84 	bl	8006164 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a5c:	e019      	b.n	8005a92 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d103      	bne.n	8005a70 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fb7b 	bl	8006164 <vPortFree>
	}
 8005a6e:	e010      	b.n	8005a92 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d00b      	beq.n	8005a92 <prvDeleteTCB+0x62>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	60fb      	str	r3, [r7, #12]
}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	e7fd      	b.n	8005a8e <prvDeleteTCB+0x5e>
	}
 8005a92:	bf00      	nop
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
	...

08005a9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad4 <prvResetNextTaskUnblockTime+0x38>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d104      	bne.n	8005ab6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005aac:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad8 <prvResetNextTaskUnblockTime+0x3c>)
 8005aae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ab2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ab4:	e008      	b.n	8005ac8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ab6:	4b07      	ldr	r3, [pc, #28]	@ (8005ad4 <prvResetNextTaskUnblockTime+0x38>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	4a04      	ldr	r2, [pc, #16]	@ (8005ad8 <prvResetNextTaskUnblockTime+0x3c>)
 8005ac6:	6013      	str	r3, [r2, #0]
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	20000694 	.word	0x20000694
 8005ad8:	200006fc 	.word	0x200006fc

08005adc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ae6:	4b29      	ldr	r3, [pc, #164]	@ (8005b8c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aec:	4b28      	ldr	r3, [pc, #160]	@ (8005b90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3304      	adds	r3, #4
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff fad3 	bl	800509e <uxListRemove>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10b      	bne.n	8005b16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005afe:	4b24      	ldr	r3, [pc, #144]	@ (8005b90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b04:	2201      	movs	r2, #1
 8005b06:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0a:	43da      	mvns	r2, r3
 8005b0c:	4b21      	ldr	r3, [pc, #132]	@ (8005b94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4013      	ands	r3, r2
 8005b12:	4a20      	ldr	r2, [pc, #128]	@ (8005b94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b1c:	d10a      	bne.n	8005b34 <prvAddCurrentTaskToDelayedList+0x58>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d007      	beq.n	8005b34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b24:	4b1a      	ldr	r3, [pc, #104]	@ (8005b90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	481a      	ldr	r0, [pc, #104]	@ (8005b98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005b2e:	f7ff fa59 	bl	8004fe4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b32:	e026      	b.n	8005b82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4413      	add	r3, r2
 8005b3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b3c:	4b14      	ldr	r3, [pc, #80]	@ (8005b90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d209      	bcs.n	8005b60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b4c:	4b13      	ldr	r3, [pc, #76]	@ (8005b9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	4b0f      	ldr	r3, [pc, #60]	@ (8005b90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3304      	adds	r3, #4
 8005b56:	4619      	mov	r1, r3
 8005b58:	4610      	mov	r0, r2
 8005b5a:	f7ff fa67 	bl	800502c <vListInsert>
}
 8005b5e:	e010      	b.n	8005b82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b60:	4b0f      	ldr	r3, [pc, #60]	@ (8005ba0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	4b0a      	ldr	r3, [pc, #40]	@ (8005b90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	f7ff fa5d 	bl	800502c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b72:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d202      	bcs.n	8005b82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005b7c:	4a09      	ldr	r2, [pc, #36]	@ (8005ba4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	6013      	str	r3, [r2, #0]
}
 8005b82:	bf00      	nop
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	200006e0 	.word	0x200006e0
 8005b90:	200005dc 	.word	0x200005dc
 8005b94:	200006e4 	.word	0x200006e4
 8005b98:	200006c8 	.word	0x200006c8
 8005b9c:	20000698 	.word	0x20000698
 8005ba0:	20000694 	.word	0x20000694
 8005ba4:	200006fc 	.word	0x200006fc

08005ba8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3b04      	subs	r3, #4
 8005bb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	3b04      	subs	r3, #4
 8005bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f023 0201 	bic.w	r2, r3, #1
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3b04      	subs	r3, #4
 8005bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005bd8:	4a0c      	ldr	r2, [pc, #48]	@ (8005c0c <pxPortInitialiseStack+0x64>)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	3b14      	subs	r3, #20
 8005be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3b04      	subs	r3, #4
 8005bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f06f 0202 	mvn.w	r2, #2
 8005bf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3b20      	subs	r3, #32
 8005bfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	08005c11 	.word	0x08005c11

08005c10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c16:	2300      	movs	r3, #0
 8005c18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c1a:	4b13      	ldr	r3, [pc, #76]	@ (8005c68 <prvTaskExitError+0x58>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c22:	d00b      	beq.n	8005c3c <prvTaskExitError+0x2c>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	60fb      	str	r3, [r7, #12]
}
 8005c36:	bf00      	nop
 8005c38:	bf00      	nop
 8005c3a:	e7fd      	b.n	8005c38 <prvTaskExitError+0x28>
	__asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	60bb      	str	r3, [r7, #8]
}
 8005c4e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c50:	bf00      	nop
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0fc      	beq.n	8005c52 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c58:	bf00      	nop
 8005c5a:	bf00      	nop
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	2000000c 	.word	0x2000000c
 8005c6c:	00000000 	.word	0x00000000

08005c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c70:	4b07      	ldr	r3, [pc, #28]	@ (8005c90 <pxCurrentTCBConst2>)
 8005c72:	6819      	ldr	r1, [r3, #0]
 8005c74:	6808      	ldr	r0, [r1, #0]
 8005c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7a:	f380 8809 	msr	PSP, r0
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f04f 0000 	mov.w	r0, #0
 8005c86:	f380 8811 	msr	BASEPRI, r0
 8005c8a:	4770      	bx	lr
 8005c8c:	f3af 8000 	nop.w

08005c90 <pxCurrentTCBConst2>:
 8005c90:	200005dc 	.word	0x200005dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop

08005c98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c98:	4808      	ldr	r0, [pc, #32]	@ (8005cbc <prvPortStartFirstTask+0x24>)
 8005c9a:	6800      	ldr	r0, [r0, #0]
 8005c9c:	6800      	ldr	r0, [r0, #0]
 8005c9e:	f380 8808 	msr	MSP, r0
 8005ca2:	f04f 0000 	mov.w	r0, #0
 8005ca6:	f380 8814 	msr	CONTROL, r0
 8005caa:	b662      	cpsie	i
 8005cac:	b661      	cpsie	f
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	df00      	svc	0
 8005cb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005cba:	bf00      	nop
 8005cbc:	e000ed08 	.word	0xe000ed08

08005cc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005cc6:	4b47      	ldr	r3, [pc, #284]	@ (8005de4 <xPortStartScheduler+0x124>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a47      	ldr	r2, [pc, #284]	@ (8005de8 <xPortStartScheduler+0x128>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d10b      	bne.n	8005ce8 <xPortStartScheduler+0x28>
	__asm volatile
 8005cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	613b      	str	r3, [r7, #16]
}
 8005ce2:	bf00      	nop
 8005ce4:	bf00      	nop
 8005ce6:	e7fd      	b.n	8005ce4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8005de4 <xPortStartScheduler+0x124>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a3f      	ldr	r2, [pc, #252]	@ (8005dec <xPortStartScheduler+0x12c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d10b      	bne.n	8005d0a <xPortStartScheduler+0x4a>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	60fb      	str	r3, [r7, #12]
}
 8005d04:	bf00      	nop
 8005d06:	bf00      	nop
 8005d08:	e7fd      	b.n	8005d06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d0a:	4b39      	ldr	r3, [pc, #228]	@ (8005df0 <xPortStartScheduler+0x130>)
 8005d0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	22ff      	movs	r2, #255	@ 0xff
 8005d1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	4b31      	ldr	r3, [pc, #196]	@ (8005df4 <xPortStartScheduler+0x134>)
 8005d30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d32:	4b31      	ldr	r3, [pc, #196]	@ (8005df8 <xPortStartScheduler+0x138>)
 8005d34:	2207      	movs	r2, #7
 8005d36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d38:	e009      	b.n	8005d4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005d3a:	4b2f      	ldr	r3, [pc, #188]	@ (8005df8 <xPortStartScheduler+0x138>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	4a2d      	ldr	r2, [pc, #180]	@ (8005df8 <xPortStartScheduler+0x138>)
 8005d42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d44:	78fb      	ldrb	r3, [r7, #3]
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d4e:	78fb      	ldrb	r3, [r7, #3]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d56:	2b80      	cmp	r3, #128	@ 0x80
 8005d58:	d0ef      	beq.n	8005d3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d5a:	4b27      	ldr	r3, [pc, #156]	@ (8005df8 <xPortStartScheduler+0x138>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f1c3 0307 	rsb	r3, r3, #7
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d00b      	beq.n	8005d7e <xPortStartScheduler+0xbe>
	__asm volatile
 8005d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	60bb      	str	r3, [r7, #8]
}
 8005d78:	bf00      	nop
 8005d7a:	bf00      	nop
 8005d7c:	e7fd      	b.n	8005d7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8005df8 <xPortStartScheduler+0x138>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	021b      	lsls	r3, r3, #8
 8005d84:	4a1c      	ldr	r2, [pc, #112]	@ (8005df8 <xPortStartScheduler+0x138>)
 8005d86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d88:	4b1b      	ldr	r3, [pc, #108]	@ (8005df8 <xPortStartScheduler+0x138>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d90:	4a19      	ldr	r2, [pc, #100]	@ (8005df8 <xPortStartScheduler+0x138>)
 8005d92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d9c:	4b17      	ldr	r3, [pc, #92]	@ (8005dfc <xPortStartScheduler+0x13c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a16      	ldr	r2, [pc, #88]	@ (8005dfc <xPortStartScheduler+0x13c>)
 8005da2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005da6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005da8:	4b14      	ldr	r3, [pc, #80]	@ (8005dfc <xPortStartScheduler+0x13c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a13      	ldr	r2, [pc, #76]	@ (8005dfc <xPortStartScheduler+0x13c>)
 8005dae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005db2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005db4:	f000 f8da 	bl	8005f6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005db8:	4b11      	ldr	r3, [pc, #68]	@ (8005e00 <xPortStartScheduler+0x140>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005dbe:	f000 f8f9 	bl	8005fb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005dc2:	4b10      	ldr	r3, [pc, #64]	@ (8005e04 <xPortStartScheduler+0x144>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8005e04 <xPortStartScheduler+0x144>)
 8005dc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005dcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005dce:	f7ff ff63 	bl	8005c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005dd2:	f7ff fd43 	bl	800585c <vTaskSwitchContext>
	prvTaskExitError();
 8005dd6:	f7ff ff1b 	bl	8005c10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	e000ed00 	.word	0xe000ed00
 8005de8:	410fc271 	.word	0x410fc271
 8005dec:	410fc270 	.word	0x410fc270
 8005df0:	e000e400 	.word	0xe000e400
 8005df4:	20000708 	.word	0x20000708
 8005df8:	2000070c 	.word	0x2000070c
 8005dfc:	e000ed20 	.word	0xe000ed20
 8005e00:	2000000c 	.word	0x2000000c
 8005e04:	e000ef34 	.word	0xe000ef34

08005e08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	607b      	str	r3, [r7, #4]
}
 8005e20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e22:	4b10      	ldr	r3, [pc, #64]	@ (8005e64 <vPortEnterCritical+0x5c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	3301      	adds	r3, #1
 8005e28:	4a0e      	ldr	r2, [pc, #56]	@ (8005e64 <vPortEnterCritical+0x5c>)
 8005e2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e64 <vPortEnterCritical+0x5c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d110      	bne.n	8005e56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e34:	4b0c      	ldr	r3, [pc, #48]	@ (8005e68 <vPortEnterCritical+0x60>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00b      	beq.n	8005e56 <vPortEnterCritical+0x4e>
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	603b      	str	r3, [r7, #0]
}
 8005e50:	bf00      	nop
 8005e52:	bf00      	nop
 8005e54:	e7fd      	b.n	8005e52 <vPortEnterCritical+0x4a>
	}
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	2000000c 	.word	0x2000000c
 8005e68:	e000ed04 	.word	0xe000ed04

08005e6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e72:	4b12      	ldr	r3, [pc, #72]	@ (8005ebc <vPortExitCritical+0x50>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10b      	bne.n	8005e92 <vPortExitCritical+0x26>
	__asm volatile
 8005e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	607b      	str	r3, [r7, #4]
}
 8005e8c:	bf00      	nop
 8005e8e:	bf00      	nop
 8005e90:	e7fd      	b.n	8005e8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e92:	4b0a      	ldr	r3, [pc, #40]	@ (8005ebc <vPortExitCritical+0x50>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	4a08      	ldr	r2, [pc, #32]	@ (8005ebc <vPortExitCritical+0x50>)
 8005e9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e9c:	4b07      	ldr	r3, [pc, #28]	@ (8005ebc <vPortExitCritical+0x50>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d105      	bne.n	8005eb0 <vPortExitCritical+0x44>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005eae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	2000000c 	.word	0x2000000c

08005ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ec0:	f3ef 8009 	mrs	r0, PSP
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	4b15      	ldr	r3, [pc, #84]	@ (8005f20 <pxCurrentTCBConst>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	f01e 0f10 	tst.w	lr, #16
 8005ed0:	bf08      	it	eq
 8005ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eda:	6010      	str	r0, [r2, #0]
 8005edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ee0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005ee4:	f380 8811 	msr	BASEPRI, r0
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f7ff fcb4 	bl	800585c <vTaskSwitchContext>
 8005ef4:	f04f 0000 	mov.w	r0, #0
 8005ef8:	f380 8811 	msr	BASEPRI, r0
 8005efc:	bc09      	pop	{r0, r3}
 8005efe:	6819      	ldr	r1, [r3, #0]
 8005f00:	6808      	ldr	r0, [r1, #0]
 8005f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f06:	f01e 0f10 	tst.w	lr, #16
 8005f0a:	bf08      	it	eq
 8005f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f10:	f380 8809 	msr	PSP, r0
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	f3af 8000 	nop.w

08005f20 <pxCurrentTCBConst>:
 8005f20:	200005dc 	.word	0x200005dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop

08005f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	607b      	str	r3, [r7, #4]
}
 8005f40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f42:	f7ff fbd1 	bl	80056e8 <xTaskIncrementTick>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d003      	beq.n	8005f54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f4c:	4b06      	ldr	r3, [pc, #24]	@ (8005f68 <SysTick_Handler+0x40>)
 8005f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	2300      	movs	r3, #0
 8005f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	f383 8811 	msr	BASEPRI, r3
}
 8005f5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f60:	bf00      	nop
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	e000ed04 	.word	0xe000ed04

08005f6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f70:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa0 <vPortSetupTimerInterrupt+0x34>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f76:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa4 <vPortSetupTimerInterrupt+0x38>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005fa8 <vPortSetupTimerInterrupt+0x3c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a0a      	ldr	r2, [pc, #40]	@ (8005fac <vPortSetupTimerInterrupt+0x40>)
 8005f82:	fba2 2303 	umull	r2, r3, r2, r3
 8005f86:	099b      	lsrs	r3, r3, #6
 8005f88:	4a09      	ldr	r2, [pc, #36]	@ (8005fb0 <vPortSetupTimerInterrupt+0x44>)
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f8e:	4b04      	ldr	r3, [pc, #16]	@ (8005fa0 <vPortSetupTimerInterrupt+0x34>)
 8005f90:	2207      	movs	r2, #7
 8005f92:	601a      	str	r2, [r3, #0]
}
 8005f94:	bf00      	nop
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	e000e010 	.word	0xe000e010
 8005fa4:	e000e018 	.word	0xe000e018
 8005fa8:	20000000 	.word	0x20000000
 8005fac:	10624dd3 	.word	0x10624dd3
 8005fb0:	e000e014 	.word	0xe000e014

08005fb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005fb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005fc4 <vPortEnableVFP+0x10>
 8005fb8:	6801      	ldr	r1, [r0, #0]
 8005fba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005fbe:	6001      	str	r1, [r0, #0]
 8005fc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005fc2:	bf00      	nop
 8005fc4:	e000ed88 	.word	0xe000ed88

08005fc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08a      	sub	sp, #40	@ 0x28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fd4:	f7ff fadc 	bl	8005590 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fd8:	4b5c      	ldr	r3, [pc, #368]	@ (800614c <pvPortMalloc+0x184>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fe0:	f000 f924 	bl	800622c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fe4:	4b5a      	ldr	r3, [pc, #360]	@ (8006150 <pvPortMalloc+0x188>)
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4013      	ands	r3, r2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f040 8095 	bne.w	800611c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d01e      	beq.n	8006036 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005ff8:	2208      	movs	r2, #8
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	2b00      	cmp	r3, #0
 8006008:	d015      	beq.n	8006036 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f023 0307 	bic.w	r3, r3, #7
 8006010:	3308      	adds	r3, #8
 8006012:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00b      	beq.n	8006036 <pvPortMalloc+0x6e>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	617b      	str	r3, [r7, #20]
}
 8006030:	bf00      	nop
 8006032:	bf00      	nop
 8006034:	e7fd      	b.n	8006032 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d06f      	beq.n	800611c <pvPortMalloc+0x154>
 800603c:	4b45      	ldr	r3, [pc, #276]	@ (8006154 <pvPortMalloc+0x18c>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	429a      	cmp	r2, r3
 8006044:	d86a      	bhi.n	800611c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006046:	4b44      	ldr	r3, [pc, #272]	@ (8006158 <pvPortMalloc+0x190>)
 8006048:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800604a:	4b43      	ldr	r3, [pc, #268]	@ (8006158 <pvPortMalloc+0x190>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006050:	e004      	b.n	800605c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006054:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800605c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	429a      	cmp	r2, r3
 8006064:	d903      	bls.n	800606e <pvPortMalloc+0xa6>
 8006066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f1      	bne.n	8006052 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800606e:	4b37      	ldr	r3, [pc, #220]	@ (800614c <pvPortMalloc+0x184>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006074:	429a      	cmp	r2, r3
 8006076:	d051      	beq.n	800611c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2208      	movs	r2, #8
 800607e:	4413      	add	r3, r2
 8006080:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800608a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	1ad2      	subs	r2, r2, r3
 8006092:	2308      	movs	r3, #8
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	429a      	cmp	r2, r3
 8006098:	d920      	bls.n	80060dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800609a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4413      	add	r3, r2
 80060a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00b      	beq.n	80060c4 <pvPortMalloc+0xfc>
	__asm volatile
 80060ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	613b      	str	r3, [r7, #16]
}
 80060be:	bf00      	nop
 80060c0:	bf00      	nop
 80060c2:	e7fd      	b.n	80060c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	1ad2      	subs	r2, r2, r3
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060d6:	69b8      	ldr	r0, [r7, #24]
 80060d8:	f000 f90a 	bl	80062f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060dc:	4b1d      	ldr	r3, [pc, #116]	@ (8006154 <pvPortMalloc+0x18c>)
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006154 <pvPortMalloc+0x18c>)
 80060e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006154 <pvPortMalloc+0x18c>)
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	4b1b      	ldr	r3, [pc, #108]	@ (800615c <pvPortMalloc+0x194>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d203      	bcs.n	80060fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060f6:	4b17      	ldr	r3, [pc, #92]	@ (8006154 <pvPortMalloc+0x18c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a18      	ldr	r2, [pc, #96]	@ (800615c <pvPortMalloc+0x194>)
 80060fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	4b13      	ldr	r3, [pc, #76]	@ (8006150 <pvPortMalloc+0x188>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	431a      	orrs	r2, r3
 8006108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800610c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610e:	2200      	movs	r2, #0
 8006110:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006112:	4b13      	ldr	r3, [pc, #76]	@ (8006160 <pvPortMalloc+0x198>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3301      	adds	r3, #1
 8006118:	4a11      	ldr	r2, [pc, #68]	@ (8006160 <pvPortMalloc+0x198>)
 800611a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800611c:	f7ff fa46 	bl	80055ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00b      	beq.n	8006142 <pvPortMalloc+0x17a>
	__asm volatile
 800612a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	60fb      	str	r3, [r7, #12]
}
 800613c:	bf00      	nop
 800613e:	bf00      	nop
 8006140:	e7fd      	b.n	800613e <pvPortMalloc+0x176>
	return pvReturn;
 8006142:	69fb      	ldr	r3, [r7, #28]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3728      	adds	r7, #40	@ 0x28
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	20004318 	.word	0x20004318
 8006150:	2000432c 	.word	0x2000432c
 8006154:	2000431c 	.word	0x2000431c
 8006158:	20004310 	.word	0x20004310
 800615c:	20004320 	.word	0x20004320
 8006160:	20004324 	.word	0x20004324

08006164 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d04f      	beq.n	8006216 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006176:	2308      	movs	r3, #8
 8006178:	425b      	negs	r3, r3
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4413      	add	r3, r2
 800617e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	4b25      	ldr	r3, [pc, #148]	@ (8006220 <vPortFree+0xbc>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4013      	ands	r3, r2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10b      	bne.n	80061aa <vPortFree+0x46>
	__asm volatile
 8006192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	60fb      	str	r3, [r7, #12]
}
 80061a4:	bf00      	nop
 80061a6:	bf00      	nop
 80061a8:	e7fd      	b.n	80061a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00b      	beq.n	80061ca <vPortFree+0x66>
	__asm volatile
 80061b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	60bb      	str	r3, [r7, #8]
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop
 80061c8:	e7fd      	b.n	80061c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	4b14      	ldr	r3, [pc, #80]	@ (8006220 <vPortFree+0xbc>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4013      	ands	r3, r2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d01e      	beq.n	8006216 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d11a      	bne.n	8006216 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006220 <vPortFree+0xbc>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	43db      	mvns	r3, r3
 80061ea:	401a      	ands	r2, r3
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061f0:	f7ff f9ce 	bl	8005590 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006224 <vPortFree+0xc0>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4413      	add	r3, r2
 80061fe:	4a09      	ldr	r2, [pc, #36]	@ (8006224 <vPortFree+0xc0>)
 8006200:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006202:	6938      	ldr	r0, [r7, #16]
 8006204:	f000 f874 	bl	80062f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006208:	4b07      	ldr	r3, [pc, #28]	@ (8006228 <vPortFree+0xc4>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3301      	adds	r3, #1
 800620e:	4a06      	ldr	r2, [pc, #24]	@ (8006228 <vPortFree+0xc4>)
 8006210:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006212:	f7ff f9cb 	bl	80055ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006216:	bf00      	nop
 8006218:	3718      	adds	r7, #24
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	2000432c 	.word	0x2000432c
 8006224:	2000431c 	.word	0x2000431c
 8006228:	20004328 	.word	0x20004328

0800622c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006232:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006236:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006238:	4b27      	ldr	r3, [pc, #156]	@ (80062d8 <prvHeapInit+0xac>)
 800623a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f003 0307 	and.w	r3, r3, #7
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00c      	beq.n	8006260 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3307      	adds	r3, #7
 800624a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 0307 	bic.w	r3, r3, #7
 8006252:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	4a1f      	ldr	r2, [pc, #124]	@ (80062d8 <prvHeapInit+0xac>)
 800625c:	4413      	add	r3, r2
 800625e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006264:	4a1d      	ldr	r2, [pc, #116]	@ (80062dc <prvHeapInit+0xb0>)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800626a:	4b1c      	ldr	r3, [pc, #112]	@ (80062dc <prvHeapInit+0xb0>)
 800626c:	2200      	movs	r2, #0
 800626e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	4413      	add	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006278:	2208      	movs	r2, #8
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	1a9b      	subs	r3, r3, r2
 800627e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 0307 	bic.w	r3, r3, #7
 8006286:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4a15      	ldr	r2, [pc, #84]	@ (80062e0 <prvHeapInit+0xb4>)
 800628c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800628e:	4b14      	ldr	r3, [pc, #80]	@ (80062e0 <prvHeapInit+0xb4>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2200      	movs	r2, #0
 8006294:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006296:	4b12      	ldr	r3, [pc, #72]	@ (80062e0 <prvHeapInit+0xb4>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2200      	movs	r2, #0
 800629c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	1ad2      	subs	r2, r2, r3
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062ac:	4b0c      	ldr	r3, [pc, #48]	@ (80062e0 <prvHeapInit+0xb4>)
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	4a0a      	ldr	r2, [pc, #40]	@ (80062e4 <prvHeapInit+0xb8>)
 80062ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	4a09      	ldr	r2, [pc, #36]	@ (80062e8 <prvHeapInit+0xbc>)
 80062c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062c4:	4b09      	ldr	r3, [pc, #36]	@ (80062ec <prvHeapInit+0xc0>)
 80062c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80062ca:	601a      	str	r2, [r3, #0]
}
 80062cc:	bf00      	nop
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	20000710 	.word	0x20000710
 80062dc:	20004310 	.word	0x20004310
 80062e0:	20004318 	.word	0x20004318
 80062e4:	20004320 	.word	0x20004320
 80062e8:	2000431c 	.word	0x2000431c
 80062ec:	2000432c 	.word	0x2000432c

080062f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062f8:	4b28      	ldr	r3, [pc, #160]	@ (800639c <prvInsertBlockIntoFreeList+0xac>)
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	e002      	b.n	8006304 <prvInsertBlockIntoFreeList+0x14>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	60fb      	str	r3, [r7, #12]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	429a      	cmp	r2, r3
 800630c:	d8f7      	bhi.n	80062fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	4413      	add	r3, r2
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	429a      	cmp	r2, r3
 800631e:	d108      	bne.n	8006332 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	441a      	add	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	441a      	add	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	429a      	cmp	r2, r3
 8006344:	d118      	bne.n	8006378 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	4b15      	ldr	r3, [pc, #84]	@ (80063a0 <prvInsertBlockIntoFreeList+0xb0>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	429a      	cmp	r2, r3
 8006350:	d00d      	beq.n	800636e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	441a      	add	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	e008      	b.n	8006380 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800636e:	4b0c      	ldr	r3, [pc, #48]	@ (80063a0 <prvInsertBlockIntoFreeList+0xb0>)
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	e003      	b.n	8006380 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	429a      	cmp	r2, r3
 8006386:	d002      	beq.n	800638e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800638e:	bf00      	nop
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	20004310 	.word	0x20004310
 80063a0:	20004318 	.word	0x20004318

080063a4 <__cvt>:
 80063a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063a8:	ec57 6b10 	vmov	r6, r7, d0
 80063ac:	2f00      	cmp	r7, #0
 80063ae:	460c      	mov	r4, r1
 80063b0:	4619      	mov	r1, r3
 80063b2:	463b      	mov	r3, r7
 80063b4:	bfbb      	ittet	lt
 80063b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80063ba:	461f      	movlt	r7, r3
 80063bc:	2300      	movge	r3, #0
 80063be:	232d      	movlt	r3, #45	@ 0x2d
 80063c0:	700b      	strb	r3, [r1, #0]
 80063c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80063c8:	4691      	mov	r9, r2
 80063ca:	f023 0820 	bic.w	r8, r3, #32
 80063ce:	bfbc      	itt	lt
 80063d0:	4632      	movlt	r2, r6
 80063d2:	4616      	movlt	r6, r2
 80063d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80063d8:	d005      	beq.n	80063e6 <__cvt+0x42>
 80063da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80063de:	d100      	bne.n	80063e2 <__cvt+0x3e>
 80063e0:	3401      	adds	r4, #1
 80063e2:	2102      	movs	r1, #2
 80063e4:	e000      	b.n	80063e8 <__cvt+0x44>
 80063e6:	2103      	movs	r1, #3
 80063e8:	ab03      	add	r3, sp, #12
 80063ea:	9301      	str	r3, [sp, #4]
 80063ec:	ab02      	add	r3, sp, #8
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	ec47 6b10 	vmov	d0, r6, r7
 80063f4:	4653      	mov	r3, sl
 80063f6:	4622      	mov	r2, r4
 80063f8:	f001 f90e 	bl	8007618 <_dtoa_r>
 80063fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006400:	4605      	mov	r5, r0
 8006402:	d119      	bne.n	8006438 <__cvt+0x94>
 8006404:	f019 0f01 	tst.w	r9, #1
 8006408:	d00e      	beq.n	8006428 <__cvt+0x84>
 800640a:	eb00 0904 	add.w	r9, r0, r4
 800640e:	2200      	movs	r2, #0
 8006410:	2300      	movs	r3, #0
 8006412:	4630      	mov	r0, r6
 8006414:	4639      	mov	r1, r7
 8006416:	f7fa fb5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800641a:	b108      	cbz	r0, 8006420 <__cvt+0x7c>
 800641c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006420:	2230      	movs	r2, #48	@ 0x30
 8006422:	9b03      	ldr	r3, [sp, #12]
 8006424:	454b      	cmp	r3, r9
 8006426:	d31e      	bcc.n	8006466 <__cvt+0xc2>
 8006428:	9b03      	ldr	r3, [sp, #12]
 800642a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800642c:	1b5b      	subs	r3, r3, r5
 800642e:	4628      	mov	r0, r5
 8006430:	6013      	str	r3, [r2, #0]
 8006432:	b004      	add	sp, #16
 8006434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006438:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800643c:	eb00 0904 	add.w	r9, r0, r4
 8006440:	d1e5      	bne.n	800640e <__cvt+0x6a>
 8006442:	7803      	ldrb	r3, [r0, #0]
 8006444:	2b30      	cmp	r3, #48	@ 0x30
 8006446:	d10a      	bne.n	800645e <__cvt+0xba>
 8006448:	2200      	movs	r2, #0
 800644a:	2300      	movs	r3, #0
 800644c:	4630      	mov	r0, r6
 800644e:	4639      	mov	r1, r7
 8006450:	f7fa fb42 	bl	8000ad8 <__aeabi_dcmpeq>
 8006454:	b918      	cbnz	r0, 800645e <__cvt+0xba>
 8006456:	f1c4 0401 	rsb	r4, r4, #1
 800645a:	f8ca 4000 	str.w	r4, [sl]
 800645e:	f8da 3000 	ldr.w	r3, [sl]
 8006462:	4499      	add	r9, r3
 8006464:	e7d3      	b.n	800640e <__cvt+0x6a>
 8006466:	1c59      	adds	r1, r3, #1
 8006468:	9103      	str	r1, [sp, #12]
 800646a:	701a      	strb	r2, [r3, #0]
 800646c:	e7d9      	b.n	8006422 <__cvt+0x7e>

0800646e <__exponent>:
 800646e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006470:	2900      	cmp	r1, #0
 8006472:	bfba      	itte	lt
 8006474:	4249      	neglt	r1, r1
 8006476:	232d      	movlt	r3, #45	@ 0x2d
 8006478:	232b      	movge	r3, #43	@ 0x2b
 800647a:	2909      	cmp	r1, #9
 800647c:	7002      	strb	r2, [r0, #0]
 800647e:	7043      	strb	r3, [r0, #1]
 8006480:	dd29      	ble.n	80064d6 <__exponent+0x68>
 8006482:	f10d 0307 	add.w	r3, sp, #7
 8006486:	461d      	mov	r5, r3
 8006488:	270a      	movs	r7, #10
 800648a:	461a      	mov	r2, r3
 800648c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006490:	fb07 1416 	mls	r4, r7, r6, r1
 8006494:	3430      	adds	r4, #48	@ 0x30
 8006496:	f802 4c01 	strb.w	r4, [r2, #-1]
 800649a:	460c      	mov	r4, r1
 800649c:	2c63      	cmp	r4, #99	@ 0x63
 800649e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80064a2:	4631      	mov	r1, r6
 80064a4:	dcf1      	bgt.n	800648a <__exponent+0x1c>
 80064a6:	3130      	adds	r1, #48	@ 0x30
 80064a8:	1e94      	subs	r4, r2, #2
 80064aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80064ae:	1c41      	adds	r1, r0, #1
 80064b0:	4623      	mov	r3, r4
 80064b2:	42ab      	cmp	r3, r5
 80064b4:	d30a      	bcc.n	80064cc <__exponent+0x5e>
 80064b6:	f10d 0309 	add.w	r3, sp, #9
 80064ba:	1a9b      	subs	r3, r3, r2
 80064bc:	42ac      	cmp	r4, r5
 80064be:	bf88      	it	hi
 80064c0:	2300      	movhi	r3, #0
 80064c2:	3302      	adds	r3, #2
 80064c4:	4403      	add	r3, r0
 80064c6:	1a18      	subs	r0, r3, r0
 80064c8:	b003      	add	sp, #12
 80064ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80064d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80064d4:	e7ed      	b.n	80064b2 <__exponent+0x44>
 80064d6:	2330      	movs	r3, #48	@ 0x30
 80064d8:	3130      	adds	r1, #48	@ 0x30
 80064da:	7083      	strb	r3, [r0, #2]
 80064dc:	70c1      	strb	r1, [r0, #3]
 80064de:	1d03      	adds	r3, r0, #4
 80064e0:	e7f1      	b.n	80064c6 <__exponent+0x58>
	...

080064e4 <_printf_float>:
 80064e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e8:	b08d      	sub	sp, #52	@ 0x34
 80064ea:	460c      	mov	r4, r1
 80064ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80064f0:	4616      	mov	r6, r2
 80064f2:	461f      	mov	r7, r3
 80064f4:	4605      	mov	r5, r0
 80064f6:	f000 ff23 	bl	8007340 <_localeconv_r>
 80064fa:	6803      	ldr	r3, [r0, #0]
 80064fc:	9304      	str	r3, [sp, #16]
 80064fe:	4618      	mov	r0, r3
 8006500:	f7f9 febe 	bl	8000280 <strlen>
 8006504:	2300      	movs	r3, #0
 8006506:	930a      	str	r3, [sp, #40]	@ 0x28
 8006508:	f8d8 3000 	ldr.w	r3, [r8]
 800650c:	9005      	str	r0, [sp, #20]
 800650e:	3307      	adds	r3, #7
 8006510:	f023 0307 	bic.w	r3, r3, #7
 8006514:	f103 0208 	add.w	r2, r3, #8
 8006518:	f894 a018 	ldrb.w	sl, [r4, #24]
 800651c:	f8d4 b000 	ldr.w	fp, [r4]
 8006520:	f8c8 2000 	str.w	r2, [r8]
 8006524:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006528:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800652c:	9307      	str	r3, [sp, #28]
 800652e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006532:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006536:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800653a:	4b9c      	ldr	r3, [pc, #624]	@ (80067ac <_printf_float+0x2c8>)
 800653c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006540:	f7fa fafc 	bl	8000b3c <__aeabi_dcmpun>
 8006544:	bb70      	cbnz	r0, 80065a4 <_printf_float+0xc0>
 8006546:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800654a:	4b98      	ldr	r3, [pc, #608]	@ (80067ac <_printf_float+0x2c8>)
 800654c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006550:	f7fa fad6 	bl	8000b00 <__aeabi_dcmple>
 8006554:	bb30      	cbnz	r0, 80065a4 <_printf_float+0xc0>
 8006556:	2200      	movs	r2, #0
 8006558:	2300      	movs	r3, #0
 800655a:	4640      	mov	r0, r8
 800655c:	4649      	mov	r1, r9
 800655e:	f7fa fac5 	bl	8000aec <__aeabi_dcmplt>
 8006562:	b110      	cbz	r0, 800656a <_printf_float+0x86>
 8006564:	232d      	movs	r3, #45	@ 0x2d
 8006566:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800656a:	4a91      	ldr	r2, [pc, #580]	@ (80067b0 <_printf_float+0x2cc>)
 800656c:	4b91      	ldr	r3, [pc, #580]	@ (80067b4 <_printf_float+0x2d0>)
 800656e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006572:	bf94      	ite	ls
 8006574:	4690      	movls	r8, r2
 8006576:	4698      	movhi	r8, r3
 8006578:	2303      	movs	r3, #3
 800657a:	6123      	str	r3, [r4, #16]
 800657c:	f02b 0304 	bic.w	r3, fp, #4
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	f04f 0900 	mov.w	r9, #0
 8006586:	9700      	str	r7, [sp, #0]
 8006588:	4633      	mov	r3, r6
 800658a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800658c:	4621      	mov	r1, r4
 800658e:	4628      	mov	r0, r5
 8006590:	f000 f9d2 	bl	8006938 <_printf_common>
 8006594:	3001      	adds	r0, #1
 8006596:	f040 808d 	bne.w	80066b4 <_printf_float+0x1d0>
 800659a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800659e:	b00d      	add	sp, #52	@ 0x34
 80065a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a4:	4642      	mov	r2, r8
 80065a6:	464b      	mov	r3, r9
 80065a8:	4640      	mov	r0, r8
 80065aa:	4649      	mov	r1, r9
 80065ac:	f7fa fac6 	bl	8000b3c <__aeabi_dcmpun>
 80065b0:	b140      	cbz	r0, 80065c4 <_printf_float+0xe0>
 80065b2:	464b      	mov	r3, r9
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	bfbc      	itt	lt
 80065b8:	232d      	movlt	r3, #45	@ 0x2d
 80065ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80065be:	4a7e      	ldr	r2, [pc, #504]	@ (80067b8 <_printf_float+0x2d4>)
 80065c0:	4b7e      	ldr	r3, [pc, #504]	@ (80067bc <_printf_float+0x2d8>)
 80065c2:	e7d4      	b.n	800656e <_printf_float+0x8a>
 80065c4:	6863      	ldr	r3, [r4, #4]
 80065c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80065ca:	9206      	str	r2, [sp, #24]
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	d13b      	bne.n	8006648 <_printf_float+0x164>
 80065d0:	2306      	movs	r3, #6
 80065d2:	6063      	str	r3, [r4, #4]
 80065d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80065d8:	2300      	movs	r3, #0
 80065da:	6022      	str	r2, [r4, #0]
 80065dc:	9303      	str	r3, [sp, #12]
 80065de:	ab0a      	add	r3, sp, #40	@ 0x28
 80065e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80065e4:	ab09      	add	r3, sp, #36	@ 0x24
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	6861      	ldr	r1, [r4, #4]
 80065ea:	ec49 8b10 	vmov	d0, r8, r9
 80065ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80065f2:	4628      	mov	r0, r5
 80065f4:	f7ff fed6 	bl	80063a4 <__cvt>
 80065f8:	9b06      	ldr	r3, [sp, #24]
 80065fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80065fc:	2b47      	cmp	r3, #71	@ 0x47
 80065fe:	4680      	mov	r8, r0
 8006600:	d129      	bne.n	8006656 <_printf_float+0x172>
 8006602:	1cc8      	adds	r0, r1, #3
 8006604:	db02      	blt.n	800660c <_printf_float+0x128>
 8006606:	6863      	ldr	r3, [r4, #4]
 8006608:	4299      	cmp	r1, r3
 800660a:	dd41      	ble.n	8006690 <_printf_float+0x1ac>
 800660c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006610:	fa5f fa8a 	uxtb.w	sl, sl
 8006614:	3901      	subs	r1, #1
 8006616:	4652      	mov	r2, sl
 8006618:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800661c:	9109      	str	r1, [sp, #36]	@ 0x24
 800661e:	f7ff ff26 	bl	800646e <__exponent>
 8006622:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006624:	1813      	adds	r3, r2, r0
 8006626:	2a01      	cmp	r2, #1
 8006628:	4681      	mov	r9, r0
 800662a:	6123      	str	r3, [r4, #16]
 800662c:	dc02      	bgt.n	8006634 <_printf_float+0x150>
 800662e:	6822      	ldr	r2, [r4, #0]
 8006630:	07d2      	lsls	r2, r2, #31
 8006632:	d501      	bpl.n	8006638 <_printf_float+0x154>
 8006634:	3301      	adds	r3, #1
 8006636:	6123      	str	r3, [r4, #16]
 8006638:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800663c:	2b00      	cmp	r3, #0
 800663e:	d0a2      	beq.n	8006586 <_printf_float+0xa2>
 8006640:	232d      	movs	r3, #45	@ 0x2d
 8006642:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006646:	e79e      	b.n	8006586 <_printf_float+0xa2>
 8006648:	9a06      	ldr	r2, [sp, #24]
 800664a:	2a47      	cmp	r2, #71	@ 0x47
 800664c:	d1c2      	bne.n	80065d4 <_printf_float+0xf0>
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1c0      	bne.n	80065d4 <_printf_float+0xf0>
 8006652:	2301      	movs	r3, #1
 8006654:	e7bd      	b.n	80065d2 <_printf_float+0xee>
 8006656:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800665a:	d9db      	bls.n	8006614 <_printf_float+0x130>
 800665c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006660:	d118      	bne.n	8006694 <_printf_float+0x1b0>
 8006662:	2900      	cmp	r1, #0
 8006664:	6863      	ldr	r3, [r4, #4]
 8006666:	dd0b      	ble.n	8006680 <_printf_float+0x19c>
 8006668:	6121      	str	r1, [r4, #16]
 800666a:	b913      	cbnz	r3, 8006672 <_printf_float+0x18e>
 800666c:	6822      	ldr	r2, [r4, #0]
 800666e:	07d0      	lsls	r0, r2, #31
 8006670:	d502      	bpl.n	8006678 <_printf_float+0x194>
 8006672:	3301      	adds	r3, #1
 8006674:	440b      	add	r3, r1
 8006676:	6123      	str	r3, [r4, #16]
 8006678:	65a1      	str	r1, [r4, #88]	@ 0x58
 800667a:	f04f 0900 	mov.w	r9, #0
 800667e:	e7db      	b.n	8006638 <_printf_float+0x154>
 8006680:	b913      	cbnz	r3, 8006688 <_printf_float+0x1a4>
 8006682:	6822      	ldr	r2, [r4, #0]
 8006684:	07d2      	lsls	r2, r2, #31
 8006686:	d501      	bpl.n	800668c <_printf_float+0x1a8>
 8006688:	3302      	adds	r3, #2
 800668a:	e7f4      	b.n	8006676 <_printf_float+0x192>
 800668c:	2301      	movs	r3, #1
 800668e:	e7f2      	b.n	8006676 <_printf_float+0x192>
 8006690:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006694:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006696:	4299      	cmp	r1, r3
 8006698:	db05      	blt.n	80066a6 <_printf_float+0x1c2>
 800669a:	6823      	ldr	r3, [r4, #0]
 800669c:	6121      	str	r1, [r4, #16]
 800669e:	07d8      	lsls	r0, r3, #31
 80066a0:	d5ea      	bpl.n	8006678 <_printf_float+0x194>
 80066a2:	1c4b      	adds	r3, r1, #1
 80066a4:	e7e7      	b.n	8006676 <_printf_float+0x192>
 80066a6:	2900      	cmp	r1, #0
 80066a8:	bfd4      	ite	le
 80066aa:	f1c1 0202 	rsble	r2, r1, #2
 80066ae:	2201      	movgt	r2, #1
 80066b0:	4413      	add	r3, r2
 80066b2:	e7e0      	b.n	8006676 <_printf_float+0x192>
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	055a      	lsls	r2, r3, #21
 80066b8:	d407      	bmi.n	80066ca <_printf_float+0x1e6>
 80066ba:	6923      	ldr	r3, [r4, #16]
 80066bc:	4642      	mov	r2, r8
 80066be:	4631      	mov	r1, r6
 80066c0:	4628      	mov	r0, r5
 80066c2:	47b8      	blx	r7
 80066c4:	3001      	adds	r0, #1
 80066c6:	d12b      	bne.n	8006720 <_printf_float+0x23c>
 80066c8:	e767      	b.n	800659a <_printf_float+0xb6>
 80066ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80066ce:	f240 80dd 	bls.w	800688c <_printf_float+0x3a8>
 80066d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80066d6:	2200      	movs	r2, #0
 80066d8:	2300      	movs	r3, #0
 80066da:	f7fa f9fd 	bl	8000ad8 <__aeabi_dcmpeq>
 80066de:	2800      	cmp	r0, #0
 80066e0:	d033      	beq.n	800674a <_printf_float+0x266>
 80066e2:	4a37      	ldr	r2, [pc, #220]	@ (80067c0 <_printf_float+0x2dc>)
 80066e4:	2301      	movs	r3, #1
 80066e6:	4631      	mov	r1, r6
 80066e8:	4628      	mov	r0, r5
 80066ea:	47b8      	blx	r7
 80066ec:	3001      	adds	r0, #1
 80066ee:	f43f af54 	beq.w	800659a <_printf_float+0xb6>
 80066f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80066f6:	4543      	cmp	r3, r8
 80066f8:	db02      	blt.n	8006700 <_printf_float+0x21c>
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	07d8      	lsls	r0, r3, #31
 80066fe:	d50f      	bpl.n	8006720 <_printf_float+0x23c>
 8006700:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006704:	4631      	mov	r1, r6
 8006706:	4628      	mov	r0, r5
 8006708:	47b8      	blx	r7
 800670a:	3001      	adds	r0, #1
 800670c:	f43f af45 	beq.w	800659a <_printf_float+0xb6>
 8006710:	f04f 0900 	mov.w	r9, #0
 8006714:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006718:	f104 0a1a 	add.w	sl, r4, #26
 800671c:	45c8      	cmp	r8, r9
 800671e:	dc09      	bgt.n	8006734 <_printf_float+0x250>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	079b      	lsls	r3, r3, #30
 8006724:	f100 8103 	bmi.w	800692e <_printf_float+0x44a>
 8006728:	68e0      	ldr	r0, [r4, #12]
 800672a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800672c:	4298      	cmp	r0, r3
 800672e:	bfb8      	it	lt
 8006730:	4618      	movlt	r0, r3
 8006732:	e734      	b.n	800659e <_printf_float+0xba>
 8006734:	2301      	movs	r3, #1
 8006736:	4652      	mov	r2, sl
 8006738:	4631      	mov	r1, r6
 800673a:	4628      	mov	r0, r5
 800673c:	47b8      	blx	r7
 800673e:	3001      	adds	r0, #1
 8006740:	f43f af2b 	beq.w	800659a <_printf_float+0xb6>
 8006744:	f109 0901 	add.w	r9, r9, #1
 8006748:	e7e8      	b.n	800671c <_printf_float+0x238>
 800674a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800674c:	2b00      	cmp	r3, #0
 800674e:	dc39      	bgt.n	80067c4 <_printf_float+0x2e0>
 8006750:	4a1b      	ldr	r2, [pc, #108]	@ (80067c0 <_printf_float+0x2dc>)
 8006752:	2301      	movs	r3, #1
 8006754:	4631      	mov	r1, r6
 8006756:	4628      	mov	r0, r5
 8006758:	47b8      	blx	r7
 800675a:	3001      	adds	r0, #1
 800675c:	f43f af1d 	beq.w	800659a <_printf_float+0xb6>
 8006760:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006764:	ea59 0303 	orrs.w	r3, r9, r3
 8006768:	d102      	bne.n	8006770 <_printf_float+0x28c>
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	07d9      	lsls	r1, r3, #31
 800676e:	d5d7      	bpl.n	8006720 <_printf_float+0x23c>
 8006770:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006774:	4631      	mov	r1, r6
 8006776:	4628      	mov	r0, r5
 8006778:	47b8      	blx	r7
 800677a:	3001      	adds	r0, #1
 800677c:	f43f af0d 	beq.w	800659a <_printf_float+0xb6>
 8006780:	f04f 0a00 	mov.w	sl, #0
 8006784:	f104 0b1a 	add.w	fp, r4, #26
 8006788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800678a:	425b      	negs	r3, r3
 800678c:	4553      	cmp	r3, sl
 800678e:	dc01      	bgt.n	8006794 <_printf_float+0x2b0>
 8006790:	464b      	mov	r3, r9
 8006792:	e793      	b.n	80066bc <_printf_float+0x1d8>
 8006794:	2301      	movs	r3, #1
 8006796:	465a      	mov	r2, fp
 8006798:	4631      	mov	r1, r6
 800679a:	4628      	mov	r0, r5
 800679c:	47b8      	blx	r7
 800679e:	3001      	adds	r0, #1
 80067a0:	f43f aefb 	beq.w	800659a <_printf_float+0xb6>
 80067a4:	f10a 0a01 	add.w	sl, sl, #1
 80067a8:	e7ee      	b.n	8006788 <_printf_float+0x2a4>
 80067aa:	bf00      	nop
 80067ac:	7fefffff 	.word	0x7fefffff
 80067b0:	0800ad60 	.word	0x0800ad60
 80067b4:	0800ad64 	.word	0x0800ad64
 80067b8:	0800ad68 	.word	0x0800ad68
 80067bc:	0800ad6c 	.word	0x0800ad6c
 80067c0:	0800ad70 	.word	0x0800ad70
 80067c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067ca:	4553      	cmp	r3, sl
 80067cc:	bfa8      	it	ge
 80067ce:	4653      	movge	r3, sl
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	4699      	mov	r9, r3
 80067d4:	dc36      	bgt.n	8006844 <_printf_float+0x360>
 80067d6:	f04f 0b00 	mov.w	fp, #0
 80067da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067de:	f104 021a 	add.w	r2, r4, #26
 80067e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067e4:	9306      	str	r3, [sp, #24]
 80067e6:	eba3 0309 	sub.w	r3, r3, r9
 80067ea:	455b      	cmp	r3, fp
 80067ec:	dc31      	bgt.n	8006852 <_printf_float+0x36e>
 80067ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f0:	459a      	cmp	sl, r3
 80067f2:	dc3a      	bgt.n	800686a <_printf_float+0x386>
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	07da      	lsls	r2, r3, #31
 80067f8:	d437      	bmi.n	800686a <_printf_float+0x386>
 80067fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067fc:	ebaa 0903 	sub.w	r9, sl, r3
 8006800:	9b06      	ldr	r3, [sp, #24]
 8006802:	ebaa 0303 	sub.w	r3, sl, r3
 8006806:	4599      	cmp	r9, r3
 8006808:	bfa8      	it	ge
 800680a:	4699      	movge	r9, r3
 800680c:	f1b9 0f00 	cmp.w	r9, #0
 8006810:	dc33      	bgt.n	800687a <_printf_float+0x396>
 8006812:	f04f 0800 	mov.w	r8, #0
 8006816:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800681a:	f104 0b1a 	add.w	fp, r4, #26
 800681e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006820:	ebaa 0303 	sub.w	r3, sl, r3
 8006824:	eba3 0309 	sub.w	r3, r3, r9
 8006828:	4543      	cmp	r3, r8
 800682a:	f77f af79 	ble.w	8006720 <_printf_float+0x23c>
 800682e:	2301      	movs	r3, #1
 8006830:	465a      	mov	r2, fp
 8006832:	4631      	mov	r1, r6
 8006834:	4628      	mov	r0, r5
 8006836:	47b8      	blx	r7
 8006838:	3001      	adds	r0, #1
 800683a:	f43f aeae 	beq.w	800659a <_printf_float+0xb6>
 800683e:	f108 0801 	add.w	r8, r8, #1
 8006842:	e7ec      	b.n	800681e <_printf_float+0x33a>
 8006844:	4642      	mov	r2, r8
 8006846:	4631      	mov	r1, r6
 8006848:	4628      	mov	r0, r5
 800684a:	47b8      	blx	r7
 800684c:	3001      	adds	r0, #1
 800684e:	d1c2      	bne.n	80067d6 <_printf_float+0x2f2>
 8006850:	e6a3      	b.n	800659a <_printf_float+0xb6>
 8006852:	2301      	movs	r3, #1
 8006854:	4631      	mov	r1, r6
 8006856:	4628      	mov	r0, r5
 8006858:	9206      	str	r2, [sp, #24]
 800685a:	47b8      	blx	r7
 800685c:	3001      	adds	r0, #1
 800685e:	f43f ae9c 	beq.w	800659a <_printf_float+0xb6>
 8006862:	9a06      	ldr	r2, [sp, #24]
 8006864:	f10b 0b01 	add.w	fp, fp, #1
 8006868:	e7bb      	b.n	80067e2 <_printf_float+0x2fe>
 800686a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800686e:	4631      	mov	r1, r6
 8006870:	4628      	mov	r0, r5
 8006872:	47b8      	blx	r7
 8006874:	3001      	adds	r0, #1
 8006876:	d1c0      	bne.n	80067fa <_printf_float+0x316>
 8006878:	e68f      	b.n	800659a <_printf_float+0xb6>
 800687a:	9a06      	ldr	r2, [sp, #24]
 800687c:	464b      	mov	r3, r9
 800687e:	4442      	add	r2, r8
 8006880:	4631      	mov	r1, r6
 8006882:	4628      	mov	r0, r5
 8006884:	47b8      	blx	r7
 8006886:	3001      	adds	r0, #1
 8006888:	d1c3      	bne.n	8006812 <_printf_float+0x32e>
 800688a:	e686      	b.n	800659a <_printf_float+0xb6>
 800688c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006890:	f1ba 0f01 	cmp.w	sl, #1
 8006894:	dc01      	bgt.n	800689a <_printf_float+0x3b6>
 8006896:	07db      	lsls	r3, r3, #31
 8006898:	d536      	bpl.n	8006908 <_printf_float+0x424>
 800689a:	2301      	movs	r3, #1
 800689c:	4642      	mov	r2, r8
 800689e:	4631      	mov	r1, r6
 80068a0:	4628      	mov	r0, r5
 80068a2:	47b8      	blx	r7
 80068a4:	3001      	adds	r0, #1
 80068a6:	f43f ae78 	beq.w	800659a <_printf_float+0xb6>
 80068aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068ae:	4631      	mov	r1, r6
 80068b0:	4628      	mov	r0, r5
 80068b2:	47b8      	blx	r7
 80068b4:	3001      	adds	r0, #1
 80068b6:	f43f ae70 	beq.w	800659a <_printf_float+0xb6>
 80068ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80068be:	2200      	movs	r2, #0
 80068c0:	2300      	movs	r3, #0
 80068c2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80068c6:	f7fa f907 	bl	8000ad8 <__aeabi_dcmpeq>
 80068ca:	b9c0      	cbnz	r0, 80068fe <_printf_float+0x41a>
 80068cc:	4653      	mov	r3, sl
 80068ce:	f108 0201 	add.w	r2, r8, #1
 80068d2:	4631      	mov	r1, r6
 80068d4:	4628      	mov	r0, r5
 80068d6:	47b8      	blx	r7
 80068d8:	3001      	adds	r0, #1
 80068da:	d10c      	bne.n	80068f6 <_printf_float+0x412>
 80068dc:	e65d      	b.n	800659a <_printf_float+0xb6>
 80068de:	2301      	movs	r3, #1
 80068e0:	465a      	mov	r2, fp
 80068e2:	4631      	mov	r1, r6
 80068e4:	4628      	mov	r0, r5
 80068e6:	47b8      	blx	r7
 80068e8:	3001      	adds	r0, #1
 80068ea:	f43f ae56 	beq.w	800659a <_printf_float+0xb6>
 80068ee:	f108 0801 	add.w	r8, r8, #1
 80068f2:	45d0      	cmp	r8, sl
 80068f4:	dbf3      	blt.n	80068de <_printf_float+0x3fa>
 80068f6:	464b      	mov	r3, r9
 80068f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80068fc:	e6df      	b.n	80066be <_printf_float+0x1da>
 80068fe:	f04f 0800 	mov.w	r8, #0
 8006902:	f104 0b1a 	add.w	fp, r4, #26
 8006906:	e7f4      	b.n	80068f2 <_printf_float+0x40e>
 8006908:	2301      	movs	r3, #1
 800690a:	4642      	mov	r2, r8
 800690c:	e7e1      	b.n	80068d2 <_printf_float+0x3ee>
 800690e:	2301      	movs	r3, #1
 8006910:	464a      	mov	r2, r9
 8006912:	4631      	mov	r1, r6
 8006914:	4628      	mov	r0, r5
 8006916:	47b8      	blx	r7
 8006918:	3001      	adds	r0, #1
 800691a:	f43f ae3e 	beq.w	800659a <_printf_float+0xb6>
 800691e:	f108 0801 	add.w	r8, r8, #1
 8006922:	68e3      	ldr	r3, [r4, #12]
 8006924:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006926:	1a5b      	subs	r3, r3, r1
 8006928:	4543      	cmp	r3, r8
 800692a:	dcf0      	bgt.n	800690e <_printf_float+0x42a>
 800692c:	e6fc      	b.n	8006728 <_printf_float+0x244>
 800692e:	f04f 0800 	mov.w	r8, #0
 8006932:	f104 0919 	add.w	r9, r4, #25
 8006936:	e7f4      	b.n	8006922 <_printf_float+0x43e>

08006938 <_printf_common>:
 8006938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800693c:	4616      	mov	r6, r2
 800693e:	4698      	mov	r8, r3
 8006940:	688a      	ldr	r2, [r1, #8]
 8006942:	690b      	ldr	r3, [r1, #16]
 8006944:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006948:	4293      	cmp	r3, r2
 800694a:	bfb8      	it	lt
 800694c:	4613      	movlt	r3, r2
 800694e:	6033      	str	r3, [r6, #0]
 8006950:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006954:	4607      	mov	r7, r0
 8006956:	460c      	mov	r4, r1
 8006958:	b10a      	cbz	r2, 800695e <_printf_common+0x26>
 800695a:	3301      	adds	r3, #1
 800695c:	6033      	str	r3, [r6, #0]
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	0699      	lsls	r1, r3, #26
 8006962:	bf42      	ittt	mi
 8006964:	6833      	ldrmi	r3, [r6, #0]
 8006966:	3302      	addmi	r3, #2
 8006968:	6033      	strmi	r3, [r6, #0]
 800696a:	6825      	ldr	r5, [r4, #0]
 800696c:	f015 0506 	ands.w	r5, r5, #6
 8006970:	d106      	bne.n	8006980 <_printf_common+0x48>
 8006972:	f104 0a19 	add.w	sl, r4, #25
 8006976:	68e3      	ldr	r3, [r4, #12]
 8006978:	6832      	ldr	r2, [r6, #0]
 800697a:	1a9b      	subs	r3, r3, r2
 800697c:	42ab      	cmp	r3, r5
 800697e:	dc26      	bgt.n	80069ce <_printf_common+0x96>
 8006980:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006984:	6822      	ldr	r2, [r4, #0]
 8006986:	3b00      	subs	r3, #0
 8006988:	bf18      	it	ne
 800698a:	2301      	movne	r3, #1
 800698c:	0692      	lsls	r2, r2, #26
 800698e:	d42b      	bmi.n	80069e8 <_printf_common+0xb0>
 8006990:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006994:	4641      	mov	r1, r8
 8006996:	4638      	mov	r0, r7
 8006998:	47c8      	blx	r9
 800699a:	3001      	adds	r0, #1
 800699c:	d01e      	beq.n	80069dc <_printf_common+0xa4>
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	6922      	ldr	r2, [r4, #16]
 80069a2:	f003 0306 	and.w	r3, r3, #6
 80069a6:	2b04      	cmp	r3, #4
 80069a8:	bf02      	ittt	eq
 80069aa:	68e5      	ldreq	r5, [r4, #12]
 80069ac:	6833      	ldreq	r3, [r6, #0]
 80069ae:	1aed      	subeq	r5, r5, r3
 80069b0:	68a3      	ldr	r3, [r4, #8]
 80069b2:	bf0c      	ite	eq
 80069b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069b8:	2500      	movne	r5, #0
 80069ba:	4293      	cmp	r3, r2
 80069bc:	bfc4      	itt	gt
 80069be:	1a9b      	subgt	r3, r3, r2
 80069c0:	18ed      	addgt	r5, r5, r3
 80069c2:	2600      	movs	r6, #0
 80069c4:	341a      	adds	r4, #26
 80069c6:	42b5      	cmp	r5, r6
 80069c8:	d11a      	bne.n	8006a00 <_printf_common+0xc8>
 80069ca:	2000      	movs	r0, #0
 80069cc:	e008      	b.n	80069e0 <_printf_common+0xa8>
 80069ce:	2301      	movs	r3, #1
 80069d0:	4652      	mov	r2, sl
 80069d2:	4641      	mov	r1, r8
 80069d4:	4638      	mov	r0, r7
 80069d6:	47c8      	blx	r9
 80069d8:	3001      	adds	r0, #1
 80069da:	d103      	bne.n	80069e4 <_printf_common+0xac>
 80069dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e4:	3501      	adds	r5, #1
 80069e6:	e7c6      	b.n	8006976 <_printf_common+0x3e>
 80069e8:	18e1      	adds	r1, r4, r3
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	2030      	movs	r0, #48	@ 0x30
 80069ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069f2:	4422      	add	r2, r4
 80069f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069fc:	3302      	adds	r3, #2
 80069fe:	e7c7      	b.n	8006990 <_printf_common+0x58>
 8006a00:	2301      	movs	r3, #1
 8006a02:	4622      	mov	r2, r4
 8006a04:	4641      	mov	r1, r8
 8006a06:	4638      	mov	r0, r7
 8006a08:	47c8      	blx	r9
 8006a0a:	3001      	adds	r0, #1
 8006a0c:	d0e6      	beq.n	80069dc <_printf_common+0xa4>
 8006a0e:	3601      	adds	r6, #1
 8006a10:	e7d9      	b.n	80069c6 <_printf_common+0x8e>
	...

08006a14 <_printf_i>:
 8006a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a18:	7e0f      	ldrb	r7, [r1, #24]
 8006a1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a1c:	2f78      	cmp	r7, #120	@ 0x78
 8006a1e:	4691      	mov	r9, r2
 8006a20:	4680      	mov	r8, r0
 8006a22:	460c      	mov	r4, r1
 8006a24:	469a      	mov	sl, r3
 8006a26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a2a:	d807      	bhi.n	8006a3c <_printf_i+0x28>
 8006a2c:	2f62      	cmp	r7, #98	@ 0x62
 8006a2e:	d80a      	bhi.n	8006a46 <_printf_i+0x32>
 8006a30:	2f00      	cmp	r7, #0
 8006a32:	f000 80d2 	beq.w	8006bda <_printf_i+0x1c6>
 8006a36:	2f58      	cmp	r7, #88	@ 0x58
 8006a38:	f000 80b9 	beq.w	8006bae <_printf_i+0x19a>
 8006a3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a44:	e03a      	b.n	8006abc <_printf_i+0xa8>
 8006a46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a4a:	2b15      	cmp	r3, #21
 8006a4c:	d8f6      	bhi.n	8006a3c <_printf_i+0x28>
 8006a4e:	a101      	add	r1, pc, #4	@ (adr r1, 8006a54 <_printf_i+0x40>)
 8006a50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a54:	08006aad 	.word	0x08006aad
 8006a58:	08006ac1 	.word	0x08006ac1
 8006a5c:	08006a3d 	.word	0x08006a3d
 8006a60:	08006a3d 	.word	0x08006a3d
 8006a64:	08006a3d 	.word	0x08006a3d
 8006a68:	08006a3d 	.word	0x08006a3d
 8006a6c:	08006ac1 	.word	0x08006ac1
 8006a70:	08006a3d 	.word	0x08006a3d
 8006a74:	08006a3d 	.word	0x08006a3d
 8006a78:	08006a3d 	.word	0x08006a3d
 8006a7c:	08006a3d 	.word	0x08006a3d
 8006a80:	08006bc1 	.word	0x08006bc1
 8006a84:	08006aeb 	.word	0x08006aeb
 8006a88:	08006b7b 	.word	0x08006b7b
 8006a8c:	08006a3d 	.word	0x08006a3d
 8006a90:	08006a3d 	.word	0x08006a3d
 8006a94:	08006be3 	.word	0x08006be3
 8006a98:	08006a3d 	.word	0x08006a3d
 8006a9c:	08006aeb 	.word	0x08006aeb
 8006aa0:	08006a3d 	.word	0x08006a3d
 8006aa4:	08006a3d 	.word	0x08006a3d
 8006aa8:	08006b83 	.word	0x08006b83
 8006aac:	6833      	ldr	r3, [r6, #0]
 8006aae:	1d1a      	adds	r2, r3, #4
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6032      	str	r2, [r6, #0]
 8006ab4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ab8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006abc:	2301      	movs	r3, #1
 8006abe:	e09d      	b.n	8006bfc <_printf_i+0x1e8>
 8006ac0:	6833      	ldr	r3, [r6, #0]
 8006ac2:	6820      	ldr	r0, [r4, #0]
 8006ac4:	1d19      	adds	r1, r3, #4
 8006ac6:	6031      	str	r1, [r6, #0]
 8006ac8:	0606      	lsls	r6, r0, #24
 8006aca:	d501      	bpl.n	8006ad0 <_printf_i+0xbc>
 8006acc:	681d      	ldr	r5, [r3, #0]
 8006ace:	e003      	b.n	8006ad8 <_printf_i+0xc4>
 8006ad0:	0645      	lsls	r5, r0, #25
 8006ad2:	d5fb      	bpl.n	8006acc <_printf_i+0xb8>
 8006ad4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ad8:	2d00      	cmp	r5, #0
 8006ada:	da03      	bge.n	8006ae4 <_printf_i+0xd0>
 8006adc:	232d      	movs	r3, #45	@ 0x2d
 8006ade:	426d      	negs	r5, r5
 8006ae0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ae4:	4859      	ldr	r0, [pc, #356]	@ (8006c4c <_printf_i+0x238>)
 8006ae6:	230a      	movs	r3, #10
 8006ae8:	e011      	b.n	8006b0e <_printf_i+0xfa>
 8006aea:	6821      	ldr	r1, [r4, #0]
 8006aec:	6833      	ldr	r3, [r6, #0]
 8006aee:	0608      	lsls	r0, r1, #24
 8006af0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006af4:	d402      	bmi.n	8006afc <_printf_i+0xe8>
 8006af6:	0649      	lsls	r1, r1, #25
 8006af8:	bf48      	it	mi
 8006afa:	b2ad      	uxthmi	r5, r5
 8006afc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006afe:	4853      	ldr	r0, [pc, #332]	@ (8006c4c <_printf_i+0x238>)
 8006b00:	6033      	str	r3, [r6, #0]
 8006b02:	bf14      	ite	ne
 8006b04:	230a      	movne	r3, #10
 8006b06:	2308      	moveq	r3, #8
 8006b08:	2100      	movs	r1, #0
 8006b0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b0e:	6866      	ldr	r6, [r4, #4]
 8006b10:	60a6      	str	r6, [r4, #8]
 8006b12:	2e00      	cmp	r6, #0
 8006b14:	bfa2      	ittt	ge
 8006b16:	6821      	ldrge	r1, [r4, #0]
 8006b18:	f021 0104 	bicge.w	r1, r1, #4
 8006b1c:	6021      	strge	r1, [r4, #0]
 8006b1e:	b90d      	cbnz	r5, 8006b24 <_printf_i+0x110>
 8006b20:	2e00      	cmp	r6, #0
 8006b22:	d04b      	beq.n	8006bbc <_printf_i+0x1a8>
 8006b24:	4616      	mov	r6, r2
 8006b26:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b2a:	fb03 5711 	mls	r7, r3, r1, r5
 8006b2e:	5dc7      	ldrb	r7, [r0, r7]
 8006b30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b34:	462f      	mov	r7, r5
 8006b36:	42bb      	cmp	r3, r7
 8006b38:	460d      	mov	r5, r1
 8006b3a:	d9f4      	bls.n	8006b26 <_printf_i+0x112>
 8006b3c:	2b08      	cmp	r3, #8
 8006b3e:	d10b      	bne.n	8006b58 <_printf_i+0x144>
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	07df      	lsls	r7, r3, #31
 8006b44:	d508      	bpl.n	8006b58 <_printf_i+0x144>
 8006b46:	6923      	ldr	r3, [r4, #16]
 8006b48:	6861      	ldr	r1, [r4, #4]
 8006b4a:	4299      	cmp	r1, r3
 8006b4c:	bfde      	ittt	le
 8006b4e:	2330      	movle	r3, #48	@ 0x30
 8006b50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b54:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006b58:	1b92      	subs	r2, r2, r6
 8006b5a:	6122      	str	r2, [r4, #16]
 8006b5c:	f8cd a000 	str.w	sl, [sp]
 8006b60:	464b      	mov	r3, r9
 8006b62:	aa03      	add	r2, sp, #12
 8006b64:	4621      	mov	r1, r4
 8006b66:	4640      	mov	r0, r8
 8006b68:	f7ff fee6 	bl	8006938 <_printf_common>
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	d14a      	bne.n	8006c06 <_printf_i+0x1f2>
 8006b70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b74:	b004      	add	sp, #16
 8006b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	f043 0320 	orr.w	r3, r3, #32
 8006b80:	6023      	str	r3, [r4, #0]
 8006b82:	4833      	ldr	r0, [pc, #204]	@ (8006c50 <_printf_i+0x23c>)
 8006b84:	2778      	movs	r7, #120	@ 0x78
 8006b86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	6831      	ldr	r1, [r6, #0]
 8006b8e:	061f      	lsls	r7, r3, #24
 8006b90:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b94:	d402      	bmi.n	8006b9c <_printf_i+0x188>
 8006b96:	065f      	lsls	r7, r3, #25
 8006b98:	bf48      	it	mi
 8006b9a:	b2ad      	uxthmi	r5, r5
 8006b9c:	6031      	str	r1, [r6, #0]
 8006b9e:	07d9      	lsls	r1, r3, #31
 8006ba0:	bf44      	itt	mi
 8006ba2:	f043 0320 	orrmi.w	r3, r3, #32
 8006ba6:	6023      	strmi	r3, [r4, #0]
 8006ba8:	b11d      	cbz	r5, 8006bb2 <_printf_i+0x19e>
 8006baa:	2310      	movs	r3, #16
 8006bac:	e7ac      	b.n	8006b08 <_printf_i+0xf4>
 8006bae:	4827      	ldr	r0, [pc, #156]	@ (8006c4c <_printf_i+0x238>)
 8006bb0:	e7e9      	b.n	8006b86 <_printf_i+0x172>
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	f023 0320 	bic.w	r3, r3, #32
 8006bb8:	6023      	str	r3, [r4, #0]
 8006bba:	e7f6      	b.n	8006baa <_printf_i+0x196>
 8006bbc:	4616      	mov	r6, r2
 8006bbe:	e7bd      	b.n	8006b3c <_printf_i+0x128>
 8006bc0:	6833      	ldr	r3, [r6, #0]
 8006bc2:	6825      	ldr	r5, [r4, #0]
 8006bc4:	6961      	ldr	r1, [r4, #20]
 8006bc6:	1d18      	adds	r0, r3, #4
 8006bc8:	6030      	str	r0, [r6, #0]
 8006bca:	062e      	lsls	r6, r5, #24
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	d501      	bpl.n	8006bd4 <_printf_i+0x1c0>
 8006bd0:	6019      	str	r1, [r3, #0]
 8006bd2:	e002      	b.n	8006bda <_printf_i+0x1c6>
 8006bd4:	0668      	lsls	r0, r5, #25
 8006bd6:	d5fb      	bpl.n	8006bd0 <_printf_i+0x1bc>
 8006bd8:	8019      	strh	r1, [r3, #0]
 8006bda:	2300      	movs	r3, #0
 8006bdc:	6123      	str	r3, [r4, #16]
 8006bde:	4616      	mov	r6, r2
 8006be0:	e7bc      	b.n	8006b5c <_printf_i+0x148>
 8006be2:	6833      	ldr	r3, [r6, #0]
 8006be4:	1d1a      	adds	r2, r3, #4
 8006be6:	6032      	str	r2, [r6, #0]
 8006be8:	681e      	ldr	r6, [r3, #0]
 8006bea:	6862      	ldr	r2, [r4, #4]
 8006bec:	2100      	movs	r1, #0
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f7f9 faf6 	bl	80001e0 <memchr>
 8006bf4:	b108      	cbz	r0, 8006bfa <_printf_i+0x1e6>
 8006bf6:	1b80      	subs	r0, r0, r6
 8006bf8:	6060      	str	r0, [r4, #4]
 8006bfa:	6863      	ldr	r3, [r4, #4]
 8006bfc:	6123      	str	r3, [r4, #16]
 8006bfe:	2300      	movs	r3, #0
 8006c00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c04:	e7aa      	b.n	8006b5c <_printf_i+0x148>
 8006c06:	6923      	ldr	r3, [r4, #16]
 8006c08:	4632      	mov	r2, r6
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	4640      	mov	r0, r8
 8006c0e:	47d0      	blx	sl
 8006c10:	3001      	adds	r0, #1
 8006c12:	d0ad      	beq.n	8006b70 <_printf_i+0x15c>
 8006c14:	6823      	ldr	r3, [r4, #0]
 8006c16:	079b      	lsls	r3, r3, #30
 8006c18:	d413      	bmi.n	8006c42 <_printf_i+0x22e>
 8006c1a:	68e0      	ldr	r0, [r4, #12]
 8006c1c:	9b03      	ldr	r3, [sp, #12]
 8006c1e:	4298      	cmp	r0, r3
 8006c20:	bfb8      	it	lt
 8006c22:	4618      	movlt	r0, r3
 8006c24:	e7a6      	b.n	8006b74 <_printf_i+0x160>
 8006c26:	2301      	movs	r3, #1
 8006c28:	4632      	mov	r2, r6
 8006c2a:	4649      	mov	r1, r9
 8006c2c:	4640      	mov	r0, r8
 8006c2e:	47d0      	blx	sl
 8006c30:	3001      	adds	r0, #1
 8006c32:	d09d      	beq.n	8006b70 <_printf_i+0x15c>
 8006c34:	3501      	adds	r5, #1
 8006c36:	68e3      	ldr	r3, [r4, #12]
 8006c38:	9903      	ldr	r1, [sp, #12]
 8006c3a:	1a5b      	subs	r3, r3, r1
 8006c3c:	42ab      	cmp	r3, r5
 8006c3e:	dcf2      	bgt.n	8006c26 <_printf_i+0x212>
 8006c40:	e7eb      	b.n	8006c1a <_printf_i+0x206>
 8006c42:	2500      	movs	r5, #0
 8006c44:	f104 0619 	add.w	r6, r4, #25
 8006c48:	e7f5      	b.n	8006c36 <_printf_i+0x222>
 8006c4a:	bf00      	nop
 8006c4c:	0800ad72 	.word	0x0800ad72
 8006c50:	0800ad83 	.word	0x0800ad83

08006c54 <_scanf_float>:
 8006c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c58:	b087      	sub	sp, #28
 8006c5a:	4617      	mov	r7, r2
 8006c5c:	9303      	str	r3, [sp, #12]
 8006c5e:	688b      	ldr	r3, [r1, #8]
 8006c60:	1e5a      	subs	r2, r3, #1
 8006c62:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006c66:	bf81      	itttt	hi
 8006c68:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006c6c:	eb03 0b05 	addhi.w	fp, r3, r5
 8006c70:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006c74:	608b      	strhi	r3, [r1, #8]
 8006c76:	680b      	ldr	r3, [r1, #0]
 8006c78:	460a      	mov	r2, r1
 8006c7a:	f04f 0500 	mov.w	r5, #0
 8006c7e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006c82:	f842 3b1c 	str.w	r3, [r2], #28
 8006c86:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006c8a:	4680      	mov	r8, r0
 8006c8c:	460c      	mov	r4, r1
 8006c8e:	bf98      	it	ls
 8006c90:	f04f 0b00 	movls.w	fp, #0
 8006c94:	9201      	str	r2, [sp, #4]
 8006c96:	4616      	mov	r6, r2
 8006c98:	46aa      	mov	sl, r5
 8006c9a:	46a9      	mov	r9, r5
 8006c9c:	9502      	str	r5, [sp, #8]
 8006c9e:	68a2      	ldr	r2, [r4, #8]
 8006ca0:	b152      	cbz	r2, 8006cb8 <_scanf_float+0x64>
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2b4e      	cmp	r3, #78	@ 0x4e
 8006ca8:	d864      	bhi.n	8006d74 <_scanf_float+0x120>
 8006caa:	2b40      	cmp	r3, #64	@ 0x40
 8006cac:	d83c      	bhi.n	8006d28 <_scanf_float+0xd4>
 8006cae:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006cb2:	b2c8      	uxtb	r0, r1
 8006cb4:	280e      	cmp	r0, #14
 8006cb6:	d93a      	bls.n	8006d2e <_scanf_float+0xda>
 8006cb8:	f1b9 0f00 	cmp.w	r9, #0
 8006cbc:	d003      	beq.n	8006cc6 <_scanf_float+0x72>
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006cca:	f1ba 0f01 	cmp.w	sl, #1
 8006cce:	f200 8117 	bhi.w	8006f00 <_scanf_float+0x2ac>
 8006cd2:	9b01      	ldr	r3, [sp, #4]
 8006cd4:	429e      	cmp	r6, r3
 8006cd6:	f200 8108 	bhi.w	8006eea <_scanf_float+0x296>
 8006cda:	2001      	movs	r0, #1
 8006cdc:	b007      	add	sp, #28
 8006cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006ce6:	2a0d      	cmp	r2, #13
 8006ce8:	d8e6      	bhi.n	8006cb8 <_scanf_float+0x64>
 8006cea:	a101      	add	r1, pc, #4	@ (adr r1, 8006cf0 <_scanf_float+0x9c>)
 8006cec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006cf0:	08006e37 	.word	0x08006e37
 8006cf4:	08006cb9 	.word	0x08006cb9
 8006cf8:	08006cb9 	.word	0x08006cb9
 8006cfc:	08006cb9 	.word	0x08006cb9
 8006d00:	08006e97 	.word	0x08006e97
 8006d04:	08006e6f 	.word	0x08006e6f
 8006d08:	08006cb9 	.word	0x08006cb9
 8006d0c:	08006cb9 	.word	0x08006cb9
 8006d10:	08006e45 	.word	0x08006e45
 8006d14:	08006cb9 	.word	0x08006cb9
 8006d18:	08006cb9 	.word	0x08006cb9
 8006d1c:	08006cb9 	.word	0x08006cb9
 8006d20:	08006cb9 	.word	0x08006cb9
 8006d24:	08006dfd 	.word	0x08006dfd
 8006d28:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006d2c:	e7db      	b.n	8006ce6 <_scanf_float+0x92>
 8006d2e:	290e      	cmp	r1, #14
 8006d30:	d8c2      	bhi.n	8006cb8 <_scanf_float+0x64>
 8006d32:	a001      	add	r0, pc, #4	@ (adr r0, 8006d38 <_scanf_float+0xe4>)
 8006d34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d38:	08006ded 	.word	0x08006ded
 8006d3c:	08006cb9 	.word	0x08006cb9
 8006d40:	08006ded 	.word	0x08006ded
 8006d44:	08006e83 	.word	0x08006e83
 8006d48:	08006cb9 	.word	0x08006cb9
 8006d4c:	08006d95 	.word	0x08006d95
 8006d50:	08006dd3 	.word	0x08006dd3
 8006d54:	08006dd3 	.word	0x08006dd3
 8006d58:	08006dd3 	.word	0x08006dd3
 8006d5c:	08006dd3 	.word	0x08006dd3
 8006d60:	08006dd3 	.word	0x08006dd3
 8006d64:	08006dd3 	.word	0x08006dd3
 8006d68:	08006dd3 	.word	0x08006dd3
 8006d6c:	08006dd3 	.word	0x08006dd3
 8006d70:	08006dd3 	.word	0x08006dd3
 8006d74:	2b6e      	cmp	r3, #110	@ 0x6e
 8006d76:	d809      	bhi.n	8006d8c <_scanf_float+0x138>
 8006d78:	2b60      	cmp	r3, #96	@ 0x60
 8006d7a:	d8b2      	bhi.n	8006ce2 <_scanf_float+0x8e>
 8006d7c:	2b54      	cmp	r3, #84	@ 0x54
 8006d7e:	d07b      	beq.n	8006e78 <_scanf_float+0x224>
 8006d80:	2b59      	cmp	r3, #89	@ 0x59
 8006d82:	d199      	bne.n	8006cb8 <_scanf_float+0x64>
 8006d84:	2d07      	cmp	r5, #7
 8006d86:	d197      	bne.n	8006cb8 <_scanf_float+0x64>
 8006d88:	2508      	movs	r5, #8
 8006d8a:	e02c      	b.n	8006de6 <_scanf_float+0x192>
 8006d8c:	2b74      	cmp	r3, #116	@ 0x74
 8006d8e:	d073      	beq.n	8006e78 <_scanf_float+0x224>
 8006d90:	2b79      	cmp	r3, #121	@ 0x79
 8006d92:	e7f6      	b.n	8006d82 <_scanf_float+0x12e>
 8006d94:	6821      	ldr	r1, [r4, #0]
 8006d96:	05c8      	lsls	r0, r1, #23
 8006d98:	d51b      	bpl.n	8006dd2 <_scanf_float+0x17e>
 8006d9a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006d9e:	6021      	str	r1, [r4, #0]
 8006da0:	f109 0901 	add.w	r9, r9, #1
 8006da4:	f1bb 0f00 	cmp.w	fp, #0
 8006da8:	d003      	beq.n	8006db2 <_scanf_float+0x15e>
 8006daa:	3201      	adds	r2, #1
 8006dac:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8006db0:	60a2      	str	r2, [r4, #8]
 8006db2:	68a3      	ldr	r3, [r4, #8]
 8006db4:	3b01      	subs	r3, #1
 8006db6:	60a3      	str	r3, [r4, #8]
 8006db8:	6923      	ldr	r3, [r4, #16]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	6123      	str	r3, [r4, #16]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	607b      	str	r3, [r7, #4]
 8006dc6:	f340 8087 	ble.w	8006ed8 <_scanf_float+0x284>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	603b      	str	r3, [r7, #0]
 8006dd0:	e765      	b.n	8006c9e <_scanf_float+0x4a>
 8006dd2:	eb1a 0105 	adds.w	r1, sl, r5
 8006dd6:	f47f af6f 	bne.w	8006cb8 <_scanf_float+0x64>
 8006dda:	6822      	ldr	r2, [r4, #0]
 8006ddc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006de0:	6022      	str	r2, [r4, #0]
 8006de2:	460d      	mov	r5, r1
 8006de4:	468a      	mov	sl, r1
 8006de6:	f806 3b01 	strb.w	r3, [r6], #1
 8006dea:	e7e2      	b.n	8006db2 <_scanf_float+0x15e>
 8006dec:	6822      	ldr	r2, [r4, #0]
 8006dee:	0610      	lsls	r0, r2, #24
 8006df0:	f57f af62 	bpl.w	8006cb8 <_scanf_float+0x64>
 8006df4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006df8:	6022      	str	r2, [r4, #0]
 8006dfa:	e7f4      	b.n	8006de6 <_scanf_float+0x192>
 8006dfc:	f1ba 0f00 	cmp.w	sl, #0
 8006e00:	d10e      	bne.n	8006e20 <_scanf_float+0x1cc>
 8006e02:	f1b9 0f00 	cmp.w	r9, #0
 8006e06:	d10e      	bne.n	8006e26 <_scanf_float+0x1d2>
 8006e08:	6822      	ldr	r2, [r4, #0]
 8006e0a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006e0e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006e12:	d108      	bne.n	8006e26 <_scanf_float+0x1d2>
 8006e14:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e18:	6022      	str	r2, [r4, #0]
 8006e1a:	f04f 0a01 	mov.w	sl, #1
 8006e1e:	e7e2      	b.n	8006de6 <_scanf_float+0x192>
 8006e20:	f1ba 0f02 	cmp.w	sl, #2
 8006e24:	d055      	beq.n	8006ed2 <_scanf_float+0x27e>
 8006e26:	2d01      	cmp	r5, #1
 8006e28:	d002      	beq.n	8006e30 <_scanf_float+0x1dc>
 8006e2a:	2d04      	cmp	r5, #4
 8006e2c:	f47f af44 	bne.w	8006cb8 <_scanf_float+0x64>
 8006e30:	3501      	adds	r5, #1
 8006e32:	b2ed      	uxtb	r5, r5
 8006e34:	e7d7      	b.n	8006de6 <_scanf_float+0x192>
 8006e36:	f1ba 0f01 	cmp.w	sl, #1
 8006e3a:	f47f af3d 	bne.w	8006cb8 <_scanf_float+0x64>
 8006e3e:	f04f 0a02 	mov.w	sl, #2
 8006e42:	e7d0      	b.n	8006de6 <_scanf_float+0x192>
 8006e44:	b97d      	cbnz	r5, 8006e66 <_scanf_float+0x212>
 8006e46:	f1b9 0f00 	cmp.w	r9, #0
 8006e4a:	f47f af38 	bne.w	8006cbe <_scanf_float+0x6a>
 8006e4e:	6822      	ldr	r2, [r4, #0]
 8006e50:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006e54:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006e58:	f040 8108 	bne.w	800706c <_scanf_float+0x418>
 8006e5c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e60:	6022      	str	r2, [r4, #0]
 8006e62:	2501      	movs	r5, #1
 8006e64:	e7bf      	b.n	8006de6 <_scanf_float+0x192>
 8006e66:	2d03      	cmp	r5, #3
 8006e68:	d0e2      	beq.n	8006e30 <_scanf_float+0x1dc>
 8006e6a:	2d05      	cmp	r5, #5
 8006e6c:	e7de      	b.n	8006e2c <_scanf_float+0x1d8>
 8006e6e:	2d02      	cmp	r5, #2
 8006e70:	f47f af22 	bne.w	8006cb8 <_scanf_float+0x64>
 8006e74:	2503      	movs	r5, #3
 8006e76:	e7b6      	b.n	8006de6 <_scanf_float+0x192>
 8006e78:	2d06      	cmp	r5, #6
 8006e7a:	f47f af1d 	bne.w	8006cb8 <_scanf_float+0x64>
 8006e7e:	2507      	movs	r5, #7
 8006e80:	e7b1      	b.n	8006de6 <_scanf_float+0x192>
 8006e82:	6822      	ldr	r2, [r4, #0]
 8006e84:	0591      	lsls	r1, r2, #22
 8006e86:	f57f af17 	bpl.w	8006cb8 <_scanf_float+0x64>
 8006e8a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006e8e:	6022      	str	r2, [r4, #0]
 8006e90:	f8cd 9008 	str.w	r9, [sp, #8]
 8006e94:	e7a7      	b.n	8006de6 <_scanf_float+0x192>
 8006e96:	6822      	ldr	r2, [r4, #0]
 8006e98:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006e9c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006ea0:	d006      	beq.n	8006eb0 <_scanf_float+0x25c>
 8006ea2:	0550      	lsls	r0, r2, #21
 8006ea4:	f57f af08 	bpl.w	8006cb8 <_scanf_float+0x64>
 8006ea8:	f1b9 0f00 	cmp.w	r9, #0
 8006eac:	f000 80de 	beq.w	800706c <_scanf_float+0x418>
 8006eb0:	0591      	lsls	r1, r2, #22
 8006eb2:	bf58      	it	pl
 8006eb4:	9902      	ldrpl	r1, [sp, #8]
 8006eb6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006eba:	bf58      	it	pl
 8006ebc:	eba9 0101 	subpl.w	r1, r9, r1
 8006ec0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006ec4:	bf58      	it	pl
 8006ec6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006eca:	6022      	str	r2, [r4, #0]
 8006ecc:	f04f 0900 	mov.w	r9, #0
 8006ed0:	e789      	b.n	8006de6 <_scanf_float+0x192>
 8006ed2:	f04f 0a03 	mov.w	sl, #3
 8006ed6:	e786      	b.n	8006de6 <_scanf_float+0x192>
 8006ed8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006edc:	4639      	mov	r1, r7
 8006ede:	4640      	mov	r0, r8
 8006ee0:	4798      	blx	r3
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	f43f aedb 	beq.w	8006c9e <_scanf_float+0x4a>
 8006ee8:	e6e6      	b.n	8006cb8 <_scanf_float+0x64>
 8006eea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006eee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ef2:	463a      	mov	r2, r7
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	4798      	blx	r3
 8006ef8:	6923      	ldr	r3, [r4, #16]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	6123      	str	r3, [r4, #16]
 8006efe:	e6e8      	b.n	8006cd2 <_scanf_float+0x7e>
 8006f00:	1e6b      	subs	r3, r5, #1
 8006f02:	2b06      	cmp	r3, #6
 8006f04:	d824      	bhi.n	8006f50 <_scanf_float+0x2fc>
 8006f06:	2d02      	cmp	r5, #2
 8006f08:	d836      	bhi.n	8006f78 <_scanf_float+0x324>
 8006f0a:	9b01      	ldr	r3, [sp, #4]
 8006f0c:	429e      	cmp	r6, r3
 8006f0e:	f67f aee4 	bls.w	8006cda <_scanf_float+0x86>
 8006f12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f1a:	463a      	mov	r2, r7
 8006f1c:	4640      	mov	r0, r8
 8006f1e:	4798      	blx	r3
 8006f20:	6923      	ldr	r3, [r4, #16]
 8006f22:	3b01      	subs	r3, #1
 8006f24:	6123      	str	r3, [r4, #16]
 8006f26:	e7f0      	b.n	8006f0a <_scanf_float+0x2b6>
 8006f28:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f2c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006f30:	463a      	mov	r2, r7
 8006f32:	4640      	mov	r0, r8
 8006f34:	4798      	blx	r3
 8006f36:	6923      	ldr	r3, [r4, #16]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	6123      	str	r3, [r4, #16]
 8006f3c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006f40:	fa5f fa8a 	uxtb.w	sl, sl
 8006f44:	f1ba 0f02 	cmp.w	sl, #2
 8006f48:	d1ee      	bne.n	8006f28 <_scanf_float+0x2d4>
 8006f4a:	3d03      	subs	r5, #3
 8006f4c:	b2ed      	uxtb	r5, r5
 8006f4e:	1b76      	subs	r6, r6, r5
 8006f50:	6823      	ldr	r3, [r4, #0]
 8006f52:	05da      	lsls	r2, r3, #23
 8006f54:	d530      	bpl.n	8006fb8 <_scanf_float+0x364>
 8006f56:	055b      	lsls	r3, r3, #21
 8006f58:	d511      	bpl.n	8006f7e <_scanf_float+0x32a>
 8006f5a:	9b01      	ldr	r3, [sp, #4]
 8006f5c:	429e      	cmp	r6, r3
 8006f5e:	f67f aebc 	bls.w	8006cda <_scanf_float+0x86>
 8006f62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f6a:	463a      	mov	r2, r7
 8006f6c:	4640      	mov	r0, r8
 8006f6e:	4798      	blx	r3
 8006f70:	6923      	ldr	r3, [r4, #16]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	6123      	str	r3, [r4, #16]
 8006f76:	e7f0      	b.n	8006f5a <_scanf_float+0x306>
 8006f78:	46aa      	mov	sl, r5
 8006f7a:	46b3      	mov	fp, r6
 8006f7c:	e7de      	b.n	8006f3c <_scanf_float+0x2e8>
 8006f7e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006f82:	6923      	ldr	r3, [r4, #16]
 8006f84:	2965      	cmp	r1, #101	@ 0x65
 8006f86:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006f8a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8006f8e:	6123      	str	r3, [r4, #16]
 8006f90:	d00c      	beq.n	8006fac <_scanf_float+0x358>
 8006f92:	2945      	cmp	r1, #69	@ 0x45
 8006f94:	d00a      	beq.n	8006fac <_scanf_float+0x358>
 8006f96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f9a:	463a      	mov	r2, r7
 8006f9c:	4640      	mov	r0, r8
 8006f9e:	4798      	blx	r3
 8006fa0:	6923      	ldr	r3, [r4, #16]
 8006fa2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	1eb5      	subs	r5, r6, #2
 8006faa:	6123      	str	r3, [r4, #16]
 8006fac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fb0:	463a      	mov	r2, r7
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	4798      	blx	r3
 8006fb6:	462e      	mov	r6, r5
 8006fb8:	6822      	ldr	r2, [r4, #0]
 8006fba:	f012 0210 	ands.w	r2, r2, #16
 8006fbe:	d001      	beq.n	8006fc4 <_scanf_float+0x370>
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	e68b      	b.n	8006cdc <_scanf_float+0x88>
 8006fc4:	7032      	strb	r2, [r6, #0]
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006fcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fd0:	d11c      	bne.n	800700c <_scanf_float+0x3b8>
 8006fd2:	9b02      	ldr	r3, [sp, #8]
 8006fd4:	454b      	cmp	r3, r9
 8006fd6:	eba3 0209 	sub.w	r2, r3, r9
 8006fda:	d123      	bne.n	8007024 <_scanf_float+0x3d0>
 8006fdc:	9901      	ldr	r1, [sp, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	4640      	mov	r0, r8
 8006fe2:	f002 fc91 	bl	8009908 <_strtod_r>
 8006fe6:	9b03      	ldr	r3, [sp, #12]
 8006fe8:	6821      	ldr	r1, [r4, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f011 0f02 	tst.w	r1, #2
 8006ff0:	ec57 6b10 	vmov	r6, r7, d0
 8006ff4:	f103 0204 	add.w	r2, r3, #4
 8006ff8:	d01f      	beq.n	800703a <_scanf_float+0x3e6>
 8006ffa:	9903      	ldr	r1, [sp, #12]
 8006ffc:	600a      	str	r2, [r1, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	e9c3 6700 	strd	r6, r7, [r3]
 8007004:	68e3      	ldr	r3, [r4, #12]
 8007006:	3301      	adds	r3, #1
 8007008:	60e3      	str	r3, [r4, #12]
 800700a:	e7d9      	b.n	8006fc0 <_scanf_float+0x36c>
 800700c:	9b04      	ldr	r3, [sp, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d0e4      	beq.n	8006fdc <_scanf_float+0x388>
 8007012:	9905      	ldr	r1, [sp, #20]
 8007014:	230a      	movs	r3, #10
 8007016:	3101      	adds	r1, #1
 8007018:	4640      	mov	r0, r8
 800701a:	f002 fcf5 	bl	8009a08 <_strtol_r>
 800701e:	9b04      	ldr	r3, [sp, #16]
 8007020:	9e05      	ldr	r6, [sp, #20]
 8007022:	1ac2      	subs	r2, r0, r3
 8007024:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007028:	429e      	cmp	r6, r3
 800702a:	bf28      	it	cs
 800702c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007030:	4910      	ldr	r1, [pc, #64]	@ (8007074 <_scanf_float+0x420>)
 8007032:	4630      	mov	r0, r6
 8007034:	f000 f918 	bl	8007268 <siprintf>
 8007038:	e7d0      	b.n	8006fdc <_scanf_float+0x388>
 800703a:	f011 0f04 	tst.w	r1, #4
 800703e:	9903      	ldr	r1, [sp, #12]
 8007040:	600a      	str	r2, [r1, #0]
 8007042:	d1dc      	bne.n	8006ffe <_scanf_float+0x3aa>
 8007044:	681d      	ldr	r5, [r3, #0]
 8007046:	4632      	mov	r2, r6
 8007048:	463b      	mov	r3, r7
 800704a:	4630      	mov	r0, r6
 800704c:	4639      	mov	r1, r7
 800704e:	f7f9 fd75 	bl	8000b3c <__aeabi_dcmpun>
 8007052:	b128      	cbz	r0, 8007060 <_scanf_float+0x40c>
 8007054:	4808      	ldr	r0, [pc, #32]	@ (8007078 <_scanf_float+0x424>)
 8007056:	f000 fa4f 	bl	80074f8 <nanf>
 800705a:	ed85 0a00 	vstr	s0, [r5]
 800705e:	e7d1      	b.n	8007004 <_scanf_float+0x3b0>
 8007060:	4630      	mov	r0, r6
 8007062:	4639      	mov	r1, r7
 8007064:	f7f9 fdc8 	bl	8000bf8 <__aeabi_d2f>
 8007068:	6028      	str	r0, [r5, #0]
 800706a:	e7cb      	b.n	8007004 <_scanf_float+0x3b0>
 800706c:	f04f 0900 	mov.w	r9, #0
 8007070:	e629      	b.n	8006cc6 <_scanf_float+0x72>
 8007072:	bf00      	nop
 8007074:	0800ad94 	.word	0x0800ad94
 8007078:	0800b12d 	.word	0x0800b12d

0800707c <std>:
 800707c:	2300      	movs	r3, #0
 800707e:	b510      	push	{r4, lr}
 8007080:	4604      	mov	r4, r0
 8007082:	e9c0 3300 	strd	r3, r3, [r0]
 8007086:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800708a:	6083      	str	r3, [r0, #8]
 800708c:	8181      	strh	r1, [r0, #12]
 800708e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007090:	81c2      	strh	r2, [r0, #14]
 8007092:	6183      	str	r3, [r0, #24]
 8007094:	4619      	mov	r1, r3
 8007096:	2208      	movs	r2, #8
 8007098:	305c      	adds	r0, #92	@ 0x5c
 800709a:	f000 f948 	bl	800732e <memset>
 800709e:	4b0d      	ldr	r3, [pc, #52]	@ (80070d4 <std+0x58>)
 80070a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80070a2:	4b0d      	ldr	r3, [pc, #52]	@ (80070d8 <std+0x5c>)
 80070a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80070a6:	4b0d      	ldr	r3, [pc, #52]	@ (80070dc <std+0x60>)
 80070a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80070aa:	4b0d      	ldr	r3, [pc, #52]	@ (80070e0 <std+0x64>)
 80070ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80070ae:	4b0d      	ldr	r3, [pc, #52]	@ (80070e4 <std+0x68>)
 80070b0:	6224      	str	r4, [r4, #32]
 80070b2:	429c      	cmp	r4, r3
 80070b4:	d006      	beq.n	80070c4 <std+0x48>
 80070b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80070ba:	4294      	cmp	r4, r2
 80070bc:	d002      	beq.n	80070c4 <std+0x48>
 80070be:	33d0      	adds	r3, #208	@ 0xd0
 80070c0:	429c      	cmp	r4, r3
 80070c2:	d105      	bne.n	80070d0 <std+0x54>
 80070c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80070c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070cc:	f000 ba02 	b.w	80074d4 <__retarget_lock_init_recursive>
 80070d0:	bd10      	pop	{r4, pc}
 80070d2:	bf00      	nop
 80070d4:	080072a9 	.word	0x080072a9
 80070d8:	080072cb 	.word	0x080072cb
 80070dc:	08007303 	.word	0x08007303
 80070e0:	08007327 	.word	0x08007327
 80070e4:	20004330 	.word	0x20004330

080070e8 <stdio_exit_handler>:
 80070e8:	4a02      	ldr	r2, [pc, #8]	@ (80070f4 <stdio_exit_handler+0xc>)
 80070ea:	4903      	ldr	r1, [pc, #12]	@ (80070f8 <stdio_exit_handler+0x10>)
 80070ec:	4803      	ldr	r0, [pc, #12]	@ (80070fc <stdio_exit_handler+0x14>)
 80070ee:	f000 b869 	b.w	80071c4 <_fwalk_sglue>
 80070f2:	bf00      	nop
 80070f4:	20000010 	.word	0x20000010
 80070f8:	08009dc5 	.word	0x08009dc5
 80070fc:	20000020 	.word	0x20000020

08007100 <cleanup_stdio>:
 8007100:	6841      	ldr	r1, [r0, #4]
 8007102:	4b0c      	ldr	r3, [pc, #48]	@ (8007134 <cleanup_stdio+0x34>)
 8007104:	4299      	cmp	r1, r3
 8007106:	b510      	push	{r4, lr}
 8007108:	4604      	mov	r4, r0
 800710a:	d001      	beq.n	8007110 <cleanup_stdio+0x10>
 800710c:	f002 fe5a 	bl	8009dc4 <_fflush_r>
 8007110:	68a1      	ldr	r1, [r4, #8]
 8007112:	4b09      	ldr	r3, [pc, #36]	@ (8007138 <cleanup_stdio+0x38>)
 8007114:	4299      	cmp	r1, r3
 8007116:	d002      	beq.n	800711e <cleanup_stdio+0x1e>
 8007118:	4620      	mov	r0, r4
 800711a:	f002 fe53 	bl	8009dc4 <_fflush_r>
 800711e:	68e1      	ldr	r1, [r4, #12]
 8007120:	4b06      	ldr	r3, [pc, #24]	@ (800713c <cleanup_stdio+0x3c>)
 8007122:	4299      	cmp	r1, r3
 8007124:	d004      	beq.n	8007130 <cleanup_stdio+0x30>
 8007126:	4620      	mov	r0, r4
 8007128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800712c:	f002 be4a 	b.w	8009dc4 <_fflush_r>
 8007130:	bd10      	pop	{r4, pc}
 8007132:	bf00      	nop
 8007134:	20004330 	.word	0x20004330
 8007138:	20004398 	.word	0x20004398
 800713c:	20004400 	.word	0x20004400

08007140 <global_stdio_init.part.0>:
 8007140:	b510      	push	{r4, lr}
 8007142:	4b0b      	ldr	r3, [pc, #44]	@ (8007170 <global_stdio_init.part.0+0x30>)
 8007144:	4c0b      	ldr	r4, [pc, #44]	@ (8007174 <global_stdio_init.part.0+0x34>)
 8007146:	4a0c      	ldr	r2, [pc, #48]	@ (8007178 <global_stdio_init.part.0+0x38>)
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	4620      	mov	r0, r4
 800714c:	2200      	movs	r2, #0
 800714e:	2104      	movs	r1, #4
 8007150:	f7ff ff94 	bl	800707c <std>
 8007154:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007158:	2201      	movs	r2, #1
 800715a:	2109      	movs	r1, #9
 800715c:	f7ff ff8e 	bl	800707c <std>
 8007160:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007164:	2202      	movs	r2, #2
 8007166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800716a:	2112      	movs	r1, #18
 800716c:	f7ff bf86 	b.w	800707c <std>
 8007170:	20004468 	.word	0x20004468
 8007174:	20004330 	.word	0x20004330
 8007178:	080070e9 	.word	0x080070e9

0800717c <__sfp_lock_acquire>:
 800717c:	4801      	ldr	r0, [pc, #4]	@ (8007184 <__sfp_lock_acquire+0x8>)
 800717e:	f000 b9aa 	b.w	80074d6 <__retarget_lock_acquire_recursive>
 8007182:	bf00      	nop
 8007184:	20004471 	.word	0x20004471

08007188 <__sfp_lock_release>:
 8007188:	4801      	ldr	r0, [pc, #4]	@ (8007190 <__sfp_lock_release+0x8>)
 800718a:	f000 b9a5 	b.w	80074d8 <__retarget_lock_release_recursive>
 800718e:	bf00      	nop
 8007190:	20004471 	.word	0x20004471

08007194 <__sinit>:
 8007194:	b510      	push	{r4, lr}
 8007196:	4604      	mov	r4, r0
 8007198:	f7ff fff0 	bl	800717c <__sfp_lock_acquire>
 800719c:	6a23      	ldr	r3, [r4, #32]
 800719e:	b11b      	cbz	r3, 80071a8 <__sinit+0x14>
 80071a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071a4:	f7ff bff0 	b.w	8007188 <__sfp_lock_release>
 80071a8:	4b04      	ldr	r3, [pc, #16]	@ (80071bc <__sinit+0x28>)
 80071aa:	6223      	str	r3, [r4, #32]
 80071ac:	4b04      	ldr	r3, [pc, #16]	@ (80071c0 <__sinit+0x2c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1f5      	bne.n	80071a0 <__sinit+0xc>
 80071b4:	f7ff ffc4 	bl	8007140 <global_stdio_init.part.0>
 80071b8:	e7f2      	b.n	80071a0 <__sinit+0xc>
 80071ba:	bf00      	nop
 80071bc:	08007101 	.word	0x08007101
 80071c0:	20004468 	.word	0x20004468

080071c4 <_fwalk_sglue>:
 80071c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071c8:	4607      	mov	r7, r0
 80071ca:	4688      	mov	r8, r1
 80071cc:	4614      	mov	r4, r2
 80071ce:	2600      	movs	r6, #0
 80071d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071d4:	f1b9 0901 	subs.w	r9, r9, #1
 80071d8:	d505      	bpl.n	80071e6 <_fwalk_sglue+0x22>
 80071da:	6824      	ldr	r4, [r4, #0]
 80071dc:	2c00      	cmp	r4, #0
 80071de:	d1f7      	bne.n	80071d0 <_fwalk_sglue+0xc>
 80071e0:	4630      	mov	r0, r6
 80071e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071e6:	89ab      	ldrh	r3, [r5, #12]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d907      	bls.n	80071fc <_fwalk_sglue+0x38>
 80071ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071f0:	3301      	adds	r3, #1
 80071f2:	d003      	beq.n	80071fc <_fwalk_sglue+0x38>
 80071f4:	4629      	mov	r1, r5
 80071f6:	4638      	mov	r0, r7
 80071f8:	47c0      	blx	r8
 80071fa:	4306      	orrs	r6, r0
 80071fc:	3568      	adds	r5, #104	@ 0x68
 80071fe:	e7e9      	b.n	80071d4 <_fwalk_sglue+0x10>

08007200 <sniprintf>:
 8007200:	b40c      	push	{r2, r3}
 8007202:	b530      	push	{r4, r5, lr}
 8007204:	4b17      	ldr	r3, [pc, #92]	@ (8007264 <sniprintf+0x64>)
 8007206:	1e0c      	subs	r4, r1, #0
 8007208:	681d      	ldr	r5, [r3, #0]
 800720a:	b09d      	sub	sp, #116	@ 0x74
 800720c:	da08      	bge.n	8007220 <sniprintf+0x20>
 800720e:	238b      	movs	r3, #139	@ 0x8b
 8007210:	602b      	str	r3, [r5, #0]
 8007212:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007216:	b01d      	add	sp, #116	@ 0x74
 8007218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800721c:	b002      	add	sp, #8
 800721e:	4770      	bx	lr
 8007220:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007224:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007228:	bf14      	ite	ne
 800722a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800722e:	4623      	moveq	r3, r4
 8007230:	9304      	str	r3, [sp, #16]
 8007232:	9307      	str	r3, [sp, #28]
 8007234:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007238:	9002      	str	r0, [sp, #8]
 800723a:	9006      	str	r0, [sp, #24]
 800723c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007240:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007242:	ab21      	add	r3, sp, #132	@ 0x84
 8007244:	a902      	add	r1, sp, #8
 8007246:	4628      	mov	r0, r5
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	f002 fc3b 	bl	8009ac4 <_svfiprintf_r>
 800724e:	1c43      	adds	r3, r0, #1
 8007250:	bfbc      	itt	lt
 8007252:	238b      	movlt	r3, #139	@ 0x8b
 8007254:	602b      	strlt	r3, [r5, #0]
 8007256:	2c00      	cmp	r4, #0
 8007258:	d0dd      	beq.n	8007216 <sniprintf+0x16>
 800725a:	9b02      	ldr	r3, [sp, #8]
 800725c:	2200      	movs	r2, #0
 800725e:	701a      	strb	r2, [r3, #0]
 8007260:	e7d9      	b.n	8007216 <sniprintf+0x16>
 8007262:	bf00      	nop
 8007264:	2000001c 	.word	0x2000001c

08007268 <siprintf>:
 8007268:	b40e      	push	{r1, r2, r3}
 800726a:	b500      	push	{lr}
 800726c:	b09c      	sub	sp, #112	@ 0x70
 800726e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007270:	9002      	str	r0, [sp, #8]
 8007272:	9006      	str	r0, [sp, #24]
 8007274:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007278:	4809      	ldr	r0, [pc, #36]	@ (80072a0 <siprintf+0x38>)
 800727a:	9107      	str	r1, [sp, #28]
 800727c:	9104      	str	r1, [sp, #16]
 800727e:	4909      	ldr	r1, [pc, #36]	@ (80072a4 <siprintf+0x3c>)
 8007280:	f853 2b04 	ldr.w	r2, [r3], #4
 8007284:	9105      	str	r1, [sp, #20]
 8007286:	6800      	ldr	r0, [r0, #0]
 8007288:	9301      	str	r3, [sp, #4]
 800728a:	a902      	add	r1, sp, #8
 800728c:	f002 fc1a 	bl	8009ac4 <_svfiprintf_r>
 8007290:	9b02      	ldr	r3, [sp, #8]
 8007292:	2200      	movs	r2, #0
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	b01c      	add	sp, #112	@ 0x70
 8007298:	f85d eb04 	ldr.w	lr, [sp], #4
 800729c:	b003      	add	sp, #12
 800729e:	4770      	bx	lr
 80072a0:	2000001c 	.word	0x2000001c
 80072a4:	ffff0208 	.word	0xffff0208

080072a8 <__sread>:
 80072a8:	b510      	push	{r4, lr}
 80072aa:	460c      	mov	r4, r1
 80072ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072b0:	f000 f8c2 	bl	8007438 <_read_r>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	bfab      	itete	ge
 80072b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80072ba:	89a3      	ldrhlt	r3, [r4, #12]
 80072bc:	181b      	addge	r3, r3, r0
 80072be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80072c2:	bfac      	ite	ge
 80072c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80072c6:	81a3      	strhlt	r3, [r4, #12]
 80072c8:	bd10      	pop	{r4, pc}

080072ca <__swrite>:
 80072ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ce:	461f      	mov	r7, r3
 80072d0:	898b      	ldrh	r3, [r1, #12]
 80072d2:	05db      	lsls	r3, r3, #23
 80072d4:	4605      	mov	r5, r0
 80072d6:	460c      	mov	r4, r1
 80072d8:	4616      	mov	r6, r2
 80072da:	d505      	bpl.n	80072e8 <__swrite+0x1e>
 80072dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072e0:	2302      	movs	r3, #2
 80072e2:	2200      	movs	r2, #0
 80072e4:	f000 f896 	bl	8007414 <_lseek_r>
 80072e8:	89a3      	ldrh	r3, [r4, #12]
 80072ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072f2:	81a3      	strh	r3, [r4, #12]
 80072f4:	4632      	mov	r2, r6
 80072f6:	463b      	mov	r3, r7
 80072f8:	4628      	mov	r0, r5
 80072fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072fe:	f000 b8ad 	b.w	800745c <_write_r>

08007302 <__sseek>:
 8007302:	b510      	push	{r4, lr}
 8007304:	460c      	mov	r4, r1
 8007306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800730a:	f000 f883 	bl	8007414 <_lseek_r>
 800730e:	1c43      	adds	r3, r0, #1
 8007310:	89a3      	ldrh	r3, [r4, #12]
 8007312:	bf15      	itete	ne
 8007314:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007316:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800731a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800731e:	81a3      	strheq	r3, [r4, #12]
 8007320:	bf18      	it	ne
 8007322:	81a3      	strhne	r3, [r4, #12]
 8007324:	bd10      	pop	{r4, pc}

08007326 <__sclose>:
 8007326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800732a:	f000 b80d 	b.w	8007348 <_close_r>

0800732e <memset>:
 800732e:	4402      	add	r2, r0
 8007330:	4603      	mov	r3, r0
 8007332:	4293      	cmp	r3, r2
 8007334:	d100      	bne.n	8007338 <memset+0xa>
 8007336:	4770      	bx	lr
 8007338:	f803 1b01 	strb.w	r1, [r3], #1
 800733c:	e7f9      	b.n	8007332 <memset+0x4>
	...

08007340 <_localeconv_r>:
 8007340:	4800      	ldr	r0, [pc, #0]	@ (8007344 <_localeconv_r+0x4>)
 8007342:	4770      	bx	lr
 8007344:	2000015c 	.word	0x2000015c

08007348 <_close_r>:
 8007348:	b538      	push	{r3, r4, r5, lr}
 800734a:	4d06      	ldr	r5, [pc, #24]	@ (8007364 <_close_r+0x1c>)
 800734c:	2300      	movs	r3, #0
 800734e:	4604      	mov	r4, r0
 8007350:	4608      	mov	r0, r1
 8007352:	602b      	str	r3, [r5, #0]
 8007354:	f7fa fcd4 	bl	8001d00 <_close>
 8007358:	1c43      	adds	r3, r0, #1
 800735a:	d102      	bne.n	8007362 <_close_r+0x1a>
 800735c:	682b      	ldr	r3, [r5, #0]
 800735e:	b103      	cbz	r3, 8007362 <_close_r+0x1a>
 8007360:	6023      	str	r3, [r4, #0]
 8007362:	bd38      	pop	{r3, r4, r5, pc}
 8007364:	2000446c 	.word	0x2000446c

08007368 <_reclaim_reent>:
 8007368:	4b29      	ldr	r3, [pc, #164]	@ (8007410 <_reclaim_reent+0xa8>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4283      	cmp	r3, r0
 800736e:	b570      	push	{r4, r5, r6, lr}
 8007370:	4604      	mov	r4, r0
 8007372:	d04b      	beq.n	800740c <_reclaim_reent+0xa4>
 8007374:	69c3      	ldr	r3, [r0, #28]
 8007376:	b1ab      	cbz	r3, 80073a4 <_reclaim_reent+0x3c>
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	b16b      	cbz	r3, 8007398 <_reclaim_reent+0x30>
 800737c:	2500      	movs	r5, #0
 800737e:	69e3      	ldr	r3, [r4, #28]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	5959      	ldr	r1, [r3, r5]
 8007384:	2900      	cmp	r1, #0
 8007386:	d13b      	bne.n	8007400 <_reclaim_reent+0x98>
 8007388:	3504      	adds	r5, #4
 800738a:	2d80      	cmp	r5, #128	@ 0x80
 800738c:	d1f7      	bne.n	800737e <_reclaim_reent+0x16>
 800738e:	69e3      	ldr	r3, [r4, #28]
 8007390:	4620      	mov	r0, r4
 8007392:	68d9      	ldr	r1, [r3, #12]
 8007394:	f000 ff04 	bl	80081a0 <_free_r>
 8007398:	69e3      	ldr	r3, [r4, #28]
 800739a:	6819      	ldr	r1, [r3, #0]
 800739c:	b111      	cbz	r1, 80073a4 <_reclaim_reent+0x3c>
 800739e:	4620      	mov	r0, r4
 80073a0:	f000 fefe 	bl	80081a0 <_free_r>
 80073a4:	6961      	ldr	r1, [r4, #20]
 80073a6:	b111      	cbz	r1, 80073ae <_reclaim_reent+0x46>
 80073a8:	4620      	mov	r0, r4
 80073aa:	f000 fef9 	bl	80081a0 <_free_r>
 80073ae:	69e1      	ldr	r1, [r4, #28]
 80073b0:	b111      	cbz	r1, 80073b8 <_reclaim_reent+0x50>
 80073b2:	4620      	mov	r0, r4
 80073b4:	f000 fef4 	bl	80081a0 <_free_r>
 80073b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80073ba:	b111      	cbz	r1, 80073c2 <_reclaim_reent+0x5a>
 80073bc:	4620      	mov	r0, r4
 80073be:	f000 feef 	bl	80081a0 <_free_r>
 80073c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073c4:	b111      	cbz	r1, 80073cc <_reclaim_reent+0x64>
 80073c6:	4620      	mov	r0, r4
 80073c8:	f000 feea 	bl	80081a0 <_free_r>
 80073cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80073ce:	b111      	cbz	r1, 80073d6 <_reclaim_reent+0x6e>
 80073d0:	4620      	mov	r0, r4
 80073d2:	f000 fee5 	bl	80081a0 <_free_r>
 80073d6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80073d8:	b111      	cbz	r1, 80073e0 <_reclaim_reent+0x78>
 80073da:	4620      	mov	r0, r4
 80073dc:	f000 fee0 	bl	80081a0 <_free_r>
 80073e0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80073e2:	b111      	cbz	r1, 80073ea <_reclaim_reent+0x82>
 80073e4:	4620      	mov	r0, r4
 80073e6:	f000 fedb 	bl	80081a0 <_free_r>
 80073ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80073ec:	b111      	cbz	r1, 80073f4 <_reclaim_reent+0x8c>
 80073ee:	4620      	mov	r0, r4
 80073f0:	f000 fed6 	bl	80081a0 <_free_r>
 80073f4:	6a23      	ldr	r3, [r4, #32]
 80073f6:	b14b      	cbz	r3, 800740c <_reclaim_reent+0xa4>
 80073f8:	4620      	mov	r0, r4
 80073fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80073fe:	4718      	bx	r3
 8007400:	680e      	ldr	r6, [r1, #0]
 8007402:	4620      	mov	r0, r4
 8007404:	f000 fecc 	bl	80081a0 <_free_r>
 8007408:	4631      	mov	r1, r6
 800740a:	e7bb      	b.n	8007384 <_reclaim_reent+0x1c>
 800740c:	bd70      	pop	{r4, r5, r6, pc}
 800740e:	bf00      	nop
 8007410:	2000001c 	.word	0x2000001c

08007414 <_lseek_r>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	4d07      	ldr	r5, [pc, #28]	@ (8007434 <_lseek_r+0x20>)
 8007418:	4604      	mov	r4, r0
 800741a:	4608      	mov	r0, r1
 800741c:	4611      	mov	r1, r2
 800741e:	2200      	movs	r2, #0
 8007420:	602a      	str	r2, [r5, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	f7fa fc93 	bl	8001d4e <_lseek>
 8007428:	1c43      	adds	r3, r0, #1
 800742a:	d102      	bne.n	8007432 <_lseek_r+0x1e>
 800742c:	682b      	ldr	r3, [r5, #0]
 800742e:	b103      	cbz	r3, 8007432 <_lseek_r+0x1e>
 8007430:	6023      	str	r3, [r4, #0]
 8007432:	bd38      	pop	{r3, r4, r5, pc}
 8007434:	2000446c 	.word	0x2000446c

08007438 <_read_r>:
 8007438:	b538      	push	{r3, r4, r5, lr}
 800743a:	4d07      	ldr	r5, [pc, #28]	@ (8007458 <_read_r+0x20>)
 800743c:	4604      	mov	r4, r0
 800743e:	4608      	mov	r0, r1
 8007440:	4611      	mov	r1, r2
 8007442:	2200      	movs	r2, #0
 8007444:	602a      	str	r2, [r5, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	f7fa fc21 	bl	8001c8e <_read>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	d102      	bne.n	8007456 <_read_r+0x1e>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	b103      	cbz	r3, 8007456 <_read_r+0x1e>
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	bd38      	pop	{r3, r4, r5, pc}
 8007458:	2000446c 	.word	0x2000446c

0800745c <_write_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	4d07      	ldr	r5, [pc, #28]	@ (800747c <_write_r+0x20>)
 8007460:	4604      	mov	r4, r0
 8007462:	4608      	mov	r0, r1
 8007464:	4611      	mov	r1, r2
 8007466:	2200      	movs	r2, #0
 8007468:	602a      	str	r2, [r5, #0]
 800746a:	461a      	mov	r2, r3
 800746c:	f7fa fc2c 	bl	8001cc8 <_write>
 8007470:	1c43      	adds	r3, r0, #1
 8007472:	d102      	bne.n	800747a <_write_r+0x1e>
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	b103      	cbz	r3, 800747a <_write_r+0x1e>
 8007478:	6023      	str	r3, [r4, #0]
 800747a:	bd38      	pop	{r3, r4, r5, pc}
 800747c:	2000446c 	.word	0x2000446c

08007480 <__errno>:
 8007480:	4b01      	ldr	r3, [pc, #4]	@ (8007488 <__errno+0x8>)
 8007482:	6818      	ldr	r0, [r3, #0]
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	2000001c 	.word	0x2000001c

0800748c <__libc_init_array>:
 800748c:	b570      	push	{r4, r5, r6, lr}
 800748e:	4d0d      	ldr	r5, [pc, #52]	@ (80074c4 <__libc_init_array+0x38>)
 8007490:	4c0d      	ldr	r4, [pc, #52]	@ (80074c8 <__libc_init_array+0x3c>)
 8007492:	1b64      	subs	r4, r4, r5
 8007494:	10a4      	asrs	r4, r4, #2
 8007496:	2600      	movs	r6, #0
 8007498:	42a6      	cmp	r6, r4
 800749a:	d109      	bne.n	80074b0 <__libc_init_array+0x24>
 800749c:	4d0b      	ldr	r5, [pc, #44]	@ (80074cc <__libc_init_array+0x40>)
 800749e:	4c0c      	ldr	r4, [pc, #48]	@ (80074d0 <__libc_init_array+0x44>)
 80074a0:	f003 fb74 	bl	800ab8c <_init>
 80074a4:	1b64      	subs	r4, r4, r5
 80074a6:	10a4      	asrs	r4, r4, #2
 80074a8:	2600      	movs	r6, #0
 80074aa:	42a6      	cmp	r6, r4
 80074ac:	d105      	bne.n	80074ba <__libc_init_array+0x2e>
 80074ae:	bd70      	pop	{r4, r5, r6, pc}
 80074b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074b4:	4798      	blx	r3
 80074b6:	3601      	adds	r6, #1
 80074b8:	e7ee      	b.n	8007498 <__libc_init_array+0xc>
 80074ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80074be:	4798      	blx	r3
 80074c0:	3601      	adds	r6, #1
 80074c2:	e7f2      	b.n	80074aa <__libc_init_array+0x1e>
 80074c4:	0800b198 	.word	0x0800b198
 80074c8:	0800b198 	.word	0x0800b198
 80074cc:	0800b198 	.word	0x0800b198
 80074d0:	0800b19c 	.word	0x0800b19c

080074d4 <__retarget_lock_init_recursive>:
 80074d4:	4770      	bx	lr

080074d6 <__retarget_lock_acquire_recursive>:
 80074d6:	4770      	bx	lr

080074d8 <__retarget_lock_release_recursive>:
 80074d8:	4770      	bx	lr

080074da <memcpy>:
 80074da:	440a      	add	r2, r1
 80074dc:	4291      	cmp	r1, r2
 80074de:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80074e2:	d100      	bne.n	80074e6 <memcpy+0xc>
 80074e4:	4770      	bx	lr
 80074e6:	b510      	push	{r4, lr}
 80074e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074f0:	4291      	cmp	r1, r2
 80074f2:	d1f9      	bne.n	80074e8 <memcpy+0xe>
 80074f4:	bd10      	pop	{r4, pc}
	...

080074f8 <nanf>:
 80074f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007500 <nanf+0x8>
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	7fc00000 	.word	0x7fc00000

08007504 <quorem>:
 8007504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007508:	6903      	ldr	r3, [r0, #16]
 800750a:	690c      	ldr	r4, [r1, #16]
 800750c:	42a3      	cmp	r3, r4
 800750e:	4607      	mov	r7, r0
 8007510:	db7e      	blt.n	8007610 <quorem+0x10c>
 8007512:	3c01      	subs	r4, #1
 8007514:	f101 0814 	add.w	r8, r1, #20
 8007518:	00a3      	lsls	r3, r4, #2
 800751a:	f100 0514 	add.w	r5, r0, #20
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007524:	9301      	str	r3, [sp, #4]
 8007526:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800752a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800752e:	3301      	adds	r3, #1
 8007530:	429a      	cmp	r2, r3
 8007532:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007536:	fbb2 f6f3 	udiv	r6, r2, r3
 800753a:	d32e      	bcc.n	800759a <quorem+0x96>
 800753c:	f04f 0a00 	mov.w	sl, #0
 8007540:	46c4      	mov	ip, r8
 8007542:	46ae      	mov	lr, r5
 8007544:	46d3      	mov	fp, sl
 8007546:	f85c 3b04 	ldr.w	r3, [ip], #4
 800754a:	b298      	uxth	r0, r3
 800754c:	fb06 a000 	mla	r0, r6, r0, sl
 8007550:	0c02      	lsrs	r2, r0, #16
 8007552:	0c1b      	lsrs	r3, r3, #16
 8007554:	fb06 2303 	mla	r3, r6, r3, r2
 8007558:	f8de 2000 	ldr.w	r2, [lr]
 800755c:	b280      	uxth	r0, r0
 800755e:	b292      	uxth	r2, r2
 8007560:	1a12      	subs	r2, r2, r0
 8007562:	445a      	add	r2, fp
 8007564:	f8de 0000 	ldr.w	r0, [lr]
 8007568:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800756c:	b29b      	uxth	r3, r3
 800756e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007572:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007576:	b292      	uxth	r2, r2
 8007578:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800757c:	45e1      	cmp	r9, ip
 800757e:	f84e 2b04 	str.w	r2, [lr], #4
 8007582:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007586:	d2de      	bcs.n	8007546 <quorem+0x42>
 8007588:	9b00      	ldr	r3, [sp, #0]
 800758a:	58eb      	ldr	r3, [r5, r3]
 800758c:	b92b      	cbnz	r3, 800759a <quorem+0x96>
 800758e:	9b01      	ldr	r3, [sp, #4]
 8007590:	3b04      	subs	r3, #4
 8007592:	429d      	cmp	r5, r3
 8007594:	461a      	mov	r2, r3
 8007596:	d32f      	bcc.n	80075f8 <quorem+0xf4>
 8007598:	613c      	str	r4, [r7, #16]
 800759a:	4638      	mov	r0, r7
 800759c:	f001 f9c4 	bl	8008928 <__mcmp>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	db25      	blt.n	80075f0 <quorem+0xec>
 80075a4:	4629      	mov	r1, r5
 80075a6:	2000      	movs	r0, #0
 80075a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80075ac:	f8d1 c000 	ldr.w	ip, [r1]
 80075b0:	fa1f fe82 	uxth.w	lr, r2
 80075b4:	fa1f f38c 	uxth.w	r3, ip
 80075b8:	eba3 030e 	sub.w	r3, r3, lr
 80075bc:	4403      	add	r3, r0
 80075be:	0c12      	lsrs	r2, r2, #16
 80075c0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80075c4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075ce:	45c1      	cmp	r9, r8
 80075d0:	f841 3b04 	str.w	r3, [r1], #4
 80075d4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80075d8:	d2e6      	bcs.n	80075a8 <quorem+0xa4>
 80075da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075e2:	b922      	cbnz	r2, 80075ee <quorem+0xea>
 80075e4:	3b04      	subs	r3, #4
 80075e6:	429d      	cmp	r5, r3
 80075e8:	461a      	mov	r2, r3
 80075ea:	d30b      	bcc.n	8007604 <quorem+0x100>
 80075ec:	613c      	str	r4, [r7, #16]
 80075ee:	3601      	adds	r6, #1
 80075f0:	4630      	mov	r0, r6
 80075f2:	b003      	add	sp, #12
 80075f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f8:	6812      	ldr	r2, [r2, #0]
 80075fa:	3b04      	subs	r3, #4
 80075fc:	2a00      	cmp	r2, #0
 80075fe:	d1cb      	bne.n	8007598 <quorem+0x94>
 8007600:	3c01      	subs	r4, #1
 8007602:	e7c6      	b.n	8007592 <quorem+0x8e>
 8007604:	6812      	ldr	r2, [r2, #0]
 8007606:	3b04      	subs	r3, #4
 8007608:	2a00      	cmp	r2, #0
 800760a:	d1ef      	bne.n	80075ec <quorem+0xe8>
 800760c:	3c01      	subs	r4, #1
 800760e:	e7ea      	b.n	80075e6 <quorem+0xe2>
 8007610:	2000      	movs	r0, #0
 8007612:	e7ee      	b.n	80075f2 <quorem+0xee>
 8007614:	0000      	movs	r0, r0
	...

08007618 <_dtoa_r>:
 8007618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761c:	69c7      	ldr	r7, [r0, #28]
 800761e:	b099      	sub	sp, #100	@ 0x64
 8007620:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007624:	ec55 4b10 	vmov	r4, r5, d0
 8007628:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800762a:	9109      	str	r1, [sp, #36]	@ 0x24
 800762c:	4683      	mov	fp, r0
 800762e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007630:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007632:	b97f      	cbnz	r7, 8007654 <_dtoa_r+0x3c>
 8007634:	2010      	movs	r0, #16
 8007636:	f000 fdfd 	bl	8008234 <malloc>
 800763a:	4602      	mov	r2, r0
 800763c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007640:	b920      	cbnz	r0, 800764c <_dtoa_r+0x34>
 8007642:	4ba7      	ldr	r3, [pc, #668]	@ (80078e0 <_dtoa_r+0x2c8>)
 8007644:	21ef      	movs	r1, #239	@ 0xef
 8007646:	48a7      	ldr	r0, [pc, #668]	@ (80078e4 <_dtoa_r+0x2cc>)
 8007648:	f002 fc2a 	bl	8009ea0 <__assert_func>
 800764c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007650:	6007      	str	r7, [r0, #0]
 8007652:	60c7      	str	r7, [r0, #12]
 8007654:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007658:	6819      	ldr	r1, [r3, #0]
 800765a:	b159      	cbz	r1, 8007674 <_dtoa_r+0x5c>
 800765c:	685a      	ldr	r2, [r3, #4]
 800765e:	604a      	str	r2, [r1, #4]
 8007660:	2301      	movs	r3, #1
 8007662:	4093      	lsls	r3, r2
 8007664:	608b      	str	r3, [r1, #8]
 8007666:	4658      	mov	r0, fp
 8007668:	f000 feda 	bl	8008420 <_Bfree>
 800766c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007670:	2200      	movs	r2, #0
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	1e2b      	subs	r3, r5, #0
 8007676:	bfb9      	ittee	lt
 8007678:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800767c:	9303      	strlt	r3, [sp, #12]
 800767e:	2300      	movge	r3, #0
 8007680:	6033      	strge	r3, [r6, #0]
 8007682:	9f03      	ldr	r7, [sp, #12]
 8007684:	4b98      	ldr	r3, [pc, #608]	@ (80078e8 <_dtoa_r+0x2d0>)
 8007686:	bfbc      	itt	lt
 8007688:	2201      	movlt	r2, #1
 800768a:	6032      	strlt	r2, [r6, #0]
 800768c:	43bb      	bics	r3, r7
 800768e:	d112      	bne.n	80076b6 <_dtoa_r+0x9e>
 8007690:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007692:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007696:	6013      	str	r3, [r2, #0]
 8007698:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800769c:	4323      	orrs	r3, r4
 800769e:	f000 854d 	beq.w	800813c <_dtoa_r+0xb24>
 80076a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80076a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80078fc <_dtoa_r+0x2e4>
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 854f 	beq.w	800814c <_dtoa_r+0xb34>
 80076ae:	f10a 0303 	add.w	r3, sl, #3
 80076b2:	f000 bd49 	b.w	8008148 <_dtoa_r+0xb30>
 80076b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076ba:	2200      	movs	r2, #0
 80076bc:	ec51 0b17 	vmov	r0, r1, d7
 80076c0:	2300      	movs	r3, #0
 80076c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80076c6:	f7f9 fa07 	bl	8000ad8 <__aeabi_dcmpeq>
 80076ca:	4680      	mov	r8, r0
 80076cc:	b158      	cbz	r0, 80076e6 <_dtoa_r+0xce>
 80076ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80076d0:	2301      	movs	r3, #1
 80076d2:	6013      	str	r3, [r2, #0]
 80076d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80076d6:	b113      	cbz	r3, 80076de <_dtoa_r+0xc6>
 80076d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80076da:	4b84      	ldr	r3, [pc, #528]	@ (80078ec <_dtoa_r+0x2d4>)
 80076dc:	6013      	str	r3, [r2, #0]
 80076de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007900 <_dtoa_r+0x2e8>
 80076e2:	f000 bd33 	b.w	800814c <_dtoa_r+0xb34>
 80076e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80076ea:	aa16      	add	r2, sp, #88	@ 0x58
 80076ec:	a917      	add	r1, sp, #92	@ 0x5c
 80076ee:	4658      	mov	r0, fp
 80076f0:	f001 fa3a 	bl	8008b68 <__d2b>
 80076f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80076f8:	4681      	mov	r9, r0
 80076fa:	2e00      	cmp	r6, #0
 80076fc:	d077      	beq.n	80077ee <_dtoa_r+0x1d6>
 80076fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007700:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007708:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800770c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007710:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007714:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007718:	4619      	mov	r1, r3
 800771a:	2200      	movs	r2, #0
 800771c:	4b74      	ldr	r3, [pc, #464]	@ (80078f0 <_dtoa_r+0x2d8>)
 800771e:	f7f8 fdbb 	bl	8000298 <__aeabi_dsub>
 8007722:	a369      	add	r3, pc, #420	@ (adr r3, 80078c8 <_dtoa_r+0x2b0>)
 8007724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007728:	f7f8 ff6e 	bl	8000608 <__aeabi_dmul>
 800772c:	a368      	add	r3, pc, #416	@ (adr r3, 80078d0 <_dtoa_r+0x2b8>)
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	f7f8 fdb3 	bl	800029c <__adddf3>
 8007736:	4604      	mov	r4, r0
 8007738:	4630      	mov	r0, r6
 800773a:	460d      	mov	r5, r1
 800773c:	f7f8 fefa 	bl	8000534 <__aeabi_i2d>
 8007740:	a365      	add	r3, pc, #404	@ (adr r3, 80078d8 <_dtoa_r+0x2c0>)
 8007742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007746:	f7f8 ff5f 	bl	8000608 <__aeabi_dmul>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	4620      	mov	r0, r4
 8007750:	4629      	mov	r1, r5
 8007752:	f7f8 fda3 	bl	800029c <__adddf3>
 8007756:	4604      	mov	r4, r0
 8007758:	460d      	mov	r5, r1
 800775a:	f7f9 fa05 	bl	8000b68 <__aeabi_d2iz>
 800775e:	2200      	movs	r2, #0
 8007760:	4607      	mov	r7, r0
 8007762:	2300      	movs	r3, #0
 8007764:	4620      	mov	r0, r4
 8007766:	4629      	mov	r1, r5
 8007768:	f7f9 f9c0 	bl	8000aec <__aeabi_dcmplt>
 800776c:	b140      	cbz	r0, 8007780 <_dtoa_r+0x168>
 800776e:	4638      	mov	r0, r7
 8007770:	f7f8 fee0 	bl	8000534 <__aeabi_i2d>
 8007774:	4622      	mov	r2, r4
 8007776:	462b      	mov	r3, r5
 8007778:	f7f9 f9ae 	bl	8000ad8 <__aeabi_dcmpeq>
 800777c:	b900      	cbnz	r0, 8007780 <_dtoa_r+0x168>
 800777e:	3f01      	subs	r7, #1
 8007780:	2f16      	cmp	r7, #22
 8007782:	d851      	bhi.n	8007828 <_dtoa_r+0x210>
 8007784:	4b5b      	ldr	r3, [pc, #364]	@ (80078f4 <_dtoa_r+0x2dc>)
 8007786:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800778a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007792:	f7f9 f9ab 	bl	8000aec <__aeabi_dcmplt>
 8007796:	2800      	cmp	r0, #0
 8007798:	d048      	beq.n	800782c <_dtoa_r+0x214>
 800779a:	3f01      	subs	r7, #1
 800779c:	2300      	movs	r3, #0
 800779e:	9312      	str	r3, [sp, #72]	@ 0x48
 80077a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80077a2:	1b9b      	subs	r3, r3, r6
 80077a4:	1e5a      	subs	r2, r3, #1
 80077a6:	bf44      	itt	mi
 80077a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80077ac:	2300      	movmi	r3, #0
 80077ae:	9208      	str	r2, [sp, #32]
 80077b0:	bf54      	ite	pl
 80077b2:	f04f 0800 	movpl.w	r8, #0
 80077b6:	9308      	strmi	r3, [sp, #32]
 80077b8:	2f00      	cmp	r7, #0
 80077ba:	db39      	blt.n	8007830 <_dtoa_r+0x218>
 80077bc:	9b08      	ldr	r3, [sp, #32]
 80077be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80077c0:	443b      	add	r3, r7
 80077c2:	9308      	str	r3, [sp, #32]
 80077c4:	2300      	movs	r3, #0
 80077c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80077c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ca:	2b09      	cmp	r3, #9
 80077cc:	d864      	bhi.n	8007898 <_dtoa_r+0x280>
 80077ce:	2b05      	cmp	r3, #5
 80077d0:	bfc4      	itt	gt
 80077d2:	3b04      	subgt	r3, #4
 80077d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80077d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077d8:	f1a3 0302 	sub.w	r3, r3, #2
 80077dc:	bfcc      	ite	gt
 80077de:	2400      	movgt	r4, #0
 80077e0:	2401      	movle	r4, #1
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d863      	bhi.n	80078ae <_dtoa_r+0x296>
 80077e6:	e8df f003 	tbb	[pc, r3]
 80077ea:	372a      	.short	0x372a
 80077ec:	5535      	.short	0x5535
 80077ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80077f2:	441e      	add	r6, r3
 80077f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80077f8:	2b20      	cmp	r3, #32
 80077fa:	bfc1      	itttt	gt
 80077fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007800:	409f      	lslgt	r7, r3
 8007802:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007806:	fa24 f303 	lsrgt.w	r3, r4, r3
 800780a:	bfd6      	itet	le
 800780c:	f1c3 0320 	rsble	r3, r3, #32
 8007810:	ea47 0003 	orrgt.w	r0, r7, r3
 8007814:	fa04 f003 	lslle.w	r0, r4, r3
 8007818:	f7f8 fe7c 	bl	8000514 <__aeabi_ui2d>
 800781c:	2201      	movs	r2, #1
 800781e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007822:	3e01      	subs	r6, #1
 8007824:	9214      	str	r2, [sp, #80]	@ 0x50
 8007826:	e777      	b.n	8007718 <_dtoa_r+0x100>
 8007828:	2301      	movs	r3, #1
 800782a:	e7b8      	b.n	800779e <_dtoa_r+0x186>
 800782c:	9012      	str	r0, [sp, #72]	@ 0x48
 800782e:	e7b7      	b.n	80077a0 <_dtoa_r+0x188>
 8007830:	427b      	negs	r3, r7
 8007832:	930a      	str	r3, [sp, #40]	@ 0x28
 8007834:	2300      	movs	r3, #0
 8007836:	eba8 0807 	sub.w	r8, r8, r7
 800783a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800783c:	e7c4      	b.n	80077c8 <_dtoa_r+0x1b0>
 800783e:	2300      	movs	r3, #0
 8007840:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007842:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007844:	2b00      	cmp	r3, #0
 8007846:	dc35      	bgt.n	80078b4 <_dtoa_r+0x29c>
 8007848:	2301      	movs	r3, #1
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	9307      	str	r3, [sp, #28]
 800784e:	461a      	mov	r2, r3
 8007850:	920e      	str	r2, [sp, #56]	@ 0x38
 8007852:	e00b      	b.n	800786c <_dtoa_r+0x254>
 8007854:	2301      	movs	r3, #1
 8007856:	e7f3      	b.n	8007840 <_dtoa_r+0x228>
 8007858:	2300      	movs	r3, #0
 800785a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800785c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800785e:	18fb      	adds	r3, r7, r3
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	3301      	adds	r3, #1
 8007864:	2b01      	cmp	r3, #1
 8007866:	9307      	str	r3, [sp, #28]
 8007868:	bfb8      	it	lt
 800786a:	2301      	movlt	r3, #1
 800786c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007870:	2100      	movs	r1, #0
 8007872:	2204      	movs	r2, #4
 8007874:	f102 0514 	add.w	r5, r2, #20
 8007878:	429d      	cmp	r5, r3
 800787a:	d91f      	bls.n	80078bc <_dtoa_r+0x2a4>
 800787c:	6041      	str	r1, [r0, #4]
 800787e:	4658      	mov	r0, fp
 8007880:	f000 fd8e 	bl	80083a0 <_Balloc>
 8007884:	4682      	mov	sl, r0
 8007886:	2800      	cmp	r0, #0
 8007888:	d13c      	bne.n	8007904 <_dtoa_r+0x2ec>
 800788a:	4b1b      	ldr	r3, [pc, #108]	@ (80078f8 <_dtoa_r+0x2e0>)
 800788c:	4602      	mov	r2, r0
 800788e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007892:	e6d8      	b.n	8007646 <_dtoa_r+0x2e>
 8007894:	2301      	movs	r3, #1
 8007896:	e7e0      	b.n	800785a <_dtoa_r+0x242>
 8007898:	2401      	movs	r4, #1
 800789a:	2300      	movs	r3, #0
 800789c:	9309      	str	r3, [sp, #36]	@ 0x24
 800789e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80078a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	9307      	str	r3, [sp, #28]
 80078a8:	2200      	movs	r2, #0
 80078aa:	2312      	movs	r3, #18
 80078ac:	e7d0      	b.n	8007850 <_dtoa_r+0x238>
 80078ae:	2301      	movs	r3, #1
 80078b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078b2:	e7f5      	b.n	80078a0 <_dtoa_r+0x288>
 80078b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	9307      	str	r3, [sp, #28]
 80078ba:	e7d7      	b.n	800786c <_dtoa_r+0x254>
 80078bc:	3101      	adds	r1, #1
 80078be:	0052      	lsls	r2, r2, #1
 80078c0:	e7d8      	b.n	8007874 <_dtoa_r+0x25c>
 80078c2:	bf00      	nop
 80078c4:	f3af 8000 	nop.w
 80078c8:	636f4361 	.word	0x636f4361
 80078cc:	3fd287a7 	.word	0x3fd287a7
 80078d0:	8b60c8b3 	.word	0x8b60c8b3
 80078d4:	3fc68a28 	.word	0x3fc68a28
 80078d8:	509f79fb 	.word	0x509f79fb
 80078dc:	3fd34413 	.word	0x3fd34413
 80078e0:	0800ada6 	.word	0x0800ada6
 80078e4:	0800adbd 	.word	0x0800adbd
 80078e8:	7ff00000 	.word	0x7ff00000
 80078ec:	0800ad71 	.word	0x0800ad71
 80078f0:	3ff80000 	.word	0x3ff80000
 80078f4:	0800aeb8 	.word	0x0800aeb8
 80078f8:	0800ae15 	.word	0x0800ae15
 80078fc:	0800ada2 	.word	0x0800ada2
 8007900:	0800ad70 	.word	0x0800ad70
 8007904:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007908:	6018      	str	r0, [r3, #0]
 800790a:	9b07      	ldr	r3, [sp, #28]
 800790c:	2b0e      	cmp	r3, #14
 800790e:	f200 80a4 	bhi.w	8007a5a <_dtoa_r+0x442>
 8007912:	2c00      	cmp	r4, #0
 8007914:	f000 80a1 	beq.w	8007a5a <_dtoa_r+0x442>
 8007918:	2f00      	cmp	r7, #0
 800791a:	dd33      	ble.n	8007984 <_dtoa_r+0x36c>
 800791c:	4bad      	ldr	r3, [pc, #692]	@ (8007bd4 <_dtoa_r+0x5bc>)
 800791e:	f007 020f 	and.w	r2, r7, #15
 8007922:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007926:	ed93 7b00 	vldr	d7, [r3]
 800792a:	05f8      	lsls	r0, r7, #23
 800792c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007930:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007934:	d516      	bpl.n	8007964 <_dtoa_r+0x34c>
 8007936:	4ba8      	ldr	r3, [pc, #672]	@ (8007bd8 <_dtoa_r+0x5c0>)
 8007938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800793c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007940:	f7f8 ff8c 	bl	800085c <__aeabi_ddiv>
 8007944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007948:	f004 040f 	and.w	r4, r4, #15
 800794c:	2603      	movs	r6, #3
 800794e:	4da2      	ldr	r5, [pc, #648]	@ (8007bd8 <_dtoa_r+0x5c0>)
 8007950:	b954      	cbnz	r4, 8007968 <_dtoa_r+0x350>
 8007952:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800795a:	f7f8 ff7f 	bl	800085c <__aeabi_ddiv>
 800795e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007962:	e028      	b.n	80079b6 <_dtoa_r+0x39e>
 8007964:	2602      	movs	r6, #2
 8007966:	e7f2      	b.n	800794e <_dtoa_r+0x336>
 8007968:	07e1      	lsls	r1, r4, #31
 800796a:	d508      	bpl.n	800797e <_dtoa_r+0x366>
 800796c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007970:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007974:	f7f8 fe48 	bl	8000608 <__aeabi_dmul>
 8007978:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800797c:	3601      	adds	r6, #1
 800797e:	1064      	asrs	r4, r4, #1
 8007980:	3508      	adds	r5, #8
 8007982:	e7e5      	b.n	8007950 <_dtoa_r+0x338>
 8007984:	f000 80d2 	beq.w	8007b2c <_dtoa_r+0x514>
 8007988:	427c      	negs	r4, r7
 800798a:	4b92      	ldr	r3, [pc, #584]	@ (8007bd4 <_dtoa_r+0x5bc>)
 800798c:	4d92      	ldr	r5, [pc, #584]	@ (8007bd8 <_dtoa_r+0x5c0>)
 800798e:	f004 020f 	and.w	r2, r4, #15
 8007992:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800799e:	f7f8 fe33 	bl	8000608 <__aeabi_dmul>
 80079a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079a6:	1124      	asrs	r4, r4, #4
 80079a8:	2300      	movs	r3, #0
 80079aa:	2602      	movs	r6, #2
 80079ac:	2c00      	cmp	r4, #0
 80079ae:	f040 80b2 	bne.w	8007b16 <_dtoa_r+0x4fe>
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1d3      	bne.n	800795e <_dtoa_r+0x346>
 80079b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80079b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 80b7 	beq.w	8007b30 <_dtoa_r+0x518>
 80079c2:	4b86      	ldr	r3, [pc, #536]	@ (8007bdc <_dtoa_r+0x5c4>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	4620      	mov	r0, r4
 80079c8:	4629      	mov	r1, r5
 80079ca:	f7f9 f88f 	bl	8000aec <__aeabi_dcmplt>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	f000 80ae 	beq.w	8007b30 <_dtoa_r+0x518>
 80079d4:	9b07      	ldr	r3, [sp, #28]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 80aa 	beq.w	8007b30 <_dtoa_r+0x518>
 80079dc:	9b00      	ldr	r3, [sp, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	dd37      	ble.n	8007a52 <_dtoa_r+0x43a>
 80079e2:	1e7b      	subs	r3, r7, #1
 80079e4:	9304      	str	r3, [sp, #16]
 80079e6:	4620      	mov	r0, r4
 80079e8:	4b7d      	ldr	r3, [pc, #500]	@ (8007be0 <_dtoa_r+0x5c8>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	4629      	mov	r1, r5
 80079ee:	f7f8 fe0b 	bl	8000608 <__aeabi_dmul>
 80079f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079f6:	9c00      	ldr	r4, [sp, #0]
 80079f8:	3601      	adds	r6, #1
 80079fa:	4630      	mov	r0, r6
 80079fc:	f7f8 fd9a 	bl	8000534 <__aeabi_i2d>
 8007a00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a04:	f7f8 fe00 	bl	8000608 <__aeabi_dmul>
 8007a08:	4b76      	ldr	r3, [pc, #472]	@ (8007be4 <_dtoa_r+0x5cc>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f7f8 fc46 	bl	800029c <__adddf3>
 8007a10:	4605      	mov	r5, r0
 8007a12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007a16:	2c00      	cmp	r4, #0
 8007a18:	f040 808d 	bne.w	8007b36 <_dtoa_r+0x51e>
 8007a1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a20:	4b71      	ldr	r3, [pc, #452]	@ (8007be8 <_dtoa_r+0x5d0>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	f7f8 fc38 	bl	8000298 <__aeabi_dsub>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a30:	462a      	mov	r2, r5
 8007a32:	4633      	mov	r3, r6
 8007a34:	f7f9 f878 	bl	8000b28 <__aeabi_dcmpgt>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	f040 828b 	bne.w	8007f54 <_dtoa_r+0x93c>
 8007a3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a42:	462a      	mov	r2, r5
 8007a44:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007a48:	f7f9 f850 	bl	8000aec <__aeabi_dcmplt>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	f040 8128 	bne.w	8007ca2 <_dtoa_r+0x68a>
 8007a52:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007a56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007a5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f2c0 815a 	blt.w	8007d16 <_dtoa_r+0x6fe>
 8007a62:	2f0e      	cmp	r7, #14
 8007a64:	f300 8157 	bgt.w	8007d16 <_dtoa_r+0x6fe>
 8007a68:	4b5a      	ldr	r3, [pc, #360]	@ (8007bd4 <_dtoa_r+0x5bc>)
 8007a6a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a6e:	ed93 7b00 	vldr	d7, [r3]
 8007a72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	ed8d 7b00 	vstr	d7, [sp]
 8007a7a:	da03      	bge.n	8007a84 <_dtoa_r+0x46c>
 8007a7c:	9b07      	ldr	r3, [sp, #28]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f340 8101 	ble.w	8007c86 <_dtoa_r+0x66e>
 8007a84:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007a88:	4656      	mov	r6, sl
 8007a8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a8e:	4620      	mov	r0, r4
 8007a90:	4629      	mov	r1, r5
 8007a92:	f7f8 fee3 	bl	800085c <__aeabi_ddiv>
 8007a96:	f7f9 f867 	bl	8000b68 <__aeabi_d2iz>
 8007a9a:	4680      	mov	r8, r0
 8007a9c:	f7f8 fd4a 	bl	8000534 <__aeabi_i2d>
 8007aa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007aa4:	f7f8 fdb0 	bl	8000608 <__aeabi_dmul>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	460b      	mov	r3, r1
 8007aac:	4620      	mov	r0, r4
 8007aae:	4629      	mov	r1, r5
 8007ab0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007ab4:	f7f8 fbf0 	bl	8000298 <__aeabi_dsub>
 8007ab8:	f806 4b01 	strb.w	r4, [r6], #1
 8007abc:	9d07      	ldr	r5, [sp, #28]
 8007abe:	eba6 040a 	sub.w	r4, r6, sl
 8007ac2:	42a5      	cmp	r5, r4
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	f040 8117 	bne.w	8007cfa <_dtoa_r+0x6e2>
 8007acc:	f7f8 fbe6 	bl	800029c <__adddf3>
 8007ad0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	460d      	mov	r5, r1
 8007ad8:	f7f9 f826 	bl	8000b28 <__aeabi_dcmpgt>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	f040 80f9 	bne.w	8007cd4 <_dtoa_r+0x6bc>
 8007ae2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	4629      	mov	r1, r5
 8007aea:	f7f8 fff5 	bl	8000ad8 <__aeabi_dcmpeq>
 8007aee:	b118      	cbz	r0, 8007af8 <_dtoa_r+0x4e0>
 8007af0:	f018 0f01 	tst.w	r8, #1
 8007af4:	f040 80ee 	bne.w	8007cd4 <_dtoa_r+0x6bc>
 8007af8:	4649      	mov	r1, r9
 8007afa:	4658      	mov	r0, fp
 8007afc:	f000 fc90 	bl	8008420 <_Bfree>
 8007b00:	2300      	movs	r3, #0
 8007b02:	7033      	strb	r3, [r6, #0]
 8007b04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007b06:	3701      	adds	r7, #1
 8007b08:	601f      	str	r7, [r3, #0]
 8007b0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 831d 	beq.w	800814c <_dtoa_r+0xb34>
 8007b12:	601e      	str	r6, [r3, #0]
 8007b14:	e31a      	b.n	800814c <_dtoa_r+0xb34>
 8007b16:	07e2      	lsls	r2, r4, #31
 8007b18:	d505      	bpl.n	8007b26 <_dtoa_r+0x50e>
 8007b1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b1e:	f7f8 fd73 	bl	8000608 <__aeabi_dmul>
 8007b22:	3601      	adds	r6, #1
 8007b24:	2301      	movs	r3, #1
 8007b26:	1064      	asrs	r4, r4, #1
 8007b28:	3508      	adds	r5, #8
 8007b2a:	e73f      	b.n	80079ac <_dtoa_r+0x394>
 8007b2c:	2602      	movs	r6, #2
 8007b2e:	e742      	b.n	80079b6 <_dtoa_r+0x39e>
 8007b30:	9c07      	ldr	r4, [sp, #28]
 8007b32:	9704      	str	r7, [sp, #16]
 8007b34:	e761      	b.n	80079fa <_dtoa_r+0x3e2>
 8007b36:	4b27      	ldr	r3, [pc, #156]	@ (8007bd4 <_dtoa_r+0x5bc>)
 8007b38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b42:	4454      	add	r4, sl
 8007b44:	2900      	cmp	r1, #0
 8007b46:	d053      	beq.n	8007bf0 <_dtoa_r+0x5d8>
 8007b48:	4928      	ldr	r1, [pc, #160]	@ (8007bec <_dtoa_r+0x5d4>)
 8007b4a:	2000      	movs	r0, #0
 8007b4c:	f7f8 fe86 	bl	800085c <__aeabi_ddiv>
 8007b50:	4633      	mov	r3, r6
 8007b52:	462a      	mov	r2, r5
 8007b54:	f7f8 fba0 	bl	8000298 <__aeabi_dsub>
 8007b58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007b5c:	4656      	mov	r6, sl
 8007b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b62:	f7f9 f801 	bl	8000b68 <__aeabi_d2iz>
 8007b66:	4605      	mov	r5, r0
 8007b68:	f7f8 fce4 	bl	8000534 <__aeabi_i2d>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b74:	f7f8 fb90 	bl	8000298 <__aeabi_dsub>
 8007b78:	3530      	adds	r5, #48	@ 0x30
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b82:	f806 5b01 	strb.w	r5, [r6], #1
 8007b86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007b8a:	f7f8 ffaf 	bl	8000aec <__aeabi_dcmplt>
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	d171      	bne.n	8007c76 <_dtoa_r+0x65e>
 8007b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b96:	4911      	ldr	r1, [pc, #68]	@ (8007bdc <_dtoa_r+0x5c4>)
 8007b98:	2000      	movs	r0, #0
 8007b9a:	f7f8 fb7d 	bl	8000298 <__aeabi_dsub>
 8007b9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ba2:	f7f8 ffa3 	bl	8000aec <__aeabi_dcmplt>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	f040 8095 	bne.w	8007cd6 <_dtoa_r+0x6be>
 8007bac:	42a6      	cmp	r6, r4
 8007bae:	f43f af50 	beq.w	8007a52 <_dtoa_r+0x43a>
 8007bb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8007be0 <_dtoa_r+0x5c8>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f7f8 fd25 	bl	8000608 <__aeabi_dmul>
 8007bbe:	4b08      	ldr	r3, [pc, #32]	@ (8007be0 <_dtoa_r+0x5c8>)
 8007bc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bca:	f7f8 fd1d 	bl	8000608 <__aeabi_dmul>
 8007bce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bd2:	e7c4      	b.n	8007b5e <_dtoa_r+0x546>
 8007bd4:	0800aeb8 	.word	0x0800aeb8
 8007bd8:	0800ae90 	.word	0x0800ae90
 8007bdc:	3ff00000 	.word	0x3ff00000
 8007be0:	40240000 	.word	0x40240000
 8007be4:	401c0000 	.word	0x401c0000
 8007be8:	40140000 	.word	0x40140000
 8007bec:	3fe00000 	.word	0x3fe00000
 8007bf0:	4631      	mov	r1, r6
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f7f8 fd08 	bl	8000608 <__aeabi_dmul>
 8007bf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007bfc:	9415      	str	r4, [sp, #84]	@ 0x54
 8007bfe:	4656      	mov	r6, sl
 8007c00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c04:	f7f8 ffb0 	bl	8000b68 <__aeabi_d2iz>
 8007c08:	4605      	mov	r5, r0
 8007c0a:	f7f8 fc93 	bl	8000534 <__aeabi_i2d>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	460b      	mov	r3, r1
 8007c12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c16:	f7f8 fb3f 	bl	8000298 <__aeabi_dsub>
 8007c1a:	3530      	adds	r5, #48	@ 0x30
 8007c1c:	f806 5b01 	strb.w	r5, [r6], #1
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	42a6      	cmp	r6, r4
 8007c26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c2a:	f04f 0200 	mov.w	r2, #0
 8007c2e:	d124      	bne.n	8007c7a <_dtoa_r+0x662>
 8007c30:	4bac      	ldr	r3, [pc, #688]	@ (8007ee4 <_dtoa_r+0x8cc>)
 8007c32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007c36:	f7f8 fb31 	bl	800029c <__adddf3>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c42:	f7f8 ff71 	bl	8000b28 <__aeabi_dcmpgt>
 8007c46:	2800      	cmp	r0, #0
 8007c48:	d145      	bne.n	8007cd6 <_dtoa_r+0x6be>
 8007c4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c4e:	49a5      	ldr	r1, [pc, #660]	@ (8007ee4 <_dtoa_r+0x8cc>)
 8007c50:	2000      	movs	r0, #0
 8007c52:	f7f8 fb21 	bl	8000298 <__aeabi_dsub>
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c5e:	f7f8 ff45 	bl	8000aec <__aeabi_dcmplt>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	f43f aef5 	beq.w	8007a52 <_dtoa_r+0x43a>
 8007c68:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007c6a:	1e73      	subs	r3, r6, #1
 8007c6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007c6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c72:	2b30      	cmp	r3, #48	@ 0x30
 8007c74:	d0f8      	beq.n	8007c68 <_dtoa_r+0x650>
 8007c76:	9f04      	ldr	r7, [sp, #16]
 8007c78:	e73e      	b.n	8007af8 <_dtoa_r+0x4e0>
 8007c7a:	4b9b      	ldr	r3, [pc, #620]	@ (8007ee8 <_dtoa_r+0x8d0>)
 8007c7c:	f7f8 fcc4 	bl	8000608 <__aeabi_dmul>
 8007c80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c84:	e7bc      	b.n	8007c00 <_dtoa_r+0x5e8>
 8007c86:	d10c      	bne.n	8007ca2 <_dtoa_r+0x68a>
 8007c88:	4b98      	ldr	r3, [pc, #608]	@ (8007eec <_dtoa_r+0x8d4>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c90:	f7f8 fcba 	bl	8000608 <__aeabi_dmul>
 8007c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c98:	f7f8 ff3c 	bl	8000b14 <__aeabi_dcmpge>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	f000 8157 	beq.w	8007f50 <_dtoa_r+0x938>
 8007ca2:	2400      	movs	r4, #0
 8007ca4:	4625      	mov	r5, r4
 8007ca6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ca8:	43db      	mvns	r3, r3
 8007caa:	9304      	str	r3, [sp, #16]
 8007cac:	4656      	mov	r6, sl
 8007cae:	2700      	movs	r7, #0
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	4658      	mov	r0, fp
 8007cb4:	f000 fbb4 	bl	8008420 <_Bfree>
 8007cb8:	2d00      	cmp	r5, #0
 8007cba:	d0dc      	beq.n	8007c76 <_dtoa_r+0x65e>
 8007cbc:	b12f      	cbz	r7, 8007cca <_dtoa_r+0x6b2>
 8007cbe:	42af      	cmp	r7, r5
 8007cc0:	d003      	beq.n	8007cca <_dtoa_r+0x6b2>
 8007cc2:	4639      	mov	r1, r7
 8007cc4:	4658      	mov	r0, fp
 8007cc6:	f000 fbab 	bl	8008420 <_Bfree>
 8007cca:	4629      	mov	r1, r5
 8007ccc:	4658      	mov	r0, fp
 8007cce:	f000 fba7 	bl	8008420 <_Bfree>
 8007cd2:	e7d0      	b.n	8007c76 <_dtoa_r+0x65e>
 8007cd4:	9704      	str	r7, [sp, #16]
 8007cd6:	4633      	mov	r3, r6
 8007cd8:	461e      	mov	r6, r3
 8007cda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cde:	2a39      	cmp	r2, #57	@ 0x39
 8007ce0:	d107      	bne.n	8007cf2 <_dtoa_r+0x6da>
 8007ce2:	459a      	cmp	sl, r3
 8007ce4:	d1f8      	bne.n	8007cd8 <_dtoa_r+0x6c0>
 8007ce6:	9a04      	ldr	r2, [sp, #16]
 8007ce8:	3201      	adds	r2, #1
 8007cea:	9204      	str	r2, [sp, #16]
 8007cec:	2230      	movs	r2, #48	@ 0x30
 8007cee:	f88a 2000 	strb.w	r2, [sl]
 8007cf2:	781a      	ldrb	r2, [r3, #0]
 8007cf4:	3201      	adds	r2, #1
 8007cf6:	701a      	strb	r2, [r3, #0]
 8007cf8:	e7bd      	b.n	8007c76 <_dtoa_r+0x65e>
 8007cfa:	4b7b      	ldr	r3, [pc, #492]	@ (8007ee8 <_dtoa_r+0x8d0>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f7f8 fc83 	bl	8000608 <__aeabi_dmul>
 8007d02:	2200      	movs	r2, #0
 8007d04:	2300      	movs	r3, #0
 8007d06:	4604      	mov	r4, r0
 8007d08:	460d      	mov	r5, r1
 8007d0a:	f7f8 fee5 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	f43f aebb 	beq.w	8007a8a <_dtoa_r+0x472>
 8007d14:	e6f0      	b.n	8007af8 <_dtoa_r+0x4e0>
 8007d16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007d18:	2a00      	cmp	r2, #0
 8007d1a:	f000 80db 	beq.w	8007ed4 <_dtoa_r+0x8bc>
 8007d1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d20:	2a01      	cmp	r2, #1
 8007d22:	f300 80bf 	bgt.w	8007ea4 <_dtoa_r+0x88c>
 8007d26:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007d28:	2a00      	cmp	r2, #0
 8007d2a:	f000 80b7 	beq.w	8007e9c <_dtoa_r+0x884>
 8007d2e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007d32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007d34:	4646      	mov	r6, r8
 8007d36:	9a08      	ldr	r2, [sp, #32]
 8007d38:	2101      	movs	r1, #1
 8007d3a:	441a      	add	r2, r3
 8007d3c:	4658      	mov	r0, fp
 8007d3e:	4498      	add	r8, r3
 8007d40:	9208      	str	r2, [sp, #32]
 8007d42:	f000 fc6b 	bl	800861c <__i2b>
 8007d46:	4605      	mov	r5, r0
 8007d48:	b15e      	cbz	r6, 8007d62 <_dtoa_r+0x74a>
 8007d4a:	9b08      	ldr	r3, [sp, #32]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	dd08      	ble.n	8007d62 <_dtoa_r+0x74a>
 8007d50:	42b3      	cmp	r3, r6
 8007d52:	9a08      	ldr	r2, [sp, #32]
 8007d54:	bfa8      	it	ge
 8007d56:	4633      	movge	r3, r6
 8007d58:	eba8 0803 	sub.w	r8, r8, r3
 8007d5c:	1af6      	subs	r6, r6, r3
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	9308      	str	r3, [sp, #32]
 8007d62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d64:	b1f3      	cbz	r3, 8007da4 <_dtoa_r+0x78c>
 8007d66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 80b7 	beq.w	8007edc <_dtoa_r+0x8c4>
 8007d6e:	b18c      	cbz	r4, 8007d94 <_dtoa_r+0x77c>
 8007d70:	4629      	mov	r1, r5
 8007d72:	4622      	mov	r2, r4
 8007d74:	4658      	mov	r0, fp
 8007d76:	f000 fd11 	bl	800879c <__pow5mult>
 8007d7a:	464a      	mov	r2, r9
 8007d7c:	4601      	mov	r1, r0
 8007d7e:	4605      	mov	r5, r0
 8007d80:	4658      	mov	r0, fp
 8007d82:	f000 fc61 	bl	8008648 <__multiply>
 8007d86:	4649      	mov	r1, r9
 8007d88:	9004      	str	r0, [sp, #16]
 8007d8a:	4658      	mov	r0, fp
 8007d8c:	f000 fb48 	bl	8008420 <_Bfree>
 8007d90:	9b04      	ldr	r3, [sp, #16]
 8007d92:	4699      	mov	r9, r3
 8007d94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d96:	1b1a      	subs	r2, r3, r4
 8007d98:	d004      	beq.n	8007da4 <_dtoa_r+0x78c>
 8007d9a:	4649      	mov	r1, r9
 8007d9c:	4658      	mov	r0, fp
 8007d9e:	f000 fcfd 	bl	800879c <__pow5mult>
 8007da2:	4681      	mov	r9, r0
 8007da4:	2101      	movs	r1, #1
 8007da6:	4658      	mov	r0, fp
 8007da8:	f000 fc38 	bl	800861c <__i2b>
 8007dac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dae:	4604      	mov	r4, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f000 81cf 	beq.w	8008154 <_dtoa_r+0xb3c>
 8007db6:	461a      	mov	r2, r3
 8007db8:	4601      	mov	r1, r0
 8007dba:	4658      	mov	r0, fp
 8007dbc:	f000 fcee 	bl	800879c <__pow5mult>
 8007dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	f300 8095 	bgt.w	8007ef4 <_dtoa_r+0x8dc>
 8007dca:	9b02      	ldr	r3, [sp, #8]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f040 8087 	bne.w	8007ee0 <_dtoa_r+0x8c8>
 8007dd2:	9b03      	ldr	r3, [sp, #12]
 8007dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f040 8089 	bne.w	8007ef0 <_dtoa_r+0x8d8>
 8007dde:	9b03      	ldr	r3, [sp, #12]
 8007de0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007de4:	0d1b      	lsrs	r3, r3, #20
 8007de6:	051b      	lsls	r3, r3, #20
 8007de8:	b12b      	cbz	r3, 8007df6 <_dtoa_r+0x7de>
 8007dea:	9b08      	ldr	r3, [sp, #32]
 8007dec:	3301      	adds	r3, #1
 8007dee:	9308      	str	r3, [sp, #32]
 8007df0:	f108 0801 	add.w	r8, r8, #1
 8007df4:	2301      	movs	r3, #1
 8007df6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007df8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f000 81b0 	beq.w	8008160 <_dtoa_r+0xb48>
 8007e00:	6923      	ldr	r3, [r4, #16]
 8007e02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e06:	6918      	ldr	r0, [r3, #16]
 8007e08:	f000 fbbc 	bl	8008584 <__hi0bits>
 8007e0c:	f1c0 0020 	rsb	r0, r0, #32
 8007e10:	9b08      	ldr	r3, [sp, #32]
 8007e12:	4418      	add	r0, r3
 8007e14:	f010 001f 	ands.w	r0, r0, #31
 8007e18:	d077      	beq.n	8007f0a <_dtoa_r+0x8f2>
 8007e1a:	f1c0 0320 	rsb	r3, r0, #32
 8007e1e:	2b04      	cmp	r3, #4
 8007e20:	dd6b      	ble.n	8007efa <_dtoa_r+0x8e2>
 8007e22:	9b08      	ldr	r3, [sp, #32]
 8007e24:	f1c0 001c 	rsb	r0, r0, #28
 8007e28:	4403      	add	r3, r0
 8007e2a:	4480      	add	r8, r0
 8007e2c:	4406      	add	r6, r0
 8007e2e:	9308      	str	r3, [sp, #32]
 8007e30:	f1b8 0f00 	cmp.w	r8, #0
 8007e34:	dd05      	ble.n	8007e42 <_dtoa_r+0x82a>
 8007e36:	4649      	mov	r1, r9
 8007e38:	4642      	mov	r2, r8
 8007e3a:	4658      	mov	r0, fp
 8007e3c:	f000 fd08 	bl	8008850 <__lshift>
 8007e40:	4681      	mov	r9, r0
 8007e42:	9b08      	ldr	r3, [sp, #32]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	dd05      	ble.n	8007e54 <_dtoa_r+0x83c>
 8007e48:	4621      	mov	r1, r4
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	4658      	mov	r0, fp
 8007e4e:	f000 fcff 	bl	8008850 <__lshift>
 8007e52:	4604      	mov	r4, r0
 8007e54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d059      	beq.n	8007f0e <_dtoa_r+0x8f6>
 8007e5a:	4621      	mov	r1, r4
 8007e5c:	4648      	mov	r0, r9
 8007e5e:	f000 fd63 	bl	8008928 <__mcmp>
 8007e62:	2800      	cmp	r0, #0
 8007e64:	da53      	bge.n	8007f0e <_dtoa_r+0x8f6>
 8007e66:	1e7b      	subs	r3, r7, #1
 8007e68:	9304      	str	r3, [sp, #16]
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	220a      	movs	r2, #10
 8007e70:	4658      	mov	r0, fp
 8007e72:	f000 faf7 	bl	8008464 <__multadd>
 8007e76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e78:	4681      	mov	r9, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f000 8172 	beq.w	8008164 <_dtoa_r+0xb4c>
 8007e80:	2300      	movs	r3, #0
 8007e82:	4629      	mov	r1, r5
 8007e84:	220a      	movs	r2, #10
 8007e86:	4658      	mov	r0, fp
 8007e88:	f000 faec 	bl	8008464 <__multadd>
 8007e8c:	9b00      	ldr	r3, [sp, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	4605      	mov	r5, r0
 8007e92:	dc67      	bgt.n	8007f64 <_dtoa_r+0x94c>
 8007e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	dc41      	bgt.n	8007f1e <_dtoa_r+0x906>
 8007e9a:	e063      	b.n	8007f64 <_dtoa_r+0x94c>
 8007e9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007e9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007ea2:	e746      	b.n	8007d32 <_dtoa_r+0x71a>
 8007ea4:	9b07      	ldr	r3, [sp, #28]
 8007ea6:	1e5c      	subs	r4, r3, #1
 8007ea8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007eaa:	42a3      	cmp	r3, r4
 8007eac:	bfbf      	itttt	lt
 8007eae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007eb0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007eb2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007eb4:	1ae3      	sublt	r3, r4, r3
 8007eb6:	bfb4      	ite	lt
 8007eb8:	18d2      	addlt	r2, r2, r3
 8007eba:	1b1c      	subge	r4, r3, r4
 8007ebc:	9b07      	ldr	r3, [sp, #28]
 8007ebe:	bfbc      	itt	lt
 8007ec0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007ec2:	2400      	movlt	r4, #0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	bfb5      	itete	lt
 8007ec8:	eba8 0603 	sublt.w	r6, r8, r3
 8007ecc:	9b07      	ldrge	r3, [sp, #28]
 8007ece:	2300      	movlt	r3, #0
 8007ed0:	4646      	movge	r6, r8
 8007ed2:	e730      	b.n	8007d36 <_dtoa_r+0x71e>
 8007ed4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007ed6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007ed8:	4646      	mov	r6, r8
 8007eda:	e735      	b.n	8007d48 <_dtoa_r+0x730>
 8007edc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ede:	e75c      	b.n	8007d9a <_dtoa_r+0x782>
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	e788      	b.n	8007df6 <_dtoa_r+0x7de>
 8007ee4:	3fe00000 	.word	0x3fe00000
 8007ee8:	40240000 	.word	0x40240000
 8007eec:	40140000 	.word	0x40140000
 8007ef0:	9b02      	ldr	r3, [sp, #8]
 8007ef2:	e780      	b.n	8007df6 <_dtoa_r+0x7de>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ef8:	e782      	b.n	8007e00 <_dtoa_r+0x7e8>
 8007efa:	d099      	beq.n	8007e30 <_dtoa_r+0x818>
 8007efc:	9a08      	ldr	r2, [sp, #32]
 8007efe:	331c      	adds	r3, #28
 8007f00:	441a      	add	r2, r3
 8007f02:	4498      	add	r8, r3
 8007f04:	441e      	add	r6, r3
 8007f06:	9208      	str	r2, [sp, #32]
 8007f08:	e792      	b.n	8007e30 <_dtoa_r+0x818>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	e7f6      	b.n	8007efc <_dtoa_r+0x8e4>
 8007f0e:	9b07      	ldr	r3, [sp, #28]
 8007f10:	9704      	str	r7, [sp, #16]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	dc20      	bgt.n	8007f58 <_dtoa_r+0x940>
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	dd1e      	ble.n	8007f5c <_dtoa_r+0x944>
 8007f1e:	9b00      	ldr	r3, [sp, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f47f aec0 	bne.w	8007ca6 <_dtoa_r+0x68e>
 8007f26:	4621      	mov	r1, r4
 8007f28:	2205      	movs	r2, #5
 8007f2a:	4658      	mov	r0, fp
 8007f2c:	f000 fa9a 	bl	8008464 <__multadd>
 8007f30:	4601      	mov	r1, r0
 8007f32:	4604      	mov	r4, r0
 8007f34:	4648      	mov	r0, r9
 8007f36:	f000 fcf7 	bl	8008928 <__mcmp>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	f77f aeb3 	ble.w	8007ca6 <_dtoa_r+0x68e>
 8007f40:	4656      	mov	r6, sl
 8007f42:	2331      	movs	r3, #49	@ 0x31
 8007f44:	f806 3b01 	strb.w	r3, [r6], #1
 8007f48:	9b04      	ldr	r3, [sp, #16]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	9304      	str	r3, [sp, #16]
 8007f4e:	e6ae      	b.n	8007cae <_dtoa_r+0x696>
 8007f50:	9c07      	ldr	r4, [sp, #28]
 8007f52:	9704      	str	r7, [sp, #16]
 8007f54:	4625      	mov	r5, r4
 8007f56:	e7f3      	b.n	8007f40 <_dtoa_r+0x928>
 8007f58:	9b07      	ldr	r3, [sp, #28]
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 8104 	beq.w	800816c <_dtoa_r+0xb54>
 8007f64:	2e00      	cmp	r6, #0
 8007f66:	dd05      	ble.n	8007f74 <_dtoa_r+0x95c>
 8007f68:	4629      	mov	r1, r5
 8007f6a:	4632      	mov	r2, r6
 8007f6c:	4658      	mov	r0, fp
 8007f6e:	f000 fc6f 	bl	8008850 <__lshift>
 8007f72:	4605      	mov	r5, r0
 8007f74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d05a      	beq.n	8008030 <_dtoa_r+0xa18>
 8007f7a:	6869      	ldr	r1, [r5, #4]
 8007f7c:	4658      	mov	r0, fp
 8007f7e:	f000 fa0f 	bl	80083a0 <_Balloc>
 8007f82:	4606      	mov	r6, r0
 8007f84:	b928      	cbnz	r0, 8007f92 <_dtoa_r+0x97a>
 8007f86:	4b84      	ldr	r3, [pc, #528]	@ (8008198 <_dtoa_r+0xb80>)
 8007f88:	4602      	mov	r2, r0
 8007f8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007f8e:	f7ff bb5a 	b.w	8007646 <_dtoa_r+0x2e>
 8007f92:	692a      	ldr	r2, [r5, #16]
 8007f94:	3202      	adds	r2, #2
 8007f96:	0092      	lsls	r2, r2, #2
 8007f98:	f105 010c 	add.w	r1, r5, #12
 8007f9c:	300c      	adds	r0, #12
 8007f9e:	f7ff fa9c 	bl	80074da <memcpy>
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	4658      	mov	r0, fp
 8007fa8:	f000 fc52 	bl	8008850 <__lshift>
 8007fac:	f10a 0301 	add.w	r3, sl, #1
 8007fb0:	9307      	str	r3, [sp, #28]
 8007fb2:	9b00      	ldr	r3, [sp, #0]
 8007fb4:	4453      	add	r3, sl
 8007fb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fb8:	9b02      	ldr	r3, [sp, #8]
 8007fba:	f003 0301 	and.w	r3, r3, #1
 8007fbe:	462f      	mov	r7, r5
 8007fc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fc2:	4605      	mov	r5, r0
 8007fc4:	9b07      	ldr	r3, [sp, #28]
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	4648      	mov	r0, r9
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	f7ff fa99 	bl	8007504 <quorem>
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	9002      	str	r0, [sp, #8]
 8007fd6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007fda:	4648      	mov	r0, r9
 8007fdc:	f000 fca4 	bl	8008928 <__mcmp>
 8007fe0:	462a      	mov	r2, r5
 8007fe2:	9008      	str	r0, [sp, #32]
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	4658      	mov	r0, fp
 8007fe8:	f000 fcba 	bl	8008960 <__mdiff>
 8007fec:	68c2      	ldr	r2, [r0, #12]
 8007fee:	4606      	mov	r6, r0
 8007ff0:	bb02      	cbnz	r2, 8008034 <_dtoa_r+0xa1c>
 8007ff2:	4601      	mov	r1, r0
 8007ff4:	4648      	mov	r0, r9
 8007ff6:	f000 fc97 	bl	8008928 <__mcmp>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	4631      	mov	r1, r6
 8007ffe:	4658      	mov	r0, fp
 8008000:	920e      	str	r2, [sp, #56]	@ 0x38
 8008002:	f000 fa0d 	bl	8008420 <_Bfree>
 8008006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008008:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800800a:	9e07      	ldr	r6, [sp, #28]
 800800c:	ea43 0102 	orr.w	r1, r3, r2
 8008010:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008012:	4319      	orrs	r1, r3
 8008014:	d110      	bne.n	8008038 <_dtoa_r+0xa20>
 8008016:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800801a:	d029      	beq.n	8008070 <_dtoa_r+0xa58>
 800801c:	9b08      	ldr	r3, [sp, #32]
 800801e:	2b00      	cmp	r3, #0
 8008020:	dd02      	ble.n	8008028 <_dtoa_r+0xa10>
 8008022:	9b02      	ldr	r3, [sp, #8]
 8008024:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008028:	9b00      	ldr	r3, [sp, #0]
 800802a:	f883 8000 	strb.w	r8, [r3]
 800802e:	e63f      	b.n	8007cb0 <_dtoa_r+0x698>
 8008030:	4628      	mov	r0, r5
 8008032:	e7bb      	b.n	8007fac <_dtoa_r+0x994>
 8008034:	2201      	movs	r2, #1
 8008036:	e7e1      	b.n	8007ffc <_dtoa_r+0x9e4>
 8008038:	9b08      	ldr	r3, [sp, #32]
 800803a:	2b00      	cmp	r3, #0
 800803c:	db04      	blt.n	8008048 <_dtoa_r+0xa30>
 800803e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008040:	430b      	orrs	r3, r1
 8008042:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008044:	430b      	orrs	r3, r1
 8008046:	d120      	bne.n	800808a <_dtoa_r+0xa72>
 8008048:	2a00      	cmp	r2, #0
 800804a:	dded      	ble.n	8008028 <_dtoa_r+0xa10>
 800804c:	4649      	mov	r1, r9
 800804e:	2201      	movs	r2, #1
 8008050:	4658      	mov	r0, fp
 8008052:	f000 fbfd 	bl	8008850 <__lshift>
 8008056:	4621      	mov	r1, r4
 8008058:	4681      	mov	r9, r0
 800805a:	f000 fc65 	bl	8008928 <__mcmp>
 800805e:	2800      	cmp	r0, #0
 8008060:	dc03      	bgt.n	800806a <_dtoa_r+0xa52>
 8008062:	d1e1      	bne.n	8008028 <_dtoa_r+0xa10>
 8008064:	f018 0f01 	tst.w	r8, #1
 8008068:	d0de      	beq.n	8008028 <_dtoa_r+0xa10>
 800806a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800806e:	d1d8      	bne.n	8008022 <_dtoa_r+0xa0a>
 8008070:	9a00      	ldr	r2, [sp, #0]
 8008072:	2339      	movs	r3, #57	@ 0x39
 8008074:	7013      	strb	r3, [r2, #0]
 8008076:	4633      	mov	r3, r6
 8008078:	461e      	mov	r6, r3
 800807a:	3b01      	subs	r3, #1
 800807c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008080:	2a39      	cmp	r2, #57	@ 0x39
 8008082:	d052      	beq.n	800812a <_dtoa_r+0xb12>
 8008084:	3201      	adds	r2, #1
 8008086:	701a      	strb	r2, [r3, #0]
 8008088:	e612      	b.n	8007cb0 <_dtoa_r+0x698>
 800808a:	2a00      	cmp	r2, #0
 800808c:	dd07      	ble.n	800809e <_dtoa_r+0xa86>
 800808e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008092:	d0ed      	beq.n	8008070 <_dtoa_r+0xa58>
 8008094:	9a00      	ldr	r2, [sp, #0]
 8008096:	f108 0301 	add.w	r3, r8, #1
 800809a:	7013      	strb	r3, [r2, #0]
 800809c:	e608      	b.n	8007cb0 <_dtoa_r+0x698>
 800809e:	9b07      	ldr	r3, [sp, #28]
 80080a0:	9a07      	ldr	r2, [sp, #28]
 80080a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80080a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d028      	beq.n	80080fe <_dtoa_r+0xae6>
 80080ac:	4649      	mov	r1, r9
 80080ae:	2300      	movs	r3, #0
 80080b0:	220a      	movs	r2, #10
 80080b2:	4658      	mov	r0, fp
 80080b4:	f000 f9d6 	bl	8008464 <__multadd>
 80080b8:	42af      	cmp	r7, r5
 80080ba:	4681      	mov	r9, r0
 80080bc:	f04f 0300 	mov.w	r3, #0
 80080c0:	f04f 020a 	mov.w	r2, #10
 80080c4:	4639      	mov	r1, r7
 80080c6:	4658      	mov	r0, fp
 80080c8:	d107      	bne.n	80080da <_dtoa_r+0xac2>
 80080ca:	f000 f9cb 	bl	8008464 <__multadd>
 80080ce:	4607      	mov	r7, r0
 80080d0:	4605      	mov	r5, r0
 80080d2:	9b07      	ldr	r3, [sp, #28]
 80080d4:	3301      	adds	r3, #1
 80080d6:	9307      	str	r3, [sp, #28]
 80080d8:	e774      	b.n	8007fc4 <_dtoa_r+0x9ac>
 80080da:	f000 f9c3 	bl	8008464 <__multadd>
 80080de:	4629      	mov	r1, r5
 80080e0:	4607      	mov	r7, r0
 80080e2:	2300      	movs	r3, #0
 80080e4:	220a      	movs	r2, #10
 80080e6:	4658      	mov	r0, fp
 80080e8:	f000 f9bc 	bl	8008464 <__multadd>
 80080ec:	4605      	mov	r5, r0
 80080ee:	e7f0      	b.n	80080d2 <_dtoa_r+0xaba>
 80080f0:	9b00      	ldr	r3, [sp, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	bfcc      	ite	gt
 80080f6:	461e      	movgt	r6, r3
 80080f8:	2601      	movle	r6, #1
 80080fa:	4456      	add	r6, sl
 80080fc:	2700      	movs	r7, #0
 80080fe:	4649      	mov	r1, r9
 8008100:	2201      	movs	r2, #1
 8008102:	4658      	mov	r0, fp
 8008104:	f000 fba4 	bl	8008850 <__lshift>
 8008108:	4621      	mov	r1, r4
 800810a:	4681      	mov	r9, r0
 800810c:	f000 fc0c 	bl	8008928 <__mcmp>
 8008110:	2800      	cmp	r0, #0
 8008112:	dcb0      	bgt.n	8008076 <_dtoa_r+0xa5e>
 8008114:	d102      	bne.n	800811c <_dtoa_r+0xb04>
 8008116:	f018 0f01 	tst.w	r8, #1
 800811a:	d1ac      	bne.n	8008076 <_dtoa_r+0xa5e>
 800811c:	4633      	mov	r3, r6
 800811e:	461e      	mov	r6, r3
 8008120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008124:	2a30      	cmp	r2, #48	@ 0x30
 8008126:	d0fa      	beq.n	800811e <_dtoa_r+0xb06>
 8008128:	e5c2      	b.n	8007cb0 <_dtoa_r+0x698>
 800812a:	459a      	cmp	sl, r3
 800812c:	d1a4      	bne.n	8008078 <_dtoa_r+0xa60>
 800812e:	9b04      	ldr	r3, [sp, #16]
 8008130:	3301      	adds	r3, #1
 8008132:	9304      	str	r3, [sp, #16]
 8008134:	2331      	movs	r3, #49	@ 0x31
 8008136:	f88a 3000 	strb.w	r3, [sl]
 800813a:	e5b9      	b.n	8007cb0 <_dtoa_r+0x698>
 800813c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800813e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800819c <_dtoa_r+0xb84>
 8008142:	b11b      	cbz	r3, 800814c <_dtoa_r+0xb34>
 8008144:	f10a 0308 	add.w	r3, sl, #8
 8008148:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800814a:	6013      	str	r3, [r2, #0]
 800814c:	4650      	mov	r0, sl
 800814e:	b019      	add	sp, #100	@ 0x64
 8008150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008156:	2b01      	cmp	r3, #1
 8008158:	f77f ae37 	ble.w	8007dca <_dtoa_r+0x7b2>
 800815c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800815e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008160:	2001      	movs	r0, #1
 8008162:	e655      	b.n	8007e10 <_dtoa_r+0x7f8>
 8008164:	9b00      	ldr	r3, [sp, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	f77f aed6 	ble.w	8007f18 <_dtoa_r+0x900>
 800816c:	4656      	mov	r6, sl
 800816e:	4621      	mov	r1, r4
 8008170:	4648      	mov	r0, r9
 8008172:	f7ff f9c7 	bl	8007504 <quorem>
 8008176:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800817a:	f806 8b01 	strb.w	r8, [r6], #1
 800817e:	9b00      	ldr	r3, [sp, #0]
 8008180:	eba6 020a 	sub.w	r2, r6, sl
 8008184:	4293      	cmp	r3, r2
 8008186:	ddb3      	ble.n	80080f0 <_dtoa_r+0xad8>
 8008188:	4649      	mov	r1, r9
 800818a:	2300      	movs	r3, #0
 800818c:	220a      	movs	r2, #10
 800818e:	4658      	mov	r0, fp
 8008190:	f000 f968 	bl	8008464 <__multadd>
 8008194:	4681      	mov	r9, r0
 8008196:	e7ea      	b.n	800816e <_dtoa_r+0xb56>
 8008198:	0800ae15 	.word	0x0800ae15
 800819c:	0800ad99 	.word	0x0800ad99

080081a0 <_free_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	4605      	mov	r5, r0
 80081a4:	2900      	cmp	r1, #0
 80081a6:	d041      	beq.n	800822c <_free_r+0x8c>
 80081a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ac:	1f0c      	subs	r4, r1, #4
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	bfb8      	it	lt
 80081b2:	18e4      	addlt	r4, r4, r3
 80081b4:	f000 f8e8 	bl	8008388 <__malloc_lock>
 80081b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008230 <_free_r+0x90>)
 80081ba:	6813      	ldr	r3, [r2, #0]
 80081bc:	b933      	cbnz	r3, 80081cc <_free_r+0x2c>
 80081be:	6063      	str	r3, [r4, #4]
 80081c0:	6014      	str	r4, [r2, #0]
 80081c2:	4628      	mov	r0, r5
 80081c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081c8:	f000 b8e4 	b.w	8008394 <__malloc_unlock>
 80081cc:	42a3      	cmp	r3, r4
 80081ce:	d908      	bls.n	80081e2 <_free_r+0x42>
 80081d0:	6820      	ldr	r0, [r4, #0]
 80081d2:	1821      	adds	r1, r4, r0
 80081d4:	428b      	cmp	r3, r1
 80081d6:	bf01      	itttt	eq
 80081d8:	6819      	ldreq	r1, [r3, #0]
 80081da:	685b      	ldreq	r3, [r3, #4]
 80081dc:	1809      	addeq	r1, r1, r0
 80081de:	6021      	streq	r1, [r4, #0]
 80081e0:	e7ed      	b.n	80081be <_free_r+0x1e>
 80081e2:	461a      	mov	r2, r3
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	b10b      	cbz	r3, 80081ec <_free_r+0x4c>
 80081e8:	42a3      	cmp	r3, r4
 80081ea:	d9fa      	bls.n	80081e2 <_free_r+0x42>
 80081ec:	6811      	ldr	r1, [r2, #0]
 80081ee:	1850      	adds	r0, r2, r1
 80081f0:	42a0      	cmp	r0, r4
 80081f2:	d10b      	bne.n	800820c <_free_r+0x6c>
 80081f4:	6820      	ldr	r0, [r4, #0]
 80081f6:	4401      	add	r1, r0
 80081f8:	1850      	adds	r0, r2, r1
 80081fa:	4283      	cmp	r3, r0
 80081fc:	6011      	str	r1, [r2, #0]
 80081fe:	d1e0      	bne.n	80081c2 <_free_r+0x22>
 8008200:	6818      	ldr	r0, [r3, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	6053      	str	r3, [r2, #4]
 8008206:	4408      	add	r0, r1
 8008208:	6010      	str	r0, [r2, #0]
 800820a:	e7da      	b.n	80081c2 <_free_r+0x22>
 800820c:	d902      	bls.n	8008214 <_free_r+0x74>
 800820e:	230c      	movs	r3, #12
 8008210:	602b      	str	r3, [r5, #0]
 8008212:	e7d6      	b.n	80081c2 <_free_r+0x22>
 8008214:	6820      	ldr	r0, [r4, #0]
 8008216:	1821      	adds	r1, r4, r0
 8008218:	428b      	cmp	r3, r1
 800821a:	bf04      	itt	eq
 800821c:	6819      	ldreq	r1, [r3, #0]
 800821e:	685b      	ldreq	r3, [r3, #4]
 8008220:	6063      	str	r3, [r4, #4]
 8008222:	bf04      	itt	eq
 8008224:	1809      	addeq	r1, r1, r0
 8008226:	6021      	streq	r1, [r4, #0]
 8008228:	6054      	str	r4, [r2, #4]
 800822a:	e7ca      	b.n	80081c2 <_free_r+0x22>
 800822c:	bd38      	pop	{r3, r4, r5, pc}
 800822e:	bf00      	nop
 8008230:	20004478 	.word	0x20004478

08008234 <malloc>:
 8008234:	4b02      	ldr	r3, [pc, #8]	@ (8008240 <malloc+0xc>)
 8008236:	4601      	mov	r1, r0
 8008238:	6818      	ldr	r0, [r3, #0]
 800823a:	f000 b825 	b.w	8008288 <_malloc_r>
 800823e:	bf00      	nop
 8008240:	2000001c 	.word	0x2000001c

08008244 <sbrk_aligned>:
 8008244:	b570      	push	{r4, r5, r6, lr}
 8008246:	4e0f      	ldr	r6, [pc, #60]	@ (8008284 <sbrk_aligned+0x40>)
 8008248:	460c      	mov	r4, r1
 800824a:	6831      	ldr	r1, [r6, #0]
 800824c:	4605      	mov	r5, r0
 800824e:	b911      	cbnz	r1, 8008256 <sbrk_aligned+0x12>
 8008250:	f001 fe0c 	bl	8009e6c <_sbrk_r>
 8008254:	6030      	str	r0, [r6, #0]
 8008256:	4621      	mov	r1, r4
 8008258:	4628      	mov	r0, r5
 800825a:	f001 fe07 	bl	8009e6c <_sbrk_r>
 800825e:	1c43      	adds	r3, r0, #1
 8008260:	d103      	bne.n	800826a <sbrk_aligned+0x26>
 8008262:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008266:	4620      	mov	r0, r4
 8008268:	bd70      	pop	{r4, r5, r6, pc}
 800826a:	1cc4      	adds	r4, r0, #3
 800826c:	f024 0403 	bic.w	r4, r4, #3
 8008270:	42a0      	cmp	r0, r4
 8008272:	d0f8      	beq.n	8008266 <sbrk_aligned+0x22>
 8008274:	1a21      	subs	r1, r4, r0
 8008276:	4628      	mov	r0, r5
 8008278:	f001 fdf8 	bl	8009e6c <_sbrk_r>
 800827c:	3001      	adds	r0, #1
 800827e:	d1f2      	bne.n	8008266 <sbrk_aligned+0x22>
 8008280:	e7ef      	b.n	8008262 <sbrk_aligned+0x1e>
 8008282:	bf00      	nop
 8008284:	20004474 	.word	0x20004474

08008288 <_malloc_r>:
 8008288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800828c:	1ccd      	adds	r5, r1, #3
 800828e:	f025 0503 	bic.w	r5, r5, #3
 8008292:	3508      	adds	r5, #8
 8008294:	2d0c      	cmp	r5, #12
 8008296:	bf38      	it	cc
 8008298:	250c      	movcc	r5, #12
 800829a:	2d00      	cmp	r5, #0
 800829c:	4606      	mov	r6, r0
 800829e:	db01      	blt.n	80082a4 <_malloc_r+0x1c>
 80082a0:	42a9      	cmp	r1, r5
 80082a2:	d904      	bls.n	80082ae <_malloc_r+0x26>
 80082a4:	230c      	movs	r3, #12
 80082a6:	6033      	str	r3, [r6, #0]
 80082a8:	2000      	movs	r0, #0
 80082aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008384 <_malloc_r+0xfc>
 80082b2:	f000 f869 	bl	8008388 <__malloc_lock>
 80082b6:	f8d8 3000 	ldr.w	r3, [r8]
 80082ba:	461c      	mov	r4, r3
 80082bc:	bb44      	cbnz	r4, 8008310 <_malloc_r+0x88>
 80082be:	4629      	mov	r1, r5
 80082c0:	4630      	mov	r0, r6
 80082c2:	f7ff ffbf 	bl	8008244 <sbrk_aligned>
 80082c6:	1c43      	adds	r3, r0, #1
 80082c8:	4604      	mov	r4, r0
 80082ca:	d158      	bne.n	800837e <_malloc_r+0xf6>
 80082cc:	f8d8 4000 	ldr.w	r4, [r8]
 80082d0:	4627      	mov	r7, r4
 80082d2:	2f00      	cmp	r7, #0
 80082d4:	d143      	bne.n	800835e <_malloc_r+0xd6>
 80082d6:	2c00      	cmp	r4, #0
 80082d8:	d04b      	beq.n	8008372 <_malloc_r+0xea>
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	4639      	mov	r1, r7
 80082de:	4630      	mov	r0, r6
 80082e0:	eb04 0903 	add.w	r9, r4, r3
 80082e4:	f001 fdc2 	bl	8009e6c <_sbrk_r>
 80082e8:	4581      	cmp	r9, r0
 80082ea:	d142      	bne.n	8008372 <_malloc_r+0xea>
 80082ec:	6821      	ldr	r1, [r4, #0]
 80082ee:	1a6d      	subs	r5, r5, r1
 80082f0:	4629      	mov	r1, r5
 80082f2:	4630      	mov	r0, r6
 80082f4:	f7ff ffa6 	bl	8008244 <sbrk_aligned>
 80082f8:	3001      	adds	r0, #1
 80082fa:	d03a      	beq.n	8008372 <_malloc_r+0xea>
 80082fc:	6823      	ldr	r3, [r4, #0]
 80082fe:	442b      	add	r3, r5
 8008300:	6023      	str	r3, [r4, #0]
 8008302:	f8d8 3000 	ldr.w	r3, [r8]
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	bb62      	cbnz	r2, 8008364 <_malloc_r+0xdc>
 800830a:	f8c8 7000 	str.w	r7, [r8]
 800830e:	e00f      	b.n	8008330 <_malloc_r+0xa8>
 8008310:	6822      	ldr	r2, [r4, #0]
 8008312:	1b52      	subs	r2, r2, r5
 8008314:	d420      	bmi.n	8008358 <_malloc_r+0xd0>
 8008316:	2a0b      	cmp	r2, #11
 8008318:	d917      	bls.n	800834a <_malloc_r+0xc2>
 800831a:	1961      	adds	r1, r4, r5
 800831c:	42a3      	cmp	r3, r4
 800831e:	6025      	str	r5, [r4, #0]
 8008320:	bf18      	it	ne
 8008322:	6059      	strne	r1, [r3, #4]
 8008324:	6863      	ldr	r3, [r4, #4]
 8008326:	bf08      	it	eq
 8008328:	f8c8 1000 	streq.w	r1, [r8]
 800832c:	5162      	str	r2, [r4, r5]
 800832e:	604b      	str	r3, [r1, #4]
 8008330:	4630      	mov	r0, r6
 8008332:	f000 f82f 	bl	8008394 <__malloc_unlock>
 8008336:	f104 000b 	add.w	r0, r4, #11
 800833a:	1d23      	adds	r3, r4, #4
 800833c:	f020 0007 	bic.w	r0, r0, #7
 8008340:	1ac2      	subs	r2, r0, r3
 8008342:	bf1c      	itt	ne
 8008344:	1a1b      	subne	r3, r3, r0
 8008346:	50a3      	strne	r3, [r4, r2]
 8008348:	e7af      	b.n	80082aa <_malloc_r+0x22>
 800834a:	6862      	ldr	r2, [r4, #4]
 800834c:	42a3      	cmp	r3, r4
 800834e:	bf0c      	ite	eq
 8008350:	f8c8 2000 	streq.w	r2, [r8]
 8008354:	605a      	strne	r2, [r3, #4]
 8008356:	e7eb      	b.n	8008330 <_malloc_r+0xa8>
 8008358:	4623      	mov	r3, r4
 800835a:	6864      	ldr	r4, [r4, #4]
 800835c:	e7ae      	b.n	80082bc <_malloc_r+0x34>
 800835e:	463c      	mov	r4, r7
 8008360:	687f      	ldr	r7, [r7, #4]
 8008362:	e7b6      	b.n	80082d2 <_malloc_r+0x4a>
 8008364:	461a      	mov	r2, r3
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	42a3      	cmp	r3, r4
 800836a:	d1fb      	bne.n	8008364 <_malloc_r+0xdc>
 800836c:	2300      	movs	r3, #0
 800836e:	6053      	str	r3, [r2, #4]
 8008370:	e7de      	b.n	8008330 <_malloc_r+0xa8>
 8008372:	230c      	movs	r3, #12
 8008374:	6033      	str	r3, [r6, #0]
 8008376:	4630      	mov	r0, r6
 8008378:	f000 f80c 	bl	8008394 <__malloc_unlock>
 800837c:	e794      	b.n	80082a8 <_malloc_r+0x20>
 800837e:	6005      	str	r5, [r0, #0]
 8008380:	e7d6      	b.n	8008330 <_malloc_r+0xa8>
 8008382:	bf00      	nop
 8008384:	20004478 	.word	0x20004478

08008388 <__malloc_lock>:
 8008388:	4801      	ldr	r0, [pc, #4]	@ (8008390 <__malloc_lock+0x8>)
 800838a:	f7ff b8a4 	b.w	80074d6 <__retarget_lock_acquire_recursive>
 800838e:	bf00      	nop
 8008390:	20004470 	.word	0x20004470

08008394 <__malloc_unlock>:
 8008394:	4801      	ldr	r0, [pc, #4]	@ (800839c <__malloc_unlock+0x8>)
 8008396:	f7ff b89f 	b.w	80074d8 <__retarget_lock_release_recursive>
 800839a:	bf00      	nop
 800839c:	20004470 	.word	0x20004470

080083a0 <_Balloc>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	69c6      	ldr	r6, [r0, #28]
 80083a4:	4604      	mov	r4, r0
 80083a6:	460d      	mov	r5, r1
 80083a8:	b976      	cbnz	r6, 80083c8 <_Balloc+0x28>
 80083aa:	2010      	movs	r0, #16
 80083ac:	f7ff ff42 	bl	8008234 <malloc>
 80083b0:	4602      	mov	r2, r0
 80083b2:	61e0      	str	r0, [r4, #28]
 80083b4:	b920      	cbnz	r0, 80083c0 <_Balloc+0x20>
 80083b6:	4b18      	ldr	r3, [pc, #96]	@ (8008418 <_Balloc+0x78>)
 80083b8:	4818      	ldr	r0, [pc, #96]	@ (800841c <_Balloc+0x7c>)
 80083ba:	216b      	movs	r1, #107	@ 0x6b
 80083bc:	f001 fd70 	bl	8009ea0 <__assert_func>
 80083c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083c4:	6006      	str	r6, [r0, #0]
 80083c6:	60c6      	str	r6, [r0, #12]
 80083c8:	69e6      	ldr	r6, [r4, #28]
 80083ca:	68f3      	ldr	r3, [r6, #12]
 80083cc:	b183      	cbz	r3, 80083f0 <_Balloc+0x50>
 80083ce:	69e3      	ldr	r3, [r4, #28]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083d6:	b9b8      	cbnz	r0, 8008408 <_Balloc+0x68>
 80083d8:	2101      	movs	r1, #1
 80083da:	fa01 f605 	lsl.w	r6, r1, r5
 80083de:	1d72      	adds	r2, r6, #5
 80083e0:	0092      	lsls	r2, r2, #2
 80083e2:	4620      	mov	r0, r4
 80083e4:	f001 fd7a 	bl	8009edc <_calloc_r>
 80083e8:	b160      	cbz	r0, 8008404 <_Balloc+0x64>
 80083ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80083ee:	e00e      	b.n	800840e <_Balloc+0x6e>
 80083f0:	2221      	movs	r2, #33	@ 0x21
 80083f2:	2104      	movs	r1, #4
 80083f4:	4620      	mov	r0, r4
 80083f6:	f001 fd71 	bl	8009edc <_calloc_r>
 80083fa:	69e3      	ldr	r3, [r4, #28]
 80083fc:	60f0      	str	r0, [r6, #12]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1e4      	bne.n	80083ce <_Balloc+0x2e>
 8008404:	2000      	movs	r0, #0
 8008406:	bd70      	pop	{r4, r5, r6, pc}
 8008408:	6802      	ldr	r2, [r0, #0]
 800840a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800840e:	2300      	movs	r3, #0
 8008410:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008414:	e7f7      	b.n	8008406 <_Balloc+0x66>
 8008416:	bf00      	nop
 8008418:	0800ada6 	.word	0x0800ada6
 800841c:	0800ae26 	.word	0x0800ae26

08008420 <_Bfree>:
 8008420:	b570      	push	{r4, r5, r6, lr}
 8008422:	69c6      	ldr	r6, [r0, #28]
 8008424:	4605      	mov	r5, r0
 8008426:	460c      	mov	r4, r1
 8008428:	b976      	cbnz	r6, 8008448 <_Bfree+0x28>
 800842a:	2010      	movs	r0, #16
 800842c:	f7ff ff02 	bl	8008234 <malloc>
 8008430:	4602      	mov	r2, r0
 8008432:	61e8      	str	r0, [r5, #28]
 8008434:	b920      	cbnz	r0, 8008440 <_Bfree+0x20>
 8008436:	4b09      	ldr	r3, [pc, #36]	@ (800845c <_Bfree+0x3c>)
 8008438:	4809      	ldr	r0, [pc, #36]	@ (8008460 <_Bfree+0x40>)
 800843a:	218f      	movs	r1, #143	@ 0x8f
 800843c:	f001 fd30 	bl	8009ea0 <__assert_func>
 8008440:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008444:	6006      	str	r6, [r0, #0]
 8008446:	60c6      	str	r6, [r0, #12]
 8008448:	b13c      	cbz	r4, 800845a <_Bfree+0x3a>
 800844a:	69eb      	ldr	r3, [r5, #28]
 800844c:	6862      	ldr	r2, [r4, #4]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008454:	6021      	str	r1, [r4, #0]
 8008456:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800845a:	bd70      	pop	{r4, r5, r6, pc}
 800845c:	0800ada6 	.word	0x0800ada6
 8008460:	0800ae26 	.word	0x0800ae26

08008464 <__multadd>:
 8008464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008468:	690d      	ldr	r5, [r1, #16]
 800846a:	4607      	mov	r7, r0
 800846c:	460c      	mov	r4, r1
 800846e:	461e      	mov	r6, r3
 8008470:	f101 0c14 	add.w	ip, r1, #20
 8008474:	2000      	movs	r0, #0
 8008476:	f8dc 3000 	ldr.w	r3, [ip]
 800847a:	b299      	uxth	r1, r3
 800847c:	fb02 6101 	mla	r1, r2, r1, r6
 8008480:	0c1e      	lsrs	r6, r3, #16
 8008482:	0c0b      	lsrs	r3, r1, #16
 8008484:	fb02 3306 	mla	r3, r2, r6, r3
 8008488:	b289      	uxth	r1, r1
 800848a:	3001      	adds	r0, #1
 800848c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008490:	4285      	cmp	r5, r0
 8008492:	f84c 1b04 	str.w	r1, [ip], #4
 8008496:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800849a:	dcec      	bgt.n	8008476 <__multadd+0x12>
 800849c:	b30e      	cbz	r6, 80084e2 <__multadd+0x7e>
 800849e:	68a3      	ldr	r3, [r4, #8]
 80084a0:	42ab      	cmp	r3, r5
 80084a2:	dc19      	bgt.n	80084d8 <__multadd+0x74>
 80084a4:	6861      	ldr	r1, [r4, #4]
 80084a6:	4638      	mov	r0, r7
 80084a8:	3101      	adds	r1, #1
 80084aa:	f7ff ff79 	bl	80083a0 <_Balloc>
 80084ae:	4680      	mov	r8, r0
 80084b0:	b928      	cbnz	r0, 80084be <__multadd+0x5a>
 80084b2:	4602      	mov	r2, r0
 80084b4:	4b0c      	ldr	r3, [pc, #48]	@ (80084e8 <__multadd+0x84>)
 80084b6:	480d      	ldr	r0, [pc, #52]	@ (80084ec <__multadd+0x88>)
 80084b8:	21ba      	movs	r1, #186	@ 0xba
 80084ba:	f001 fcf1 	bl	8009ea0 <__assert_func>
 80084be:	6922      	ldr	r2, [r4, #16]
 80084c0:	3202      	adds	r2, #2
 80084c2:	f104 010c 	add.w	r1, r4, #12
 80084c6:	0092      	lsls	r2, r2, #2
 80084c8:	300c      	adds	r0, #12
 80084ca:	f7ff f806 	bl	80074da <memcpy>
 80084ce:	4621      	mov	r1, r4
 80084d0:	4638      	mov	r0, r7
 80084d2:	f7ff ffa5 	bl	8008420 <_Bfree>
 80084d6:	4644      	mov	r4, r8
 80084d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084dc:	3501      	adds	r5, #1
 80084de:	615e      	str	r6, [r3, #20]
 80084e0:	6125      	str	r5, [r4, #16]
 80084e2:	4620      	mov	r0, r4
 80084e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084e8:	0800ae15 	.word	0x0800ae15
 80084ec:	0800ae26 	.word	0x0800ae26

080084f0 <__s2b>:
 80084f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084f4:	460c      	mov	r4, r1
 80084f6:	4615      	mov	r5, r2
 80084f8:	461f      	mov	r7, r3
 80084fa:	2209      	movs	r2, #9
 80084fc:	3308      	adds	r3, #8
 80084fe:	4606      	mov	r6, r0
 8008500:	fb93 f3f2 	sdiv	r3, r3, r2
 8008504:	2100      	movs	r1, #0
 8008506:	2201      	movs	r2, #1
 8008508:	429a      	cmp	r2, r3
 800850a:	db09      	blt.n	8008520 <__s2b+0x30>
 800850c:	4630      	mov	r0, r6
 800850e:	f7ff ff47 	bl	80083a0 <_Balloc>
 8008512:	b940      	cbnz	r0, 8008526 <__s2b+0x36>
 8008514:	4602      	mov	r2, r0
 8008516:	4b19      	ldr	r3, [pc, #100]	@ (800857c <__s2b+0x8c>)
 8008518:	4819      	ldr	r0, [pc, #100]	@ (8008580 <__s2b+0x90>)
 800851a:	21d3      	movs	r1, #211	@ 0xd3
 800851c:	f001 fcc0 	bl	8009ea0 <__assert_func>
 8008520:	0052      	lsls	r2, r2, #1
 8008522:	3101      	adds	r1, #1
 8008524:	e7f0      	b.n	8008508 <__s2b+0x18>
 8008526:	9b08      	ldr	r3, [sp, #32]
 8008528:	6143      	str	r3, [r0, #20]
 800852a:	2d09      	cmp	r5, #9
 800852c:	f04f 0301 	mov.w	r3, #1
 8008530:	6103      	str	r3, [r0, #16]
 8008532:	dd16      	ble.n	8008562 <__s2b+0x72>
 8008534:	f104 0909 	add.w	r9, r4, #9
 8008538:	46c8      	mov	r8, r9
 800853a:	442c      	add	r4, r5
 800853c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008540:	4601      	mov	r1, r0
 8008542:	3b30      	subs	r3, #48	@ 0x30
 8008544:	220a      	movs	r2, #10
 8008546:	4630      	mov	r0, r6
 8008548:	f7ff ff8c 	bl	8008464 <__multadd>
 800854c:	45a0      	cmp	r8, r4
 800854e:	d1f5      	bne.n	800853c <__s2b+0x4c>
 8008550:	f1a5 0408 	sub.w	r4, r5, #8
 8008554:	444c      	add	r4, r9
 8008556:	1b2d      	subs	r5, r5, r4
 8008558:	1963      	adds	r3, r4, r5
 800855a:	42bb      	cmp	r3, r7
 800855c:	db04      	blt.n	8008568 <__s2b+0x78>
 800855e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008562:	340a      	adds	r4, #10
 8008564:	2509      	movs	r5, #9
 8008566:	e7f6      	b.n	8008556 <__s2b+0x66>
 8008568:	f814 3b01 	ldrb.w	r3, [r4], #1
 800856c:	4601      	mov	r1, r0
 800856e:	3b30      	subs	r3, #48	@ 0x30
 8008570:	220a      	movs	r2, #10
 8008572:	4630      	mov	r0, r6
 8008574:	f7ff ff76 	bl	8008464 <__multadd>
 8008578:	e7ee      	b.n	8008558 <__s2b+0x68>
 800857a:	bf00      	nop
 800857c:	0800ae15 	.word	0x0800ae15
 8008580:	0800ae26 	.word	0x0800ae26

08008584 <__hi0bits>:
 8008584:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008588:	4603      	mov	r3, r0
 800858a:	bf36      	itet	cc
 800858c:	0403      	lslcc	r3, r0, #16
 800858e:	2000      	movcs	r0, #0
 8008590:	2010      	movcc	r0, #16
 8008592:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008596:	bf3c      	itt	cc
 8008598:	021b      	lslcc	r3, r3, #8
 800859a:	3008      	addcc	r0, #8
 800859c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085a0:	bf3c      	itt	cc
 80085a2:	011b      	lslcc	r3, r3, #4
 80085a4:	3004      	addcc	r0, #4
 80085a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085aa:	bf3c      	itt	cc
 80085ac:	009b      	lslcc	r3, r3, #2
 80085ae:	3002      	addcc	r0, #2
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	db05      	blt.n	80085c0 <__hi0bits+0x3c>
 80085b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80085b8:	f100 0001 	add.w	r0, r0, #1
 80085bc:	bf08      	it	eq
 80085be:	2020      	moveq	r0, #32
 80085c0:	4770      	bx	lr

080085c2 <__lo0bits>:
 80085c2:	6803      	ldr	r3, [r0, #0]
 80085c4:	4602      	mov	r2, r0
 80085c6:	f013 0007 	ands.w	r0, r3, #7
 80085ca:	d00b      	beq.n	80085e4 <__lo0bits+0x22>
 80085cc:	07d9      	lsls	r1, r3, #31
 80085ce:	d421      	bmi.n	8008614 <__lo0bits+0x52>
 80085d0:	0798      	lsls	r0, r3, #30
 80085d2:	bf49      	itett	mi
 80085d4:	085b      	lsrmi	r3, r3, #1
 80085d6:	089b      	lsrpl	r3, r3, #2
 80085d8:	2001      	movmi	r0, #1
 80085da:	6013      	strmi	r3, [r2, #0]
 80085dc:	bf5c      	itt	pl
 80085de:	6013      	strpl	r3, [r2, #0]
 80085e0:	2002      	movpl	r0, #2
 80085e2:	4770      	bx	lr
 80085e4:	b299      	uxth	r1, r3
 80085e6:	b909      	cbnz	r1, 80085ec <__lo0bits+0x2a>
 80085e8:	0c1b      	lsrs	r3, r3, #16
 80085ea:	2010      	movs	r0, #16
 80085ec:	b2d9      	uxtb	r1, r3
 80085ee:	b909      	cbnz	r1, 80085f4 <__lo0bits+0x32>
 80085f0:	3008      	adds	r0, #8
 80085f2:	0a1b      	lsrs	r3, r3, #8
 80085f4:	0719      	lsls	r1, r3, #28
 80085f6:	bf04      	itt	eq
 80085f8:	091b      	lsreq	r3, r3, #4
 80085fa:	3004      	addeq	r0, #4
 80085fc:	0799      	lsls	r1, r3, #30
 80085fe:	bf04      	itt	eq
 8008600:	089b      	lsreq	r3, r3, #2
 8008602:	3002      	addeq	r0, #2
 8008604:	07d9      	lsls	r1, r3, #31
 8008606:	d403      	bmi.n	8008610 <__lo0bits+0x4e>
 8008608:	085b      	lsrs	r3, r3, #1
 800860a:	f100 0001 	add.w	r0, r0, #1
 800860e:	d003      	beq.n	8008618 <__lo0bits+0x56>
 8008610:	6013      	str	r3, [r2, #0]
 8008612:	4770      	bx	lr
 8008614:	2000      	movs	r0, #0
 8008616:	4770      	bx	lr
 8008618:	2020      	movs	r0, #32
 800861a:	4770      	bx	lr

0800861c <__i2b>:
 800861c:	b510      	push	{r4, lr}
 800861e:	460c      	mov	r4, r1
 8008620:	2101      	movs	r1, #1
 8008622:	f7ff febd 	bl	80083a0 <_Balloc>
 8008626:	4602      	mov	r2, r0
 8008628:	b928      	cbnz	r0, 8008636 <__i2b+0x1a>
 800862a:	4b05      	ldr	r3, [pc, #20]	@ (8008640 <__i2b+0x24>)
 800862c:	4805      	ldr	r0, [pc, #20]	@ (8008644 <__i2b+0x28>)
 800862e:	f240 1145 	movw	r1, #325	@ 0x145
 8008632:	f001 fc35 	bl	8009ea0 <__assert_func>
 8008636:	2301      	movs	r3, #1
 8008638:	6144      	str	r4, [r0, #20]
 800863a:	6103      	str	r3, [r0, #16]
 800863c:	bd10      	pop	{r4, pc}
 800863e:	bf00      	nop
 8008640:	0800ae15 	.word	0x0800ae15
 8008644:	0800ae26 	.word	0x0800ae26

08008648 <__multiply>:
 8008648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864c:	4614      	mov	r4, r2
 800864e:	690a      	ldr	r2, [r1, #16]
 8008650:	6923      	ldr	r3, [r4, #16]
 8008652:	429a      	cmp	r2, r3
 8008654:	bfa8      	it	ge
 8008656:	4623      	movge	r3, r4
 8008658:	460f      	mov	r7, r1
 800865a:	bfa4      	itt	ge
 800865c:	460c      	movge	r4, r1
 800865e:	461f      	movge	r7, r3
 8008660:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008664:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008668:	68a3      	ldr	r3, [r4, #8]
 800866a:	6861      	ldr	r1, [r4, #4]
 800866c:	eb0a 0609 	add.w	r6, sl, r9
 8008670:	42b3      	cmp	r3, r6
 8008672:	b085      	sub	sp, #20
 8008674:	bfb8      	it	lt
 8008676:	3101      	addlt	r1, #1
 8008678:	f7ff fe92 	bl	80083a0 <_Balloc>
 800867c:	b930      	cbnz	r0, 800868c <__multiply+0x44>
 800867e:	4602      	mov	r2, r0
 8008680:	4b44      	ldr	r3, [pc, #272]	@ (8008794 <__multiply+0x14c>)
 8008682:	4845      	ldr	r0, [pc, #276]	@ (8008798 <__multiply+0x150>)
 8008684:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008688:	f001 fc0a 	bl	8009ea0 <__assert_func>
 800868c:	f100 0514 	add.w	r5, r0, #20
 8008690:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008694:	462b      	mov	r3, r5
 8008696:	2200      	movs	r2, #0
 8008698:	4543      	cmp	r3, r8
 800869a:	d321      	bcc.n	80086e0 <__multiply+0x98>
 800869c:	f107 0114 	add.w	r1, r7, #20
 80086a0:	f104 0214 	add.w	r2, r4, #20
 80086a4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80086a8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80086ac:	9302      	str	r3, [sp, #8]
 80086ae:	1b13      	subs	r3, r2, r4
 80086b0:	3b15      	subs	r3, #21
 80086b2:	f023 0303 	bic.w	r3, r3, #3
 80086b6:	3304      	adds	r3, #4
 80086b8:	f104 0715 	add.w	r7, r4, #21
 80086bc:	42ba      	cmp	r2, r7
 80086be:	bf38      	it	cc
 80086c0:	2304      	movcc	r3, #4
 80086c2:	9301      	str	r3, [sp, #4]
 80086c4:	9b02      	ldr	r3, [sp, #8]
 80086c6:	9103      	str	r1, [sp, #12]
 80086c8:	428b      	cmp	r3, r1
 80086ca:	d80c      	bhi.n	80086e6 <__multiply+0x9e>
 80086cc:	2e00      	cmp	r6, #0
 80086ce:	dd03      	ble.n	80086d8 <__multiply+0x90>
 80086d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d05b      	beq.n	8008790 <__multiply+0x148>
 80086d8:	6106      	str	r6, [r0, #16]
 80086da:	b005      	add	sp, #20
 80086dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e0:	f843 2b04 	str.w	r2, [r3], #4
 80086e4:	e7d8      	b.n	8008698 <__multiply+0x50>
 80086e6:	f8b1 a000 	ldrh.w	sl, [r1]
 80086ea:	f1ba 0f00 	cmp.w	sl, #0
 80086ee:	d024      	beq.n	800873a <__multiply+0xf2>
 80086f0:	f104 0e14 	add.w	lr, r4, #20
 80086f4:	46a9      	mov	r9, r5
 80086f6:	f04f 0c00 	mov.w	ip, #0
 80086fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80086fe:	f8d9 3000 	ldr.w	r3, [r9]
 8008702:	fa1f fb87 	uxth.w	fp, r7
 8008706:	b29b      	uxth	r3, r3
 8008708:	fb0a 330b 	mla	r3, sl, fp, r3
 800870c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008710:	f8d9 7000 	ldr.w	r7, [r9]
 8008714:	4463      	add	r3, ip
 8008716:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800871a:	fb0a c70b 	mla	r7, sl, fp, ip
 800871e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008722:	b29b      	uxth	r3, r3
 8008724:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008728:	4572      	cmp	r2, lr
 800872a:	f849 3b04 	str.w	r3, [r9], #4
 800872e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008732:	d8e2      	bhi.n	80086fa <__multiply+0xb2>
 8008734:	9b01      	ldr	r3, [sp, #4]
 8008736:	f845 c003 	str.w	ip, [r5, r3]
 800873a:	9b03      	ldr	r3, [sp, #12]
 800873c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008740:	3104      	adds	r1, #4
 8008742:	f1b9 0f00 	cmp.w	r9, #0
 8008746:	d021      	beq.n	800878c <__multiply+0x144>
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	f104 0c14 	add.w	ip, r4, #20
 800874e:	46ae      	mov	lr, r5
 8008750:	f04f 0a00 	mov.w	sl, #0
 8008754:	f8bc b000 	ldrh.w	fp, [ip]
 8008758:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800875c:	fb09 770b 	mla	r7, r9, fp, r7
 8008760:	4457      	add	r7, sl
 8008762:	b29b      	uxth	r3, r3
 8008764:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008768:	f84e 3b04 	str.w	r3, [lr], #4
 800876c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008770:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008774:	f8be 3000 	ldrh.w	r3, [lr]
 8008778:	fb09 330a 	mla	r3, r9, sl, r3
 800877c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008780:	4562      	cmp	r2, ip
 8008782:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008786:	d8e5      	bhi.n	8008754 <__multiply+0x10c>
 8008788:	9f01      	ldr	r7, [sp, #4]
 800878a:	51eb      	str	r3, [r5, r7]
 800878c:	3504      	adds	r5, #4
 800878e:	e799      	b.n	80086c4 <__multiply+0x7c>
 8008790:	3e01      	subs	r6, #1
 8008792:	e79b      	b.n	80086cc <__multiply+0x84>
 8008794:	0800ae15 	.word	0x0800ae15
 8008798:	0800ae26 	.word	0x0800ae26

0800879c <__pow5mult>:
 800879c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087a0:	4615      	mov	r5, r2
 80087a2:	f012 0203 	ands.w	r2, r2, #3
 80087a6:	4607      	mov	r7, r0
 80087a8:	460e      	mov	r6, r1
 80087aa:	d007      	beq.n	80087bc <__pow5mult+0x20>
 80087ac:	4c25      	ldr	r4, [pc, #148]	@ (8008844 <__pow5mult+0xa8>)
 80087ae:	3a01      	subs	r2, #1
 80087b0:	2300      	movs	r3, #0
 80087b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087b6:	f7ff fe55 	bl	8008464 <__multadd>
 80087ba:	4606      	mov	r6, r0
 80087bc:	10ad      	asrs	r5, r5, #2
 80087be:	d03d      	beq.n	800883c <__pow5mult+0xa0>
 80087c0:	69fc      	ldr	r4, [r7, #28]
 80087c2:	b97c      	cbnz	r4, 80087e4 <__pow5mult+0x48>
 80087c4:	2010      	movs	r0, #16
 80087c6:	f7ff fd35 	bl	8008234 <malloc>
 80087ca:	4602      	mov	r2, r0
 80087cc:	61f8      	str	r0, [r7, #28]
 80087ce:	b928      	cbnz	r0, 80087dc <__pow5mult+0x40>
 80087d0:	4b1d      	ldr	r3, [pc, #116]	@ (8008848 <__pow5mult+0xac>)
 80087d2:	481e      	ldr	r0, [pc, #120]	@ (800884c <__pow5mult+0xb0>)
 80087d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80087d8:	f001 fb62 	bl	8009ea0 <__assert_func>
 80087dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087e0:	6004      	str	r4, [r0, #0]
 80087e2:	60c4      	str	r4, [r0, #12]
 80087e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80087e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087ec:	b94c      	cbnz	r4, 8008802 <__pow5mult+0x66>
 80087ee:	f240 2171 	movw	r1, #625	@ 0x271
 80087f2:	4638      	mov	r0, r7
 80087f4:	f7ff ff12 	bl	800861c <__i2b>
 80087f8:	2300      	movs	r3, #0
 80087fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80087fe:	4604      	mov	r4, r0
 8008800:	6003      	str	r3, [r0, #0]
 8008802:	f04f 0900 	mov.w	r9, #0
 8008806:	07eb      	lsls	r3, r5, #31
 8008808:	d50a      	bpl.n	8008820 <__pow5mult+0x84>
 800880a:	4631      	mov	r1, r6
 800880c:	4622      	mov	r2, r4
 800880e:	4638      	mov	r0, r7
 8008810:	f7ff ff1a 	bl	8008648 <__multiply>
 8008814:	4631      	mov	r1, r6
 8008816:	4680      	mov	r8, r0
 8008818:	4638      	mov	r0, r7
 800881a:	f7ff fe01 	bl	8008420 <_Bfree>
 800881e:	4646      	mov	r6, r8
 8008820:	106d      	asrs	r5, r5, #1
 8008822:	d00b      	beq.n	800883c <__pow5mult+0xa0>
 8008824:	6820      	ldr	r0, [r4, #0]
 8008826:	b938      	cbnz	r0, 8008838 <__pow5mult+0x9c>
 8008828:	4622      	mov	r2, r4
 800882a:	4621      	mov	r1, r4
 800882c:	4638      	mov	r0, r7
 800882e:	f7ff ff0b 	bl	8008648 <__multiply>
 8008832:	6020      	str	r0, [r4, #0]
 8008834:	f8c0 9000 	str.w	r9, [r0]
 8008838:	4604      	mov	r4, r0
 800883a:	e7e4      	b.n	8008806 <__pow5mult+0x6a>
 800883c:	4630      	mov	r0, r6
 800883e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008842:	bf00      	nop
 8008844:	0800ae80 	.word	0x0800ae80
 8008848:	0800ada6 	.word	0x0800ada6
 800884c:	0800ae26 	.word	0x0800ae26

08008850 <__lshift>:
 8008850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008854:	460c      	mov	r4, r1
 8008856:	6849      	ldr	r1, [r1, #4]
 8008858:	6923      	ldr	r3, [r4, #16]
 800885a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800885e:	68a3      	ldr	r3, [r4, #8]
 8008860:	4607      	mov	r7, r0
 8008862:	4691      	mov	r9, r2
 8008864:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008868:	f108 0601 	add.w	r6, r8, #1
 800886c:	42b3      	cmp	r3, r6
 800886e:	db0b      	blt.n	8008888 <__lshift+0x38>
 8008870:	4638      	mov	r0, r7
 8008872:	f7ff fd95 	bl	80083a0 <_Balloc>
 8008876:	4605      	mov	r5, r0
 8008878:	b948      	cbnz	r0, 800888e <__lshift+0x3e>
 800887a:	4602      	mov	r2, r0
 800887c:	4b28      	ldr	r3, [pc, #160]	@ (8008920 <__lshift+0xd0>)
 800887e:	4829      	ldr	r0, [pc, #164]	@ (8008924 <__lshift+0xd4>)
 8008880:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008884:	f001 fb0c 	bl	8009ea0 <__assert_func>
 8008888:	3101      	adds	r1, #1
 800888a:	005b      	lsls	r3, r3, #1
 800888c:	e7ee      	b.n	800886c <__lshift+0x1c>
 800888e:	2300      	movs	r3, #0
 8008890:	f100 0114 	add.w	r1, r0, #20
 8008894:	f100 0210 	add.w	r2, r0, #16
 8008898:	4618      	mov	r0, r3
 800889a:	4553      	cmp	r3, sl
 800889c:	db33      	blt.n	8008906 <__lshift+0xb6>
 800889e:	6920      	ldr	r0, [r4, #16]
 80088a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088a4:	f104 0314 	add.w	r3, r4, #20
 80088a8:	f019 091f 	ands.w	r9, r9, #31
 80088ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088b4:	d02b      	beq.n	800890e <__lshift+0xbe>
 80088b6:	f1c9 0e20 	rsb	lr, r9, #32
 80088ba:	468a      	mov	sl, r1
 80088bc:	2200      	movs	r2, #0
 80088be:	6818      	ldr	r0, [r3, #0]
 80088c0:	fa00 f009 	lsl.w	r0, r0, r9
 80088c4:	4310      	orrs	r0, r2
 80088c6:	f84a 0b04 	str.w	r0, [sl], #4
 80088ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ce:	459c      	cmp	ip, r3
 80088d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80088d4:	d8f3      	bhi.n	80088be <__lshift+0x6e>
 80088d6:	ebac 0304 	sub.w	r3, ip, r4
 80088da:	3b15      	subs	r3, #21
 80088dc:	f023 0303 	bic.w	r3, r3, #3
 80088e0:	3304      	adds	r3, #4
 80088e2:	f104 0015 	add.w	r0, r4, #21
 80088e6:	4584      	cmp	ip, r0
 80088e8:	bf38      	it	cc
 80088ea:	2304      	movcc	r3, #4
 80088ec:	50ca      	str	r2, [r1, r3]
 80088ee:	b10a      	cbz	r2, 80088f4 <__lshift+0xa4>
 80088f0:	f108 0602 	add.w	r6, r8, #2
 80088f4:	3e01      	subs	r6, #1
 80088f6:	4638      	mov	r0, r7
 80088f8:	612e      	str	r6, [r5, #16]
 80088fa:	4621      	mov	r1, r4
 80088fc:	f7ff fd90 	bl	8008420 <_Bfree>
 8008900:	4628      	mov	r0, r5
 8008902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008906:	f842 0f04 	str.w	r0, [r2, #4]!
 800890a:	3301      	adds	r3, #1
 800890c:	e7c5      	b.n	800889a <__lshift+0x4a>
 800890e:	3904      	subs	r1, #4
 8008910:	f853 2b04 	ldr.w	r2, [r3], #4
 8008914:	f841 2f04 	str.w	r2, [r1, #4]!
 8008918:	459c      	cmp	ip, r3
 800891a:	d8f9      	bhi.n	8008910 <__lshift+0xc0>
 800891c:	e7ea      	b.n	80088f4 <__lshift+0xa4>
 800891e:	bf00      	nop
 8008920:	0800ae15 	.word	0x0800ae15
 8008924:	0800ae26 	.word	0x0800ae26

08008928 <__mcmp>:
 8008928:	690a      	ldr	r2, [r1, #16]
 800892a:	4603      	mov	r3, r0
 800892c:	6900      	ldr	r0, [r0, #16]
 800892e:	1a80      	subs	r0, r0, r2
 8008930:	b530      	push	{r4, r5, lr}
 8008932:	d10e      	bne.n	8008952 <__mcmp+0x2a>
 8008934:	3314      	adds	r3, #20
 8008936:	3114      	adds	r1, #20
 8008938:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800893c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008940:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008944:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008948:	4295      	cmp	r5, r2
 800894a:	d003      	beq.n	8008954 <__mcmp+0x2c>
 800894c:	d205      	bcs.n	800895a <__mcmp+0x32>
 800894e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008952:	bd30      	pop	{r4, r5, pc}
 8008954:	42a3      	cmp	r3, r4
 8008956:	d3f3      	bcc.n	8008940 <__mcmp+0x18>
 8008958:	e7fb      	b.n	8008952 <__mcmp+0x2a>
 800895a:	2001      	movs	r0, #1
 800895c:	e7f9      	b.n	8008952 <__mcmp+0x2a>
	...

08008960 <__mdiff>:
 8008960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008964:	4689      	mov	r9, r1
 8008966:	4606      	mov	r6, r0
 8008968:	4611      	mov	r1, r2
 800896a:	4648      	mov	r0, r9
 800896c:	4614      	mov	r4, r2
 800896e:	f7ff ffdb 	bl	8008928 <__mcmp>
 8008972:	1e05      	subs	r5, r0, #0
 8008974:	d112      	bne.n	800899c <__mdiff+0x3c>
 8008976:	4629      	mov	r1, r5
 8008978:	4630      	mov	r0, r6
 800897a:	f7ff fd11 	bl	80083a0 <_Balloc>
 800897e:	4602      	mov	r2, r0
 8008980:	b928      	cbnz	r0, 800898e <__mdiff+0x2e>
 8008982:	4b3f      	ldr	r3, [pc, #252]	@ (8008a80 <__mdiff+0x120>)
 8008984:	f240 2137 	movw	r1, #567	@ 0x237
 8008988:	483e      	ldr	r0, [pc, #248]	@ (8008a84 <__mdiff+0x124>)
 800898a:	f001 fa89 	bl	8009ea0 <__assert_func>
 800898e:	2301      	movs	r3, #1
 8008990:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008994:	4610      	mov	r0, r2
 8008996:	b003      	add	sp, #12
 8008998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899c:	bfbc      	itt	lt
 800899e:	464b      	movlt	r3, r9
 80089a0:	46a1      	movlt	r9, r4
 80089a2:	4630      	mov	r0, r6
 80089a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80089a8:	bfba      	itte	lt
 80089aa:	461c      	movlt	r4, r3
 80089ac:	2501      	movlt	r5, #1
 80089ae:	2500      	movge	r5, #0
 80089b0:	f7ff fcf6 	bl	80083a0 <_Balloc>
 80089b4:	4602      	mov	r2, r0
 80089b6:	b918      	cbnz	r0, 80089c0 <__mdiff+0x60>
 80089b8:	4b31      	ldr	r3, [pc, #196]	@ (8008a80 <__mdiff+0x120>)
 80089ba:	f240 2145 	movw	r1, #581	@ 0x245
 80089be:	e7e3      	b.n	8008988 <__mdiff+0x28>
 80089c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80089c4:	6926      	ldr	r6, [r4, #16]
 80089c6:	60c5      	str	r5, [r0, #12]
 80089c8:	f109 0310 	add.w	r3, r9, #16
 80089cc:	f109 0514 	add.w	r5, r9, #20
 80089d0:	f104 0e14 	add.w	lr, r4, #20
 80089d4:	f100 0b14 	add.w	fp, r0, #20
 80089d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80089dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80089e0:	9301      	str	r3, [sp, #4]
 80089e2:	46d9      	mov	r9, fp
 80089e4:	f04f 0c00 	mov.w	ip, #0
 80089e8:	9b01      	ldr	r3, [sp, #4]
 80089ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 80089ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 80089f2:	9301      	str	r3, [sp, #4]
 80089f4:	fa1f f38a 	uxth.w	r3, sl
 80089f8:	4619      	mov	r1, r3
 80089fa:	b283      	uxth	r3, r0
 80089fc:	1acb      	subs	r3, r1, r3
 80089fe:	0c00      	lsrs	r0, r0, #16
 8008a00:	4463      	add	r3, ip
 8008a02:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008a06:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008a10:	4576      	cmp	r6, lr
 8008a12:	f849 3b04 	str.w	r3, [r9], #4
 8008a16:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a1a:	d8e5      	bhi.n	80089e8 <__mdiff+0x88>
 8008a1c:	1b33      	subs	r3, r6, r4
 8008a1e:	3b15      	subs	r3, #21
 8008a20:	f023 0303 	bic.w	r3, r3, #3
 8008a24:	3415      	adds	r4, #21
 8008a26:	3304      	adds	r3, #4
 8008a28:	42a6      	cmp	r6, r4
 8008a2a:	bf38      	it	cc
 8008a2c:	2304      	movcc	r3, #4
 8008a2e:	441d      	add	r5, r3
 8008a30:	445b      	add	r3, fp
 8008a32:	461e      	mov	r6, r3
 8008a34:	462c      	mov	r4, r5
 8008a36:	4544      	cmp	r4, r8
 8008a38:	d30e      	bcc.n	8008a58 <__mdiff+0xf8>
 8008a3a:	f108 0103 	add.w	r1, r8, #3
 8008a3e:	1b49      	subs	r1, r1, r5
 8008a40:	f021 0103 	bic.w	r1, r1, #3
 8008a44:	3d03      	subs	r5, #3
 8008a46:	45a8      	cmp	r8, r5
 8008a48:	bf38      	it	cc
 8008a4a:	2100      	movcc	r1, #0
 8008a4c:	440b      	add	r3, r1
 8008a4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a52:	b191      	cbz	r1, 8008a7a <__mdiff+0x11a>
 8008a54:	6117      	str	r7, [r2, #16]
 8008a56:	e79d      	b.n	8008994 <__mdiff+0x34>
 8008a58:	f854 1b04 	ldr.w	r1, [r4], #4
 8008a5c:	46e6      	mov	lr, ip
 8008a5e:	0c08      	lsrs	r0, r1, #16
 8008a60:	fa1c fc81 	uxtah	ip, ip, r1
 8008a64:	4471      	add	r1, lr
 8008a66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008a6a:	b289      	uxth	r1, r1
 8008a6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a70:	f846 1b04 	str.w	r1, [r6], #4
 8008a74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a78:	e7dd      	b.n	8008a36 <__mdiff+0xd6>
 8008a7a:	3f01      	subs	r7, #1
 8008a7c:	e7e7      	b.n	8008a4e <__mdiff+0xee>
 8008a7e:	bf00      	nop
 8008a80:	0800ae15 	.word	0x0800ae15
 8008a84:	0800ae26 	.word	0x0800ae26

08008a88 <__ulp>:
 8008a88:	b082      	sub	sp, #8
 8008a8a:	ed8d 0b00 	vstr	d0, [sp]
 8008a8e:	9a01      	ldr	r2, [sp, #4]
 8008a90:	4b0f      	ldr	r3, [pc, #60]	@ (8008ad0 <__ulp+0x48>)
 8008a92:	4013      	ands	r3, r2
 8008a94:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	dc08      	bgt.n	8008aae <__ulp+0x26>
 8008a9c:	425b      	negs	r3, r3
 8008a9e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008aa2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008aa6:	da04      	bge.n	8008ab2 <__ulp+0x2a>
 8008aa8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008aac:	4113      	asrs	r3, r2
 8008aae:	2200      	movs	r2, #0
 8008ab0:	e008      	b.n	8008ac4 <__ulp+0x3c>
 8008ab2:	f1a2 0314 	sub.w	r3, r2, #20
 8008ab6:	2b1e      	cmp	r3, #30
 8008ab8:	bfda      	itte	le
 8008aba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008abe:	40da      	lsrle	r2, r3
 8008ac0:	2201      	movgt	r2, #1
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	ec41 0b10 	vmov	d0, r0, r1
 8008acc:	b002      	add	sp, #8
 8008ace:	4770      	bx	lr
 8008ad0:	7ff00000 	.word	0x7ff00000

08008ad4 <__b2d>:
 8008ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad8:	6906      	ldr	r6, [r0, #16]
 8008ada:	f100 0814 	add.w	r8, r0, #20
 8008ade:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008ae2:	1f37      	subs	r7, r6, #4
 8008ae4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008ae8:	4610      	mov	r0, r2
 8008aea:	f7ff fd4b 	bl	8008584 <__hi0bits>
 8008aee:	f1c0 0320 	rsb	r3, r0, #32
 8008af2:	280a      	cmp	r0, #10
 8008af4:	600b      	str	r3, [r1, #0]
 8008af6:	491b      	ldr	r1, [pc, #108]	@ (8008b64 <__b2d+0x90>)
 8008af8:	dc15      	bgt.n	8008b26 <__b2d+0x52>
 8008afa:	f1c0 0c0b 	rsb	ip, r0, #11
 8008afe:	fa22 f30c 	lsr.w	r3, r2, ip
 8008b02:	45b8      	cmp	r8, r7
 8008b04:	ea43 0501 	orr.w	r5, r3, r1
 8008b08:	bf34      	ite	cc
 8008b0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008b0e:	2300      	movcs	r3, #0
 8008b10:	3015      	adds	r0, #21
 8008b12:	fa02 f000 	lsl.w	r0, r2, r0
 8008b16:	fa23 f30c 	lsr.w	r3, r3, ip
 8008b1a:	4303      	orrs	r3, r0
 8008b1c:	461c      	mov	r4, r3
 8008b1e:	ec45 4b10 	vmov	d0, r4, r5
 8008b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b26:	45b8      	cmp	r8, r7
 8008b28:	bf3a      	itte	cc
 8008b2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008b2e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008b32:	2300      	movcs	r3, #0
 8008b34:	380b      	subs	r0, #11
 8008b36:	d012      	beq.n	8008b5e <__b2d+0x8a>
 8008b38:	f1c0 0120 	rsb	r1, r0, #32
 8008b3c:	fa23 f401 	lsr.w	r4, r3, r1
 8008b40:	4082      	lsls	r2, r0
 8008b42:	4322      	orrs	r2, r4
 8008b44:	4547      	cmp	r7, r8
 8008b46:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008b4a:	bf8c      	ite	hi
 8008b4c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008b50:	2200      	movls	r2, #0
 8008b52:	4083      	lsls	r3, r0
 8008b54:	40ca      	lsrs	r2, r1
 8008b56:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	e7de      	b.n	8008b1c <__b2d+0x48>
 8008b5e:	ea42 0501 	orr.w	r5, r2, r1
 8008b62:	e7db      	b.n	8008b1c <__b2d+0x48>
 8008b64:	3ff00000 	.word	0x3ff00000

08008b68 <__d2b>:
 8008b68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b6c:	460f      	mov	r7, r1
 8008b6e:	2101      	movs	r1, #1
 8008b70:	ec59 8b10 	vmov	r8, r9, d0
 8008b74:	4616      	mov	r6, r2
 8008b76:	f7ff fc13 	bl	80083a0 <_Balloc>
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	b930      	cbnz	r0, 8008b8c <__d2b+0x24>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	4b23      	ldr	r3, [pc, #140]	@ (8008c10 <__d2b+0xa8>)
 8008b82:	4824      	ldr	r0, [pc, #144]	@ (8008c14 <__d2b+0xac>)
 8008b84:	f240 310f 	movw	r1, #783	@ 0x30f
 8008b88:	f001 f98a 	bl	8009ea0 <__assert_func>
 8008b8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b94:	b10d      	cbz	r5, 8008b9a <__d2b+0x32>
 8008b96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b9a:	9301      	str	r3, [sp, #4]
 8008b9c:	f1b8 0300 	subs.w	r3, r8, #0
 8008ba0:	d023      	beq.n	8008bea <__d2b+0x82>
 8008ba2:	4668      	mov	r0, sp
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	f7ff fd0c 	bl	80085c2 <__lo0bits>
 8008baa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008bae:	b1d0      	cbz	r0, 8008be6 <__d2b+0x7e>
 8008bb0:	f1c0 0320 	rsb	r3, r0, #32
 8008bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb8:	430b      	orrs	r3, r1
 8008bba:	40c2      	lsrs	r2, r0
 8008bbc:	6163      	str	r3, [r4, #20]
 8008bbe:	9201      	str	r2, [sp, #4]
 8008bc0:	9b01      	ldr	r3, [sp, #4]
 8008bc2:	61a3      	str	r3, [r4, #24]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	bf0c      	ite	eq
 8008bc8:	2201      	moveq	r2, #1
 8008bca:	2202      	movne	r2, #2
 8008bcc:	6122      	str	r2, [r4, #16]
 8008bce:	b1a5      	cbz	r5, 8008bfa <__d2b+0x92>
 8008bd0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008bd4:	4405      	add	r5, r0
 8008bd6:	603d      	str	r5, [r7, #0]
 8008bd8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008bdc:	6030      	str	r0, [r6, #0]
 8008bde:	4620      	mov	r0, r4
 8008be0:	b003      	add	sp, #12
 8008be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008be6:	6161      	str	r1, [r4, #20]
 8008be8:	e7ea      	b.n	8008bc0 <__d2b+0x58>
 8008bea:	a801      	add	r0, sp, #4
 8008bec:	f7ff fce9 	bl	80085c2 <__lo0bits>
 8008bf0:	9b01      	ldr	r3, [sp, #4]
 8008bf2:	6163      	str	r3, [r4, #20]
 8008bf4:	3020      	adds	r0, #32
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	e7e8      	b.n	8008bcc <__d2b+0x64>
 8008bfa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bfe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c02:	6038      	str	r0, [r7, #0]
 8008c04:	6918      	ldr	r0, [r3, #16]
 8008c06:	f7ff fcbd 	bl	8008584 <__hi0bits>
 8008c0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c0e:	e7e5      	b.n	8008bdc <__d2b+0x74>
 8008c10:	0800ae15 	.word	0x0800ae15
 8008c14:	0800ae26 	.word	0x0800ae26

08008c18 <__ratio>:
 8008c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1c:	b085      	sub	sp, #20
 8008c1e:	e9cd 1000 	strd	r1, r0, [sp]
 8008c22:	a902      	add	r1, sp, #8
 8008c24:	f7ff ff56 	bl	8008ad4 <__b2d>
 8008c28:	9800      	ldr	r0, [sp, #0]
 8008c2a:	a903      	add	r1, sp, #12
 8008c2c:	ec55 4b10 	vmov	r4, r5, d0
 8008c30:	f7ff ff50 	bl	8008ad4 <__b2d>
 8008c34:	9b01      	ldr	r3, [sp, #4]
 8008c36:	6919      	ldr	r1, [r3, #16]
 8008c38:	9b00      	ldr	r3, [sp, #0]
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	1ac9      	subs	r1, r1, r3
 8008c3e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008c42:	1a9b      	subs	r3, r3, r2
 8008c44:	ec5b ab10 	vmov	sl, fp, d0
 8008c48:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	bfce      	itee	gt
 8008c50:	462a      	movgt	r2, r5
 8008c52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008c56:	465a      	movle	r2, fp
 8008c58:	462f      	mov	r7, r5
 8008c5a:	46d9      	mov	r9, fp
 8008c5c:	bfcc      	ite	gt
 8008c5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008c62:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008c66:	464b      	mov	r3, r9
 8008c68:	4652      	mov	r2, sl
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	4639      	mov	r1, r7
 8008c6e:	f7f7 fdf5 	bl	800085c <__aeabi_ddiv>
 8008c72:	ec41 0b10 	vmov	d0, r0, r1
 8008c76:	b005      	add	sp, #20
 8008c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c7c <__copybits>:
 8008c7c:	3901      	subs	r1, #1
 8008c7e:	b570      	push	{r4, r5, r6, lr}
 8008c80:	1149      	asrs	r1, r1, #5
 8008c82:	6914      	ldr	r4, [r2, #16]
 8008c84:	3101      	adds	r1, #1
 8008c86:	f102 0314 	add.w	r3, r2, #20
 8008c8a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c92:	1f05      	subs	r5, r0, #4
 8008c94:	42a3      	cmp	r3, r4
 8008c96:	d30c      	bcc.n	8008cb2 <__copybits+0x36>
 8008c98:	1aa3      	subs	r3, r4, r2
 8008c9a:	3b11      	subs	r3, #17
 8008c9c:	f023 0303 	bic.w	r3, r3, #3
 8008ca0:	3211      	adds	r2, #17
 8008ca2:	42a2      	cmp	r2, r4
 8008ca4:	bf88      	it	hi
 8008ca6:	2300      	movhi	r3, #0
 8008ca8:	4418      	add	r0, r3
 8008caa:	2300      	movs	r3, #0
 8008cac:	4288      	cmp	r0, r1
 8008cae:	d305      	bcc.n	8008cbc <__copybits+0x40>
 8008cb0:	bd70      	pop	{r4, r5, r6, pc}
 8008cb2:	f853 6b04 	ldr.w	r6, [r3], #4
 8008cb6:	f845 6f04 	str.w	r6, [r5, #4]!
 8008cba:	e7eb      	b.n	8008c94 <__copybits+0x18>
 8008cbc:	f840 3b04 	str.w	r3, [r0], #4
 8008cc0:	e7f4      	b.n	8008cac <__copybits+0x30>

08008cc2 <__any_on>:
 8008cc2:	f100 0214 	add.w	r2, r0, #20
 8008cc6:	6900      	ldr	r0, [r0, #16]
 8008cc8:	114b      	asrs	r3, r1, #5
 8008cca:	4298      	cmp	r0, r3
 8008ccc:	b510      	push	{r4, lr}
 8008cce:	db11      	blt.n	8008cf4 <__any_on+0x32>
 8008cd0:	dd0a      	ble.n	8008ce8 <__any_on+0x26>
 8008cd2:	f011 011f 	ands.w	r1, r1, #31
 8008cd6:	d007      	beq.n	8008ce8 <__any_on+0x26>
 8008cd8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008cdc:	fa24 f001 	lsr.w	r0, r4, r1
 8008ce0:	fa00 f101 	lsl.w	r1, r0, r1
 8008ce4:	428c      	cmp	r4, r1
 8008ce6:	d10b      	bne.n	8008d00 <__any_on+0x3e>
 8008ce8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d803      	bhi.n	8008cf8 <__any_on+0x36>
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	bd10      	pop	{r4, pc}
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	e7f7      	b.n	8008ce8 <__any_on+0x26>
 8008cf8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008cfc:	2900      	cmp	r1, #0
 8008cfe:	d0f5      	beq.n	8008cec <__any_on+0x2a>
 8008d00:	2001      	movs	r0, #1
 8008d02:	e7f6      	b.n	8008cf2 <__any_on+0x30>

08008d04 <sulp>:
 8008d04:	b570      	push	{r4, r5, r6, lr}
 8008d06:	4604      	mov	r4, r0
 8008d08:	460d      	mov	r5, r1
 8008d0a:	ec45 4b10 	vmov	d0, r4, r5
 8008d0e:	4616      	mov	r6, r2
 8008d10:	f7ff feba 	bl	8008a88 <__ulp>
 8008d14:	ec51 0b10 	vmov	r0, r1, d0
 8008d18:	b17e      	cbz	r6, 8008d3a <sulp+0x36>
 8008d1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008d1e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	dd09      	ble.n	8008d3a <sulp+0x36>
 8008d26:	051b      	lsls	r3, r3, #20
 8008d28:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008d2c:	2400      	movs	r4, #0
 8008d2e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008d32:	4622      	mov	r2, r4
 8008d34:	462b      	mov	r3, r5
 8008d36:	f7f7 fc67 	bl	8000608 <__aeabi_dmul>
 8008d3a:	ec41 0b10 	vmov	d0, r0, r1
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}

08008d40 <_strtod_l>:
 8008d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d44:	b09f      	sub	sp, #124	@ 0x7c
 8008d46:	460c      	mov	r4, r1
 8008d48:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008d4e:	9005      	str	r0, [sp, #20]
 8008d50:	f04f 0a00 	mov.w	sl, #0
 8008d54:	f04f 0b00 	mov.w	fp, #0
 8008d58:	460a      	mov	r2, r1
 8008d5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d5c:	7811      	ldrb	r1, [r2, #0]
 8008d5e:	292b      	cmp	r1, #43	@ 0x2b
 8008d60:	d04a      	beq.n	8008df8 <_strtod_l+0xb8>
 8008d62:	d838      	bhi.n	8008dd6 <_strtod_l+0x96>
 8008d64:	290d      	cmp	r1, #13
 8008d66:	d832      	bhi.n	8008dce <_strtod_l+0x8e>
 8008d68:	2908      	cmp	r1, #8
 8008d6a:	d832      	bhi.n	8008dd2 <_strtod_l+0x92>
 8008d6c:	2900      	cmp	r1, #0
 8008d6e:	d03b      	beq.n	8008de8 <_strtod_l+0xa8>
 8008d70:	2200      	movs	r2, #0
 8008d72:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008d74:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008d76:	782a      	ldrb	r2, [r5, #0]
 8008d78:	2a30      	cmp	r2, #48	@ 0x30
 8008d7a:	f040 80b3 	bne.w	8008ee4 <_strtod_l+0x1a4>
 8008d7e:	786a      	ldrb	r2, [r5, #1]
 8008d80:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d84:	2a58      	cmp	r2, #88	@ 0x58
 8008d86:	d16e      	bne.n	8008e66 <_strtod_l+0x126>
 8008d88:	9302      	str	r3, [sp, #8]
 8008d8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d8c:	9301      	str	r3, [sp, #4]
 8008d8e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008d90:	9300      	str	r3, [sp, #0]
 8008d92:	4a8e      	ldr	r2, [pc, #568]	@ (8008fcc <_strtod_l+0x28c>)
 8008d94:	9805      	ldr	r0, [sp, #20]
 8008d96:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008d98:	a919      	add	r1, sp, #100	@ 0x64
 8008d9a:	f001 f91b 	bl	8009fd4 <__gethex>
 8008d9e:	f010 060f 	ands.w	r6, r0, #15
 8008da2:	4604      	mov	r4, r0
 8008da4:	d005      	beq.n	8008db2 <_strtod_l+0x72>
 8008da6:	2e06      	cmp	r6, #6
 8008da8:	d128      	bne.n	8008dfc <_strtod_l+0xbc>
 8008daa:	3501      	adds	r5, #1
 8008dac:	2300      	movs	r3, #0
 8008dae:	9519      	str	r5, [sp, #100]	@ 0x64
 8008db0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008db2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f040 858e 	bne.w	80098d6 <_strtod_l+0xb96>
 8008dba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dbc:	b1cb      	cbz	r3, 8008df2 <_strtod_l+0xb2>
 8008dbe:	4652      	mov	r2, sl
 8008dc0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008dc4:	ec43 2b10 	vmov	d0, r2, r3
 8008dc8:	b01f      	add	sp, #124	@ 0x7c
 8008dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dce:	2920      	cmp	r1, #32
 8008dd0:	d1ce      	bne.n	8008d70 <_strtod_l+0x30>
 8008dd2:	3201      	adds	r2, #1
 8008dd4:	e7c1      	b.n	8008d5a <_strtod_l+0x1a>
 8008dd6:	292d      	cmp	r1, #45	@ 0x2d
 8008dd8:	d1ca      	bne.n	8008d70 <_strtod_l+0x30>
 8008dda:	2101      	movs	r1, #1
 8008ddc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008dde:	1c51      	adds	r1, r2, #1
 8008de0:	9119      	str	r1, [sp, #100]	@ 0x64
 8008de2:	7852      	ldrb	r2, [r2, #1]
 8008de4:	2a00      	cmp	r2, #0
 8008de6:	d1c5      	bne.n	8008d74 <_strtod_l+0x34>
 8008de8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008dea:	9419      	str	r4, [sp, #100]	@ 0x64
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f040 8570 	bne.w	80098d2 <_strtod_l+0xb92>
 8008df2:	4652      	mov	r2, sl
 8008df4:	465b      	mov	r3, fp
 8008df6:	e7e5      	b.n	8008dc4 <_strtod_l+0x84>
 8008df8:	2100      	movs	r1, #0
 8008dfa:	e7ef      	b.n	8008ddc <_strtod_l+0x9c>
 8008dfc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008dfe:	b13a      	cbz	r2, 8008e10 <_strtod_l+0xd0>
 8008e00:	2135      	movs	r1, #53	@ 0x35
 8008e02:	a81c      	add	r0, sp, #112	@ 0x70
 8008e04:	f7ff ff3a 	bl	8008c7c <__copybits>
 8008e08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e0a:	9805      	ldr	r0, [sp, #20]
 8008e0c:	f7ff fb08 	bl	8008420 <_Bfree>
 8008e10:	3e01      	subs	r6, #1
 8008e12:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008e14:	2e04      	cmp	r6, #4
 8008e16:	d806      	bhi.n	8008e26 <_strtod_l+0xe6>
 8008e18:	e8df f006 	tbb	[pc, r6]
 8008e1c:	201d0314 	.word	0x201d0314
 8008e20:	14          	.byte	0x14
 8008e21:	00          	.byte	0x00
 8008e22:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008e26:	05e1      	lsls	r1, r4, #23
 8008e28:	bf48      	it	mi
 8008e2a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008e2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e32:	0d1b      	lsrs	r3, r3, #20
 8008e34:	051b      	lsls	r3, r3, #20
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1bb      	bne.n	8008db2 <_strtod_l+0x72>
 8008e3a:	f7fe fb21 	bl	8007480 <__errno>
 8008e3e:	2322      	movs	r3, #34	@ 0x22
 8008e40:	6003      	str	r3, [r0, #0]
 8008e42:	e7b6      	b.n	8008db2 <_strtod_l+0x72>
 8008e44:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008e48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008e4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008e50:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008e54:	e7e7      	b.n	8008e26 <_strtod_l+0xe6>
 8008e56:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008fd4 <_strtod_l+0x294>
 8008e5a:	e7e4      	b.n	8008e26 <_strtod_l+0xe6>
 8008e5c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008e60:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008e64:	e7df      	b.n	8008e26 <_strtod_l+0xe6>
 8008e66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e68:	1c5a      	adds	r2, r3, #1
 8008e6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e6c:	785b      	ldrb	r3, [r3, #1]
 8008e6e:	2b30      	cmp	r3, #48	@ 0x30
 8008e70:	d0f9      	beq.n	8008e66 <_strtod_l+0x126>
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d09d      	beq.n	8008db2 <_strtod_l+0x72>
 8008e76:	2301      	movs	r3, #1
 8008e78:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e7e:	2300      	movs	r3, #0
 8008e80:	9308      	str	r3, [sp, #32]
 8008e82:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e84:	461f      	mov	r7, r3
 8008e86:	220a      	movs	r2, #10
 8008e88:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008e8a:	7805      	ldrb	r5, [r0, #0]
 8008e8c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008e90:	b2d9      	uxtb	r1, r3
 8008e92:	2909      	cmp	r1, #9
 8008e94:	d928      	bls.n	8008ee8 <_strtod_l+0x1a8>
 8008e96:	494e      	ldr	r1, [pc, #312]	@ (8008fd0 <_strtod_l+0x290>)
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f000 ffd5 	bl	8009e48 <strncmp>
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	d032      	beq.n	8008f08 <_strtod_l+0x1c8>
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	462a      	mov	r2, r5
 8008ea6:	4681      	mov	r9, r0
 8008ea8:	463d      	mov	r5, r7
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2a65      	cmp	r2, #101	@ 0x65
 8008eae:	d001      	beq.n	8008eb4 <_strtod_l+0x174>
 8008eb0:	2a45      	cmp	r2, #69	@ 0x45
 8008eb2:	d114      	bne.n	8008ede <_strtod_l+0x19e>
 8008eb4:	b91d      	cbnz	r5, 8008ebe <_strtod_l+0x17e>
 8008eb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008eb8:	4302      	orrs	r2, r0
 8008eba:	d095      	beq.n	8008de8 <_strtod_l+0xa8>
 8008ebc:	2500      	movs	r5, #0
 8008ebe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008ec0:	1c62      	adds	r2, r4, #1
 8008ec2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ec4:	7862      	ldrb	r2, [r4, #1]
 8008ec6:	2a2b      	cmp	r2, #43	@ 0x2b
 8008ec8:	d077      	beq.n	8008fba <_strtod_l+0x27a>
 8008eca:	2a2d      	cmp	r2, #45	@ 0x2d
 8008ecc:	d07b      	beq.n	8008fc6 <_strtod_l+0x286>
 8008ece:	f04f 0c00 	mov.w	ip, #0
 8008ed2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008ed6:	2909      	cmp	r1, #9
 8008ed8:	f240 8082 	bls.w	8008fe0 <_strtod_l+0x2a0>
 8008edc:	9419      	str	r4, [sp, #100]	@ 0x64
 8008ede:	f04f 0800 	mov.w	r8, #0
 8008ee2:	e0a2      	b.n	800902a <_strtod_l+0x2ea>
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	e7c7      	b.n	8008e78 <_strtod_l+0x138>
 8008ee8:	2f08      	cmp	r7, #8
 8008eea:	bfd5      	itete	le
 8008eec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008eee:	9908      	ldrgt	r1, [sp, #32]
 8008ef0:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ef4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008ef8:	f100 0001 	add.w	r0, r0, #1
 8008efc:	bfd4      	ite	le
 8008efe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008f00:	9308      	strgt	r3, [sp, #32]
 8008f02:	3701      	adds	r7, #1
 8008f04:	9019      	str	r0, [sp, #100]	@ 0x64
 8008f06:	e7bf      	b.n	8008e88 <_strtod_l+0x148>
 8008f08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f0a:	1c5a      	adds	r2, r3, #1
 8008f0c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f0e:	785a      	ldrb	r2, [r3, #1]
 8008f10:	b37f      	cbz	r7, 8008f72 <_strtod_l+0x232>
 8008f12:	4681      	mov	r9, r0
 8008f14:	463d      	mov	r5, r7
 8008f16:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008f1a:	2b09      	cmp	r3, #9
 8008f1c:	d912      	bls.n	8008f44 <_strtod_l+0x204>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e7c4      	b.n	8008eac <_strtod_l+0x16c>
 8008f22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f24:	1c5a      	adds	r2, r3, #1
 8008f26:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f28:	785a      	ldrb	r2, [r3, #1]
 8008f2a:	3001      	adds	r0, #1
 8008f2c:	2a30      	cmp	r2, #48	@ 0x30
 8008f2e:	d0f8      	beq.n	8008f22 <_strtod_l+0x1e2>
 8008f30:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008f34:	2b08      	cmp	r3, #8
 8008f36:	f200 84d3 	bhi.w	80098e0 <_strtod_l+0xba0>
 8008f3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f3e:	4681      	mov	r9, r0
 8008f40:	2000      	movs	r0, #0
 8008f42:	4605      	mov	r5, r0
 8008f44:	3a30      	subs	r2, #48	@ 0x30
 8008f46:	f100 0301 	add.w	r3, r0, #1
 8008f4a:	d02a      	beq.n	8008fa2 <_strtod_l+0x262>
 8008f4c:	4499      	add	r9, r3
 8008f4e:	eb00 0c05 	add.w	ip, r0, r5
 8008f52:	462b      	mov	r3, r5
 8008f54:	210a      	movs	r1, #10
 8008f56:	4563      	cmp	r3, ip
 8008f58:	d10d      	bne.n	8008f76 <_strtod_l+0x236>
 8008f5a:	1c69      	adds	r1, r5, #1
 8008f5c:	4401      	add	r1, r0
 8008f5e:	4428      	add	r0, r5
 8008f60:	2808      	cmp	r0, #8
 8008f62:	dc16      	bgt.n	8008f92 <_strtod_l+0x252>
 8008f64:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008f66:	230a      	movs	r3, #10
 8008f68:	fb03 2300 	mla	r3, r3, r0, r2
 8008f6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f6e:	2300      	movs	r3, #0
 8008f70:	e018      	b.n	8008fa4 <_strtod_l+0x264>
 8008f72:	4638      	mov	r0, r7
 8008f74:	e7da      	b.n	8008f2c <_strtod_l+0x1ec>
 8008f76:	2b08      	cmp	r3, #8
 8008f78:	f103 0301 	add.w	r3, r3, #1
 8008f7c:	dc03      	bgt.n	8008f86 <_strtod_l+0x246>
 8008f7e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008f80:	434e      	muls	r6, r1
 8008f82:	960a      	str	r6, [sp, #40]	@ 0x28
 8008f84:	e7e7      	b.n	8008f56 <_strtod_l+0x216>
 8008f86:	2b10      	cmp	r3, #16
 8008f88:	bfde      	ittt	le
 8008f8a:	9e08      	ldrle	r6, [sp, #32]
 8008f8c:	434e      	mulle	r6, r1
 8008f8e:	9608      	strle	r6, [sp, #32]
 8008f90:	e7e1      	b.n	8008f56 <_strtod_l+0x216>
 8008f92:	280f      	cmp	r0, #15
 8008f94:	dceb      	bgt.n	8008f6e <_strtod_l+0x22e>
 8008f96:	9808      	ldr	r0, [sp, #32]
 8008f98:	230a      	movs	r3, #10
 8008f9a:	fb03 2300 	mla	r3, r3, r0, r2
 8008f9e:	9308      	str	r3, [sp, #32]
 8008fa0:	e7e5      	b.n	8008f6e <_strtod_l+0x22e>
 8008fa2:	4629      	mov	r1, r5
 8008fa4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008fa6:	1c50      	adds	r0, r2, #1
 8008fa8:	9019      	str	r0, [sp, #100]	@ 0x64
 8008faa:	7852      	ldrb	r2, [r2, #1]
 8008fac:	4618      	mov	r0, r3
 8008fae:	460d      	mov	r5, r1
 8008fb0:	e7b1      	b.n	8008f16 <_strtod_l+0x1d6>
 8008fb2:	f04f 0900 	mov.w	r9, #0
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e77d      	b.n	8008eb6 <_strtod_l+0x176>
 8008fba:	f04f 0c00 	mov.w	ip, #0
 8008fbe:	1ca2      	adds	r2, r4, #2
 8008fc0:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fc2:	78a2      	ldrb	r2, [r4, #2]
 8008fc4:	e785      	b.n	8008ed2 <_strtod_l+0x192>
 8008fc6:	f04f 0c01 	mov.w	ip, #1
 8008fca:	e7f8      	b.n	8008fbe <_strtod_l+0x27e>
 8008fcc:	0800af98 	.word	0x0800af98
 8008fd0:	0800af80 	.word	0x0800af80
 8008fd4:	7ff00000 	.word	0x7ff00000
 8008fd8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008fda:	1c51      	adds	r1, r2, #1
 8008fdc:	9119      	str	r1, [sp, #100]	@ 0x64
 8008fde:	7852      	ldrb	r2, [r2, #1]
 8008fe0:	2a30      	cmp	r2, #48	@ 0x30
 8008fe2:	d0f9      	beq.n	8008fd8 <_strtod_l+0x298>
 8008fe4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008fe8:	2908      	cmp	r1, #8
 8008fea:	f63f af78 	bhi.w	8008ede <_strtod_l+0x19e>
 8008fee:	3a30      	subs	r2, #48	@ 0x30
 8008ff0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008ff2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ff4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008ff6:	f04f 080a 	mov.w	r8, #10
 8008ffa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ffc:	1c56      	adds	r6, r2, #1
 8008ffe:	9619      	str	r6, [sp, #100]	@ 0x64
 8009000:	7852      	ldrb	r2, [r2, #1]
 8009002:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009006:	f1be 0f09 	cmp.w	lr, #9
 800900a:	d939      	bls.n	8009080 <_strtod_l+0x340>
 800900c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800900e:	1a76      	subs	r6, r6, r1
 8009010:	2e08      	cmp	r6, #8
 8009012:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009016:	dc03      	bgt.n	8009020 <_strtod_l+0x2e0>
 8009018:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800901a:	4588      	cmp	r8, r1
 800901c:	bfa8      	it	ge
 800901e:	4688      	movge	r8, r1
 8009020:	f1bc 0f00 	cmp.w	ip, #0
 8009024:	d001      	beq.n	800902a <_strtod_l+0x2ea>
 8009026:	f1c8 0800 	rsb	r8, r8, #0
 800902a:	2d00      	cmp	r5, #0
 800902c:	d14e      	bne.n	80090cc <_strtod_l+0x38c>
 800902e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009030:	4308      	orrs	r0, r1
 8009032:	f47f aebe 	bne.w	8008db2 <_strtod_l+0x72>
 8009036:	2b00      	cmp	r3, #0
 8009038:	f47f aed6 	bne.w	8008de8 <_strtod_l+0xa8>
 800903c:	2a69      	cmp	r2, #105	@ 0x69
 800903e:	d028      	beq.n	8009092 <_strtod_l+0x352>
 8009040:	dc25      	bgt.n	800908e <_strtod_l+0x34e>
 8009042:	2a49      	cmp	r2, #73	@ 0x49
 8009044:	d025      	beq.n	8009092 <_strtod_l+0x352>
 8009046:	2a4e      	cmp	r2, #78	@ 0x4e
 8009048:	f47f aece 	bne.w	8008de8 <_strtod_l+0xa8>
 800904c:	499b      	ldr	r1, [pc, #620]	@ (80092bc <_strtod_l+0x57c>)
 800904e:	a819      	add	r0, sp, #100	@ 0x64
 8009050:	f001 f9e2 	bl	800a418 <__match>
 8009054:	2800      	cmp	r0, #0
 8009056:	f43f aec7 	beq.w	8008de8 <_strtod_l+0xa8>
 800905a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	2b28      	cmp	r3, #40	@ 0x28
 8009060:	d12e      	bne.n	80090c0 <_strtod_l+0x380>
 8009062:	4997      	ldr	r1, [pc, #604]	@ (80092c0 <_strtod_l+0x580>)
 8009064:	aa1c      	add	r2, sp, #112	@ 0x70
 8009066:	a819      	add	r0, sp, #100	@ 0x64
 8009068:	f001 f9ea 	bl	800a440 <__hexnan>
 800906c:	2805      	cmp	r0, #5
 800906e:	d127      	bne.n	80090c0 <_strtod_l+0x380>
 8009070:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009072:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009076:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800907a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800907e:	e698      	b.n	8008db2 <_strtod_l+0x72>
 8009080:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009082:	fb08 2101 	mla	r1, r8, r1, r2
 8009086:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800908a:	920e      	str	r2, [sp, #56]	@ 0x38
 800908c:	e7b5      	b.n	8008ffa <_strtod_l+0x2ba>
 800908e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009090:	e7da      	b.n	8009048 <_strtod_l+0x308>
 8009092:	498c      	ldr	r1, [pc, #560]	@ (80092c4 <_strtod_l+0x584>)
 8009094:	a819      	add	r0, sp, #100	@ 0x64
 8009096:	f001 f9bf 	bl	800a418 <__match>
 800909a:	2800      	cmp	r0, #0
 800909c:	f43f aea4 	beq.w	8008de8 <_strtod_l+0xa8>
 80090a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090a2:	4989      	ldr	r1, [pc, #548]	@ (80092c8 <_strtod_l+0x588>)
 80090a4:	3b01      	subs	r3, #1
 80090a6:	a819      	add	r0, sp, #100	@ 0x64
 80090a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80090aa:	f001 f9b5 	bl	800a418 <__match>
 80090ae:	b910      	cbnz	r0, 80090b6 <_strtod_l+0x376>
 80090b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090b2:	3301      	adds	r3, #1
 80090b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80090b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80092d8 <_strtod_l+0x598>
 80090ba:	f04f 0a00 	mov.w	sl, #0
 80090be:	e678      	b.n	8008db2 <_strtod_l+0x72>
 80090c0:	4882      	ldr	r0, [pc, #520]	@ (80092cc <_strtod_l+0x58c>)
 80090c2:	f000 fee5 	bl	8009e90 <nan>
 80090c6:	ec5b ab10 	vmov	sl, fp, d0
 80090ca:	e672      	b.n	8008db2 <_strtod_l+0x72>
 80090cc:	eba8 0309 	sub.w	r3, r8, r9
 80090d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80090d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80090d4:	2f00      	cmp	r7, #0
 80090d6:	bf08      	it	eq
 80090d8:	462f      	moveq	r7, r5
 80090da:	2d10      	cmp	r5, #16
 80090dc:	462c      	mov	r4, r5
 80090de:	bfa8      	it	ge
 80090e0:	2410      	movge	r4, #16
 80090e2:	f7f7 fa17 	bl	8000514 <__aeabi_ui2d>
 80090e6:	2d09      	cmp	r5, #9
 80090e8:	4682      	mov	sl, r0
 80090ea:	468b      	mov	fp, r1
 80090ec:	dc13      	bgt.n	8009116 <_strtod_l+0x3d6>
 80090ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f43f ae5e 	beq.w	8008db2 <_strtod_l+0x72>
 80090f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090f8:	dd78      	ble.n	80091ec <_strtod_l+0x4ac>
 80090fa:	2b16      	cmp	r3, #22
 80090fc:	dc5f      	bgt.n	80091be <_strtod_l+0x47e>
 80090fe:	4974      	ldr	r1, [pc, #464]	@ (80092d0 <_strtod_l+0x590>)
 8009100:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009108:	4652      	mov	r2, sl
 800910a:	465b      	mov	r3, fp
 800910c:	f7f7 fa7c 	bl	8000608 <__aeabi_dmul>
 8009110:	4682      	mov	sl, r0
 8009112:	468b      	mov	fp, r1
 8009114:	e64d      	b.n	8008db2 <_strtod_l+0x72>
 8009116:	4b6e      	ldr	r3, [pc, #440]	@ (80092d0 <_strtod_l+0x590>)
 8009118:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800911c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009120:	f7f7 fa72 	bl	8000608 <__aeabi_dmul>
 8009124:	4682      	mov	sl, r0
 8009126:	9808      	ldr	r0, [sp, #32]
 8009128:	468b      	mov	fp, r1
 800912a:	f7f7 f9f3 	bl	8000514 <__aeabi_ui2d>
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	4650      	mov	r0, sl
 8009134:	4659      	mov	r1, fp
 8009136:	f7f7 f8b1 	bl	800029c <__adddf3>
 800913a:	2d0f      	cmp	r5, #15
 800913c:	4682      	mov	sl, r0
 800913e:	468b      	mov	fp, r1
 8009140:	ddd5      	ble.n	80090ee <_strtod_l+0x3ae>
 8009142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009144:	1b2c      	subs	r4, r5, r4
 8009146:	441c      	add	r4, r3
 8009148:	2c00      	cmp	r4, #0
 800914a:	f340 8096 	ble.w	800927a <_strtod_l+0x53a>
 800914e:	f014 030f 	ands.w	r3, r4, #15
 8009152:	d00a      	beq.n	800916a <_strtod_l+0x42a>
 8009154:	495e      	ldr	r1, [pc, #376]	@ (80092d0 <_strtod_l+0x590>)
 8009156:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800915a:	4652      	mov	r2, sl
 800915c:	465b      	mov	r3, fp
 800915e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009162:	f7f7 fa51 	bl	8000608 <__aeabi_dmul>
 8009166:	4682      	mov	sl, r0
 8009168:	468b      	mov	fp, r1
 800916a:	f034 040f 	bics.w	r4, r4, #15
 800916e:	d073      	beq.n	8009258 <_strtod_l+0x518>
 8009170:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009174:	dd48      	ble.n	8009208 <_strtod_l+0x4c8>
 8009176:	2400      	movs	r4, #0
 8009178:	46a0      	mov	r8, r4
 800917a:	940a      	str	r4, [sp, #40]	@ 0x28
 800917c:	46a1      	mov	r9, r4
 800917e:	9a05      	ldr	r2, [sp, #20]
 8009180:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80092d8 <_strtod_l+0x598>
 8009184:	2322      	movs	r3, #34	@ 0x22
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	f04f 0a00 	mov.w	sl, #0
 800918c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800918e:	2b00      	cmp	r3, #0
 8009190:	f43f ae0f 	beq.w	8008db2 <_strtod_l+0x72>
 8009194:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009196:	9805      	ldr	r0, [sp, #20]
 8009198:	f7ff f942 	bl	8008420 <_Bfree>
 800919c:	9805      	ldr	r0, [sp, #20]
 800919e:	4649      	mov	r1, r9
 80091a0:	f7ff f93e 	bl	8008420 <_Bfree>
 80091a4:	9805      	ldr	r0, [sp, #20]
 80091a6:	4641      	mov	r1, r8
 80091a8:	f7ff f93a 	bl	8008420 <_Bfree>
 80091ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80091ae:	9805      	ldr	r0, [sp, #20]
 80091b0:	f7ff f936 	bl	8008420 <_Bfree>
 80091b4:	9805      	ldr	r0, [sp, #20]
 80091b6:	4621      	mov	r1, r4
 80091b8:	f7ff f932 	bl	8008420 <_Bfree>
 80091bc:	e5f9      	b.n	8008db2 <_strtod_l+0x72>
 80091be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80091c4:	4293      	cmp	r3, r2
 80091c6:	dbbc      	blt.n	8009142 <_strtod_l+0x402>
 80091c8:	4c41      	ldr	r4, [pc, #260]	@ (80092d0 <_strtod_l+0x590>)
 80091ca:	f1c5 050f 	rsb	r5, r5, #15
 80091ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80091d2:	4652      	mov	r2, sl
 80091d4:	465b      	mov	r3, fp
 80091d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091da:	f7f7 fa15 	bl	8000608 <__aeabi_dmul>
 80091de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091e0:	1b5d      	subs	r5, r3, r5
 80091e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80091e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80091ea:	e78f      	b.n	800910c <_strtod_l+0x3cc>
 80091ec:	3316      	adds	r3, #22
 80091ee:	dba8      	blt.n	8009142 <_strtod_l+0x402>
 80091f0:	4b37      	ldr	r3, [pc, #220]	@ (80092d0 <_strtod_l+0x590>)
 80091f2:	eba9 0808 	sub.w	r8, r9, r8
 80091f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80091fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80091fe:	4650      	mov	r0, sl
 8009200:	4659      	mov	r1, fp
 8009202:	f7f7 fb2b 	bl	800085c <__aeabi_ddiv>
 8009206:	e783      	b.n	8009110 <_strtod_l+0x3d0>
 8009208:	4b32      	ldr	r3, [pc, #200]	@ (80092d4 <_strtod_l+0x594>)
 800920a:	9308      	str	r3, [sp, #32]
 800920c:	2300      	movs	r3, #0
 800920e:	1124      	asrs	r4, r4, #4
 8009210:	4650      	mov	r0, sl
 8009212:	4659      	mov	r1, fp
 8009214:	461e      	mov	r6, r3
 8009216:	2c01      	cmp	r4, #1
 8009218:	dc21      	bgt.n	800925e <_strtod_l+0x51e>
 800921a:	b10b      	cbz	r3, 8009220 <_strtod_l+0x4e0>
 800921c:	4682      	mov	sl, r0
 800921e:	468b      	mov	fp, r1
 8009220:	492c      	ldr	r1, [pc, #176]	@ (80092d4 <_strtod_l+0x594>)
 8009222:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009226:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800922a:	4652      	mov	r2, sl
 800922c:	465b      	mov	r3, fp
 800922e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009232:	f7f7 f9e9 	bl	8000608 <__aeabi_dmul>
 8009236:	4b28      	ldr	r3, [pc, #160]	@ (80092d8 <_strtod_l+0x598>)
 8009238:	460a      	mov	r2, r1
 800923a:	400b      	ands	r3, r1
 800923c:	4927      	ldr	r1, [pc, #156]	@ (80092dc <_strtod_l+0x59c>)
 800923e:	428b      	cmp	r3, r1
 8009240:	4682      	mov	sl, r0
 8009242:	d898      	bhi.n	8009176 <_strtod_l+0x436>
 8009244:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009248:	428b      	cmp	r3, r1
 800924a:	bf86      	itte	hi
 800924c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80092e0 <_strtod_l+0x5a0>
 8009250:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8009254:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009258:	2300      	movs	r3, #0
 800925a:	9308      	str	r3, [sp, #32]
 800925c:	e07a      	b.n	8009354 <_strtod_l+0x614>
 800925e:	07e2      	lsls	r2, r4, #31
 8009260:	d505      	bpl.n	800926e <_strtod_l+0x52e>
 8009262:	9b08      	ldr	r3, [sp, #32]
 8009264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009268:	f7f7 f9ce 	bl	8000608 <__aeabi_dmul>
 800926c:	2301      	movs	r3, #1
 800926e:	9a08      	ldr	r2, [sp, #32]
 8009270:	3208      	adds	r2, #8
 8009272:	3601      	adds	r6, #1
 8009274:	1064      	asrs	r4, r4, #1
 8009276:	9208      	str	r2, [sp, #32]
 8009278:	e7cd      	b.n	8009216 <_strtod_l+0x4d6>
 800927a:	d0ed      	beq.n	8009258 <_strtod_l+0x518>
 800927c:	4264      	negs	r4, r4
 800927e:	f014 020f 	ands.w	r2, r4, #15
 8009282:	d00a      	beq.n	800929a <_strtod_l+0x55a>
 8009284:	4b12      	ldr	r3, [pc, #72]	@ (80092d0 <_strtod_l+0x590>)
 8009286:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800928a:	4650      	mov	r0, sl
 800928c:	4659      	mov	r1, fp
 800928e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009292:	f7f7 fae3 	bl	800085c <__aeabi_ddiv>
 8009296:	4682      	mov	sl, r0
 8009298:	468b      	mov	fp, r1
 800929a:	1124      	asrs	r4, r4, #4
 800929c:	d0dc      	beq.n	8009258 <_strtod_l+0x518>
 800929e:	2c1f      	cmp	r4, #31
 80092a0:	dd20      	ble.n	80092e4 <_strtod_l+0x5a4>
 80092a2:	2400      	movs	r4, #0
 80092a4:	46a0      	mov	r8, r4
 80092a6:	940a      	str	r4, [sp, #40]	@ 0x28
 80092a8:	46a1      	mov	r9, r4
 80092aa:	9a05      	ldr	r2, [sp, #20]
 80092ac:	2322      	movs	r3, #34	@ 0x22
 80092ae:	f04f 0a00 	mov.w	sl, #0
 80092b2:	f04f 0b00 	mov.w	fp, #0
 80092b6:	6013      	str	r3, [r2, #0]
 80092b8:	e768      	b.n	800918c <_strtod_l+0x44c>
 80092ba:	bf00      	nop
 80092bc:	0800ad6d 	.word	0x0800ad6d
 80092c0:	0800af84 	.word	0x0800af84
 80092c4:	0800ad65 	.word	0x0800ad65
 80092c8:	0800ad9c 	.word	0x0800ad9c
 80092cc:	0800b12d 	.word	0x0800b12d
 80092d0:	0800aeb8 	.word	0x0800aeb8
 80092d4:	0800ae90 	.word	0x0800ae90
 80092d8:	7ff00000 	.word	0x7ff00000
 80092dc:	7ca00000 	.word	0x7ca00000
 80092e0:	7fefffff 	.word	0x7fefffff
 80092e4:	f014 0310 	ands.w	r3, r4, #16
 80092e8:	bf18      	it	ne
 80092ea:	236a      	movne	r3, #106	@ 0x6a
 80092ec:	4ea9      	ldr	r6, [pc, #676]	@ (8009594 <_strtod_l+0x854>)
 80092ee:	9308      	str	r3, [sp, #32]
 80092f0:	4650      	mov	r0, sl
 80092f2:	4659      	mov	r1, fp
 80092f4:	2300      	movs	r3, #0
 80092f6:	07e2      	lsls	r2, r4, #31
 80092f8:	d504      	bpl.n	8009304 <_strtod_l+0x5c4>
 80092fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80092fe:	f7f7 f983 	bl	8000608 <__aeabi_dmul>
 8009302:	2301      	movs	r3, #1
 8009304:	1064      	asrs	r4, r4, #1
 8009306:	f106 0608 	add.w	r6, r6, #8
 800930a:	d1f4      	bne.n	80092f6 <_strtod_l+0x5b6>
 800930c:	b10b      	cbz	r3, 8009312 <_strtod_l+0x5d2>
 800930e:	4682      	mov	sl, r0
 8009310:	468b      	mov	fp, r1
 8009312:	9b08      	ldr	r3, [sp, #32]
 8009314:	b1b3      	cbz	r3, 8009344 <_strtod_l+0x604>
 8009316:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800931a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800931e:	2b00      	cmp	r3, #0
 8009320:	4659      	mov	r1, fp
 8009322:	dd0f      	ble.n	8009344 <_strtod_l+0x604>
 8009324:	2b1f      	cmp	r3, #31
 8009326:	dd55      	ble.n	80093d4 <_strtod_l+0x694>
 8009328:	2b34      	cmp	r3, #52	@ 0x34
 800932a:	bfde      	ittt	le
 800932c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8009330:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009334:	4093      	lslle	r3, r2
 8009336:	f04f 0a00 	mov.w	sl, #0
 800933a:	bfcc      	ite	gt
 800933c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009340:	ea03 0b01 	andle.w	fp, r3, r1
 8009344:	2200      	movs	r2, #0
 8009346:	2300      	movs	r3, #0
 8009348:	4650      	mov	r0, sl
 800934a:	4659      	mov	r1, fp
 800934c:	f7f7 fbc4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009350:	2800      	cmp	r0, #0
 8009352:	d1a6      	bne.n	80092a2 <_strtod_l+0x562>
 8009354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800935a:	9805      	ldr	r0, [sp, #20]
 800935c:	462b      	mov	r3, r5
 800935e:	463a      	mov	r2, r7
 8009360:	f7ff f8c6 	bl	80084f0 <__s2b>
 8009364:	900a      	str	r0, [sp, #40]	@ 0x28
 8009366:	2800      	cmp	r0, #0
 8009368:	f43f af05 	beq.w	8009176 <_strtod_l+0x436>
 800936c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800936e:	2a00      	cmp	r2, #0
 8009370:	eba9 0308 	sub.w	r3, r9, r8
 8009374:	bfa8      	it	ge
 8009376:	2300      	movge	r3, #0
 8009378:	9312      	str	r3, [sp, #72]	@ 0x48
 800937a:	2400      	movs	r4, #0
 800937c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009380:	9316      	str	r3, [sp, #88]	@ 0x58
 8009382:	46a0      	mov	r8, r4
 8009384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009386:	9805      	ldr	r0, [sp, #20]
 8009388:	6859      	ldr	r1, [r3, #4]
 800938a:	f7ff f809 	bl	80083a0 <_Balloc>
 800938e:	4681      	mov	r9, r0
 8009390:	2800      	cmp	r0, #0
 8009392:	f43f aef4 	beq.w	800917e <_strtod_l+0x43e>
 8009396:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009398:	691a      	ldr	r2, [r3, #16]
 800939a:	3202      	adds	r2, #2
 800939c:	f103 010c 	add.w	r1, r3, #12
 80093a0:	0092      	lsls	r2, r2, #2
 80093a2:	300c      	adds	r0, #12
 80093a4:	f7fe f899 	bl	80074da <memcpy>
 80093a8:	ec4b ab10 	vmov	d0, sl, fp
 80093ac:	9805      	ldr	r0, [sp, #20]
 80093ae:	aa1c      	add	r2, sp, #112	@ 0x70
 80093b0:	a91b      	add	r1, sp, #108	@ 0x6c
 80093b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80093b6:	f7ff fbd7 	bl	8008b68 <__d2b>
 80093ba:	901a      	str	r0, [sp, #104]	@ 0x68
 80093bc:	2800      	cmp	r0, #0
 80093be:	f43f aede 	beq.w	800917e <_strtod_l+0x43e>
 80093c2:	9805      	ldr	r0, [sp, #20]
 80093c4:	2101      	movs	r1, #1
 80093c6:	f7ff f929 	bl	800861c <__i2b>
 80093ca:	4680      	mov	r8, r0
 80093cc:	b948      	cbnz	r0, 80093e2 <_strtod_l+0x6a2>
 80093ce:	f04f 0800 	mov.w	r8, #0
 80093d2:	e6d4      	b.n	800917e <_strtod_l+0x43e>
 80093d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80093d8:	fa02 f303 	lsl.w	r3, r2, r3
 80093dc:	ea03 0a0a 	and.w	sl, r3, sl
 80093e0:	e7b0      	b.n	8009344 <_strtod_l+0x604>
 80093e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80093e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80093e6:	2d00      	cmp	r5, #0
 80093e8:	bfab      	itete	ge
 80093ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80093ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80093ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80093f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80093f2:	bfac      	ite	ge
 80093f4:	18ef      	addge	r7, r5, r3
 80093f6:	1b5e      	sublt	r6, r3, r5
 80093f8:	9b08      	ldr	r3, [sp, #32]
 80093fa:	1aed      	subs	r5, r5, r3
 80093fc:	4415      	add	r5, r2
 80093fe:	4b66      	ldr	r3, [pc, #408]	@ (8009598 <_strtod_l+0x858>)
 8009400:	3d01      	subs	r5, #1
 8009402:	429d      	cmp	r5, r3
 8009404:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009408:	da50      	bge.n	80094ac <_strtod_l+0x76c>
 800940a:	1b5b      	subs	r3, r3, r5
 800940c:	2b1f      	cmp	r3, #31
 800940e:	eba2 0203 	sub.w	r2, r2, r3
 8009412:	f04f 0101 	mov.w	r1, #1
 8009416:	dc3d      	bgt.n	8009494 <_strtod_l+0x754>
 8009418:	fa01 f303 	lsl.w	r3, r1, r3
 800941c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800941e:	2300      	movs	r3, #0
 8009420:	9310      	str	r3, [sp, #64]	@ 0x40
 8009422:	18bd      	adds	r5, r7, r2
 8009424:	9b08      	ldr	r3, [sp, #32]
 8009426:	42af      	cmp	r7, r5
 8009428:	4416      	add	r6, r2
 800942a:	441e      	add	r6, r3
 800942c:	463b      	mov	r3, r7
 800942e:	bfa8      	it	ge
 8009430:	462b      	movge	r3, r5
 8009432:	42b3      	cmp	r3, r6
 8009434:	bfa8      	it	ge
 8009436:	4633      	movge	r3, r6
 8009438:	2b00      	cmp	r3, #0
 800943a:	bfc2      	ittt	gt
 800943c:	1aed      	subgt	r5, r5, r3
 800943e:	1af6      	subgt	r6, r6, r3
 8009440:	1aff      	subgt	r7, r7, r3
 8009442:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009444:	2b00      	cmp	r3, #0
 8009446:	dd16      	ble.n	8009476 <_strtod_l+0x736>
 8009448:	4641      	mov	r1, r8
 800944a:	9805      	ldr	r0, [sp, #20]
 800944c:	461a      	mov	r2, r3
 800944e:	f7ff f9a5 	bl	800879c <__pow5mult>
 8009452:	4680      	mov	r8, r0
 8009454:	2800      	cmp	r0, #0
 8009456:	d0ba      	beq.n	80093ce <_strtod_l+0x68e>
 8009458:	4601      	mov	r1, r0
 800945a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800945c:	9805      	ldr	r0, [sp, #20]
 800945e:	f7ff f8f3 	bl	8008648 <__multiply>
 8009462:	900e      	str	r0, [sp, #56]	@ 0x38
 8009464:	2800      	cmp	r0, #0
 8009466:	f43f ae8a 	beq.w	800917e <_strtod_l+0x43e>
 800946a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800946c:	9805      	ldr	r0, [sp, #20]
 800946e:	f7fe ffd7 	bl	8008420 <_Bfree>
 8009472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009474:	931a      	str	r3, [sp, #104]	@ 0x68
 8009476:	2d00      	cmp	r5, #0
 8009478:	dc1d      	bgt.n	80094b6 <_strtod_l+0x776>
 800947a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800947c:	2b00      	cmp	r3, #0
 800947e:	dd23      	ble.n	80094c8 <_strtod_l+0x788>
 8009480:	4649      	mov	r1, r9
 8009482:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009484:	9805      	ldr	r0, [sp, #20]
 8009486:	f7ff f989 	bl	800879c <__pow5mult>
 800948a:	4681      	mov	r9, r0
 800948c:	b9e0      	cbnz	r0, 80094c8 <_strtod_l+0x788>
 800948e:	f04f 0900 	mov.w	r9, #0
 8009492:	e674      	b.n	800917e <_strtod_l+0x43e>
 8009494:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009498:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800949c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80094a0:	35e2      	adds	r5, #226	@ 0xe2
 80094a2:	fa01 f305 	lsl.w	r3, r1, r5
 80094a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80094a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80094aa:	e7ba      	b.n	8009422 <_strtod_l+0x6e2>
 80094ac:	2300      	movs	r3, #0
 80094ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80094b0:	2301      	movs	r3, #1
 80094b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80094b4:	e7b5      	b.n	8009422 <_strtod_l+0x6e2>
 80094b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094b8:	9805      	ldr	r0, [sp, #20]
 80094ba:	462a      	mov	r2, r5
 80094bc:	f7ff f9c8 	bl	8008850 <__lshift>
 80094c0:	901a      	str	r0, [sp, #104]	@ 0x68
 80094c2:	2800      	cmp	r0, #0
 80094c4:	d1d9      	bne.n	800947a <_strtod_l+0x73a>
 80094c6:	e65a      	b.n	800917e <_strtod_l+0x43e>
 80094c8:	2e00      	cmp	r6, #0
 80094ca:	dd07      	ble.n	80094dc <_strtod_l+0x79c>
 80094cc:	4649      	mov	r1, r9
 80094ce:	9805      	ldr	r0, [sp, #20]
 80094d0:	4632      	mov	r2, r6
 80094d2:	f7ff f9bd 	bl	8008850 <__lshift>
 80094d6:	4681      	mov	r9, r0
 80094d8:	2800      	cmp	r0, #0
 80094da:	d0d8      	beq.n	800948e <_strtod_l+0x74e>
 80094dc:	2f00      	cmp	r7, #0
 80094de:	dd08      	ble.n	80094f2 <_strtod_l+0x7b2>
 80094e0:	4641      	mov	r1, r8
 80094e2:	9805      	ldr	r0, [sp, #20]
 80094e4:	463a      	mov	r2, r7
 80094e6:	f7ff f9b3 	bl	8008850 <__lshift>
 80094ea:	4680      	mov	r8, r0
 80094ec:	2800      	cmp	r0, #0
 80094ee:	f43f ae46 	beq.w	800917e <_strtod_l+0x43e>
 80094f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094f4:	9805      	ldr	r0, [sp, #20]
 80094f6:	464a      	mov	r2, r9
 80094f8:	f7ff fa32 	bl	8008960 <__mdiff>
 80094fc:	4604      	mov	r4, r0
 80094fe:	2800      	cmp	r0, #0
 8009500:	f43f ae3d 	beq.w	800917e <_strtod_l+0x43e>
 8009504:	68c3      	ldr	r3, [r0, #12]
 8009506:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009508:	2300      	movs	r3, #0
 800950a:	60c3      	str	r3, [r0, #12]
 800950c:	4641      	mov	r1, r8
 800950e:	f7ff fa0b 	bl	8008928 <__mcmp>
 8009512:	2800      	cmp	r0, #0
 8009514:	da46      	bge.n	80095a4 <_strtod_l+0x864>
 8009516:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009518:	ea53 030a 	orrs.w	r3, r3, sl
 800951c:	d16c      	bne.n	80095f8 <_strtod_l+0x8b8>
 800951e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009522:	2b00      	cmp	r3, #0
 8009524:	d168      	bne.n	80095f8 <_strtod_l+0x8b8>
 8009526:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800952a:	0d1b      	lsrs	r3, r3, #20
 800952c:	051b      	lsls	r3, r3, #20
 800952e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009532:	d961      	bls.n	80095f8 <_strtod_l+0x8b8>
 8009534:	6963      	ldr	r3, [r4, #20]
 8009536:	b913      	cbnz	r3, 800953e <_strtod_l+0x7fe>
 8009538:	6923      	ldr	r3, [r4, #16]
 800953a:	2b01      	cmp	r3, #1
 800953c:	dd5c      	ble.n	80095f8 <_strtod_l+0x8b8>
 800953e:	4621      	mov	r1, r4
 8009540:	2201      	movs	r2, #1
 8009542:	9805      	ldr	r0, [sp, #20]
 8009544:	f7ff f984 	bl	8008850 <__lshift>
 8009548:	4641      	mov	r1, r8
 800954a:	4604      	mov	r4, r0
 800954c:	f7ff f9ec 	bl	8008928 <__mcmp>
 8009550:	2800      	cmp	r0, #0
 8009552:	dd51      	ble.n	80095f8 <_strtod_l+0x8b8>
 8009554:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009558:	9a08      	ldr	r2, [sp, #32]
 800955a:	0d1b      	lsrs	r3, r3, #20
 800955c:	051b      	lsls	r3, r3, #20
 800955e:	2a00      	cmp	r2, #0
 8009560:	d06b      	beq.n	800963a <_strtod_l+0x8fa>
 8009562:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009566:	d868      	bhi.n	800963a <_strtod_l+0x8fa>
 8009568:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800956c:	f67f ae9d 	bls.w	80092aa <_strtod_l+0x56a>
 8009570:	4b0a      	ldr	r3, [pc, #40]	@ (800959c <_strtod_l+0x85c>)
 8009572:	4650      	mov	r0, sl
 8009574:	4659      	mov	r1, fp
 8009576:	2200      	movs	r2, #0
 8009578:	f7f7 f846 	bl	8000608 <__aeabi_dmul>
 800957c:	4b08      	ldr	r3, [pc, #32]	@ (80095a0 <_strtod_l+0x860>)
 800957e:	400b      	ands	r3, r1
 8009580:	4682      	mov	sl, r0
 8009582:	468b      	mov	fp, r1
 8009584:	2b00      	cmp	r3, #0
 8009586:	f47f ae05 	bne.w	8009194 <_strtod_l+0x454>
 800958a:	9a05      	ldr	r2, [sp, #20]
 800958c:	2322      	movs	r3, #34	@ 0x22
 800958e:	6013      	str	r3, [r2, #0]
 8009590:	e600      	b.n	8009194 <_strtod_l+0x454>
 8009592:	bf00      	nop
 8009594:	0800afb0 	.word	0x0800afb0
 8009598:	fffffc02 	.word	0xfffffc02
 800959c:	39500000 	.word	0x39500000
 80095a0:	7ff00000 	.word	0x7ff00000
 80095a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80095a8:	d165      	bne.n	8009676 <_strtod_l+0x936>
 80095aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80095ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095b0:	b35a      	cbz	r2, 800960a <_strtod_l+0x8ca>
 80095b2:	4a9f      	ldr	r2, [pc, #636]	@ (8009830 <_strtod_l+0xaf0>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d12b      	bne.n	8009610 <_strtod_l+0x8d0>
 80095b8:	9b08      	ldr	r3, [sp, #32]
 80095ba:	4651      	mov	r1, sl
 80095bc:	b303      	cbz	r3, 8009600 <_strtod_l+0x8c0>
 80095be:	4b9d      	ldr	r3, [pc, #628]	@ (8009834 <_strtod_l+0xaf4>)
 80095c0:	465a      	mov	r2, fp
 80095c2:	4013      	ands	r3, r2
 80095c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80095c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095cc:	d81b      	bhi.n	8009606 <_strtod_l+0x8c6>
 80095ce:	0d1b      	lsrs	r3, r3, #20
 80095d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80095d4:	fa02 f303 	lsl.w	r3, r2, r3
 80095d8:	4299      	cmp	r1, r3
 80095da:	d119      	bne.n	8009610 <_strtod_l+0x8d0>
 80095dc:	4b96      	ldr	r3, [pc, #600]	@ (8009838 <_strtod_l+0xaf8>)
 80095de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d102      	bne.n	80095ea <_strtod_l+0x8aa>
 80095e4:	3101      	adds	r1, #1
 80095e6:	f43f adca 	beq.w	800917e <_strtod_l+0x43e>
 80095ea:	4b92      	ldr	r3, [pc, #584]	@ (8009834 <_strtod_l+0xaf4>)
 80095ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095ee:	401a      	ands	r2, r3
 80095f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80095f4:	f04f 0a00 	mov.w	sl, #0
 80095f8:	9b08      	ldr	r3, [sp, #32]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1b8      	bne.n	8009570 <_strtod_l+0x830>
 80095fe:	e5c9      	b.n	8009194 <_strtod_l+0x454>
 8009600:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009604:	e7e8      	b.n	80095d8 <_strtod_l+0x898>
 8009606:	4613      	mov	r3, r2
 8009608:	e7e6      	b.n	80095d8 <_strtod_l+0x898>
 800960a:	ea53 030a 	orrs.w	r3, r3, sl
 800960e:	d0a1      	beq.n	8009554 <_strtod_l+0x814>
 8009610:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009612:	b1db      	cbz	r3, 800964c <_strtod_l+0x90c>
 8009614:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009616:	4213      	tst	r3, r2
 8009618:	d0ee      	beq.n	80095f8 <_strtod_l+0x8b8>
 800961a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800961c:	9a08      	ldr	r2, [sp, #32]
 800961e:	4650      	mov	r0, sl
 8009620:	4659      	mov	r1, fp
 8009622:	b1bb      	cbz	r3, 8009654 <_strtod_l+0x914>
 8009624:	f7ff fb6e 	bl	8008d04 <sulp>
 8009628:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800962c:	ec53 2b10 	vmov	r2, r3, d0
 8009630:	f7f6 fe34 	bl	800029c <__adddf3>
 8009634:	4682      	mov	sl, r0
 8009636:	468b      	mov	fp, r1
 8009638:	e7de      	b.n	80095f8 <_strtod_l+0x8b8>
 800963a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800963e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009642:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009646:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800964a:	e7d5      	b.n	80095f8 <_strtod_l+0x8b8>
 800964c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800964e:	ea13 0f0a 	tst.w	r3, sl
 8009652:	e7e1      	b.n	8009618 <_strtod_l+0x8d8>
 8009654:	f7ff fb56 	bl	8008d04 <sulp>
 8009658:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800965c:	ec53 2b10 	vmov	r2, r3, d0
 8009660:	f7f6 fe1a 	bl	8000298 <__aeabi_dsub>
 8009664:	2200      	movs	r2, #0
 8009666:	2300      	movs	r3, #0
 8009668:	4682      	mov	sl, r0
 800966a:	468b      	mov	fp, r1
 800966c:	f7f7 fa34 	bl	8000ad8 <__aeabi_dcmpeq>
 8009670:	2800      	cmp	r0, #0
 8009672:	d0c1      	beq.n	80095f8 <_strtod_l+0x8b8>
 8009674:	e619      	b.n	80092aa <_strtod_l+0x56a>
 8009676:	4641      	mov	r1, r8
 8009678:	4620      	mov	r0, r4
 800967a:	f7ff facd 	bl	8008c18 <__ratio>
 800967e:	ec57 6b10 	vmov	r6, r7, d0
 8009682:	2200      	movs	r2, #0
 8009684:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009688:	4630      	mov	r0, r6
 800968a:	4639      	mov	r1, r7
 800968c:	f7f7 fa38 	bl	8000b00 <__aeabi_dcmple>
 8009690:	2800      	cmp	r0, #0
 8009692:	d06f      	beq.n	8009774 <_strtod_l+0xa34>
 8009694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009696:	2b00      	cmp	r3, #0
 8009698:	d17a      	bne.n	8009790 <_strtod_l+0xa50>
 800969a:	f1ba 0f00 	cmp.w	sl, #0
 800969e:	d158      	bne.n	8009752 <_strtod_l+0xa12>
 80096a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d15a      	bne.n	8009760 <_strtod_l+0xa20>
 80096aa:	4b64      	ldr	r3, [pc, #400]	@ (800983c <_strtod_l+0xafc>)
 80096ac:	2200      	movs	r2, #0
 80096ae:	4630      	mov	r0, r6
 80096b0:	4639      	mov	r1, r7
 80096b2:	f7f7 fa1b 	bl	8000aec <__aeabi_dcmplt>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d159      	bne.n	800976e <_strtod_l+0xa2e>
 80096ba:	4630      	mov	r0, r6
 80096bc:	4639      	mov	r1, r7
 80096be:	4b60      	ldr	r3, [pc, #384]	@ (8009840 <_strtod_l+0xb00>)
 80096c0:	2200      	movs	r2, #0
 80096c2:	f7f6 ffa1 	bl	8000608 <__aeabi_dmul>
 80096c6:	4606      	mov	r6, r0
 80096c8:	460f      	mov	r7, r1
 80096ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80096ce:	9606      	str	r6, [sp, #24]
 80096d0:	9307      	str	r3, [sp, #28]
 80096d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096d6:	4d57      	ldr	r5, [pc, #348]	@ (8009834 <_strtod_l+0xaf4>)
 80096d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80096dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096de:	401d      	ands	r5, r3
 80096e0:	4b58      	ldr	r3, [pc, #352]	@ (8009844 <_strtod_l+0xb04>)
 80096e2:	429d      	cmp	r5, r3
 80096e4:	f040 80b2 	bne.w	800984c <_strtod_l+0xb0c>
 80096e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80096ee:	ec4b ab10 	vmov	d0, sl, fp
 80096f2:	f7ff f9c9 	bl	8008a88 <__ulp>
 80096f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096fa:	ec51 0b10 	vmov	r0, r1, d0
 80096fe:	f7f6 ff83 	bl	8000608 <__aeabi_dmul>
 8009702:	4652      	mov	r2, sl
 8009704:	465b      	mov	r3, fp
 8009706:	f7f6 fdc9 	bl	800029c <__adddf3>
 800970a:	460b      	mov	r3, r1
 800970c:	4949      	ldr	r1, [pc, #292]	@ (8009834 <_strtod_l+0xaf4>)
 800970e:	4a4e      	ldr	r2, [pc, #312]	@ (8009848 <_strtod_l+0xb08>)
 8009710:	4019      	ands	r1, r3
 8009712:	4291      	cmp	r1, r2
 8009714:	4682      	mov	sl, r0
 8009716:	d942      	bls.n	800979e <_strtod_l+0xa5e>
 8009718:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800971a:	4b47      	ldr	r3, [pc, #284]	@ (8009838 <_strtod_l+0xaf8>)
 800971c:	429a      	cmp	r2, r3
 800971e:	d103      	bne.n	8009728 <_strtod_l+0x9e8>
 8009720:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009722:	3301      	adds	r3, #1
 8009724:	f43f ad2b 	beq.w	800917e <_strtod_l+0x43e>
 8009728:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009838 <_strtod_l+0xaf8>
 800972c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009730:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009732:	9805      	ldr	r0, [sp, #20]
 8009734:	f7fe fe74 	bl	8008420 <_Bfree>
 8009738:	9805      	ldr	r0, [sp, #20]
 800973a:	4649      	mov	r1, r9
 800973c:	f7fe fe70 	bl	8008420 <_Bfree>
 8009740:	9805      	ldr	r0, [sp, #20]
 8009742:	4641      	mov	r1, r8
 8009744:	f7fe fe6c 	bl	8008420 <_Bfree>
 8009748:	9805      	ldr	r0, [sp, #20]
 800974a:	4621      	mov	r1, r4
 800974c:	f7fe fe68 	bl	8008420 <_Bfree>
 8009750:	e618      	b.n	8009384 <_strtod_l+0x644>
 8009752:	f1ba 0f01 	cmp.w	sl, #1
 8009756:	d103      	bne.n	8009760 <_strtod_l+0xa20>
 8009758:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800975a:	2b00      	cmp	r3, #0
 800975c:	f43f ada5 	beq.w	80092aa <_strtod_l+0x56a>
 8009760:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009810 <_strtod_l+0xad0>
 8009764:	4f35      	ldr	r7, [pc, #212]	@ (800983c <_strtod_l+0xafc>)
 8009766:	ed8d 7b06 	vstr	d7, [sp, #24]
 800976a:	2600      	movs	r6, #0
 800976c:	e7b1      	b.n	80096d2 <_strtod_l+0x992>
 800976e:	4f34      	ldr	r7, [pc, #208]	@ (8009840 <_strtod_l+0xb00>)
 8009770:	2600      	movs	r6, #0
 8009772:	e7aa      	b.n	80096ca <_strtod_l+0x98a>
 8009774:	4b32      	ldr	r3, [pc, #200]	@ (8009840 <_strtod_l+0xb00>)
 8009776:	4630      	mov	r0, r6
 8009778:	4639      	mov	r1, r7
 800977a:	2200      	movs	r2, #0
 800977c:	f7f6 ff44 	bl	8000608 <__aeabi_dmul>
 8009780:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009782:	4606      	mov	r6, r0
 8009784:	460f      	mov	r7, r1
 8009786:	2b00      	cmp	r3, #0
 8009788:	d09f      	beq.n	80096ca <_strtod_l+0x98a>
 800978a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800978e:	e7a0      	b.n	80096d2 <_strtod_l+0x992>
 8009790:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009818 <_strtod_l+0xad8>
 8009794:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009798:	ec57 6b17 	vmov	r6, r7, d7
 800979c:	e799      	b.n	80096d2 <_strtod_l+0x992>
 800979e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80097a2:	9b08      	ldr	r3, [sp, #32]
 80097a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1c1      	bne.n	8009730 <_strtod_l+0x9f0>
 80097ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80097b0:	0d1b      	lsrs	r3, r3, #20
 80097b2:	051b      	lsls	r3, r3, #20
 80097b4:	429d      	cmp	r5, r3
 80097b6:	d1bb      	bne.n	8009730 <_strtod_l+0x9f0>
 80097b8:	4630      	mov	r0, r6
 80097ba:	4639      	mov	r1, r7
 80097bc:	f7f7 fa84 	bl	8000cc8 <__aeabi_d2lz>
 80097c0:	f7f6 fef4 	bl	80005ac <__aeabi_l2d>
 80097c4:	4602      	mov	r2, r0
 80097c6:	460b      	mov	r3, r1
 80097c8:	4630      	mov	r0, r6
 80097ca:	4639      	mov	r1, r7
 80097cc:	f7f6 fd64 	bl	8000298 <__aeabi_dsub>
 80097d0:	460b      	mov	r3, r1
 80097d2:	4602      	mov	r2, r0
 80097d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80097d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80097dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097de:	ea46 060a 	orr.w	r6, r6, sl
 80097e2:	431e      	orrs	r6, r3
 80097e4:	d06f      	beq.n	80098c6 <_strtod_l+0xb86>
 80097e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009820 <_strtod_l+0xae0>)
 80097e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ec:	f7f7 f97e 	bl	8000aec <__aeabi_dcmplt>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	f47f accf 	bne.w	8009194 <_strtod_l+0x454>
 80097f6:	a30c      	add	r3, pc, #48	@ (adr r3, 8009828 <_strtod_l+0xae8>)
 80097f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009800:	f7f7 f992 	bl	8000b28 <__aeabi_dcmpgt>
 8009804:	2800      	cmp	r0, #0
 8009806:	d093      	beq.n	8009730 <_strtod_l+0x9f0>
 8009808:	e4c4      	b.n	8009194 <_strtod_l+0x454>
 800980a:	bf00      	nop
 800980c:	f3af 8000 	nop.w
 8009810:	00000000 	.word	0x00000000
 8009814:	bff00000 	.word	0xbff00000
 8009818:	00000000 	.word	0x00000000
 800981c:	3ff00000 	.word	0x3ff00000
 8009820:	94a03595 	.word	0x94a03595
 8009824:	3fdfffff 	.word	0x3fdfffff
 8009828:	35afe535 	.word	0x35afe535
 800982c:	3fe00000 	.word	0x3fe00000
 8009830:	000fffff 	.word	0x000fffff
 8009834:	7ff00000 	.word	0x7ff00000
 8009838:	7fefffff 	.word	0x7fefffff
 800983c:	3ff00000 	.word	0x3ff00000
 8009840:	3fe00000 	.word	0x3fe00000
 8009844:	7fe00000 	.word	0x7fe00000
 8009848:	7c9fffff 	.word	0x7c9fffff
 800984c:	9b08      	ldr	r3, [sp, #32]
 800984e:	b323      	cbz	r3, 800989a <_strtod_l+0xb5a>
 8009850:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009854:	d821      	bhi.n	800989a <_strtod_l+0xb5a>
 8009856:	a328      	add	r3, pc, #160	@ (adr r3, 80098f8 <_strtod_l+0xbb8>)
 8009858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985c:	4630      	mov	r0, r6
 800985e:	4639      	mov	r1, r7
 8009860:	f7f7 f94e 	bl	8000b00 <__aeabi_dcmple>
 8009864:	b1a0      	cbz	r0, 8009890 <_strtod_l+0xb50>
 8009866:	4639      	mov	r1, r7
 8009868:	4630      	mov	r0, r6
 800986a:	f7f7 f9a5 	bl	8000bb8 <__aeabi_d2uiz>
 800986e:	2801      	cmp	r0, #1
 8009870:	bf38      	it	cc
 8009872:	2001      	movcc	r0, #1
 8009874:	f7f6 fe4e 	bl	8000514 <__aeabi_ui2d>
 8009878:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800987a:	4606      	mov	r6, r0
 800987c:	460f      	mov	r7, r1
 800987e:	b9fb      	cbnz	r3, 80098c0 <_strtod_l+0xb80>
 8009880:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009884:	9014      	str	r0, [sp, #80]	@ 0x50
 8009886:	9315      	str	r3, [sp, #84]	@ 0x54
 8009888:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800988c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009890:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009892:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009896:	1b5b      	subs	r3, r3, r5
 8009898:	9311      	str	r3, [sp, #68]	@ 0x44
 800989a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800989e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80098a2:	f7ff f8f1 	bl	8008a88 <__ulp>
 80098a6:	4650      	mov	r0, sl
 80098a8:	ec53 2b10 	vmov	r2, r3, d0
 80098ac:	4659      	mov	r1, fp
 80098ae:	f7f6 feab 	bl	8000608 <__aeabi_dmul>
 80098b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80098b6:	f7f6 fcf1 	bl	800029c <__adddf3>
 80098ba:	4682      	mov	sl, r0
 80098bc:	468b      	mov	fp, r1
 80098be:	e770      	b.n	80097a2 <_strtod_l+0xa62>
 80098c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80098c4:	e7e0      	b.n	8009888 <_strtod_l+0xb48>
 80098c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009900 <_strtod_l+0xbc0>)
 80098c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098cc:	f7f7 f90e 	bl	8000aec <__aeabi_dcmplt>
 80098d0:	e798      	b.n	8009804 <_strtod_l+0xac4>
 80098d2:	2300      	movs	r3, #0
 80098d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80098d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098da:	6013      	str	r3, [r2, #0]
 80098dc:	f7ff ba6d 	b.w	8008dba <_strtod_l+0x7a>
 80098e0:	2a65      	cmp	r2, #101	@ 0x65
 80098e2:	f43f ab66 	beq.w	8008fb2 <_strtod_l+0x272>
 80098e6:	2a45      	cmp	r2, #69	@ 0x45
 80098e8:	f43f ab63 	beq.w	8008fb2 <_strtod_l+0x272>
 80098ec:	2301      	movs	r3, #1
 80098ee:	f7ff bb9e 	b.w	800902e <_strtod_l+0x2ee>
 80098f2:	bf00      	nop
 80098f4:	f3af 8000 	nop.w
 80098f8:	ffc00000 	.word	0xffc00000
 80098fc:	41dfffff 	.word	0x41dfffff
 8009900:	94a03595 	.word	0x94a03595
 8009904:	3fcfffff 	.word	0x3fcfffff

08009908 <_strtod_r>:
 8009908:	4b01      	ldr	r3, [pc, #4]	@ (8009910 <_strtod_r+0x8>)
 800990a:	f7ff ba19 	b.w	8008d40 <_strtod_l>
 800990e:	bf00      	nop
 8009910:	2000006c 	.word	0x2000006c

08009914 <_strtol_l.constprop.0>:
 8009914:	2b24      	cmp	r3, #36	@ 0x24
 8009916:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800991a:	4686      	mov	lr, r0
 800991c:	4690      	mov	r8, r2
 800991e:	d801      	bhi.n	8009924 <_strtol_l.constprop.0+0x10>
 8009920:	2b01      	cmp	r3, #1
 8009922:	d106      	bne.n	8009932 <_strtol_l.constprop.0+0x1e>
 8009924:	f7fd fdac 	bl	8007480 <__errno>
 8009928:	2316      	movs	r3, #22
 800992a:	6003      	str	r3, [r0, #0]
 800992c:	2000      	movs	r0, #0
 800992e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009932:	4834      	ldr	r0, [pc, #208]	@ (8009a04 <_strtol_l.constprop.0+0xf0>)
 8009934:	460d      	mov	r5, r1
 8009936:	462a      	mov	r2, r5
 8009938:	f815 4b01 	ldrb.w	r4, [r5], #1
 800993c:	5d06      	ldrb	r6, [r0, r4]
 800993e:	f016 0608 	ands.w	r6, r6, #8
 8009942:	d1f8      	bne.n	8009936 <_strtol_l.constprop.0+0x22>
 8009944:	2c2d      	cmp	r4, #45	@ 0x2d
 8009946:	d12d      	bne.n	80099a4 <_strtol_l.constprop.0+0x90>
 8009948:	782c      	ldrb	r4, [r5, #0]
 800994a:	2601      	movs	r6, #1
 800994c:	1c95      	adds	r5, r2, #2
 800994e:	f033 0210 	bics.w	r2, r3, #16
 8009952:	d109      	bne.n	8009968 <_strtol_l.constprop.0+0x54>
 8009954:	2c30      	cmp	r4, #48	@ 0x30
 8009956:	d12a      	bne.n	80099ae <_strtol_l.constprop.0+0x9a>
 8009958:	782a      	ldrb	r2, [r5, #0]
 800995a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800995e:	2a58      	cmp	r2, #88	@ 0x58
 8009960:	d125      	bne.n	80099ae <_strtol_l.constprop.0+0x9a>
 8009962:	786c      	ldrb	r4, [r5, #1]
 8009964:	2310      	movs	r3, #16
 8009966:	3502      	adds	r5, #2
 8009968:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800996c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009970:	2200      	movs	r2, #0
 8009972:	fbbc f9f3 	udiv	r9, ip, r3
 8009976:	4610      	mov	r0, r2
 8009978:	fb03 ca19 	mls	sl, r3, r9, ip
 800997c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009980:	2f09      	cmp	r7, #9
 8009982:	d81b      	bhi.n	80099bc <_strtol_l.constprop.0+0xa8>
 8009984:	463c      	mov	r4, r7
 8009986:	42a3      	cmp	r3, r4
 8009988:	dd27      	ble.n	80099da <_strtol_l.constprop.0+0xc6>
 800998a:	1c57      	adds	r7, r2, #1
 800998c:	d007      	beq.n	800999e <_strtol_l.constprop.0+0x8a>
 800998e:	4581      	cmp	r9, r0
 8009990:	d320      	bcc.n	80099d4 <_strtol_l.constprop.0+0xc0>
 8009992:	d101      	bne.n	8009998 <_strtol_l.constprop.0+0x84>
 8009994:	45a2      	cmp	sl, r4
 8009996:	db1d      	blt.n	80099d4 <_strtol_l.constprop.0+0xc0>
 8009998:	fb00 4003 	mla	r0, r0, r3, r4
 800999c:	2201      	movs	r2, #1
 800999e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099a2:	e7eb      	b.n	800997c <_strtol_l.constprop.0+0x68>
 80099a4:	2c2b      	cmp	r4, #43	@ 0x2b
 80099a6:	bf04      	itt	eq
 80099a8:	782c      	ldrbeq	r4, [r5, #0]
 80099aa:	1c95      	addeq	r5, r2, #2
 80099ac:	e7cf      	b.n	800994e <_strtol_l.constprop.0+0x3a>
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1da      	bne.n	8009968 <_strtol_l.constprop.0+0x54>
 80099b2:	2c30      	cmp	r4, #48	@ 0x30
 80099b4:	bf0c      	ite	eq
 80099b6:	2308      	moveq	r3, #8
 80099b8:	230a      	movne	r3, #10
 80099ba:	e7d5      	b.n	8009968 <_strtol_l.constprop.0+0x54>
 80099bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80099c0:	2f19      	cmp	r7, #25
 80099c2:	d801      	bhi.n	80099c8 <_strtol_l.constprop.0+0xb4>
 80099c4:	3c37      	subs	r4, #55	@ 0x37
 80099c6:	e7de      	b.n	8009986 <_strtol_l.constprop.0+0x72>
 80099c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80099cc:	2f19      	cmp	r7, #25
 80099ce:	d804      	bhi.n	80099da <_strtol_l.constprop.0+0xc6>
 80099d0:	3c57      	subs	r4, #87	@ 0x57
 80099d2:	e7d8      	b.n	8009986 <_strtol_l.constprop.0+0x72>
 80099d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80099d8:	e7e1      	b.n	800999e <_strtol_l.constprop.0+0x8a>
 80099da:	1c53      	adds	r3, r2, #1
 80099dc:	d108      	bne.n	80099f0 <_strtol_l.constprop.0+0xdc>
 80099de:	2322      	movs	r3, #34	@ 0x22
 80099e0:	f8ce 3000 	str.w	r3, [lr]
 80099e4:	4660      	mov	r0, ip
 80099e6:	f1b8 0f00 	cmp.w	r8, #0
 80099ea:	d0a0      	beq.n	800992e <_strtol_l.constprop.0+0x1a>
 80099ec:	1e69      	subs	r1, r5, #1
 80099ee:	e006      	b.n	80099fe <_strtol_l.constprop.0+0xea>
 80099f0:	b106      	cbz	r6, 80099f4 <_strtol_l.constprop.0+0xe0>
 80099f2:	4240      	negs	r0, r0
 80099f4:	f1b8 0f00 	cmp.w	r8, #0
 80099f8:	d099      	beq.n	800992e <_strtol_l.constprop.0+0x1a>
 80099fa:	2a00      	cmp	r2, #0
 80099fc:	d1f6      	bne.n	80099ec <_strtol_l.constprop.0+0xd8>
 80099fe:	f8c8 1000 	str.w	r1, [r8]
 8009a02:	e794      	b.n	800992e <_strtol_l.constprop.0+0x1a>
 8009a04:	0800afd9 	.word	0x0800afd9

08009a08 <_strtol_r>:
 8009a08:	f7ff bf84 	b.w	8009914 <_strtol_l.constprop.0>

08009a0c <__ssputs_r>:
 8009a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a10:	688e      	ldr	r6, [r1, #8]
 8009a12:	461f      	mov	r7, r3
 8009a14:	42be      	cmp	r6, r7
 8009a16:	680b      	ldr	r3, [r1, #0]
 8009a18:	4682      	mov	sl, r0
 8009a1a:	460c      	mov	r4, r1
 8009a1c:	4690      	mov	r8, r2
 8009a1e:	d82d      	bhi.n	8009a7c <__ssputs_r+0x70>
 8009a20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009a28:	d026      	beq.n	8009a78 <__ssputs_r+0x6c>
 8009a2a:	6965      	ldr	r5, [r4, #20]
 8009a2c:	6909      	ldr	r1, [r1, #16]
 8009a2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a32:	eba3 0901 	sub.w	r9, r3, r1
 8009a36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a3a:	1c7b      	adds	r3, r7, #1
 8009a3c:	444b      	add	r3, r9
 8009a3e:	106d      	asrs	r5, r5, #1
 8009a40:	429d      	cmp	r5, r3
 8009a42:	bf38      	it	cc
 8009a44:	461d      	movcc	r5, r3
 8009a46:	0553      	lsls	r3, r2, #21
 8009a48:	d527      	bpl.n	8009a9a <__ssputs_r+0x8e>
 8009a4a:	4629      	mov	r1, r5
 8009a4c:	f7fe fc1c 	bl	8008288 <_malloc_r>
 8009a50:	4606      	mov	r6, r0
 8009a52:	b360      	cbz	r0, 8009aae <__ssputs_r+0xa2>
 8009a54:	6921      	ldr	r1, [r4, #16]
 8009a56:	464a      	mov	r2, r9
 8009a58:	f7fd fd3f 	bl	80074da <memcpy>
 8009a5c:	89a3      	ldrh	r3, [r4, #12]
 8009a5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a66:	81a3      	strh	r3, [r4, #12]
 8009a68:	6126      	str	r6, [r4, #16]
 8009a6a:	6165      	str	r5, [r4, #20]
 8009a6c:	444e      	add	r6, r9
 8009a6e:	eba5 0509 	sub.w	r5, r5, r9
 8009a72:	6026      	str	r6, [r4, #0]
 8009a74:	60a5      	str	r5, [r4, #8]
 8009a76:	463e      	mov	r6, r7
 8009a78:	42be      	cmp	r6, r7
 8009a7a:	d900      	bls.n	8009a7e <__ssputs_r+0x72>
 8009a7c:	463e      	mov	r6, r7
 8009a7e:	6820      	ldr	r0, [r4, #0]
 8009a80:	4632      	mov	r2, r6
 8009a82:	4641      	mov	r1, r8
 8009a84:	f000 f9c6 	bl	8009e14 <memmove>
 8009a88:	68a3      	ldr	r3, [r4, #8]
 8009a8a:	1b9b      	subs	r3, r3, r6
 8009a8c:	60a3      	str	r3, [r4, #8]
 8009a8e:	6823      	ldr	r3, [r4, #0]
 8009a90:	4433      	add	r3, r6
 8009a92:	6023      	str	r3, [r4, #0]
 8009a94:	2000      	movs	r0, #0
 8009a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a9a:	462a      	mov	r2, r5
 8009a9c:	f000 fd7d 	bl	800a59a <_realloc_r>
 8009aa0:	4606      	mov	r6, r0
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	d1e0      	bne.n	8009a68 <__ssputs_r+0x5c>
 8009aa6:	6921      	ldr	r1, [r4, #16]
 8009aa8:	4650      	mov	r0, sl
 8009aaa:	f7fe fb79 	bl	80081a0 <_free_r>
 8009aae:	230c      	movs	r3, #12
 8009ab0:	f8ca 3000 	str.w	r3, [sl]
 8009ab4:	89a3      	ldrh	r3, [r4, #12]
 8009ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009aba:	81a3      	strh	r3, [r4, #12]
 8009abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ac0:	e7e9      	b.n	8009a96 <__ssputs_r+0x8a>
	...

08009ac4 <_svfiprintf_r>:
 8009ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac8:	4698      	mov	r8, r3
 8009aca:	898b      	ldrh	r3, [r1, #12]
 8009acc:	061b      	lsls	r3, r3, #24
 8009ace:	b09d      	sub	sp, #116	@ 0x74
 8009ad0:	4607      	mov	r7, r0
 8009ad2:	460d      	mov	r5, r1
 8009ad4:	4614      	mov	r4, r2
 8009ad6:	d510      	bpl.n	8009afa <_svfiprintf_r+0x36>
 8009ad8:	690b      	ldr	r3, [r1, #16]
 8009ada:	b973      	cbnz	r3, 8009afa <_svfiprintf_r+0x36>
 8009adc:	2140      	movs	r1, #64	@ 0x40
 8009ade:	f7fe fbd3 	bl	8008288 <_malloc_r>
 8009ae2:	6028      	str	r0, [r5, #0]
 8009ae4:	6128      	str	r0, [r5, #16]
 8009ae6:	b930      	cbnz	r0, 8009af6 <_svfiprintf_r+0x32>
 8009ae8:	230c      	movs	r3, #12
 8009aea:	603b      	str	r3, [r7, #0]
 8009aec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009af0:	b01d      	add	sp, #116	@ 0x74
 8009af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af6:	2340      	movs	r3, #64	@ 0x40
 8009af8:	616b      	str	r3, [r5, #20]
 8009afa:	2300      	movs	r3, #0
 8009afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009afe:	2320      	movs	r3, #32
 8009b00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b04:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b08:	2330      	movs	r3, #48	@ 0x30
 8009b0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009ca8 <_svfiprintf_r+0x1e4>
 8009b0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b12:	f04f 0901 	mov.w	r9, #1
 8009b16:	4623      	mov	r3, r4
 8009b18:	469a      	mov	sl, r3
 8009b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b1e:	b10a      	cbz	r2, 8009b24 <_svfiprintf_r+0x60>
 8009b20:	2a25      	cmp	r2, #37	@ 0x25
 8009b22:	d1f9      	bne.n	8009b18 <_svfiprintf_r+0x54>
 8009b24:	ebba 0b04 	subs.w	fp, sl, r4
 8009b28:	d00b      	beq.n	8009b42 <_svfiprintf_r+0x7e>
 8009b2a:	465b      	mov	r3, fp
 8009b2c:	4622      	mov	r2, r4
 8009b2e:	4629      	mov	r1, r5
 8009b30:	4638      	mov	r0, r7
 8009b32:	f7ff ff6b 	bl	8009a0c <__ssputs_r>
 8009b36:	3001      	adds	r0, #1
 8009b38:	f000 80a7 	beq.w	8009c8a <_svfiprintf_r+0x1c6>
 8009b3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b3e:	445a      	add	r2, fp
 8009b40:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b42:	f89a 3000 	ldrb.w	r3, [sl]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f000 809f 	beq.w	8009c8a <_svfiprintf_r+0x1c6>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b56:	f10a 0a01 	add.w	sl, sl, #1
 8009b5a:	9304      	str	r3, [sp, #16]
 8009b5c:	9307      	str	r3, [sp, #28]
 8009b5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b62:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b64:	4654      	mov	r4, sl
 8009b66:	2205      	movs	r2, #5
 8009b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b6c:	484e      	ldr	r0, [pc, #312]	@ (8009ca8 <_svfiprintf_r+0x1e4>)
 8009b6e:	f7f6 fb37 	bl	80001e0 <memchr>
 8009b72:	9a04      	ldr	r2, [sp, #16]
 8009b74:	b9d8      	cbnz	r0, 8009bae <_svfiprintf_r+0xea>
 8009b76:	06d0      	lsls	r0, r2, #27
 8009b78:	bf44      	itt	mi
 8009b7a:	2320      	movmi	r3, #32
 8009b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b80:	0711      	lsls	r1, r2, #28
 8009b82:	bf44      	itt	mi
 8009b84:	232b      	movmi	r3, #43	@ 0x2b
 8009b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b90:	d015      	beq.n	8009bbe <_svfiprintf_r+0xfa>
 8009b92:	9a07      	ldr	r2, [sp, #28]
 8009b94:	4654      	mov	r4, sl
 8009b96:	2000      	movs	r0, #0
 8009b98:	f04f 0c0a 	mov.w	ip, #10
 8009b9c:	4621      	mov	r1, r4
 8009b9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ba2:	3b30      	subs	r3, #48	@ 0x30
 8009ba4:	2b09      	cmp	r3, #9
 8009ba6:	d94b      	bls.n	8009c40 <_svfiprintf_r+0x17c>
 8009ba8:	b1b0      	cbz	r0, 8009bd8 <_svfiprintf_r+0x114>
 8009baa:	9207      	str	r2, [sp, #28]
 8009bac:	e014      	b.n	8009bd8 <_svfiprintf_r+0x114>
 8009bae:	eba0 0308 	sub.w	r3, r0, r8
 8009bb2:	fa09 f303 	lsl.w	r3, r9, r3
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	9304      	str	r3, [sp, #16]
 8009bba:	46a2      	mov	sl, r4
 8009bbc:	e7d2      	b.n	8009b64 <_svfiprintf_r+0xa0>
 8009bbe:	9b03      	ldr	r3, [sp, #12]
 8009bc0:	1d19      	adds	r1, r3, #4
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	9103      	str	r1, [sp, #12]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	bfbb      	ittet	lt
 8009bca:	425b      	neglt	r3, r3
 8009bcc:	f042 0202 	orrlt.w	r2, r2, #2
 8009bd0:	9307      	strge	r3, [sp, #28]
 8009bd2:	9307      	strlt	r3, [sp, #28]
 8009bd4:	bfb8      	it	lt
 8009bd6:	9204      	strlt	r2, [sp, #16]
 8009bd8:	7823      	ldrb	r3, [r4, #0]
 8009bda:	2b2e      	cmp	r3, #46	@ 0x2e
 8009bdc:	d10a      	bne.n	8009bf4 <_svfiprintf_r+0x130>
 8009bde:	7863      	ldrb	r3, [r4, #1]
 8009be0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009be2:	d132      	bne.n	8009c4a <_svfiprintf_r+0x186>
 8009be4:	9b03      	ldr	r3, [sp, #12]
 8009be6:	1d1a      	adds	r2, r3, #4
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	9203      	str	r2, [sp, #12]
 8009bec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009bf0:	3402      	adds	r4, #2
 8009bf2:	9305      	str	r3, [sp, #20]
 8009bf4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009cb8 <_svfiprintf_r+0x1f4>
 8009bf8:	7821      	ldrb	r1, [r4, #0]
 8009bfa:	2203      	movs	r2, #3
 8009bfc:	4650      	mov	r0, sl
 8009bfe:	f7f6 faef 	bl	80001e0 <memchr>
 8009c02:	b138      	cbz	r0, 8009c14 <_svfiprintf_r+0x150>
 8009c04:	9b04      	ldr	r3, [sp, #16]
 8009c06:	eba0 000a 	sub.w	r0, r0, sl
 8009c0a:	2240      	movs	r2, #64	@ 0x40
 8009c0c:	4082      	lsls	r2, r0
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	3401      	adds	r4, #1
 8009c12:	9304      	str	r3, [sp, #16]
 8009c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c18:	4824      	ldr	r0, [pc, #144]	@ (8009cac <_svfiprintf_r+0x1e8>)
 8009c1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c1e:	2206      	movs	r2, #6
 8009c20:	f7f6 fade 	bl	80001e0 <memchr>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d036      	beq.n	8009c96 <_svfiprintf_r+0x1d2>
 8009c28:	4b21      	ldr	r3, [pc, #132]	@ (8009cb0 <_svfiprintf_r+0x1ec>)
 8009c2a:	bb1b      	cbnz	r3, 8009c74 <_svfiprintf_r+0x1b0>
 8009c2c:	9b03      	ldr	r3, [sp, #12]
 8009c2e:	3307      	adds	r3, #7
 8009c30:	f023 0307 	bic.w	r3, r3, #7
 8009c34:	3308      	adds	r3, #8
 8009c36:	9303      	str	r3, [sp, #12]
 8009c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c3a:	4433      	add	r3, r6
 8009c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c3e:	e76a      	b.n	8009b16 <_svfiprintf_r+0x52>
 8009c40:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c44:	460c      	mov	r4, r1
 8009c46:	2001      	movs	r0, #1
 8009c48:	e7a8      	b.n	8009b9c <_svfiprintf_r+0xd8>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	3401      	adds	r4, #1
 8009c4e:	9305      	str	r3, [sp, #20]
 8009c50:	4619      	mov	r1, r3
 8009c52:	f04f 0c0a 	mov.w	ip, #10
 8009c56:	4620      	mov	r0, r4
 8009c58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c5c:	3a30      	subs	r2, #48	@ 0x30
 8009c5e:	2a09      	cmp	r2, #9
 8009c60:	d903      	bls.n	8009c6a <_svfiprintf_r+0x1a6>
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d0c6      	beq.n	8009bf4 <_svfiprintf_r+0x130>
 8009c66:	9105      	str	r1, [sp, #20]
 8009c68:	e7c4      	b.n	8009bf4 <_svfiprintf_r+0x130>
 8009c6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c6e:	4604      	mov	r4, r0
 8009c70:	2301      	movs	r3, #1
 8009c72:	e7f0      	b.n	8009c56 <_svfiprintf_r+0x192>
 8009c74:	ab03      	add	r3, sp, #12
 8009c76:	9300      	str	r3, [sp, #0]
 8009c78:	462a      	mov	r2, r5
 8009c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8009cb4 <_svfiprintf_r+0x1f0>)
 8009c7c:	a904      	add	r1, sp, #16
 8009c7e:	4638      	mov	r0, r7
 8009c80:	f7fc fc30 	bl	80064e4 <_printf_float>
 8009c84:	1c42      	adds	r2, r0, #1
 8009c86:	4606      	mov	r6, r0
 8009c88:	d1d6      	bne.n	8009c38 <_svfiprintf_r+0x174>
 8009c8a:	89ab      	ldrh	r3, [r5, #12]
 8009c8c:	065b      	lsls	r3, r3, #25
 8009c8e:	f53f af2d 	bmi.w	8009aec <_svfiprintf_r+0x28>
 8009c92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c94:	e72c      	b.n	8009af0 <_svfiprintf_r+0x2c>
 8009c96:	ab03      	add	r3, sp, #12
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	462a      	mov	r2, r5
 8009c9c:	4b05      	ldr	r3, [pc, #20]	@ (8009cb4 <_svfiprintf_r+0x1f0>)
 8009c9e:	a904      	add	r1, sp, #16
 8009ca0:	4638      	mov	r0, r7
 8009ca2:	f7fc feb7 	bl	8006a14 <_printf_i>
 8009ca6:	e7ed      	b.n	8009c84 <_svfiprintf_r+0x1c0>
 8009ca8:	0800b0d9 	.word	0x0800b0d9
 8009cac:	0800b0e3 	.word	0x0800b0e3
 8009cb0:	080064e5 	.word	0x080064e5
 8009cb4:	08009a0d 	.word	0x08009a0d
 8009cb8:	0800b0df 	.word	0x0800b0df

08009cbc <__sflush_r>:
 8009cbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc4:	0716      	lsls	r6, r2, #28
 8009cc6:	4605      	mov	r5, r0
 8009cc8:	460c      	mov	r4, r1
 8009cca:	d454      	bmi.n	8009d76 <__sflush_r+0xba>
 8009ccc:	684b      	ldr	r3, [r1, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	dc02      	bgt.n	8009cd8 <__sflush_r+0x1c>
 8009cd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	dd48      	ble.n	8009d6a <__sflush_r+0xae>
 8009cd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009cda:	2e00      	cmp	r6, #0
 8009cdc:	d045      	beq.n	8009d6a <__sflush_r+0xae>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009ce4:	682f      	ldr	r7, [r5, #0]
 8009ce6:	6a21      	ldr	r1, [r4, #32]
 8009ce8:	602b      	str	r3, [r5, #0]
 8009cea:	d030      	beq.n	8009d4e <__sflush_r+0x92>
 8009cec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009cee:	89a3      	ldrh	r3, [r4, #12]
 8009cf0:	0759      	lsls	r1, r3, #29
 8009cf2:	d505      	bpl.n	8009d00 <__sflush_r+0x44>
 8009cf4:	6863      	ldr	r3, [r4, #4]
 8009cf6:	1ad2      	subs	r2, r2, r3
 8009cf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009cfa:	b10b      	cbz	r3, 8009d00 <__sflush_r+0x44>
 8009cfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009cfe:	1ad2      	subs	r2, r2, r3
 8009d00:	2300      	movs	r3, #0
 8009d02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d04:	6a21      	ldr	r1, [r4, #32]
 8009d06:	4628      	mov	r0, r5
 8009d08:	47b0      	blx	r6
 8009d0a:	1c43      	adds	r3, r0, #1
 8009d0c:	89a3      	ldrh	r3, [r4, #12]
 8009d0e:	d106      	bne.n	8009d1e <__sflush_r+0x62>
 8009d10:	6829      	ldr	r1, [r5, #0]
 8009d12:	291d      	cmp	r1, #29
 8009d14:	d82b      	bhi.n	8009d6e <__sflush_r+0xb2>
 8009d16:	4a2a      	ldr	r2, [pc, #168]	@ (8009dc0 <__sflush_r+0x104>)
 8009d18:	410a      	asrs	r2, r1
 8009d1a:	07d6      	lsls	r6, r2, #31
 8009d1c:	d427      	bmi.n	8009d6e <__sflush_r+0xb2>
 8009d1e:	2200      	movs	r2, #0
 8009d20:	6062      	str	r2, [r4, #4]
 8009d22:	04d9      	lsls	r1, r3, #19
 8009d24:	6922      	ldr	r2, [r4, #16]
 8009d26:	6022      	str	r2, [r4, #0]
 8009d28:	d504      	bpl.n	8009d34 <__sflush_r+0x78>
 8009d2a:	1c42      	adds	r2, r0, #1
 8009d2c:	d101      	bne.n	8009d32 <__sflush_r+0x76>
 8009d2e:	682b      	ldr	r3, [r5, #0]
 8009d30:	b903      	cbnz	r3, 8009d34 <__sflush_r+0x78>
 8009d32:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d36:	602f      	str	r7, [r5, #0]
 8009d38:	b1b9      	cbz	r1, 8009d6a <__sflush_r+0xae>
 8009d3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d3e:	4299      	cmp	r1, r3
 8009d40:	d002      	beq.n	8009d48 <__sflush_r+0x8c>
 8009d42:	4628      	mov	r0, r5
 8009d44:	f7fe fa2c 	bl	80081a0 <_free_r>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d4c:	e00d      	b.n	8009d6a <__sflush_r+0xae>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	4628      	mov	r0, r5
 8009d52:	47b0      	blx	r6
 8009d54:	4602      	mov	r2, r0
 8009d56:	1c50      	adds	r0, r2, #1
 8009d58:	d1c9      	bne.n	8009cee <__sflush_r+0x32>
 8009d5a:	682b      	ldr	r3, [r5, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d0c6      	beq.n	8009cee <__sflush_r+0x32>
 8009d60:	2b1d      	cmp	r3, #29
 8009d62:	d001      	beq.n	8009d68 <__sflush_r+0xac>
 8009d64:	2b16      	cmp	r3, #22
 8009d66:	d11e      	bne.n	8009da6 <__sflush_r+0xea>
 8009d68:	602f      	str	r7, [r5, #0]
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	e022      	b.n	8009db4 <__sflush_r+0xf8>
 8009d6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d72:	b21b      	sxth	r3, r3
 8009d74:	e01b      	b.n	8009dae <__sflush_r+0xf2>
 8009d76:	690f      	ldr	r7, [r1, #16]
 8009d78:	2f00      	cmp	r7, #0
 8009d7a:	d0f6      	beq.n	8009d6a <__sflush_r+0xae>
 8009d7c:	0793      	lsls	r3, r2, #30
 8009d7e:	680e      	ldr	r6, [r1, #0]
 8009d80:	bf08      	it	eq
 8009d82:	694b      	ldreq	r3, [r1, #20]
 8009d84:	600f      	str	r7, [r1, #0]
 8009d86:	bf18      	it	ne
 8009d88:	2300      	movne	r3, #0
 8009d8a:	eba6 0807 	sub.w	r8, r6, r7
 8009d8e:	608b      	str	r3, [r1, #8]
 8009d90:	f1b8 0f00 	cmp.w	r8, #0
 8009d94:	dde9      	ble.n	8009d6a <__sflush_r+0xae>
 8009d96:	6a21      	ldr	r1, [r4, #32]
 8009d98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009d9a:	4643      	mov	r3, r8
 8009d9c:	463a      	mov	r2, r7
 8009d9e:	4628      	mov	r0, r5
 8009da0:	47b0      	blx	r6
 8009da2:	2800      	cmp	r0, #0
 8009da4:	dc08      	bgt.n	8009db8 <__sflush_r+0xfc>
 8009da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dae:	81a3      	strh	r3, [r4, #12]
 8009db0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009db8:	4407      	add	r7, r0
 8009dba:	eba8 0800 	sub.w	r8, r8, r0
 8009dbe:	e7e7      	b.n	8009d90 <__sflush_r+0xd4>
 8009dc0:	dfbffffe 	.word	0xdfbffffe

08009dc4 <_fflush_r>:
 8009dc4:	b538      	push	{r3, r4, r5, lr}
 8009dc6:	690b      	ldr	r3, [r1, #16]
 8009dc8:	4605      	mov	r5, r0
 8009dca:	460c      	mov	r4, r1
 8009dcc:	b913      	cbnz	r3, 8009dd4 <_fflush_r+0x10>
 8009dce:	2500      	movs	r5, #0
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	bd38      	pop	{r3, r4, r5, pc}
 8009dd4:	b118      	cbz	r0, 8009dde <_fflush_r+0x1a>
 8009dd6:	6a03      	ldr	r3, [r0, #32]
 8009dd8:	b90b      	cbnz	r3, 8009dde <_fflush_r+0x1a>
 8009dda:	f7fd f9db 	bl	8007194 <__sinit>
 8009dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d0f3      	beq.n	8009dce <_fflush_r+0xa>
 8009de6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009de8:	07d0      	lsls	r0, r2, #31
 8009dea:	d404      	bmi.n	8009df6 <_fflush_r+0x32>
 8009dec:	0599      	lsls	r1, r3, #22
 8009dee:	d402      	bmi.n	8009df6 <_fflush_r+0x32>
 8009df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009df2:	f7fd fb70 	bl	80074d6 <__retarget_lock_acquire_recursive>
 8009df6:	4628      	mov	r0, r5
 8009df8:	4621      	mov	r1, r4
 8009dfa:	f7ff ff5f 	bl	8009cbc <__sflush_r>
 8009dfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e00:	07da      	lsls	r2, r3, #31
 8009e02:	4605      	mov	r5, r0
 8009e04:	d4e4      	bmi.n	8009dd0 <_fflush_r+0xc>
 8009e06:	89a3      	ldrh	r3, [r4, #12]
 8009e08:	059b      	lsls	r3, r3, #22
 8009e0a:	d4e1      	bmi.n	8009dd0 <_fflush_r+0xc>
 8009e0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e0e:	f7fd fb63 	bl	80074d8 <__retarget_lock_release_recursive>
 8009e12:	e7dd      	b.n	8009dd0 <_fflush_r+0xc>

08009e14 <memmove>:
 8009e14:	4288      	cmp	r0, r1
 8009e16:	b510      	push	{r4, lr}
 8009e18:	eb01 0402 	add.w	r4, r1, r2
 8009e1c:	d902      	bls.n	8009e24 <memmove+0x10>
 8009e1e:	4284      	cmp	r4, r0
 8009e20:	4623      	mov	r3, r4
 8009e22:	d807      	bhi.n	8009e34 <memmove+0x20>
 8009e24:	1e43      	subs	r3, r0, #1
 8009e26:	42a1      	cmp	r1, r4
 8009e28:	d008      	beq.n	8009e3c <memmove+0x28>
 8009e2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e32:	e7f8      	b.n	8009e26 <memmove+0x12>
 8009e34:	4402      	add	r2, r0
 8009e36:	4601      	mov	r1, r0
 8009e38:	428a      	cmp	r2, r1
 8009e3a:	d100      	bne.n	8009e3e <memmove+0x2a>
 8009e3c:	bd10      	pop	{r4, pc}
 8009e3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e46:	e7f7      	b.n	8009e38 <memmove+0x24>

08009e48 <strncmp>:
 8009e48:	b510      	push	{r4, lr}
 8009e4a:	b16a      	cbz	r2, 8009e68 <strncmp+0x20>
 8009e4c:	3901      	subs	r1, #1
 8009e4e:	1884      	adds	r4, r0, r2
 8009e50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d103      	bne.n	8009e64 <strncmp+0x1c>
 8009e5c:	42a0      	cmp	r0, r4
 8009e5e:	d001      	beq.n	8009e64 <strncmp+0x1c>
 8009e60:	2a00      	cmp	r2, #0
 8009e62:	d1f5      	bne.n	8009e50 <strncmp+0x8>
 8009e64:	1ad0      	subs	r0, r2, r3
 8009e66:	bd10      	pop	{r4, pc}
 8009e68:	4610      	mov	r0, r2
 8009e6a:	e7fc      	b.n	8009e66 <strncmp+0x1e>

08009e6c <_sbrk_r>:
 8009e6c:	b538      	push	{r3, r4, r5, lr}
 8009e6e:	4d06      	ldr	r5, [pc, #24]	@ (8009e88 <_sbrk_r+0x1c>)
 8009e70:	2300      	movs	r3, #0
 8009e72:	4604      	mov	r4, r0
 8009e74:	4608      	mov	r0, r1
 8009e76:	602b      	str	r3, [r5, #0]
 8009e78:	f7f7 ff76 	bl	8001d68 <_sbrk>
 8009e7c:	1c43      	adds	r3, r0, #1
 8009e7e:	d102      	bne.n	8009e86 <_sbrk_r+0x1a>
 8009e80:	682b      	ldr	r3, [r5, #0]
 8009e82:	b103      	cbz	r3, 8009e86 <_sbrk_r+0x1a>
 8009e84:	6023      	str	r3, [r4, #0]
 8009e86:	bd38      	pop	{r3, r4, r5, pc}
 8009e88:	2000446c 	.word	0x2000446c
 8009e8c:	00000000 	.word	0x00000000

08009e90 <nan>:
 8009e90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009e98 <nan+0x8>
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop
 8009e98:	00000000 	.word	0x00000000
 8009e9c:	7ff80000 	.word	0x7ff80000

08009ea0 <__assert_func>:
 8009ea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ea2:	4614      	mov	r4, r2
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	4b09      	ldr	r3, [pc, #36]	@ (8009ecc <__assert_func+0x2c>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4605      	mov	r5, r0
 8009eac:	68d8      	ldr	r0, [r3, #12]
 8009eae:	b954      	cbnz	r4, 8009ec6 <__assert_func+0x26>
 8009eb0:	4b07      	ldr	r3, [pc, #28]	@ (8009ed0 <__assert_func+0x30>)
 8009eb2:	461c      	mov	r4, r3
 8009eb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009eb8:	9100      	str	r1, [sp, #0]
 8009eba:	462b      	mov	r3, r5
 8009ebc:	4905      	ldr	r1, [pc, #20]	@ (8009ed4 <__assert_func+0x34>)
 8009ebe:	f000 fba7 	bl	800a610 <fiprintf>
 8009ec2:	f000 fbb7 	bl	800a634 <abort>
 8009ec6:	4b04      	ldr	r3, [pc, #16]	@ (8009ed8 <__assert_func+0x38>)
 8009ec8:	e7f4      	b.n	8009eb4 <__assert_func+0x14>
 8009eca:	bf00      	nop
 8009ecc:	2000001c 	.word	0x2000001c
 8009ed0:	0800b12d 	.word	0x0800b12d
 8009ed4:	0800b0ff 	.word	0x0800b0ff
 8009ed8:	0800b0f2 	.word	0x0800b0f2

08009edc <_calloc_r>:
 8009edc:	b570      	push	{r4, r5, r6, lr}
 8009ede:	fba1 5402 	umull	r5, r4, r1, r2
 8009ee2:	b93c      	cbnz	r4, 8009ef4 <_calloc_r+0x18>
 8009ee4:	4629      	mov	r1, r5
 8009ee6:	f7fe f9cf 	bl	8008288 <_malloc_r>
 8009eea:	4606      	mov	r6, r0
 8009eec:	b928      	cbnz	r0, 8009efa <_calloc_r+0x1e>
 8009eee:	2600      	movs	r6, #0
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	bd70      	pop	{r4, r5, r6, pc}
 8009ef4:	220c      	movs	r2, #12
 8009ef6:	6002      	str	r2, [r0, #0]
 8009ef8:	e7f9      	b.n	8009eee <_calloc_r+0x12>
 8009efa:	462a      	mov	r2, r5
 8009efc:	4621      	mov	r1, r4
 8009efe:	f7fd fa16 	bl	800732e <memset>
 8009f02:	e7f5      	b.n	8009ef0 <_calloc_r+0x14>

08009f04 <rshift>:
 8009f04:	6903      	ldr	r3, [r0, #16]
 8009f06:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009f0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f0e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009f12:	f100 0414 	add.w	r4, r0, #20
 8009f16:	dd45      	ble.n	8009fa4 <rshift+0xa0>
 8009f18:	f011 011f 	ands.w	r1, r1, #31
 8009f1c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009f20:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009f24:	d10c      	bne.n	8009f40 <rshift+0x3c>
 8009f26:	f100 0710 	add.w	r7, r0, #16
 8009f2a:	4629      	mov	r1, r5
 8009f2c:	42b1      	cmp	r1, r6
 8009f2e:	d334      	bcc.n	8009f9a <rshift+0x96>
 8009f30:	1a9b      	subs	r3, r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	1eea      	subs	r2, r5, #3
 8009f36:	4296      	cmp	r6, r2
 8009f38:	bf38      	it	cc
 8009f3a:	2300      	movcc	r3, #0
 8009f3c:	4423      	add	r3, r4
 8009f3e:	e015      	b.n	8009f6c <rshift+0x68>
 8009f40:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009f44:	f1c1 0820 	rsb	r8, r1, #32
 8009f48:	40cf      	lsrs	r7, r1
 8009f4a:	f105 0e04 	add.w	lr, r5, #4
 8009f4e:	46a1      	mov	r9, r4
 8009f50:	4576      	cmp	r6, lr
 8009f52:	46f4      	mov	ip, lr
 8009f54:	d815      	bhi.n	8009f82 <rshift+0x7e>
 8009f56:	1a9a      	subs	r2, r3, r2
 8009f58:	0092      	lsls	r2, r2, #2
 8009f5a:	3a04      	subs	r2, #4
 8009f5c:	3501      	adds	r5, #1
 8009f5e:	42ae      	cmp	r6, r5
 8009f60:	bf38      	it	cc
 8009f62:	2200      	movcc	r2, #0
 8009f64:	18a3      	adds	r3, r4, r2
 8009f66:	50a7      	str	r7, [r4, r2]
 8009f68:	b107      	cbz	r7, 8009f6c <rshift+0x68>
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	1b1a      	subs	r2, r3, r4
 8009f6e:	42a3      	cmp	r3, r4
 8009f70:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f74:	bf08      	it	eq
 8009f76:	2300      	moveq	r3, #0
 8009f78:	6102      	str	r2, [r0, #16]
 8009f7a:	bf08      	it	eq
 8009f7c:	6143      	streq	r3, [r0, #20]
 8009f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f82:	f8dc c000 	ldr.w	ip, [ip]
 8009f86:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f8a:	ea4c 0707 	orr.w	r7, ip, r7
 8009f8e:	f849 7b04 	str.w	r7, [r9], #4
 8009f92:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f96:	40cf      	lsrs	r7, r1
 8009f98:	e7da      	b.n	8009f50 <rshift+0x4c>
 8009f9a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f9e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009fa2:	e7c3      	b.n	8009f2c <rshift+0x28>
 8009fa4:	4623      	mov	r3, r4
 8009fa6:	e7e1      	b.n	8009f6c <rshift+0x68>

08009fa8 <__hexdig_fun>:
 8009fa8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009fac:	2b09      	cmp	r3, #9
 8009fae:	d802      	bhi.n	8009fb6 <__hexdig_fun+0xe>
 8009fb0:	3820      	subs	r0, #32
 8009fb2:	b2c0      	uxtb	r0, r0
 8009fb4:	4770      	bx	lr
 8009fb6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009fba:	2b05      	cmp	r3, #5
 8009fbc:	d801      	bhi.n	8009fc2 <__hexdig_fun+0x1a>
 8009fbe:	3847      	subs	r0, #71	@ 0x47
 8009fc0:	e7f7      	b.n	8009fb2 <__hexdig_fun+0xa>
 8009fc2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009fc6:	2b05      	cmp	r3, #5
 8009fc8:	d801      	bhi.n	8009fce <__hexdig_fun+0x26>
 8009fca:	3827      	subs	r0, #39	@ 0x27
 8009fcc:	e7f1      	b.n	8009fb2 <__hexdig_fun+0xa>
 8009fce:	2000      	movs	r0, #0
 8009fd0:	4770      	bx	lr
	...

08009fd4 <__gethex>:
 8009fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd8:	b085      	sub	sp, #20
 8009fda:	468a      	mov	sl, r1
 8009fdc:	9302      	str	r3, [sp, #8]
 8009fde:	680b      	ldr	r3, [r1, #0]
 8009fe0:	9001      	str	r0, [sp, #4]
 8009fe2:	4690      	mov	r8, r2
 8009fe4:	1c9c      	adds	r4, r3, #2
 8009fe6:	46a1      	mov	r9, r4
 8009fe8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009fec:	2830      	cmp	r0, #48	@ 0x30
 8009fee:	d0fa      	beq.n	8009fe6 <__gethex+0x12>
 8009ff0:	eba9 0303 	sub.w	r3, r9, r3
 8009ff4:	f1a3 0b02 	sub.w	fp, r3, #2
 8009ff8:	f7ff ffd6 	bl	8009fa8 <__hexdig_fun>
 8009ffc:	4605      	mov	r5, r0
 8009ffe:	2800      	cmp	r0, #0
 800a000:	d168      	bne.n	800a0d4 <__gethex+0x100>
 800a002:	49a0      	ldr	r1, [pc, #640]	@ (800a284 <__gethex+0x2b0>)
 800a004:	2201      	movs	r2, #1
 800a006:	4648      	mov	r0, r9
 800a008:	f7ff ff1e 	bl	8009e48 <strncmp>
 800a00c:	4607      	mov	r7, r0
 800a00e:	2800      	cmp	r0, #0
 800a010:	d167      	bne.n	800a0e2 <__gethex+0x10e>
 800a012:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a016:	4626      	mov	r6, r4
 800a018:	f7ff ffc6 	bl	8009fa8 <__hexdig_fun>
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d062      	beq.n	800a0e6 <__gethex+0x112>
 800a020:	4623      	mov	r3, r4
 800a022:	7818      	ldrb	r0, [r3, #0]
 800a024:	2830      	cmp	r0, #48	@ 0x30
 800a026:	4699      	mov	r9, r3
 800a028:	f103 0301 	add.w	r3, r3, #1
 800a02c:	d0f9      	beq.n	800a022 <__gethex+0x4e>
 800a02e:	f7ff ffbb 	bl	8009fa8 <__hexdig_fun>
 800a032:	fab0 f580 	clz	r5, r0
 800a036:	096d      	lsrs	r5, r5, #5
 800a038:	f04f 0b01 	mov.w	fp, #1
 800a03c:	464a      	mov	r2, r9
 800a03e:	4616      	mov	r6, r2
 800a040:	3201      	adds	r2, #1
 800a042:	7830      	ldrb	r0, [r6, #0]
 800a044:	f7ff ffb0 	bl	8009fa8 <__hexdig_fun>
 800a048:	2800      	cmp	r0, #0
 800a04a:	d1f8      	bne.n	800a03e <__gethex+0x6a>
 800a04c:	498d      	ldr	r1, [pc, #564]	@ (800a284 <__gethex+0x2b0>)
 800a04e:	2201      	movs	r2, #1
 800a050:	4630      	mov	r0, r6
 800a052:	f7ff fef9 	bl	8009e48 <strncmp>
 800a056:	2800      	cmp	r0, #0
 800a058:	d13f      	bne.n	800a0da <__gethex+0x106>
 800a05a:	b944      	cbnz	r4, 800a06e <__gethex+0x9a>
 800a05c:	1c74      	adds	r4, r6, #1
 800a05e:	4622      	mov	r2, r4
 800a060:	4616      	mov	r6, r2
 800a062:	3201      	adds	r2, #1
 800a064:	7830      	ldrb	r0, [r6, #0]
 800a066:	f7ff ff9f 	bl	8009fa8 <__hexdig_fun>
 800a06a:	2800      	cmp	r0, #0
 800a06c:	d1f8      	bne.n	800a060 <__gethex+0x8c>
 800a06e:	1ba4      	subs	r4, r4, r6
 800a070:	00a7      	lsls	r7, r4, #2
 800a072:	7833      	ldrb	r3, [r6, #0]
 800a074:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a078:	2b50      	cmp	r3, #80	@ 0x50
 800a07a:	d13e      	bne.n	800a0fa <__gethex+0x126>
 800a07c:	7873      	ldrb	r3, [r6, #1]
 800a07e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a080:	d033      	beq.n	800a0ea <__gethex+0x116>
 800a082:	2b2d      	cmp	r3, #45	@ 0x2d
 800a084:	d034      	beq.n	800a0f0 <__gethex+0x11c>
 800a086:	1c71      	adds	r1, r6, #1
 800a088:	2400      	movs	r4, #0
 800a08a:	7808      	ldrb	r0, [r1, #0]
 800a08c:	f7ff ff8c 	bl	8009fa8 <__hexdig_fun>
 800a090:	1e43      	subs	r3, r0, #1
 800a092:	b2db      	uxtb	r3, r3
 800a094:	2b18      	cmp	r3, #24
 800a096:	d830      	bhi.n	800a0fa <__gethex+0x126>
 800a098:	f1a0 0210 	sub.w	r2, r0, #16
 800a09c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a0a0:	f7ff ff82 	bl	8009fa8 <__hexdig_fun>
 800a0a4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800a0a8:	fa5f fc8c 	uxtb.w	ip, ip
 800a0ac:	f1bc 0f18 	cmp.w	ip, #24
 800a0b0:	f04f 030a 	mov.w	r3, #10
 800a0b4:	d91e      	bls.n	800a0f4 <__gethex+0x120>
 800a0b6:	b104      	cbz	r4, 800a0ba <__gethex+0xe6>
 800a0b8:	4252      	negs	r2, r2
 800a0ba:	4417      	add	r7, r2
 800a0bc:	f8ca 1000 	str.w	r1, [sl]
 800a0c0:	b1ed      	cbz	r5, 800a0fe <__gethex+0x12a>
 800a0c2:	f1bb 0f00 	cmp.w	fp, #0
 800a0c6:	bf0c      	ite	eq
 800a0c8:	2506      	moveq	r5, #6
 800a0ca:	2500      	movne	r5, #0
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	b005      	add	sp, #20
 800a0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0d4:	2500      	movs	r5, #0
 800a0d6:	462c      	mov	r4, r5
 800a0d8:	e7b0      	b.n	800a03c <__gethex+0x68>
 800a0da:	2c00      	cmp	r4, #0
 800a0dc:	d1c7      	bne.n	800a06e <__gethex+0x9a>
 800a0de:	4627      	mov	r7, r4
 800a0e0:	e7c7      	b.n	800a072 <__gethex+0x9e>
 800a0e2:	464e      	mov	r6, r9
 800a0e4:	462f      	mov	r7, r5
 800a0e6:	2501      	movs	r5, #1
 800a0e8:	e7c3      	b.n	800a072 <__gethex+0x9e>
 800a0ea:	2400      	movs	r4, #0
 800a0ec:	1cb1      	adds	r1, r6, #2
 800a0ee:	e7cc      	b.n	800a08a <__gethex+0xb6>
 800a0f0:	2401      	movs	r4, #1
 800a0f2:	e7fb      	b.n	800a0ec <__gethex+0x118>
 800a0f4:	fb03 0002 	mla	r0, r3, r2, r0
 800a0f8:	e7ce      	b.n	800a098 <__gethex+0xc4>
 800a0fa:	4631      	mov	r1, r6
 800a0fc:	e7de      	b.n	800a0bc <__gethex+0xe8>
 800a0fe:	eba6 0309 	sub.w	r3, r6, r9
 800a102:	3b01      	subs	r3, #1
 800a104:	4629      	mov	r1, r5
 800a106:	2b07      	cmp	r3, #7
 800a108:	dc0a      	bgt.n	800a120 <__gethex+0x14c>
 800a10a:	9801      	ldr	r0, [sp, #4]
 800a10c:	f7fe f948 	bl	80083a0 <_Balloc>
 800a110:	4604      	mov	r4, r0
 800a112:	b940      	cbnz	r0, 800a126 <__gethex+0x152>
 800a114:	4b5c      	ldr	r3, [pc, #368]	@ (800a288 <__gethex+0x2b4>)
 800a116:	4602      	mov	r2, r0
 800a118:	21e4      	movs	r1, #228	@ 0xe4
 800a11a:	485c      	ldr	r0, [pc, #368]	@ (800a28c <__gethex+0x2b8>)
 800a11c:	f7ff fec0 	bl	8009ea0 <__assert_func>
 800a120:	3101      	adds	r1, #1
 800a122:	105b      	asrs	r3, r3, #1
 800a124:	e7ef      	b.n	800a106 <__gethex+0x132>
 800a126:	f100 0a14 	add.w	sl, r0, #20
 800a12a:	2300      	movs	r3, #0
 800a12c:	4655      	mov	r5, sl
 800a12e:	469b      	mov	fp, r3
 800a130:	45b1      	cmp	r9, r6
 800a132:	d337      	bcc.n	800a1a4 <__gethex+0x1d0>
 800a134:	f845 bb04 	str.w	fp, [r5], #4
 800a138:	eba5 050a 	sub.w	r5, r5, sl
 800a13c:	10ad      	asrs	r5, r5, #2
 800a13e:	6125      	str	r5, [r4, #16]
 800a140:	4658      	mov	r0, fp
 800a142:	f7fe fa1f 	bl	8008584 <__hi0bits>
 800a146:	016d      	lsls	r5, r5, #5
 800a148:	f8d8 6000 	ldr.w	r6, [r8]
 800a14c:	1a2d      	subs	r5, r5, r0
 800a14e:	42b5      	cmp	r5, r6
 800a150:	dd54      	ble.n	800a1fc <__gethex+0x228>
 800a152:	1bad      	subs	r5, r5, r6
 800a154:	4629      	mov	r1, r5
 800a156:	4620      	mov	r0, r4
 800a158:	f7fe fdb3 	bl	8008cc2 <__any_on>
 800a15c:	4681      	mov	r9, r0
 800a15e:	b178      	cbz	r0, 800a180 <__gethex+0x1ac>
 800a160:	1e6b      	subs	r3, r5, #1
 800a162:	1159      	asrs	r1, r3, #5
 800a164:	f003 021f 	and.w	r2, r3, #31
 800a168:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a16c:	f04f 0901 	mov.w	r9, #1
 800a170:	fa09 f202 	lsl.w	r2, r9, r2
 800a174:	420a      	tst	r2, r1
 800a176:	d003      	beq.n	800a180 <__gethex+0x1ac>
 800a178:	454b      	cmp	r3, r9
 800a17a:	dc36      	bgt.n	800a1ea <__gethex+0x216>
 800a17c:	f04f 0902 	mov.w	r9, #2
 800a180:	4629      	mov	r1, r5
 800a182:	4620      	mov	r0, r4
 800a184:	f7ff febe 	bl	8009f04 <rshift>
 800a188:	442f      	add	r7, r5
 800a18a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a18e:	42bb      	cmp	r3, r7
 800a190:	da42      	bge.n	800a218 <__gethex+0x244>
 800a192:	9801      	ldr	r0, [sp, #4]
 800a194:	4621      	mov	r1, r4
 800a196:	f7fe f943 	bl	8008420 <_Bfree>
 800a19a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a19c:	2300      	movs	r3, #0
 800a19e:	6013      	str	r3, [r2, #0]
 800a1a0:	25a3      	movs	r5, #163	@ 0xa3
 800a1a2:	e793      	b.n	800a0cc <__gethex+0xf8>
 800a1a4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a1a8:	2a2e      	cmp	r2, #46	@ 0x2e
 800a1aa:	d012      	beq.n	800a1d2 <__gethex+0x1fe>
 800a1ac:	2b20      	cmp	r3, #32
 800a1ae:	d104      	bne.n	800a1ba <__gethex+0x1e6>
 800a1b0:	f845 bb04 	str.w	fp, [r5], #4
 800a1b4:	f04f 0b00 	mov.w	fp, #0
 800a1b8:	465b      	mov	r3, fp
 800a1ba:	7830      	ldrb	r0, [r6, #0]
 800a1bc:	9303      	str	r3, [sp, #12]
 800a1be:	f7ff fef3 	bl	8009fa8 <__hexdig_fun>
 800a1c2:	9b03      	ldr	r3, [sp, #12]
 800a1c4:	f000 000f 	and.w	r0, r0, #15
 800a1c8:	4098      	lsls	r0, r3
 800a1ca:	ea4b 0b00 	orr.w	fp, fp, r0
 800a1ce:	3304      	adds	r3, #4
 800a1d0:	e7ae      	b.n	800a130 <__gethex+0x15c>
 800a1d2:	45b1      	cmp	r9, r6
 800a1d4:	d8ea      	bhi.n	800a1ac <__gethex+0x1d8>
 800a1d6:	492b      	ldr	r1, [pc, #172]	@ (800a284 <__gethex+0x2b0>)
 800a1d8:	9303      	str	r3, [sp, #12]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	4630      	mov	r0, r6
 800a1de:	f7ff fe33 	bl	8009e48 <strncmp>
 800a1e2:	9b03      	ldr	r3, [sp, #12]
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d1e1      	bne.n	800a1ac <__gethex+0x1d8>
 800a1e8:	e7a2      	b.n	800a130 <__gethex+0x15c>
 800a1ea:	1ea9      	subs	r1, r5, #2
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f7fe fd68 	bl	8008cc2 <__any_on>
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	d0c2      	beq.n	800a17c <__gethex+0x1a8>
 800a1f6:	f04f 0903 	mov.w	r9, #3
 800a1fa:	e7c1      	b.n	800a180 <__gethex+0x1ac>
 800a1fc:	da09      	bge.n	800a212 <__gethex+0x23e>
 800a1fe:	1b75      	subs	r5, r6, r5
 800a200:	4621      	mov	r1, r4
 800a202:	9801      	ldr	r0, [sp, #4]
 800a204:	462a      	mov	r2, r5
 800a206:	f7fe fb23 	bl	8008850 <__lshift>
 800a20a:	1b7f      	subs	r7, r7, r5
 800a20c:	4604      	mov	r4, r0
 800a20e:	f100 0a14 	add.w	sl, r0, #20
 800a212:	f04f 0900 	mov.w	r9, #0
 800a216:	e7b8      	b.n	800a18a <__gethex+0x1b6>
 800a218:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a21c:	42bd      	cmp	r5, r7
 800a21e:	dd6f      	ble.n	800a300 <__gethex+0x32c>
 800a220:	1bed      	subs	r5, r5, r7
 800a222:	42ae      	cmp	r6, r5
 800a224:	dc34      	bgt.n	800a290 <__gethex+0x2bc>
 800a226:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	d022      	beq.n	800a274 <__gethex+0x2a0>
 800a22e:	2b03      	cmp	r3, #3
 800a230:	d024      	beq.n	800a27c <__gethex+0x2a8>
 800a232:	2b01      	cmp	r3, #1
 800a234:	d115      	bne.n	800a262 <__gethex+0x28e>
 800a236:	42ae      	cmp	r6, r5
 800a238:	d113      	bne.n	800a262 <__gethex+0x28e>
 800a23a:	2e01      	cmp	r6, #1
 800a23c:	d10b      	bne.n	800a256 <__gethex+0x282>
 800a23e:	9a02      	ldr	r2, [sp, #8]
 800a240:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a244:	6013      	str	r3, [r2, #0]
 800a246:	2301      	movs	r3, #1
 800a248:	6123      	str	r3, [r4, #16]
 800a24a:	f8ca 3000 	str.w	r3, [sl]
 800a24e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a250:	2562      	movs	r5, #98	@ 0x62
 800a252:	601c      	str	r4, [r3, #0]
 800a254:	e73a      	b.n	800a0cc <__gethex+0xf8>
 800a256:	1e71      	subs	r1, r6, #1
 800a258:	4620      	mov	r0, r4
 800a25a:	f7fe fd32 	bl	8008cc2 <__any_on>
 800a25e:	2800      	cmp	r0, #0
 800a260:	d1ed      	bne.n	800a23e <__gethex+0x26a>
 800a262:	9801      	ldr	r0, [sp, #4]
 800a264:	4621      	mov	r1, r4
 800a266:	f7fe f8db 	bl	8008420 <_Bfree>
 800a26a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a26c:	2300      	movs	r3, #0
 800a26e:	6013      	str	r3, [r2, #0]
 800a270:	2550      	movs	r5, #80	@ 0x50
 800a272:	e72b      	b.n	800a0cc <__gethex+0xf8>
 800a274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a276:	2b00      	cmp	r3, #0
 800a278:	d1f3      	bne.n	800a262 <__gethex+0x28e>
 800a27a:	e7e0      	b.n	800a23e <__gethex+0x26a>
 800a27c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1dd      	bne.n	800a23e <__gethex+0x26a>
 800a282:	e7ee      	b.n	800a262 <__gethex+0x28e>
 800a284:	0800af80 	.word	0x0800af80
 800a288:	0800ae15 	.word	0x0800ae15
 800a28c:	0800b12e 	.word	0x0800b12e
 800a290:	1e6f      	subs	r7, r5, #1
 800a292:	f1b9 0f00 	cmp.w	r9, #0
 800a296:	d130      	bne.n	800a2fa <__gethex+0x326>
 800a298:	b127      	cbz	r7, 800a2a4 <__gethex+0x2d0>
 800a29a:	4639      	mov	r1, r7
 800a29c:	4620      	mov	r0, r4
 800a29e:	f7fe fd10 	bl	8008cc2 <__any_on>
 800a2a2:	4681      	mov	r9, r0
 800a2a4:	117a      	asrs	r2, r7, #5
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a2ac:	f007 071f 	and.w	r7, r7, #31
 800a2b0:	40bb      	lsls	r3, r7
 800a2b2:	4213      	tst	r3, r2
 800a2b4:	4629      	mov	r1, r5
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	bf18      	it	ne
 800a2ba:	f049 0902 	orrne.w	r9, r9, #2
 800a2be:	f7ff fe21 	bl	8009f04 <rshift>
 800a2c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a2c6:	1b76      	subs	r6, r6, r5
 800a2c8:	2502      	movs	r5, #2
 800a2ca:	f1b9 0f00 	cmp.w	r9, #0
 800a2ce:	d047      	beq.n	800a360 <__gethex+0x38c>
 800a2d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d015      	beq.n	800a304 <__gethex+0x330>
 800a2d8:	2b03      	cmp	r3, #3
 800a2da:	d017      	beq.n	800a30c <__gethex+0x338>
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d109      	bne.n	800a2f4 <__gethex+0x320>
 800a2e0:	f019 0f02 	tst.w	r9, #2
 800a2e4:	d006      	beq.n	800a2f4 <__gethex+0x320>
 800a2e6:	f8da 3000 	ldr.w	r3, [sl]
 800a2ea:	ea49 0903 	orr.w	r9, r9, r3
 800a2ee:	f019 0f01 	tst.w	r9, #1
 800a2f2:	d10e      	bne.n	800a312 <__gethex+0x33e>
 800a2f4:	f045 0510 	orr.w	r5, r5, #16
 800a2f8:	e032      	b.n	800a360 <__gethex+0x38c>
 800a2fa:	f04f 0901 	mov.w	r9, #1
 800a2fe:	e7d1      	b.n	800a2a4 <__gethex+0x2d0>
 800a300:	2501      	movs	r5, #1
 800a302:	e7e2      	b.n	800a2ca <__gethex+0x2f6>
 800a304:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a306:	f1c3 0301 	rsb	r3, r3, #1
 800a30a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a30c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d0f0      	beq.n	800a2f4 <__gethex+0x320>
 800a312:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a316:	f104 0314 	add.w	r3, r4, #20
 800a31a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a31e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a322:	f04f 0c00 	mov.w	ip, #0
 800a326:	4618      	mov	r0, r3
 800a328:	f853 2b04 	ldr.w	r2, [r3], #4
 800a32c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800a330:	d01b      	beq.n	800a36a <__gethex+0x396>
 800a332:	3201      	adds	r2, #1
 800a334:	6002      	str	r2, [r0, #0]
 800a336:	2d02      	cmp	r5, #2
 800a338:	f104 0314 	add.w	r3, r4, #20
 800a33c:	d13c      	bne.n	800a3b8 <__gethex+0x3e4>
 800a33e:	f8d8 2000 	ldr.w	r2, [r8]
 800a342:	3a01      	subs	r2, #1
 800a344:	42b2      	cmp	r2, r6
 800a346:	d109      	bne.n	800a35c <__gethex+0x388>
 800a348:	1171      	asrs	r1, r6, #5
 800a34a:	2201      	movs	r2, #1
 800a34c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a350:	f006 061f 	and.w	r6, r6, #31
 800a354:	fa02 f606 	lsl.w	r6, r2, r6
 800a358:	421e      	tst	r6, r3
 800a35a:	d13a      	bne.n	800a3d2 <__gethex+0x3fe>
 800a35c:	f045 0520 	orr.w	r5, r5, #32
 800a360:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a362:	601c      	str	r4, [r3, #0]
 800a364:	9b02      	ldr	r3, [sp, #8]
 800a366:	601f      	str	r7, [r3, #0]
 800a368:	e6b0      	b.n	800a0cc <__gethex+0xf8>
 800a36a:	4299      	cmp	r1, r3
 800a36c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a370:	d8d9      	bhi.n	800a326 <__gethex+0x352>
 800a372:	68a3      	ldr	r3, [r4, #8]
 800a374:	459b      	cmp	fp, r3
 800a376:	db17      	blt.n	800a3a8 <__gethex+0x3d4>
 800a378:	6861      	ldr	r1, [r4, #4]
 800a37a:	9801      	ldr	r0, [sp, #4]
 800a37c:	3101      	adds	r1, #1
 800a37e:	f7fe f80f 	bl	80083a0 <_Balloc>
 800a382:	4681      	mov	r9, r0
 800a384:	b918      	cbnz	r0, 800a38e <__gethex+0x3ba>
 800a386:	4b1a      	ldr	r3, [pc, #104]	@ (800a3f0 <__gethex+0x41c>)
 800a388:	4602      	mov	r2, r0
 800a38a:	2184      	movs	r1, #132	@ 0x84
 800a38c:	e6c5      	b.n	800a11a <__gethex+0x146>
 800a38e:	6922      	ldr	r2, [r4, #16]
 800a390:	3202      	adds	r2, #2
 800a392:	f104 010c 	add.w	r1, r4, #12
 800a396:	0092      	lsls	r2, r2, #2
 800a398:	300c      	adds	r0, #12
 800a39a:	f7fd f89e 	bl	80074da <memcpy>
 800a39e:	4621      	mov	r1, r4
 800a3a0:	9801      	ldr	r0, [sp, #4]
 800a3a2:	f7fe f83d 	bl	8008420 <_Bfree>
 800a3a6:	464c      	mov	r4, r9
 800a3a8:	6923      	ldr	r3, [r4, #16]
 800a3aa:	1c5a      	adds	r2, r3, #1
 800a3ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a3b0:	6122      	str	r2, [r4, #16]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	615a      	str	r2, [r3, #20]
 800a3b6:	e7be      	b.n	800a336 <__gethex+0x362>
 800a3b8:	6922      	ldr	r2, [r4, #16]
 800a3ba:	455a      	cmp	r2, fp
 800a3bc:	dd0b      	ble.n	800a3d6 <__gethex+0x402>
 800a3be:	2101      	movs	r1, #1
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f7ff fd9f 	bl	8009f04 <rshift>
 800a3c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a3ca:	3701      	adds	r7, #1
 800a3cc:	42bb      	cmp	r3, r7
 800a3ce:	f6ff aee0 	blt.w	800a192 <__gethex+0x1be>
 800a3d2:	2501      	movs	r5, #1
 800a3d4:	e7c2      	b.n	800a35c <__gethex+0x388>
 800a3d6:	f016 061f 	ands.w	r6, r6, #31
 800a3da:	d0fa      	beq.n	800a3d2 <__gethex+0x3fe>
 800a3dc:	4453      	add	r3, sl
 800a3de:	f1c6 0620 	rsb	r6, r6, #32
 800a3e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a3e6:	f7fe f8cd 	bl	8008584 <__hi0bits>
 800a3ea:	42b0      	cmp	r0, r6
 800a3ec:	dbe7      	blt.n	800a3be <__gethex+0x3ea>
 800a3ee:	e7f0      	b.n	800a3d2 <__gethex+0x3fe>
 800a3f0:	0800ae15 	.word	0x0800ae15

0800a3f4 <L_shift>:
 800a3f4:	f1c2 0208 	rsb	r2, r2, #8
 800a3f8:	0092      	lsls	r2, r2, #2
 800a3fa:	b570      	push	{r4, r5, r6, lr}
 800a3fc:	f1c2 0620 	rsb	r6, r2, #32
 800a400:	6843      	ldr	r3, [r0, #4]
 800a402:	6804      	ldr	r4, [r0, #0]
 800a404:	fa03 f506 	lsl.w	r5, r3, r6
 800a408:	432c      	orrs	r4, r5
 800a40a:	40d3      	lsrs	r3, r2
 800a40c:	6004      	str	r4, [r0, #0]
 800a40e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a412:	4288      	cmp	r0, r1
 800a414:	d3f4      	bcc.n	800a400 <L_shift+0xc>
 800a416:	bd70      	pop	{r4, r5, r6, pc}

0800a418 <__match>:
 800a418:	b530      	push	{r4, r5, lr}
 800a41a:	6803      	ldr	r3, [r0, #0]
 800a41c:	3301      	adds	r3, #1
 800a41e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a422:	b914      	cbnz	r4, 800a42a <__match+0x12>
 800a424:	6003      	str	r3, [r0, #0]
 800a426:	2001      	movs	r0, #1
 800a428:	bd30      	pop	{r4, r5, pc}
 800a42a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a42e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a432:	2d19      	cmp	r5, #25
 800a434:	bf98      	it	ls
 800a436:	3220      	addls	r2, #32
 800a438:	42a2      	cmp	r2, r4
 800a43a:	d0f0      	beq.n	800a41e <__match+0x6>
 800a43c:	2000      	movs	r0, #0
 800a43e:	e7f3      	b.n	800a428 <__match+0x10>

0800a440 <__hexnan>:
 800a440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a444:	680b      	ldr	r3, [r1, #0]
 800a446:	6801      	ldr	r1, [r0, #0]
 800a448:	115e      	asrs	r6, r3, #5
 800a44a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a44e:	f013 031f 	ands.w	r3, r3, #31
 800a452:	b087      	sub	sp, #28
 800a454:	bf18      	it	ne
 800a456:	3604      	addne	r6, #4
 800a458:	2500      	movs	r5, #0
 800a45a:	1f37      	subs	r7, r6, #4
 800a45c:	4682      	mov	sl, r0
 800a45e:	4690      	mov	r8, r2
 800a460:	9301      	str	r3, [sp, #4]
 800a462:	f846 5c04 	str.w	r5, [r6, #-4]
 800a466:	46b9      	mov	r9, r7
 800a468:	463c      	mov	r4, r7
 800a46a:	9502      	str	r5, [sp, #8]
 800a46c:	46ab      	mov	fp, r5
 800a46e:	784a      	ldrb	r2, [r1, #1]
 800a470:	1c4b      	adds	r3, r1, #1
 800a472:	9303      	str	r3, [sp, #12]
 800a474:	b342      	cbz	r2, 800a4c8 <__hexnan+0x88>
 800a476:	4610      	mov	r0, r2
 800a478:	9105      	str	r1, [sp, #20]
 800a47a:	9204      	str	r2, [sp, #16]
 800a47c:	f7ff fd94 	bl	8009fa8 <__hexdig_fun>
 800a480:	2800      	cmp	r0, #0
 800a482:	d151      	bne.n	800a528 <__hexnan+0xe8>
 800a484:	9a04      	ldr	r2, [sp, #16]
 800a486:	9905      	ldr	r1, [sp, #20]
 800a488:	2a20      	cmp	r2, #32
 800a48a:	d818      	bhi.n	800a4be <__hexnan+0x7e>
 800a48c:	9b02      	ldr	r3, [sp, #8]
 800a48e:	459b      	cmp	fp, r3
 800a490:	dd13      	ble.n	800a4ba <__hexnan+0x7a>
 800a492:	454c      	cmp	r4, r9
 800a494:	d206      	bcs.n	800a4a4 <__hexnan+0x64>
 800a496:	2d07      	cmp	r5, #7
 800a498:	dc04      	bgt.n	800a4a4 <__hexnan+0x64>
 800a49a:	462a      	mov	r2, r5
 800a49c:	4649      	mov	r1, r9
 800a49e:	4620      	mov	r0, r4
 800a4a0:	f7ff ffa8 	bl	800a3f4 <L_shift>
 800a4a4:	4544      	cmp	r4, r8
 800a4a6:	d952      	bls.n	800a54e <__hexnan+0x10e>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	f1a4 0904 	sub.w	r9, r4, #4
 800a4ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4b2:	f8cd b008 	str.w	fp, [sp, #8]
 800a4b6:	464c      	mov	r4, r9
 800a4b8:	461d      	mov	r5, r3
 800a4ba:	9903      	ldr	r1, [sp, #12]
 800a4bc:	e7d7      	b.n	800a46e <__hexnan+0x2e>
 800a4be:	2a29      	cmp	r2, #41	@ 0x29
 800a4c0:	d157      	bne.n	800a572 <__hexnan+0x132>
 800a4c2:	3102      	adds	r1, #2
 800a4c4:	f8ca 1000 	str.w	r1, [sl]
 800a4c8:	f1bb 0f00 	cmp.w	fp, #0
 800a4cc:	d051      	beq.n	800a572 <__hexnan+0x132>
 800a4ce:	454c      	cmp	r4, r9
 800a4d0:	d206      	bcs.n	800a4e0 <__hexnan+0xa0>
 800a4d2:	2d07      	cmp	r5, #7
 800a4d4:	dc04      	bgt.n	800a4e0 <__hexnan+0xa0>
 800a4d6:	462a      	mov	r2, r5
 800a4d8:	4649      	mov	r1, r9
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f7ff ff8a 	bl	800a3f4 <L_shift>
 800a4e0:	4544      	cmp	r4, r8
 800a4e2:	d936      	bls.n	800a552 <__hexnan+0x112>
 800a4e4:	f1a8 0204 	sub.w	r2, r8, #4
 800a4e8:	4623      	mov	r3, r4
 800a4ea:	f853 1b04 	ldr.w	r1, [r3], #4
 800a4ee:	f842 1f04 	str.w	r1, [r2, #4]!
 800a4f2:	429f      	cmp	r7, r3
 800a4f4:	d2f9      	bcs.n	800a4ea <__hexnan+0xaa>
 800a4f6:	1b3b      	subs	r3, r7, r4
 800a4f8:	f023 0303 	bic.w	r3, r3, #3
 800a4fc:	3304      	adds	r3, #4
 800a4fe:	3401      	adds	r4, #1
 800a500:	3e03      	subs	r6, #3
 800a502:	42b4      	cmp	r4, r6
 800a504:	bf88      	it	hi
 800a506:	2304      	movhi	r3, #4
 800a508:	4443      	add	r3, r8
 800a50a:	2200      	movs	r2, #0
 800a50c:	f843 2b04 	str.w	r2, [r3], #4
 800a510:	429f      	cmp	r7, r3
 800a512:	d2fb      	bcs.n	800a50c <__hexnan+0xcc>
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	b91b      	cbnz	r3, 800a520 <__hexnan+0xe0>
 800a518:	4547      	cmp	r7, r8
 800a51a:	d128      	bne.n	800a56e <__hexnan+0x12e>
 800a51c:	2301      	movs	r3, #1
 800a51e:	603b      	str	r3, [r7, #0]
 800a520:	2005      	movs	r0, #5
 800a522:	b007      	add	sp, #28
 800a524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a528:	3501      	adds	r5, #1
 800a52a:	2d08      	cmp	r5, #8
 800a52c:	f10b 0b01 	add.w	fp, fp, #1
 800a530:	dd06      	ble.n	800a540 <__hexnan+0x100>
 800a532:	4544      	cmp	r4, r8
 800a534:	d9c1      	bls.n	800a4ba <__hexnan+0x7a>
 800a536:	2300      	movs	r3, #0
 800a538:	f844 3c04 	str.w	r3, [r4, #-4]
 800a53c:	2501      	movs	r5, #1
 800a53e:	3c04      	subs	r4, #4
 800a540:	6822      	ldr	r2, [r4, #0]
 800a542:	f000 000f 	and.w	r0, r0, #15
 800a546:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a54a:	6020      	str	r0, [r4, #0]
 800a54c:	e7b5      	b.n	800a4ba <__hexnan+0x7a>
 800a54e:	2508      	movs	r5, #8
 800a550:	e7b3      	b.n	800a4ba <__hexnan+0x7a>
 800a552:	9b01      	ldr	r3, [sp, #4]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d0dd      	beq.n	800a514 <__hexnan+0xd4>
 800a558:	f1c3 0320 	rsb	r3, r3, #32
 800a55c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a560:	40da      	lsrs	r2, r3
 800a562:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a566:	4013      	ands	r3, r2
 800a568:	f846 3c04 	str.w	r3, [r6, #-4]
 800a56c:	e7d2      	b.n	800a514 <__hexnan+0xd4>
 800a56e:	3f04      	subs	r7, #4
 800a570:	e7d0      	b.n	800a514 <__hexnan+0xd4>
 800a572:	2004      	movs	r0, #4
 800a574:	e7d5      	b.n	800a522 <__hexnan+0xe2>

0800a576 <__ascii_mbtowc>:
 800a576:	b082      	sub	sp, #8
 800a578:	b901      	cbnz	r1, 800a57c <__ascii_mbtowc+0x6>
 800a57a:	a901      	add	r1, sp, #4
 800a57c:	b142      	cbz	r2, 800a590 <__ascii_mbtowc+0x1a>
 800a57e:	b14b      	cbz	r3, 800a594 <__ascii_mbtowc+0x1e>
 800a580:	7813      	ldrb	r3, [r2, #0]
 800a582:	600b      	str	r3, [r1, #0]
 800a584:	7812      	ldrb	r2, [r2, #0]
 800a586:	1e10      	subs	r0, r2, #0
 800a588:	bf18      	it	ne
 800a58a:	2001      	movne	r0, #1
 800a58c:	b002      	add	sp, #8
 800a58e:	4770      	bx	lr
 800a590:	4610      	mov	r0, r2
 800a592:	e7fb      	b.n	800a58c <__ascii_mbtowc+0x16>
 800a594:	f06f 0001 	mvn.w	r0, #1
 800a598:	e7f8      	b.n	800a58c <__ascii_mbtowc+0x16>

0800a59a <_realloc_r>:
 800a59a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a59e:	4680      	mov	r8, r0
 800a5a0:	4615      	mov	r5, r2
 800a5a2:	460c      	mov	r4, r1
 800a5a4:	b921      	cbnz	r1, 800a5b0 <_realloc_r+0x16>
 800a5a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	f7fd be6c 	b.w	8008288 <_malloc_r>
 800a5b0:	b92a      	cbnz	r2, 800a5be <_realloc_r+0x24>
 800a5b2:	f7fd fdf5 	bl	80081a0 <_free_r>
 800a5b6:	2400      	movs	r4, #0
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5be:	f000 f840 	bl	800a642 <_malloc_usable_size_r>
 800a5c2:	4285      	cmp	r5, r0
 800a5c4:	4606      	mov	r6, r0
 800a5c6:	d802      	bhi.n	800a5ce <_realloc_r+0x34>
 800a5c8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a5cc:	d8f4      	bhi.n	800a5b8 <_realloc_r+0x1e>
 800a5ce:	4629      	mov	r1, r5
 800a5d0:	4640      	mov	r0, r8
 800a5d2:	f7fd fe59 	bl	8008288 <_malloc_r>
 800a5d6:	4607      	mov	r7, r0
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	d0ec      	beq.n	800a5b6 <_realloc_r+0x1c>
 800a5dc:	42b5      	cmp	r5, r6
 800a5de:	462a      	mov	r2, r5
 800a5e0:	4621      	mov	r1, r4
 800a5e2:	bf28      	it	cs
 800a5e4:	4632      	movcs	r2, r6
 800a5e6:	f7fc ff78 	bl	80074da <memcpy>
 800a5ea:	4621      	mov	r1, r4
 800a5ec:	4640      	mov	r0, r8
 800a5ee:	f7fd fdd7 	bl	80081a0 <_free_r>
 800a5f2:	463c      	mov	r4, r7
 800a5f4:	e7e0      	b.n	800a5b8 <_realloc_r+0x1e>

0800a5f6 <__ascii_wctomb>:
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	4608      	mov	r0, r1
 800a5fa:	b141      	cbz	r1, 800a60e <__ascii_wctomb+0x18>
 800a5fc:	2aff      	cmp	r2, #255	@ 0xff
 800a5fe:	d904      	bls.n	800a60a <__ascii_wctomb+0x14>
 800a600:	228a      	movs	r2, #138	@ 0x8a
 800a602:	601a      	str	r2, [r3, #0]
 800a604:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a608:	4770      	bx	lr
 800a60a:	700a      	strb	r2, [r1, #0]
 800a60c:	2001      	movs	r0, #1
 800a60e:	4770      	bx	lr

0800a610 <fiprintf>:
 800a610:	b40e      	push	{r1, r2, r3}
 800a612:	b503      	push	{r0, r1, lr}
 800a614:	4601      	mov	r1, r0
 800a616:	ab03      	add	r3, sp, #12
 800a618:	4805      	ldr	r0, [pc, #20]	@ (800a630 <fiprintf+0x20>)
 800a61a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a61e:	6800      	ldr	r0, [r0, #0]
 800a620:	9301      	str	r3, [sp, #4]
 800a622:	f000 f83f 	bl	800a6a4 <_vfiprintf_r>
 800a626:	b002      	add	sp, #8
 800a628:	f85d eb04 	ldr.w	lr, [sp], #4
 800a62c:	b003      	add	sp, #12
 800a62e:	4770      	bx	lr
 800a630:	2000001c 	.word	0x2000001c

0800a634 <abort>:
 800a634:	b508      	push	{r3, lr}
 800a636:	2006      	movs	r0, #6
 800a638:	f000 fa08 	bl	800aa4c <raise>
 800a63c:	2001      	movs	r0, #1
 800a63e:	f7f7 fb1b 	bl	8001c78 <_exit>

0800a642 <_malloc_usable_size_r>:
 800a642:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a646:	1f18      	subs	r0, r3, #4
 800a648:	2b00      	cmp	r3, #0
 800a64a:	bfbc      	itt	lt
 800a64c:	580b      	ldrlt	r3, [r1, r0]
 800a64e:	18c0      	addlt	r0, r0, r3
 800a650:	4770      	bx	lr

0800a652 <__sfputc_r>:
 800a652:	6893      	ldr	r3, [r2, #8]
 800a654:	3b01      	subs	r3, #1
 800a656:	2b00      	cmp	r3, #0
 800a658:	b410      	push	{r4}
 800a65a:	6093      	str	r3, [r2, #8]
 800a65c:	da08      	bge.n	800a670 <__sfputc_r+0x1e>
 800a65e:	6994      	ldr	r4, [r2, #24]
 800a660:	42a3      	cmp	r3, r4
 800a662:	db01      	blt.n	800a668 <__sfputc_r+0x16>
 800a664:	290a      	cmp	r1, #10
 800a666:	d103      	bne.n	800a670 <__sfputc_r+0x1e>
 800a668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a66c:	f000 b932 	b.w	800a8d4 <__swbuf_r>
 800a670:	6813      	ldr	r3, [r2, #0]
 800a672:	1c58      	adds	r0, r3, #1
 800a674:	6010      	str	r0, [r2, #0]
 800a676:	7019      	strb	r1, [r3, #0]
 800a678:	4608      	mov	r0, r1
 800a67a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <__sfputs_r>:
 800a680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a682:	4606      	mov	r6, r0
 800a684:	460f      	mov	r7, r1
 800a686:	4614      	mov	r4, r2
 800a688:	18d5      	adds	r5, r2, r3
 800a68a:	42ac      	cmp	r4, r5
 800a68c:	d101      	bne.n	800a692 <__sfputs_r+0x12>
 800a68e:	2000      	movs	r0, #0
 800a690:	e007      	b.n	800a6a2 <__sfputs_r+0x22>
 800a692:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a696:	463a      	mov	r2, r7
 800a698:	4630      	mov	r0, r6
 800a69a:	f7ff ffda 	bl	800a652 <__sfputc_r>
 800a69e:	1c43      	adds	r3, r0, #1
 800a6a0:	d1f3      	bne.n	800a68a <__sfputs_r+0xa>
 800a6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a6a4 <_vfiprintf_r>:
 800a6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a8:	460d      	mov	r5, r1
 800a6aa:	b09d      	sub	sp, #116	@ 0x74
 800a6ac:	4614      	mov	r4, r2
 800a6ae:	4698      	mov	r8, r3
 800a6b0:	4606      	mov	r6, r0
 800a6b2:	b118      	cbz	r0, 800a6bc <_vfiprintf_r+0x18>
 800a6b4:	6a03      	ldr	r3, [r0, #32]
 800a6b6:	b90b      	cbnz	r3, 800a6bc <_vfiprintf_r+0x18>
 800a6b8:	f7fc fd6c 	bl	8007194 <__sinit>
 800a6bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6be:	07d9      	lsls	r1, r3, #31
 800a6c0:	d405      	bmi.n	800a6ce <_vfiprintf_r+0x2a>
 800a6c2:	89ab      	ldrh	r3, [r5, #12]
 800a6c4:	059a      	lsls	r2, r3, #22
 800a6c6:	d402      	bmi.n	800a6ce <_vfiprintf_r+0x2a>
 800a6c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6ca:	f7fc ff04 	bl	80074d6 <__retarget_lock_acquire_recursive>
 800a6ce:	89ab      	ldrh	r3, [r5, #12]
 800a6d0:	071b      	lsls	r3, r3, #28
 800a6d2:	d501      	bpl.n	800a6d8 <_vfiprintf_r+0x34>
 800a6d4:	692b      	ldr	r3, [r5, #16]
 800a6d6:	b99b      	cbnz	r3, 800a700 <_vfiprintf_r+0x5c>
 800a6d8:	4629      	mov	r1, r5
 800a6da:	4630      	mov	r0, r6
 800a6dc:	f000 f938 	bl	800a950 <__swsetup_r>
 800a6e0:	b170      	cbz	r0, 800a700 <_vfiprintf_r+0x5c>
 800a6e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6e4:	07dc      	lsls	r4, r3, #31
 800a6e6:	d504      	bpl.n	800a6f2 <_vfiprintf_r+0x4e>
 800a6e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a6ec:	b01d      	add	sp, #116	@ 0x74
 800a6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f2:	89ab      	ldrh	r3, [r5, #12]
 800a6f4:	0598      	lsls	r0, r3, #22
 800a6f6:	d4f7      	bmi.n	800a6e8 <_vfiprintf_r+0x44>
 800a6f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6fa:	f7fc feed 	bl	80074d8 <__retarget_lock_release_recursive>
 800a6fe:	e7f3      	b.n	800a6e8 <_vfiprintf_r+0x44>
 800a700:	2300      	movs	r3, #0
 800a702:	9309      	str	r3, [sp, #36]	@ 0x24
 800a704:	2320      	movs	r3, #32
 800a706:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a70a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a70e:	2330      	movs	r3, #48	@ 0x30
 800a710:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a8c0 <_vfiprintf_r+0x21c>
 800a714:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a718:	f04f 0901 	mov.w	r9, #1
 800a71c:	4623      	mov	r3, r4
 800a71e:	469a      	mov	sl, r3
 800a720:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a724:	b10a      	cbz	r2, 800a72a <_vfiprintf_r+0x86>
 800a726:	2a25      	cmp	r2, #37	@ 0x25
 800a728:	d1f9      	bne.n	800a71e <_vfiprintf_r+0x7a>
 800a72a:	ebba 0b04 	subs.w	fp, sl, r4
 800a72e:	d00b      	beq.n	800a748 <_vfiprintf_r+0xa4>
 800a730:	465b      	mov	r3, fp
 800a732:	4622      	mov	r2, r4
 800a734:	4629      	mov	r1, r5
 800a736:	4630      	mov	r0, r6
 800a738:	f7ff ffa2 	bl	800a680 <__sfputs_r>
 800a73c:	3001      	adds	r0, #1
 800a73e:	f000 80a7 	beq.w	800a890 <_vfiprintf_r+0x1ec>
 800a742:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a744:	445a      	add	r2, fp
 800a746:	9209      	str	r2, [sp, #36]	@ 0x24
 800a748:	f89a 3000 	ldrb.w	r3, [sl]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f000 809f 	beq.w	800a890 <_vfiprintf_r+0x1ec>
 800a752:	2300      	movs	r3, #0
 800a754:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a758:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a75c:	f10a 0a01 	add.w	sl, sl, #1
 800a760:	9304      	str	r3, [sp, #16]
 800a762:	9307      	str	r3, [sp, #28]
 800a764:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a768:	931a      	str	r3, [sp, #104]	@ 0x68
 800a76a:	4654      	mov	r4, sl
 800a76c:	2205      	movs	r2, #5
 800a76e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a772:	4853      	ldr	r0, [pc, #332]	@ (800a8c0 <_vfiprintf_r+0x21c>)
 800a774:	f7f5 fd34 	bl	80001e0 <memchr>
 800a778:	9a04      	ldr	r2, [sp, #16]
 800a77a:	b9d8      	cbnz	r0, 800a7b4 <_vfiprintf_r+0x110>
 800a77c:	06d1      	lsls	r1, r2, #27
 800a77e:	bf44      	itt	mi
 800a780:	2320      	movmi	r3, #32
 800a782:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a786:	0713      	lsls	r3, r2, #28
 800a788:	bf44      	itt	mi
 800a78a:	232b      	movmi	r3, #43	@ 0x2b
 800a78c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a790:	f89a 3000 	ldrb.w	r3, [sl]
 800a794:	2b2a      	cmp	r3, #42	@ 0x2a
 800a796:	d015      	beq.n	800a7c4 <_vfiprintf_r+0x120>
 800a798:	9a07      	ldr	r2, [sp, #28]
 800a79a:	4654      	mov	r4, sl
 800a79c:	2000      	movs	r0, #0
 800a79e:	f04f 0c0a 	mov.w	ip, #10
 800a7a2:	4621      	mov	r1, r4
 800a7a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7a8:	3b30      	subs	r3, #48	@ 0x30
 800a7aa:	2b09      	cmp	r3, #9
 800a7ac:	d94b      	bls.n	800a846 <_vfiprintf_r+0x1a2>
 800a7ae:	b1b0      	cbz	r0, 800a7de <_vfiprintf_r+0x13a>
 800a7b0:	9207      	str	r2, [sp, #28]
 800a7b2:	e014      	b.n	800a7de <_vfiprintf_r+0x13a>
 800a7b4:	eba0 0308 	sub.w	r3, r0, r8
 800a7b8:	fa09 f303 	lsl.w	r3, r9, r3
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	9304      	str	r3, [sp, #16]
 800a7c0:	46a2      	mov	sl, r4
 800a7c2:	e7d2      	b.n	800a76a <_vfiprintf_r+0xc6>
 800a7c4:	9b03      	ldr	r3, [sp, #12]
 800a7c6:	1d19      	adds	r1, r3, #4
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	9103      	str	r1, [sp, #12]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	bfbb      	ittet	lt
 800a7d0:	425b      	neglt	r3, r3
 800a7d2:	f042 0202 	orrlt.w	r2, r2, #2
 800a7d6:	9307      	strge	r3, [sp, #28]
 800a7d8:	9307      	strlt	r3, [sp, #28]
 800a7da:	bfb8      	it	lt
 800a7dc:	9204      	strlt	r2, [sp, #16]
 800a7de:	7823      	ldrb	r3, [r4, #0]
 800a7e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a7e2:	d10a      	bne.n	800a7fa <_vfiprintf_r+0x156>
 800a7e4:	7863      	ldrb	r3, [r4, #1]
 800a7e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7e8:	d132      	bne.n	800a850 <_vfiprintf_r+0x1ac>
 800a7ea:	9b03      	ldr	r3, [sp, #12]
 800a7ec:	1d1a      	adds	r2, r3, #4
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	9203      	str	r2, [sp, #12]
 800a7f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a7f6:	3402      	adds	r4, #2
 800a7f8:	9305      	str	r3, [sp, #20]
 800a7fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a8d0 <_vfiprintf_r+0x22c>
 800a7fe:	7821      	ldrb	r1, [r4, #0]
 800a800:	2203      	movs	r2, #3
 800a802:	4650      	mov	r0, sl
 800a804:	f7f5 fcec 	bl	80001e0 <memchr>
 800a808:	b138      	cbz	r0, 800a81a <_vfiprintf_r+0x176>
 800a80a:	9b04      	ldr	r3, [sp, #16]
 800a80c:	eba0 000a 	sub.w	r0, r0, sl
 800a810:	2240      	movs	r2, #64	@ 0x40
 800a812:	4082      	lsls	r2, r0
 800a814:	4313      	orrs	r3, r2
 800a816:	3401      	adds	r4, #1
 800a818:	9304      	str	r3, [sp, #16]
 800a81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a81e:	4829      	ldr	r0, [pc, #164]	@ (800a8c4 <_vfiprintf_r+0x220>)
 800a820:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a824:	2206      	movs	r2, #6
 800a826:	f7f5 fcdb 	bl	80001e0 <memchr>
 800a82a:	2800      	cmp	r0, #0
 800a82c:	d03f      	beq.n	800a8ae <_vfiprintf_r+0x20a>
 800a82e:	4b26      	ldr	r3, [pc, #152]	@ (800a8c8 <_vfiprintf_r+0x224>)
 800a830:	bb1b      	cbnz	r3, 800a87a <_vfiprintf_r+0x1d6>
 800a832:	9b03      	ldr	r3, [sp, #12]
 800a834:	3307      	adds	r3, #7
 800a836:	f023 0307 	bic.w	r3, r3, #7
 800a83a:	3308      	adds	r3, #8
 800a83c:	9303      	str	r3, [sp, #12]
 800a83e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a840:	443b      	add	r3, r7
 800a842:	9309      	str	r3, [sp, #36]	@ 0x24
 800a844:	e76a      	b.n	800a71c <_vfiprintf_r+0x78>
 800a846:	fb0c 3202 	mla	r2, ip, r2, r3
 800a84a:	460c      	mov	r4, r1
 800a84c:	2001      	movs	r0, #1
 800a84e:	e7a8      	b.n	800a7a2 <_vfiprintf_r+0xfe>
 800a850:	2300      	movs	r3, #0
 800a852:	3401      	adds	r4, #1
 800a854:	9305      	str	r3, [sp, #20]
 800a856:	4619      	mov	r1, r3
 800a858:	f04f 0c0a 	mov.w	ip, #10
 800a85c:	4620      	mov	r0, r4
 800a85e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a862:	3a30      	subs	r2, #48	@ 0x30
 800a864:	2a09      	cmp	r2, #9
 800a866:	d903      	bls.n	800a870 <_vfiprintf_r+0x1cc>
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d0c6      	beq.n	800a7fa <_vfiprintf_r+0x156>
 800a86c:	9105      	str	r1, [sp, #20]
 800a86e:	e7c4      	b.n	800a7fa <_vfiprintf_r+0x156>
 800a870:	fb0c 2101 	mla	r1, ip, r1, r2
 800a874:	4604      	mov	r4, r0
 800a876:	2301      	movs	r3, #1
 800a878:	e7f0      	b.n	800a85c <_vfiprintf_r+0x1b8>
 800a87a:	ab03      	add	r3, sp, #12
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	462a      	mov	r2, r5
 800a880:	4b12      	ldr	r3, [pc, #72]	@ (800a8cc <_vfiprintf_r+0x228>)
 800a882:	a904      	add	r1, sp, #16
 800a884:	4630      	mov	r0, r6
 800a886:	f7fb fe2d 	bl	80064e4 <_printf_float>
 800a88a:	4607      	mov	r7, r0
 800a88c:	1c78      	adds	r0, r7, #1
 800a88e:	d1d6      	bne.n	800a83e <_vfiprintf_r+0x19a>
 800a890:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a892:	07d9      	lsls	r1, r3, #31
 800a894:	d405      	bmi.n	800a8a2 <_vfiprintf_r+0x1fe>
 800a896:	89ab      	ldrh	r3, [r5, #12]
 800a898:	059a      	lsls	r2, r3, #22
 800a89a:	d402      	bmi.n	800a8a2 <_vfiprintf_r+0x1fe>
 800a89c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a89e:	f7fc fe1b 	bl	80074d8 <__retarget_lock_release_recursive>
 800a8a2:	89ab      	ldrh	r3, [r5, #12]
 800a8a4:	065b      	lsls	r3, r3, #25
 800a8a6:	f53f af1f 	bmi.w	800a6e8 <_vfiprintf_r+0x44>
 800a8aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8ac:	e71e      	b.n	800a6ec <_vfiprintf_r+0x48>
 800a8ae:	ab03      	add	r3, sp, #12
 800a8b0:	9300      	str	r3, [sp, #0]
 800a8b2:	462a      	mov	r2, r5
 800a8b4:	4b05      	ldr	r3, [pc, #20]	@ (800a8cc <_vfiprintf_r+0x228>)
 800a8b6:	a904      	add	r1, sp, #16
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	f7fc f8ab 	bl	8006a14 <_printf_i>
 800a8be:	e7e4      	b.n	800a88a <_vfiprintf_r+0x1e6>
 800a8c0:	0800b0d9 	.word	0x0800b0d9
 800a8c4:	0800b0e3 	.word	0x0800b0e3
 800a8c8:	080064e5 	.word	0x080064e5
 800a8cc:	0800a681 	.word	0x0800a681
 800a8d0:	0800b0df 	.word	0x0800b0df

0800a8d4 <__swbuf_r>:
 800a8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d6:	460e      	mov	r6, r1
 800a8d8:	4614      	mov	r4, r2
 800a8da:	4605      	mov	r5, r0
 800a8dc:	b118      	cbz	r0, 800a8e6 <__swbuf_r+0x12>
 800a8de:	6a03      	ldr	r3, [r0, #32]
 800a8e0:	b90b      	cbnz	r3, 800a8e6 <__swbuf_r+0x12>
 800a8e2:	f7fc fc57 	bl	8007194 <__sinit>
 800a8e6:	69a3      	ldr	r3, [r4, #24]
 800a8e8:	60a3      	str	r3, [r4, #8]
 800a8ea:	89a3      	ldrh	r3, [r4, #12]
 800a8ec:	071a      	lsls	r2, r3, #28
 800a8ee:	d501      	bpl.n	800a8f4 <__swbuf_r+0x20>
 800a8f0:	6923      	ldr	r3, [r4, #16]
 800a8f2:	b943      	cbnz	r3, 800a906 <__swbuf_r+0x32>
 800a8f4:	4621      	mov	r1, r4
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	f000 f82a 	bl	800a950 <__swsetup_r>
 800a8fc:	b118      	cbz	r0, 800a906 <__swbuf_r+0x32>
 800a8fe:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a902:	4638      	mov	r0, r7
 800a904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a906:	6823      	ldr	r3, [r4, #0]
 800a908:	6922      	ldr	r2, [r4, #16]
 800a90a:	1a98      	subs	r0, r3, r2
 800a90c:	6963      	ldr	r3, [r4, #20]
 800a90e:	b2f6      	uxtb	r6, r6
 800a910:	4283      	cmp	r3, r0
 800a912:	4637      	mov	r7, r6
 800a914:	dc05      	bgt.n	800a922 <__swbuf_r+0x4e>
 800a916:	4621      	mov	r1, r4
 800a918:	4628      	mov	r0, r5
 800a91a:	f7ff fa53 	bl	8009dc4 <_fflush_r>
 800a91e:	2800      	cmp	r0, #0
 800a920:	d1ed      	bne.n	800a8fe <__swbuf_r+0x2a>
 800a922:	68a3      	ldr	r3, [r4, #8]
 800a924:	3b01      	subs	r3, #1
 800a926:	60a3      	str	r3, [r4, #8]
 800a928:	6823      	ldr	r3, [r4, #0]
 800a92a:	1c5a      	adds	r2, r3, #1
 800a92c:	6022      	str	r2, [r4, #0]
 800a92e:	701e      	strb	r6, [r3, #0]
 800a930:	6962      	ldr	r2, [r4, #20]
 800a932:	1c43      	adds	r3, r0, #1
 800a934:	429a      	cmp	r2, r3
 800a936:	d004      	beq.n	800a942 <__swbuf_r+0x6e>
 800a938:	89a3      	ldrh	r3, [r4, #12]
 800a93a:	07db      	lsls	r3, r3, #31
 800a93c:	d5e1      	bpl.n	800a902 <__swbuf_r+0x2e>
 800a93e:	2e0a      	cmp	r6, #10
 800a940:	d1df      	bne.n	800a902 <__swbuf_r+0x2e>
 800a942:	4621      	mov	r1, r4
 800a944:	4628      	mov	r0, r5
 800a946:	f7ff fa3d 	bl	8009dc4 <_fflush_r>
 800a94a:	2800      	cmp	r0, #0
 800a94c:	d0d9      	beq.n	800a902 <__swbuf_r+0x2e>
 800a94e:	e7d6      	b.n	800a8fe <__swbuf_r+0x2a>

0800a950 <__swsetup_r>:
 800a950:	b538      	push	{r3, r4, r5, lr}
 800a952:	4b29      	ldr	r3, [pc, #164]	@ (800a9f8 <__swsetup_r+0xa8>)
 800a954:	4605      	mov	r5, r0
 800a956:	6818      	ldr	r0, [r3, #0]
 800a958:	460c      	mov	r4, r1
 800a95a:	b118      	cbz	r0, 800a964 <__swsetup_r+0x14>
 800a95c:	6a03      	ldr	r3, [r0, #32]
 800a95e:	b90b      	cbnz	r3, 800a964 <__swsetup_r+0x14>
 800a960:	f7fc fc18 	bl	8007194 <__sinit>
 800a964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a968:	0719      	lsls	r1, r3, #28
 800a96a:	d422      	bmi.n	800a9b2 <__swsetup_r+0x62>
 800a96c:	06da      	lsls	r2, r3, #27
 800a96e:	d407      	bmi.n	800a980 <__swsetup_r+0x30>
 800a970:	2209      	movs	r2, #9
 800a972:	602a      	str	r2, [r5, #0]
 800a974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a978:	81a3      	strh	r3, [r4, #12]
 800a97a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a97e:	e033      	b.n	800a9e8 <__swsetup_r+0x98>
 800a980:	0758      	lsls	r0, r3, #29
 800a982:	d512      	bpl.n	800a9aa <__swsetup_r+0x5a>
 800a984:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a986:	b141      	cbz	r1, 800a99a <__swsetup_r+0x4a>
 800a988:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a98c:	4299      	cmp	r1, r3
 800a98e:	d002      	beq.n	800a996 <__swsetup_r+0x46>
 800a990:	4628      	mov	r0, r5
 800a992:	f7fd fc05 	bl	80081a0 <_free_r>
 800a996:	2300      	movs	r3, #0
 800a998:	6363      	str	r3, [r4, #52]	@ 0x34
 800a99a:	89a3      	ldrh	r3, [r4, #12]
 800a99c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a9a0:	81a3      	strh	r3, [r4, #12]
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	6063      	str	r3, [r4, #4]
 800a9a6:	6923      	ldr	r3, [r4, #16]
 800a9a8:	6023      	str	r3, [r4, #0]
 800a9aa:	89a3      	ldrh	r3, [r4, #12]
 800a9ac:	f043 0308 	orr.w	r3, r3, #8
 800a9b0:	81a3      	strh	r3, [r4, #12]
 800a9b2:	6923      	ldr	r3, [r4, #16]
 800a9b4:	b94b      	cbnz	r3, 800a9ca <__swsetup_r+0x7a>
 800a9b6:	89a3      	ldrh	r3, [r4, #12]
 800a9b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a9bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9c0:	d003      	beq.n	800a9ca <__swsetup_r+0x7a>
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	f000 f883 	bl	800aad0 <__smakebuf_r>
 800a9ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9ce:	f013 0201 	ands.w	r2, r3, #1
 800a9d2:	d00a      	beq.n	800a9ea <__swsetup_r+0x9a>
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	60a2      	str	r2, [r4, #8]
 800a9d8:	6962      	ldr	r2, [r4, #20]
 800a9da:	4252      	negs	r2, r2
 800a9dc:	61a2      	str	r2, [r4, #24]
 800a9de:	6922      	ldr	r2, [r4, #16]
 800a9e0:	b942      	cbnz	r2, 800a9f4 <__swsetup_r+0xa4>
 800a9e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a9e6:	d1c5      	bne.n	800a974 <__swsetup_r+0x24>
 800a9e8:	bd38      	pop	{r3, r4, r5, pc}
 800a9ea:	0799      	lsls	r1, r3, #30
 800a9ec:	bf58      	it	pl
 800a9ee:	6962      	ldrpl	r2, [r4, #20]
 800a9f0:	60a2      	str	r2, [r4, #8]
 800a9f2:	e7f4      	b.n	800a9de <__swsetup_r+0x8e>
 800a9f4:	2000      	movs	r0, #0
 800a9f6:	e7f7      	b.n	800a9e8 <__swsetup_r+0x98>
 800a9f8:	2000001c 	.word	0x2000001c

0800a9fc <_raise_r>:
 800a9fc:	291f      	cmp	r1, #31
 800a9fe:	b538      	push	{r3, r4, r5, lr}
 800aa00:	4605      	mov	r5, r0
 800aa02:	460c      	mov	r4, r1
 800aa04:	d904      	bls.n	800aa10 <_raise_r+0x14>
 800aa06:	2316      	movs	r3, #22
 800aa08:	6003      	str	r3, [r0, #0]
 800aa0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa0e:	bd38      	pop	{r3, r4, r5, pc}
 800aa10:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aa12:	b112      	cbz	r2, 800aa1a <_raise_r+0x1e>
 800aa14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa18:	b94b      	cbnz	r3, 800aa2e <_raise_r+0x32>
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	f000 f830 	bl	800aa80 <_getpid_r>
 800aa20:	4622      	mov	r2, r4
 800aa22:	4601      	mov	r1, r0
 800aa24:	4628      	mov	r0, r5
 800aa26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa2a:	f000 b817 	b.w	800aa5c <_kill_r>
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d00a      	beq.n	800aa48 <_raise_r+0x4c>
 800aa32:	1c59      	adds	r1, r3, #1
 800aa34:	d103      	bne.n	800aa3e <_raise_r+0x42>
 800aa36:	2316      	movs	r3, #22
 800aa38:	6003      	str	r3, [r0, #0]
 800aa3a:	2001      	movs	r0, #1
 800aa3c:	e7e7      	b.n	800aa0e <_raise_r+0x12>
 800aa3e:	2100      	movs	r1, #0
 800aa40:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aa44:	4620      	mov	r0, r4
 800aa46:	4798      	blx	r3
 800aa48:	2000      	movs	r0, #0
 800aa4a:	e7e0      	b.n	800aa0e <_raise_r+0x12>

0800aa4c <raise>:
 800aa4c:	4b02      	ldr	r3, [pc, #8]	@ (800aa58 <raise+0xc>)
 800aa4e:	4601      	mov	r1, r0
 800aa50:	6818      	ldr	r0, [r3, #0]
 800aa52:	f7ff bfd3 	b.w	800a9fc <_raise_r>
 800aa56:	bf00      	nop
 800aa58:	2000001c 	.word	0x2000001c

0800aa5c <_kill_r>:
 800aa5c:	b538      	push	{r3, r4, r5, lr}
 800aa5e:	4d07      	ldr	r5, [pc, #28]	@ (800aa7c <_kill_r+0x20>)
 800aa60:	2300      	movs	r3, #0
 800aa62:	4604      	mov	r4, r0
 800aa64:	4608      	mov	r0, r1
 800aa66:	4611      	mov	r1, r2
 800aa68:	602b      	str	r3, [r5, #0]
 800aa6a:	f7f7 f8f5 	bl	8001c58 <_kill>
 800aa6e:	1c43      	adds	r3, r0, #1
 800aa70:	d102      	bne.n	800aa78 <_kill_r+0x1c>
 800aa72:	682b      	ldr	r3, [r5, #0]
 800aa74:	b103      	cbz	r3, 800aa78 <_kill_r+0x1c>
 800aa76:	6023      	str	r3, [r4, #0]
 800aa78:	bd38      	pop	{r3, r4, r5, pc}
 800aa7a:	bf00      	nop
 800aa7c:	2000446c 	.word	0x2000446c

0800aa80 <_getpid_r>:
 800aa80:	f7f7 b8e2 	b.w	8001c48 <_getpid>

0800aa84 <__swhatbuf_r>:
 800aa84:	b570      	push	{r4, r5, r6, lr}
 800aa86:	460c      	mov	r4, r1
 800aa88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa8c:	2900      	cmp	r1, #0
 800aa8e:	b096      	sub	sp, #88	@ 0x58
 800aa90:	4615      	mov	r5, r2
 800aa92:	461e      	mov	r6, r3
 800aa94:	da0d      	bge.n	800aab2 <__swhatbuf_r+0x2e>
 800aa96:	89a3      	ldrh	r3, [r4, #12]
 800aa98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aa9c:	f04f 0100 	mov.w	r1, #0
 800aaa0:	bf14      	ite	ne
 800aaa2:	2340      	movne	r3, #64	@ 0x40
 800aaa4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aaa8:	2000      	movs	r0, #0
 800aaaa:	6031      	str	r1, [r6, #0]
 800aaac:	602b      	str	r3, [r5, #0]
 800aaae:	b016      	add	sp, #88	@ 0x58
 800aab0:	bd70      	pop	{r4, r5, r6, pc}
 800aab2:	466a      	mov	r2, sp
 800aab4:	f000 f848 	bl	800ab48 <_fstat_r>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	dbec      	blt.n	800aa96 <__swhatbuf_r+0x12>
 800aabc:	9901      	ldr	r1, [sp, #4]
 800aabe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aac2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aac6:	4259      	negs	r1, r3
 800aac8:	4159      	adcs	r1, r3
 800aaca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aace:	e7eb      	b.n	800aaa8 <__swhatbuf_r+0x24>

0800aad0 <__smakebuf_r>:
 800aad0:	898b      	ldrh	r3, [r1, #12]
 800aad2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aad4:	079d      	lsls	r5, r3, #30
 800aad6:	4606      	mov	r6, r0
 800aad8:	460c      	mov	r4, r1
 800aada:	d507      	bpl.n	800aaec <__smakebuf_r+0x1c>
 800aadc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aae0:	6023      	str	r3, [r4, #0]
 800aae2:	6123      	str	r3, [r4, #16]
 800aae4:	2301      	movs	r3, #1
 800aae6:	6163      	str	r3, [r4, #20]
 800aae8:	b003      	add	sp, #12
 800aaea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaec:	ab01      	add	r3, sp, #4
 800aaee:	466a      	mov	r2, sp
 800aaf0:	f7ff ffc8 	bl	800aa84 <__swhatbuf_r>
 800aaf4:	9f00      	ldr	r7, [sp, #0]
 800aaf6:	4605      	mov	r5, r0
 800aaf8:	4639      	mov	r1, r7
 800aafa:	4630      	mov	r0, r6
 800aafc:	f7fd fbc4 	bl	8008288 <_malloc_r>
 800ab00:	b948      	cbnz	r0, 800ab16 <__smakebuf_r+0x46>
 800ab02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab06:	059a      	lsls	r2, r3, #22
 800ab08:	d4ee      	bmi.n	800aae8 <__smakebuf_r+0x18>
 800ab0a:	f023 0303 	bic.w	r3, r3, #3
 800ab0e:	f043 0302 	orr.w	r3, r3, #2
 800ab12:	81a3      	strh	r3, [r4, #12]
 800ab14:	e7e2      	b.n	800aadc <__smakebuf_r+0xc>
 800ab16:	89a3      	ldrh	r3, [r4, #12]
 800ab18:	6020      	str	r0, [r4, #0]
 800ab1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab1e:	81a3      	strh	r3, [r4, #12]
 800ab20:	9b01      	ldr	r3, [sp, #4]
 800ab22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ab26:	b15b      	cbz	r3, 800ab40 <__smakebuf_r+0x70>
 800ab28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	f000 f81d 	bl	800ab6c <_isatty_r>
 800ab32:	b128      	cbz	r0, 800ab40 <__smakebuf_r+0x70>
 800ab34:	89a3      	ldrh	r3, [r4, #12]
 800ab36:	f023 0303 	bic.w	r3, r3, #3
 800ab3a:	f043 0301 	orr.w	r3, r3, #1
 800ab3e:	81a3      	strh	r3, [r4, #12]
 800ab40:	89a3      	ldrh	r3, [r4, #12]
 800ab42:	431d      	orrs	r5, r3
 800ab44:	81a5      	strh	r5, [r4, #12]
 800ab46:	e7cf      	b.n	800aae8 <__smakebuf_r+0x18>

0800ab48 <_fstat_r>:
 800ab48:	b538      	push	{r3, r4, r5, lr}
 800ab4a:	4d07      	ldr	r5, [pc, #28]	@ (800ab68 <_fstat_r+0x20>)
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	4604      	mov	r4, r0
 800ab50:	4608      	mov	r0, r1
 800ab52:	4611      	mov	r1, r2
 800ab54:	602b      	str	r3, [r5, #0]
 800ab56:	f7f7 f8df 	bl	8001d18 <_fstat>
 800ab5a:	1c43      	adds	r3, r0, #1
 800ab5c:	d102      	bne.n	800ab64 <_fstat_r+0x1c>
 800ab5e:	682b      	ldr	r3, [r5, #0]
 800ab60:	b103      	cbz	r3, 800ab64 <_fstat_r+0x1c>
 800ab62:	6023      	str	r3, [r4, #0]
 800ab64:	bd38      	pop	{r3, r4, r5, pc}
 800ab66:	bf00      	nop
 800ab68:	2000446c 	.word	0x2000446c

0800ab6c <_isatty_r>:
 800ab6c:	b538      	push	{r3, r4, r5, lr}
 800ab6e:	4d06      	ldr	r5, [pc, #24]	@ (800ab88 <_isatty_r+0x1c>)
 800ab70:	2300      	movs	r3, #0
 800ab72:	4604      	mov	r4, r0
 800ab74:	4608      	mov	r0, r1
 800ab76:	602b      	str	r3, [r5, #0]
 800ab78:	f7f7 f8de 	bl	8001d38 <_isatty>
 800ab7c:	1c43      	adds	r3, r0, #1
 800ab7e:	d102      	bne.n	800ab86 <_isatty_r+0x1a>
 800ab80:	682b      	ldr	r3, [r5, #0]
 800ab82:	b103      	cbz	r3, 800ab86 <_isatty_r+0x1a>
 800ab84:	6023      	str	r3, [r4, #0]
 800ab86:	bd38      	pop	{r3, r4, r5, pc}
 800ab88:	2000446c 	.word	0x2000446c

0800ab8c <_init>:
 800ab8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8e:	bf00      	nop
 800ab90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab92:	bc08      	pop	{r3}
 800ab94:	469e      	mov	lr, r3
 800ab96:	4770      	bx	lr

0800ab98 <_fini>:
 800ab98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9a:	bf00      	nop
 800ab9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab9e:	bc08      	pop	{r3}
 800aba0:	469e      	mov	lr, r3
 800aba2:	4770      	bx	lr
