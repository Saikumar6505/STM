
freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039f0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003b90  08003b90  00004b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c28  08003c28  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  08003c28  08003c28  00004c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c30  08003c30  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c30  08003c30  00004c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c34  08003c34  00004c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003c38  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041f0  20000060  08003c98  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004250  08003c98  00005250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ad7  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aae  00000000  00000000  00017b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  0001a618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb9  00000000  00000000  0001b670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017936  00000000  00000000  0001c329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001174e  00000000  00000000  00033c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000964b5  00000000  00000000  000453ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db862  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046ec  00000000  00000000  000db8a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000dff94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003b78 	.word	0x08003b78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08003b78 	.word	0x08003b78

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	@ (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000007c 	.word	0x2000007c
 8000500:	2000011c 	.word	0x2000011c

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b096      	sub	sp, #88	@ 0x58
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 faf3 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f84b 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8dd 	bl	80006d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000516:	f000 f8b1 	bl	800067c <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of led1_task1 */
  osThreadDef(led1_task1, led1_handler, osPriorityNormal, 0, 128);
 800051a:	4b1d      	ldr	r3, [pc, #116]	@ (8000590 <main+0x8c>)
 800051c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000520:	461d      	mov	r5, r3
 8000522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000526:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800052a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  led1_task1Handle = osThreadCreate(osThread(led1_task1), NULL);
 800052e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f001 ffda 	bl	80024ee <osThreadCreate>
 800053a:	4603      	mov	r3, r0
 800053c:	4a15      	ldr	r2, [pc, #84]	@ (8000594 <main+0x90>)
 800053e:	6013      	str	r3, [r2, #0]

  /* definition and creation of led2_Task2 */
  osThreadDef(led2_Task2, led2_handler, osPriorityIdle, 0, 128);
 8000540:	4b15      	ldr	r3, [pc, #84]	@ (8000598 <main+0x94>)
 8000542:	f107 0420 	add.w	r4, r7, #32
 8000546:	461d      	mov	r5, r3
 8000548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000550:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  led2_Task2Handle = osThreadCreate(osThread(led2_Task2), NULL);
 8000554:	f107 0320 	add.w	r3, r7, #32
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f001 ffc7 	bl	80024ee <osThreadCreate>
 8000560:	4603      	mov	r3, r0
 8000562:	4a0e      	ldr	r2, [pc, #56]	@ (800059c <main+0x98>)
 8000564:	6013      	str	r3, [r2, #0]

  /* definition and creation of led3_Task3 */
  osThreadDef(led3_Task3, led3_handler, osPriorityIdle, 0, 128);
 8000566:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <main+0x9c>)
 8000568:	1d3c      	adds	r4, r7, #4
 800056a:	461d      	mov	r5, r3
 800056c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000570:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000574:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  led3_Task3Handle = osThreadCreate(osThread(led3_Task3), NULL);
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f001 ffb6 	bl	80024ee <osThreadCreate>
 8000582:	4603      	mov	r3, r0
 8000584:	4a07      	ldr	r2, [pc, #28]	@ (80005a4 <main+0xa0>)
 8000586:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000588:	f001 ffaa 	bl	80024e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058c:	bf00      	nop
 800058e:	e7fd      	b.n	800058c <main+0x88>
 8000590:	08003b9c 	.word	0x08003b9c
 8000594:	20000364 	.word	0x20000364
 8000598:	08003bc4 	.word	0x08003bc4
 800059c:	20000368 	.word	0x20000368
 80005a0:	08003bec 	.word	0x08003bec
 80005a4:	2000036c 	.word	0x2000036c

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	@ 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2230      	movs	r2, #48	@ 0x30
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 fa04 	bl	80039c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	4b28      	ldr	r3, [pc, #160]	@ (8000674 <SystemClock_Config+0xcc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d4:	4a27      	ldr	r2, [pc, #156]	@ (8000674 <SystemClock_Config+0xcc>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	@ 0x40
 80005dc:	4b25      	ldr	r3, [pc, #148]	@ (8000674 <SystemClock_Config+0xcc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b22      	ldr	r3, [pc, #136]	@ (8000678 <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <SystemClock_Config+0xd0>)
 80005f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000678 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060c:	2310      	movs	r3, #16
 800060e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000610:	2302      	movs	r3, #2
 8000612:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000614:	2300      	movs	r3, #0
 8000616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000618:	2310      	movs	r3, #16
 800061a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800061c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000620:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000622:	2304      	movs	r3, #4
 8000624:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000626:	2304      	movs	r3, #4
 8000628:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	4618      	mov	r0, r3
 8000630:	f000 fd3c 	bl	80010ac <HAL_RCC_OscConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800063a:	f000 f90d 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	230f      	movs	r3, #15
 8000640:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000642:	2302      	movs	r3, #2
 8000644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800064e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2102      	movs	r1, #2
 800065a:	4618      	mov	r0, r3
 800065c:	f000 ff9e 	bl	800159c <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000666:	f000 f8f7 	bl	8000858 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	@ 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000680:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000682:	4a12      	ldr	r2, [pc, #72]	@ (80006cc <MX_USART2_UART_Init+0x50>)
 8000684:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000686:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000688:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800068c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <MX_USART2_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006b4:	f001 fc38 	bl	8001f28 <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006be:	f000 f8cb 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	2000031c 	.word	0x2000031c
 80006cc:	40004400 	.word	0x40004400

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	@ 0x28
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b37      	ldr	r3, [pc, #220]	@ (80007c8 <MX_GPIO_Init+0xf8>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a36      	ldr	r2, [pc, #216]	@ (80007c8 <MX_GPIO_Init+0xf8>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b34      	ldr	r3, [pc, #208]	@ (80007c8 <MX_GPIO_Init+0xf8>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b30      	ldr	r3, [pc, #192]	@ (80007c8 <MX_GPIO_Init+0xf8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a2f      	ldr	r2, [pc, #188]	@ (80007c8 <MX_GPIO_Init+0xf8>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b2d      	ldr	r3, [pc, #180]	@ (80007c8 <MX_GPIO_Init+0xf8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b29      	ldr	r3, [pc, #164]	@ (80007c8 <MX_GPIO_Init+0xf8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a28      	ldr	r2, [pc, #160]	@ (80007c8 <MX_GPIO_Init+0xf8>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b26      	ldr	r3, [pc, #152]	@ (80007c8 <MX_GPIO_Init+0xf8>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b22      	ldr	r3, [pc, #136]	@ (80007c8 <MX_GPIO_Init+0xf8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a21      	ldr	r2, [pc, #132]	@ (80007c8 <MX_GPIO_Init+0xf8>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <MX_GPIO_Init+0xf8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2107      	movs	r1, #7
 800075a:	481c      	ldr	r0, [pc, #112]	@ (80007cc <MX_GPIO_Init+0xfc>)
 800075c:	f000 fc72 	bl	8001044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2120      	movs	r1, #32
 8000764:	481a      	ldr	r0, [pc, #104]	@ (80007d0 <MX_GPIO_Init+0x100>)
 8000766:	f000 fc6d 	bl	8001044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800076a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000770:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	4812      	ldr	r0, [pc, #72]	@ (80007cc <MX_GPIO_Init+0xfc>)
 8000782:	f000 fadb 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000786:	2307      	movs	r3, #7
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	480b      	ldr	r0, [pc, #44]	@ (80007cc <MX_GPIO_Init+0xfc>)
 800079e:	f000 facd 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a2:	2320      	movs	r3, #32
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_GPIO_Init+0x100>)
 80007ba:	f000 fabf 	bl	8000d3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007be:	bf00      	nop
 80007c0:	3728      	adds	r7, #40	@ 0x28
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40020800 	.word	0x40020800
 80007d0:	40020000 	.word	0x40020000

080007d4 <led1_handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_led1_handler */
void led1_handler(void const * argument)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 80007dc:	2101      	movs	r1, #1
 80007de:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <led1_handler+0x1c>)
 80007e0:	f000 fc49 	bl	8001076 <HAL_GPIO_TogglePin>
    osDelay(1000);
 80007e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007e8:	f001 fecd 	bl	8002586 <osDelay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 80007ec:	bf00      	nop
 80007ee:	e7f5      	b.n	80007dc <led1_handler+0x8>
 80007f0:	40020800 	.word	0x40020800

080007f4 <led2_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led2_handler */
void led2_handler(void const * argument)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led2_handler */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 80007fc:	2102      	movs	r1, #2
 80007fe:	4804      	ldr	r0, [pc, #16]	@ (8000810 <led2_handler+0x1c>)
 8000800:	f000 fc39 	bl	8001076 <HAL_GPIO_TogglePin>
    osDelay(800);
 8000804:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000808:	f001 febd 	bl	8002586 <osDelay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 800080c:	bf00      	nop
 800080e:	e7f5      	b.n	80007fc <led2_handler+0x8>
 8000810:	40020800 	.word	0x40020800

08000814 <led3_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led3_handler */
void led3_handler(void const * argument)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led3_handler */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 800081c:	2104      	movs	r1, #4
 800081e:	4804      	ldr	r0, [pc, #16]	@ (8000830 <led3_handler+0x1c>)
 8000820:	f000 fc29 	bl	8001076 <HAL_GPIO_TogglePin>
    osDelay(400);
 8000824:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000828:	f001 fead 	bl	8002586 <osDelay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 800082c:	bf00      	nop
 800082e:	e7f5      	b.n	800081c <led3_handler+0x8>
 8000830:	40020800 	.word	0x40020800

08000834 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a04      	ldr	r2, [pc, #16]	@ (8000854 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d101      	bne.n	800084a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000846:	f000 f977 	bl	8000b38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40010000 	.word	0x40010000

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <Error_Handler+0x8>

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <HAL_MspInit+0x54>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000872:	4a11      	ldr	r2, [pc, #68]	@ (80008b8 <HAL_MspInit+0x54>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000878:	6453      	str	r3, [r2, #68]	@ 0x44
 800087a:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <HAL_MspInit+0x54>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <HAL_MspInit+0x54>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088e:	4a0a      	ldr	r2, [pc, #40]	@ (80008b8 <HAL_MspInit+0x54>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000894:	6413      	str	r3, [r2, #64]	@ 0x40
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <HAL_MspInit+0x54>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	210f      	movs	r1, #15
 80008a6:	f06f 0001 	mvn.w	r0, #1
 80008aa:	f000 fa1d 	bl	8000ce8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	@ 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a19      	ldr	r2, [pc, #100]	@ (8000940 <HAL_UART_MspInit+0x84>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d12b      	bne.n	8000936 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <HAL_UART_MspInit+0x88>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e6:	4a17      	ldr	r2, [pc, #92]	@ (8000944 <HAL_UART_MspInit+0x88>)
 80008e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ee:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <HAL_UART_MspInit+0x88>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <HAL_UART_MspInit+0x88>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a10      	ldr	r2, [pc, #64]	@ (8000944 <HAL_UART_MspInit+0x88>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <HAL_UART_MspInit+0x88>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000916:	230c      	movs	r3, #12
 8000918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000926:	2307      	movs	r3, #7
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	@ (8000948 <HAL_UART_MspInit+0x8c>)
 8000932:	f000 fa03 	bl	8000d3c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	@ 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40004400 	.word	0x40004400
 8000944:	40023800 	.word	0x40023800
 8000948:	40020000 	.word	0x40020000

0800094c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08c      	sub	sp, #48	@ 0x30
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	4b2e      	ldr	r3, [pc, #184]	@ (8000a1c <HAL_InitTick+0xd0>)
 8000962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000964:	4a2d      	ldr	r2, [pc, #180]	@ (8000a1c <HAL_InitTick+0xd0>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	6453      	str	r3, [r2, #68]	@ 0x44
 800096c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a1c <HAL_InitTick+0xd0>)
 800096e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000978:	f107 020c 	add.w	r2, r7, #12
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f001 f82a 	bl	80019dc <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000988:	f001 f814 	bl	80019b4 <HAL_RCC_GetPCLK2Freq>
 800098c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800098e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000990:	4a23      	ldr	r2, [pc, #140]	@ (8000a20 <HAL_InitTick+0xd4>)
 8000992:	fba2 2303 	umull	r2, r3, r2, r3
 8000996:	0c9b      	lsrs	r3, r3, #18
 8000998:	3b01      	subs	r3, #1
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800099c:	4b21      	ldr	r3, [pc, #132]	@ (8000a24 <HAL_InitTick+0xd8>)
 800099e:	4a22      	ldr	r2, [pc, #136]	@ (8000a28 <HAL_InitTick+0xdc>)
 80009a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009a2:	4b20      	ldr	r3, [pc, #128]	@ (8000a24 <HAL_InitTick+0xd8>)
 80009a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009a8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000a24 <HAL_InitTick+0xd8>)
 80009ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a24 <HAL_InitTick+0xd8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <HAL_InitTick+0xd8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009bc:	4b19      	ldr	r3, [pc, #100]	@ (8000a24 <HAL_InitTick+0xd8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009c2:	4818      	ldr	r0, [pc, #96]	@ (8000a24 <HAL_InitTick+0xd8>)
 80009c4:	f001 f83c 	bl	8001a40 <HAL_TIM_Base_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80009ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d11b      	bne.n	8000a0e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009d6:	4813      	ldr	r0, [pc, #76]	@ (8000a24 <HAL_InitTick+0xd8>)
 80009d8:	f001 f88c 	bl	8001af4 <HAL_TIM_Base_Start_IT>
 80009dc:	4603      	mov	r3, r0
 80009de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80009e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d111      	bne.n	8000a0e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009ea:	2019      	movs	r0, #25
 80009ec:	f000 f998 	bl	8000d20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b0f      	cmp	r3, #15
 80009f4:	d808      	bhi.n	8000a08 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80009f6:	2200      	movs	r2, #0
 80009f8:	6879      	ldr	r1, [r7, #4]
 80009fa:	2019      	movs	r0, #25
 80009fc:	f000 f974 	bl	8000ce8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a00:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <HAL_InitTick+0xe0>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]
 8000a06:	e002      	b.n	8000a0e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3730      	adds	r7, #48	@ 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	431bde83 	.word	0x431bde83
 8000a24:	20000370 	.word	0x20000370
 8000a28:	40010000 	.word	0x40010000
 8000a2c:	20000004 	.word	0x20000004

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <NMI_Handler+0x4>

08000a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <MemManage_Handler+0x4>

08000a48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a6c:	4802      	ldr	r0, [pc, #8]	@ (8000a78 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a6e:	f001 f8a3 	bl	8001bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000370 	.word	0x20000370

08000a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <SystemInit+0x20>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a86:	4a05      	ldr	r2, [pc, #20]	@ (8000a9c <SystemInit+0x20>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ad8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aa4:	f7ff ffea 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	@ (8000adc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	@ (8000ae0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8000aec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ace:	f002 ffd7 	bl	8003a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad2:	f7ff fd17 	bl	8000504 <main>
  bx  lr    
 8000ad6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ad8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ae4:	08003c38 	.word	0x08003c38
  ldr r2, =_sbss
 8000ae8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000aec:	20004250 	.word	0x20004250

08000af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b34 <HAL_Init+0x40>)
 8000afe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b04:	4b0b      	ldr	r3, [pc, #44]	@ (8000b34 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <HAL_Init+0x40>)
 8000b0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a07      	ldr	r2, [pc, #28]	@ (8000b34 <HAL_Init+0x40>)
 8000b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 f8d8 	bl	8000cd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b22:	200f      	movs	r0, #15
 8000b24:	f7ff ff12 	bl	800094c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b28:	f7ff fe9c 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023c00 	.word	0x40023c00

08000b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	@ (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	200003b8 	.word	0x200003b8

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b03      	ldr	r3, [pc, #12]	@ (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	200003b8 	.word	0x200003b8

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	@ (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4907      	ldr	r1, [pc, #28]	@ (8000c14 <__NVIC_EnableIRQ+0x38>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	@ (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	@ (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	@ 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	@ 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ff4c 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
 8000cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfa:	f7ff ff61 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000cfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	68b9      	ldr	r1, [r7, #8]
 8000d04:	6978      	ldr	r0, [r7, #20]
 8000d06:	f7ff ffb1 	bl	8000c6c <NVIC_EncodePriority>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff80 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d18:	bf00      	nop
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff54 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	@ 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	e159      	b.n	800100c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d58:	2201      	movs	r2, #1
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	f040 8148 	bne.w	8001006 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d005      	beq.n	8000d8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d130      	bne.n	8000df0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	2203      	movs	r2, #3
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	68da      	ldr	r2, [r3, #12]
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	091b      	lsrs	r3, r3, #4
 8000dda:	f003 0201 	and.w	r2, r3, #1
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	d017      	beq.n	8000e2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d123      	bne.n	8000e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	08da      	lsrs	r2, r3, #3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3208      	adds	r2, #8
 8000e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	220f      	movs	r2, #15
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	08da      	lsrs	r2, r3, #3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3208      	adds	r2, #8
 8000e7a:	69b9      	ldr	r1, [r7, #24]
 8000e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0203 	and.w	r2, r3, #3
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 80a2 	beq.w	8001006 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	4b57      	ldr	r3, [pc, #348]	@ (8001024 <HAL_GPIO_Init+0x2e8>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eca:	4a56      	ldr	r2, [pc, #344]	@ (8001024 <HAL_GPIO_Init+0x2e8>)
 8000ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ed2:	4b54      	ldr	r3, [pc, #336]	@ (8001024 <HAL_GPIO_Init+0x2e8>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ede:	4a52      	ldr	r2, [pc, #328]	@ (8001028 <HAL_GPIO_Init+0x2ec>)
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	220f      	movs	r2, #15
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a49      	ldr	r2, [pc, #292]	@ (800102c <HAL_GPIO_Init+0x2f0>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d019      	beq.n	8000f3e <HAL_GPIO_Init+0x202>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a48      	ldr	r2, [pc, #288]	@ (8001030 <HAL_GPIO_Init+0x2f4>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d013      	beq.n	8000f3a <HAL_GPIO_Init+0x1fe>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a47      	ldr	r2, [pc, #284]	@ (8001034 <HAL_GPIO_Init+0x2f8>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00d      	beq.n	8000f36 <HAL_GPIO_Init+0x1fa>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a46      	ldr	r2, [pc, #280]	@ (8001038 <HAL_GPIO_Init+0x2fc>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x1f6>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a45      	ldr	r2, [pc, #276]	@ (800103c <HAL_GPIO_Init+0x300>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d101      	bne.n	8000f2e <HAL_GPIO_Init+0x1f2>
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	e008      	b.n	8000f40 <HAL_GPIO_Init+0x204>
 8000f2e:	2307      	movs	r3, #7
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x204>
 8000f32:	2303      	movs	r3, #3
 8000f34:	e004      	b.n	8000f40 <HAL_GPIO_Init+0x204>
 8000f36:	2302      	movs	r3, #2
 8000f38:	e002      	b.n	8000f40 <HAL_GPIO_Init+0x204>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <HAL_GPIO_Init+0x204>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	69fa      	ldr	r2, [r7, #28]
 8000f42:	f002 0203 	and.w	r2, r2, #3
 8000f46:	0092      	lsls	r2, r2, #2
 8000f48:	4093      	lsls	r3, r2
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f50:	4935      	ldr	r1, [pc, #212]	@ (8001028 <HAL_GPIO_Init+0x2ec>)
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	3302      	adds	r3, #2
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f5e:	4b38      	ldr	r3, [pc, #224]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f82:	4a2f      	ldr	r2, [pc, #188]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f88:	4b2d      	ldr	r3, [pc, #180]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fac:	4a24      	ldr	r2, [pc, #144]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fb2:	4b23      	ldr	r3, [pc, #140]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001000:	4a0f      	ldr	r2, [pc, #60]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3301      	adds	r3, #1
 800100a:	61fb      	str	r3, [r7, #28]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	2b0f      	cmp	r3, #15
 8001010:	f67f aea2 	bls.w	8000d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3724      	adds	r7, #36	@ 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800
 8001028:	40013800 	.word	0x40013800
 800102c:	40020000 	.word	0x40020000
 8001030:	40020400 	.word	0x40020400
 8001034:	40020800 	.word	0x40020800
 8001038:	40020c00 	.word	0x40020c00
 800103c:	40021000 	.word	0x40021000
 8001040:	40013c00 	.word	0x40013c00

08001044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
 8001050:	4613      	mov	r3, r2
 8001052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001054:	787b      	ldrb	r3, [r7, #1]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001060:	e003      	b.n	800106a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001062:	887b      	ldrh	r3, [r7, #2]
 8001064:	041a      	lsls	r2, r3, #16
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	619a      	str	r2, [r3, #24]
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001076:	b480      	push	{r7}
 8001078:	b085      	sub	sp, #20
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	460b      	mov	r3, r1
 8001080:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001088:	887a      	ldrh	r2, [r7, #2]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4013      	ands	r3, r2
 800108e:	041a      	lsls	r2, r3, #16
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	43d9      	mvns	r1, r3
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	400b      	ands	r3, r1
 8001098:	431a      	orrs	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	619a      	str	r2, [r3, #24]
}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e267      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d075      	beq.n	80011b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ca:	4b88      	ldr	r3, [pc, #544]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	d00c      	beq.n	80010f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010d6:	4b85      	ldr	r3, [pc, #532]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010de:	2b08      	cmp	r3, #8
 80010e0:	d112      	bne.n	8001108 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010e2:	4b82      	ldr	r3, [pc, #520]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010ee:	d10b      	bne.n	8001108 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f0:	4b7e      	ldr	r3, [pc, #504]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d05b      	beq.n	80011b4 <HAL_RCC_OscConfig+0x108>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d157      	bne.n	80011b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e242      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001110:	d106      	bne.n	8001120 <HAL_RCC_OscConfig+0x74>
 8001112:	4b76      	ldr	r3, [pc, #472]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a75      	ldr	r2, [pc, #468]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 8001118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e01d      	b.n	800115c <HAL_RCC_OscConfig+0xb0>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001128:	d10c      	bne.n	8001144 <HAL_RCC_OscConfig+0x98>
 800112a:	4b70      	ldr	r3, [pc, #448]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a6f      	ldr	r2, [pc, #444]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 8001130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	4b6d      	ldr	r3, [pc, #436]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a6c      	ldr	r2, [pc, #432]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 800113c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	e00b      	b.n	800115c <HAL_RCC_OscConfig+0xb0>
 8001144:	4b69      	ldr	r3, [pc, #420]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a68      	ldr	r2, [pc, #416]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 800114a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	4b66      	ldr	r3, [pc, #408]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a65      	ldr	r2, [pc, #404]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 8001156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800115a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d013      	beq.n	800118c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fcfc 	bl	8000b60 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800116c:	f7ff fcf8 	bl	8000b60 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b64      	cmp	r3, #100	@ 0x64
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e207      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117e:	4b5b      	ldr	r3, [pc, #364]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f0      	beq.n	800116c <HAL_RCC_OscConfig+0xc0>
 800118a:	e014      	b.n	80011b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fce8 	bl	8000b60 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff fce4 	bl	8000b60 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	@ 0x64
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e1f3      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a6:	4b51      	ldr	r3, [pc, #324]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f0      	bne.n	8001194 <HAL_RCC_OscConfig+0xe8>
 80011b2:	e000      	b.n	80011b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d063      	beq.n	800128a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011c2:	4b4a      	ldr	r3, [pc, #296]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 030c 	and.w	r3, r3, #12
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d00b      	beq.n	80011e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ce:	4b47      	ldr	r3, [pc, #284]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	d11c      	bne.n	8001214 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011da:	4b44      	ldr	r3, [pc, #272]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d116      	bne.n	8001214 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e6:	4b41      	ldr	r3, [pc, #260]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d005      	beq.n	80011fe <HAL_RCC_OscConfig+0x152>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d001      	beq.n	80011fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e1c7      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fe:	4b3b      	ldr	r3, [pc, #236]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	4937      	ldr	r1, [pc, #220]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 800120e:	4313      	orrs	r3, r2
 8001210:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001212:	e03a      	b.n	800128a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d020      	beq.n	800125e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800121c:	4b34      	ldr	r3, [pc, #208]	@ (80012f0 <HAL_RCC_OscConfig+0x244>)
 800121e:	2201      	movs	r2, #1
 8001220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001222:	f7ff fc9d 	bl	8000b60 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800122a:	f7ff fc99 	bl	8000b60 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e1a8      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123c:	4b2b      	ldr	r3, [pc, #172]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0f0      	beq.n	800122a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001248:	4b28      	ldr	r3, [pc, #160]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4925      	ldr	r1, [pc, #148]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 8001258:	4313      	orrs	r3, r2
 800125a:	600b      	str	r3, [r1, #0]
 800125c:	e015      	b.n	800128a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800125e:	4b24      	ldr	r3, [pc, #144]	@ (80012f0 <HAL_RCC_OscConfig+0x244>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001264:	f7ff fc7c 	bl	8000b60 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800126c:	f7ff fc78 	bl	8000b60 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e187      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127e:	4b1b      	ldr	r3, [pc, #108]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	2b00      	cmp	r3, #0
 8001294:	d036      	beq.n	8001304 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d016      	beq.n	80012cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <HAL_RCC_OscConfig+0x248>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a4:	f7ff fc5c 	bl	8000b60 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ac:	f7ff fc58 	bl	8000b60 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e167      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012be:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <HAL_RCC_OscConfig+0x240>)
 80012c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f0      	beq.n	80012ac <HAL_RCC_OscConfig+0x200>
 80012ca:	e01b      	b.n	8001304 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012cc:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <HAL_RCC_OscConfig+0x248>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d2:	f7ff fc45 	bl	8000b60 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d8:	e00e      	b.n	80012f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012da:	f7ff fc41 	bl	8000b60 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d907      	bls.n	80012f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e150      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
 80012ec:	40023800 	.word	0x40023800
 80012f0:	42470000 	.word	0x42470000
 80012f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f8:	4b88      	ldr	r3, [pc, #544]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 80012fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1ea      	bne.n	80012da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 8097 	beq.w	8001440 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001316:	4b81      	ldr	r3, [pc, #516]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10f      	bne.n	8001342 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	4b7d      	ldr	r3, [pc, #500]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132a:	4a7c      	ldr	r2, [pc, #496]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001330:	6413      	str	r3, [r2, #64]	@ 0x40
 8001332:	4b7a      	ldr	r3, [pc, #488]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800133e:	2301      	movs	r3, #1
 8001340:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001342:	4b77      	ldr	r3, [pc, #476]	@ (8001520 <HAL_RCC_OscConfig+0x474>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800134a:	2b00      	cmp	r3, #0
 800134c:	d118      	bne.n	8001380 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800134e:	4b74      	ldr	r3, [pc, #464]	@ (8001520 <HAL_RCC_OscConfig+0x474>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a73      	ldr	r2, [pc, #460]	@ (8001520 <HAL_RCC_OscConfig+0x474>)
 8001354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800135a:	f7ff fc01 	bl	8000b60 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001362:	f7ff fbfd 	bl	8000b60 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e10c      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001374:	4b6a      	ldr	r3, [pc, #424]	@ (8001520 <HAL_RCC_OscConfig+0x474>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d106      	bne.n	8001396 <HAL_RCC_OscConfig+0x2ea>
 8001388:	4b64      	ldr	r3, [pc, #400]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 800138a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800138c:	4a63      	ldr	r2, [pc, #396]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6713      	str	r3, [r2, #112]	@ 0x70
 8001394:	e01c      	b.n	80013d0 <HAL_RCC_OscConfig+0x324>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	2b05      	cmp	r3, #5
 800139c:	d10c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x30c>
 800139e:	4b5f      	ldr	r3, [pc, #380]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 80013a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a2:	4a5e      	ldr	r2, [pc, #376]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80013aa:	4b5c      	ldr	r3, [pc, #368]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 80013ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ae:	4a5b      	ldr	r2, [pc, #364]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80013b6:	e00b      	b.n	80013d0 <HAL_RCC_OscConfig+0x324>
 80013b8:	4b58      	ldr	r3, [pc, #352]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 80013ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013bc:	4a57      	ldr	r2, [pc, #348]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 80013be:	f023 0301 	bic.w	r3, r3, #1
 80013c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80013c4:	4b55      	ldr	r3, [pc, #340]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 80013c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c8:	4a54      	ldr	r2, [pc, #336]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 80013ca:	f023 0304 	bic.w	r3, r3, #4
 80013ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d015      	beq.n	8001404 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d8:	f7ff fbc2 	bl	8000b60 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013de:	e00a      	b.n	80013f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e0:	f7ff fbbe 	bl	8000b60 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e0cb      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f6:	4b49      	ldr	r3, [pc, #292]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 80013f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0ee      	beq.n	80013e0 <HAL_RCC_OscConfig+0x334>
 8001402:	e014      	b.n	800142e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001404:	f7ff fbac 	bl	8000b60 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140a:	e00a      	b.n	8001422 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800140c:	f7ff fba8 	bl	8000b60 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800141a:	4293      	cmp	r3, r2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e0b5      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001422:	4b3e      	ldr	r3, [pc, #248]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 8001424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1ee      	bne.n	800140c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800142e:	7dfb      	ldrb	r3, [r7, #23]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d105      	bne.n	8001440 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001434:	4b39      	ldr	r3, [pc, #228]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001438:	4a38      	ldr	r2, [pc, #224]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 800143a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800143e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 80a1 	beq.w	800158c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800144a:	4b34      	ldr	r3, [pc, #208]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b08      	cmp	r3, #8
 8001454:	d05c      	beq.n	8001510 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d141      	bne.n	80014e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145e:	4b31      	ldr	r3, [pc, #196]	@ (8001524 <HAL_RCC_OscConfig+0x478>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fb7c 	bl	8000b60 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800146c:	f7ff fb78 	bl	8000b60 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e087      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800147e:	4b27      	ldr	r3, [pc, #156]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69da      	ldr	r2, [r3, #28]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001498:	019b      	lsls	r3, r3, #6
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a0:	085b      	lsrs	r3, r3, #1
 80014a2:	3b01      	subs	r3, #1
 80014a4:	041b      	lsls	r3, r3, #16
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ac:	061b      	lsls	r3, r3, #24
 80014ae:	491b      	ldr	r1, [pc, #108]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <HAL_RCC_OscConfig+0x478>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ba:	f7ff fb51 	bl	8000b60 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c2:	f7ff fb4d 	bl	8000b60 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e05c      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d4:	4b11      	ldr	r3, [pc, #68]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x416>
 80014e0:	e054      	b.n	800158c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e2:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <HAL_RCC_OscConfig+0x478>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fb3a 	bl	8000b60 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f0:	f7ff fb36 	bl	8000b60 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e045      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001502:	4b06      	ldr	r3, [pc, #24]	@ (800151c <HAL_RCC_OscConfig+0x470>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x444>
 800150e:	e03d      	b.n	800158c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d107      	bne.n	8001528 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e038      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
 800151c:	40023800 	.word	0x40023800
 8001520:	40007000 	.word	0x40007000
 8001524:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001528:	4b1b      	ldr	r3, [pc, #108]	@ (8001598 <HAL_RCC_OscConfig+0x4ec>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d028      	beq.n	8001588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001540:	429a      	cmp	r2, r3
 8001542:	d121      	bne.n	8001588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154e:	429a      	cmp	r2, r3
 8001550:	d11a      	bne.n	8001588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001558:	4013      	ands	r3, r2
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800155e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001560:	4293      	cmp	r3, r2
 8001562:	d111      	bne.n	8001588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156e:	085b      	lsrs	r3, r3, #1
 8001570:	3b01      	subs	r3, #1
 8001572:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001574:	429a      	cmp	r2, r3
 8001576:	d107      	bne.n	8001588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001582:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001584:	429a      	cmp	r2, r3
 8001586:	d001      	beq.n	800158c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800

0800159c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0cc      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015b0:	4b68      	ldr	r3, [pc, #416]	@ (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d90c      	bls.n	80015d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015be:	4b65      	ldr	r3, [pc, #404]	@ (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c6:	4b63      	ldr	r3, [pc, #396]	@ (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d001      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e0b8      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d020      	beq.n	8001626 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f0:	4b59      	ldr	r3, [pc, #356]	@ (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	4a58      	ldr	r2, [pc, #352]	@ (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001608:	4b53      	ldr	r3, [pc, #332]	@ (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	4a52      	ldr	r2, [pc, #328]	@ (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001612:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001614:	4b50      	ldr	r3, [pc, #320]	@ (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	494d      	ldr	r1, [pc, #308]	@ (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	4313      	orrs	r3, r2
 8001624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d044      	beq.n	80016bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d107      	bne.n	800164a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	4b47      	ldr	r3, [pc, #284]	@ (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d119      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e07f      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b02      	cmp	r3, #2
 8001650:	d003      	beq.n	800165a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001656:	2b03      	cmp	r3, #3
 8001658:	d107      	bne.n	800166a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165a:	4b3f      	ldr	r3, [pc, #252]	@ (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d109      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e06f      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166a:	4b3b      	ldr	r3, [pc, #236]	@ (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e067      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800167a:	4b37      	ldr	r3, [pc, #220]	@ (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f023 0203 	bic.w	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4934      	ldr	r1, [pc, #208]	@ (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	4313      	orrs	r3, r2
 800168a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800168c:	f7ff fa68 	bl	8000b60 <HAL_GetTick>
 8001690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001692:	e00a      	b.n	80016aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001694:	f7ff fa64 	bl	8000b60 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e04f      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 020c 	and.w	r2, r3, #12
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d1eb      	bne.n	8001694 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016bc:	4b25      	ldr	r3, [pc, #148]	@ (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d20c      	bcs.n	80016e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ca:	4b22      	ldr	r3, [pc, #136]	@ (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d2:	4b20      	ldr	r3, [pc, #128]	@ (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e032      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f0:	4b19      	ldr	r3, [pc, #100]	@ (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4916      	ldr	r1, [pc, #88]	@ (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d009      	beq.n	8001722 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800170e:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	490e      	ldr	r1, [pc, #56]	@ (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	4313      	orrs	r3, r2
 8001720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001722:	f000 f821 	bl	8001768 <HAL_RCC_GetSysClockFreq>
 8001726:	4602      	mov	r2, r0
 8001728:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	490a      	ldr	r1, [pc, #40]	@ (800175c <HAL_RCC_ClockConfig+0x1c0>)
 8001734:	5ccb      	ldrb	r3, [r1, r3]
 8001736:	fa22 f303 	lsr.w	r3, r2, r3
 800173a:	4a09      	ldr	r2, [pc, #36]	@ (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800173c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800173e:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <HAL_RCC_ClockConfig+0x1c8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff f902 	bl	800094c <HAL_InitTick>

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023c00 	.word	0x40023c00
 8001758:	40023800 	.word	0x40023800
 800175c:	08003c10 	.word	0x08003c10
 8001760:	20000000 	.word	0x20000000
 8001764:	20000004 	.word	0x20000004

08001768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800176c:	b094      	sub	sp, #80	@ 0x50
 800176e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	647b      	str	r3, [r7, #68]	@ 0x44
 8001774:	2300      	movs	r3, #0
 8001776:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001778:	2300      	movs	r3, #0
 800177a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001780:	4b79      	ldr	r3, [pc, #484]	@ (8001968 <HAL_RCC_GetSysClockFreq+0x200>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 030c 	and.w	r3, r3, #12
 8001788:	2b08      	cmp	r3, #8
 800178a:	d00d      	beq.n	80017a8 <HAL_RCC_GetSysClockFreq+0x40>
 800178c:	2b08      	cmp	r3, #8
 800178e:	f200 80e1 	bhi.w	8001954 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001792:	2b00      	cmp	r3, #0
 8001794:	d002      	beq.n	800179c <HAL_RCC_GetSysClockFreq+0x34>
 8001796:	2b04      	cmp	r3, #4
 8001798:	d003      	beq.n	80017a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800179a:	e0db      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800179c:	4b73      	ldr	r3, [pc, #460]	@ (800196c <HAL_RCC_GetSysClockFreq+0x204>)
 800179e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80017a0:	e0db      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017a2:	4b73      	ldr	r3, [pc, #460]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x208>)
 80017a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017a6:	e0d8      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017a8:	4b6f      	ldr	r3, [pc, #444]	@ (8001968 <HAL_RCC_GetSysClockFreq+0x200>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001968 <HAL_RCC_GetSysClockFreq+0x200>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d063      	beq.n	8001886 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017be:	4b6a      	ldr	r3, [pc, #424]	@ (8001968 <HAL_RCC_GetSysClockFreq+0x200>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	099b      	lsrs	r3, r3, #6
 80017c4:	2200      	movs	r2, #0
 80017c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80017d2:	2300      	movs	r3, #0
 80017d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80017d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017da:	4622      	mov	r2, r4
 80017dc:	462b      	mov	r3, r5
 80017de:	f04f 0000 	mov.w	r0, #0
 80017e2:	f04f 0100 	mov.w	r1, #0
 80017e6:	0159      	lsls	r1, r3, #5
 80017e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017ec:	0150      	lsls	r0, r2, #5
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4621      	mov	r1, r4
 80017f4:	1a51      	subs	r1, r2, r1
 80017f6:	6139      	str	r1, [r7, #16]
 80017f8:	4629      	mov	r1, r5
 80017fa:	eb63 0301 	sbc.w	r3, r3, r1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800180c:	4659      	mov	r1, fp
 800180e:	018b      	lsls	r3, r1, #6
 8001810:	4651      	mov	r1, sl
 8001812:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001816:	4651      	mov	r1, sl
 8001818:	018a      	lsls	r2, r1, #6
 800181a:	4651      	mov	r1, sl
 800181c:	ebb2 0801 	subs.w	r8, r2, r1
 8001820:	4659      	mov	r1, fp
 8001822:	eb63 0901 	sbc.w	r9, r3, r1
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001832:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001836:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800183a:	4690      	mov	r8, r2
 800183c:	4699      	mov	r9, r3
 800183e:	4623      	mov	r3, r4
 8001840:	eb18 0303 	adds.w	r3, r8, r3
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	462b      	mov	r3, r5
 8001848:	eb49 0303 	adc.w	r3, r9, r3
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800185a:	4629      	mov	r1, r5
 800185c:	024b      	lsls	r3, r1, #9
 800185e:	4621      	mov	r1, r4
 8001860:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001864:	4621      	mov	r1, r4
 8001866:	024a      	lsls	r2, r1, #9
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800186e:	2200      	movs	r2, #0
 8001870:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001872:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001874:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001878:	f7fe fcb2 	bl	80001e0 <__aeabi_uldivmod>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4613      	mov	r3, r2
 8001882:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001884:	e058      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001886:	4b38      	ldr	r3, [pc, #224]	@ (8001968 <HAL_RCC_GetSysClockFreq+0x200>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	099b      	lsrs	r3, r3, #6
 800188c:	2200      	movs	r2, #0
 800188e:	4618      	mov	r0, r3
 8001890:	4611      	mov	r1, r2
 8001892:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001896:	623b      	str	r3, [r7, #32]
 8001898:	2300      	movs	r3, #0
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
 800189c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018a0:	4642      	mov	r2, r8
 80018a2:	464b      	mov	r3, r9
 80018a4:	f04f 0000 	mov.w	r0, #0
 80018a8:	f04f 0100 	mov.w	r1, #0
 80018ac:	0159      	lsls	r1, r3, #5
 80018ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018b2:	0150      	lsls	r0, r2, #5
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4641      	mov	r1, r8
 80018ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80018be:	4649      	mov	r1, r9
 80018c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018d8:	ebb2 040a 	subs.w	r4, r2, sl
 80018dc:	eb63 050b 	sbc.w	r5, r3, fp
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	00eb      	lsls	r3, r5, #3
 80018ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018ee:	00e2      	lsls	r2, r4, #3
 80018f0:	4614      	mov	r4, r2
 80018f2:	461d      	mov	r5, r3
 80018f4:	4643      	mov	r3, r8
 80018f6:	18e3      	adds	r3, r4, r3
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	464b      	mov	r3, r9
 80018fc:	eb45 0303 	adc.w	r3, r5, r3
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800190e:	4629      	mov	r1, r5
 8001910:	028b      	lsls	r3, r1, #10
 8001912:	4621      	mov	r1, r4
 8001914:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001918:	4621      	mov	r1, r4
 800191a:	028a      	lsls	r2, r1, #10
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001922:	2200      	movs	r2, #0
 8001924:	61bb      	str	r3, [r7, #24]
 8001926:	61fa      	str	r2, [r7, #28]
 8001928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800192c:	f7fe fc58 	bl	80001e0 <__aeabi_uldivmod>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4613      	mov	r3, r2
 8001936:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001938:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <HAL_RCC_GetSysClockFreq+0x200>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	0c1b      	lsrs	r3, r3, #16
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	3301      	adds	r3, #1
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001948:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800194a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800194c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001950:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001952:	e002      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001954:	4b05      	ldr	r3, [pc, #20]	@ (800196c <HAL_RCC_GetSysClockFreq+0x204>)
 8001956:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800195a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800195c:	4618      	mov	r0, r3
 800195e:	3750      	adds	r7, #80	@ 0x50
 8001960:	46bd      	mov	sp, r7
 8001962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800
 800196c:	00f42400 	.word	0x00f42400
 8001970:	007a1200 	.word	0x007a1200

08001974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001978:	4b03      	ldr	r3, [pc, #12]	@ (8001988 <HAL_RCC_GetHCLKFreq+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000000 	.word	0x20000000

0800198c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001990:	f7ff fff0 	bl	8001974 <HAL_RCC_GetHCLKFreq>
 8001994:	4602      	mov	r2, r0
 8001996:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	0a9b      	lsrs	r3, r3, #10
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	4903      	ldr	r1, [pc, #12]	@ (80019b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019a2:	5ccb      	ldrb	r3, [r1, r3]
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40023800 	.word	0x40023800
 80019b0:	08003c20 	.word	0x08003c20

080019b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019b8:	f7ff ffdc 	bl	8001974 <HAL_RCC_GetHCLKFreq>
 80019bc:	4602      	mov	r2, r0
 80019be:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	0b5b      	lsrs	r3, r3, #13
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	4903      	ldr	r1, [pc, #12]	@ (80019d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ca:	5ccb      	ldrb	r3, [r1, r3]
 80019cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40023800 	.word	0x40023800
 80019d8:	08003c20 	.word	0x08003c20

080019dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	220f      	movs	r2, #15
 80019ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019ec:	4b12      	ldr	r3, [pc, #72]	@ (8001a38 <HAL_RCC_GetClockConfig+0x5c>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 0203 	and.w	r2, r3, #3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a38 <HAL_RCC_GetClockConfig+0x5c>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a04:	4b0c      	ldr	r3, [pc, #48]	@ (8001a38 <HAL_RCC_GetClockConfig+0x5c>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a10:	4b09      	ldr	r3, [pc, #36]	@ (8001a38 <HAL_RCC_GetClockConfig+0x5c>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	08db      	lsrs	r3, r3, #3
 8001a16:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a1e:	4b07      	ldr	r3, [pc, #28]	@ (8001a3c <HAL_RCC_GetClockConfig+0x60>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0207 	and.w	r2, r3, #7
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	601a      	str	r2, [r3, #0]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40023c00 	.word	0x40023c00

08001a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e041      	b.n	8001ad6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d106      	bne.n	8001a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f839 	bl	8001ade <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4610      	mov	r0, r2
 8001a80:	f000 f9b2 	bl	8001de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d001      	beq.n	8001b0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e044      	b.n	8001b96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a1e      	ldr	r2, [pc, #120]	@ (8001ba4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d018      	beq.n	8001b60 <HAL_TIM_Base_Start_IT+0x6c>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b36:	d013      	beq.n	8001b60 <HAL_TIM_Base_Start_IT+0x6c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ba8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d00e      	beq.n	8001b60 <HAL_TIM_Base_Start_IT+0x6c>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a19      	ldr	r2, [pc, #100]	@ (8001bac <HAL_TIM_Base_Start_IT+0xb8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d009      	beq.n	8001b60 <HAL_TIM_Base_Start_IT+0x6c>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a17      	ldr	r2, [pc, #92]	@ (8001bb0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d004      	beq.n	8001b60 <HAL_TIM_Base_Start_IT+0x6c>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a16      	ldr	r2, [pc, #88]	@ (8001bb4 <HAL_TIM_Base_Start_IT+0xc0>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d111      	bne.n	8001b84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d010      	beq.n	8001b94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0201 	orr.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b82:	e007      	b.n	8001b94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0201 	orr.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	40000400 	.word	0x40000400
 8001bac:	40000800 	.word	0x40000800
 8001bb0:	40000c00 	.word	0x40000c00
 8001bb4:	40014000 	.word	0x40014000

08001bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d020      	beq.n	8001c1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d01b      	beq.n	8001c1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f06f 0202 	mvn.w	r2, #2
 8001bec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f8d2 	bl	8001dac <HAL_TIM_IC_CaptureCallback>
 8001c08:	e005      	b.n	8001c16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f8c4 	bl	8001d98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f8d5 	bl	8001dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d020      	beq.n	8001c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d01b      	beq.n	8001c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f06f 0204 	mvn.w	r2, #4
 8001c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f8ac 	bl	8001dac <HAL_TIM_IC_CaptureCallback>
 8001c54:	e005      	b.n	8001c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f89e 	bl	8001d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f8af 	bl	8001dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d020      	beq.n	8001cb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d01b      	beq.n	8001cb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f06f 0208 	mvn.w	r2, #8
 8001c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2204      	movs	r2, #4
 8001c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f886 	bl	8001dac <HAL_TIM_IC_CaptureCallback>
 8001ca0:	e005      	b.n	8001cae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f878 	bl	8001d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f889 	bl	8001dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d020      	beq.n	8001d00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f003 0310 	and.w	r3, r3, #16
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d01b      	beq.n	8001d00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0210 	mvn.w	r2, #16
 8001cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f860 	bl	8001dac <HAL_TIM_IC_CaptureCallback>
 8001cec:	e005      	b.n	8001cfa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f852 	bl	8001d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f863 	bl	8001dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00c      	beq.n	8001d24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d007      	beq.n	8001d24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f06f 0201 	mvn.w	r2, #1
 8001d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7fe fd88 	bl	8000834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00c      	beq.n	8001d48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d007      	beq.n	8001d48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f8e6 	bl	8001f14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00c      	beq.n	8001d6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d007      	beq.n	8001d6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f834 	bl	8001dd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00c      	beq.n	8001d90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f003 0320 	and.w	r3, r3, #32
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f06f 0220 	mvn.w	r2, #32
 8001d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f8b8 	bl	8001f00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a3a      	ldr	r2, [pc, #232]	@ (8001ee4 <TIM_Base_SetConfig+0xfc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d00f      	beq.n	8001e20 <TIM_Base_SetConfig+0x38>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e06:	d00b      	beq.n	8001e20 <TIM_Base_SetConfig+0x38>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a37      	ldr	r2, [pc, #220]	@ (8001ee8 <TIM_Base_SetConfig+0x100>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d007      	beq.n	8001e20 <TIM_Base_SetConfig+0x38>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a36      	ldr	r2, [pc, #216]	@ (8001eec <TIM_Base_SetConfig+0x104>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d003      	beq.n	8001e20 <TIM_Base_SetConfig+0x38>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a35      	ldr	r2, [pc, #212]	@ (8001ef0 <TIM_Base_SetConfig+0x108>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d108      	bne.n	8001e32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a2b      	ldr	r2, [pc, #172]	@ (8001ee4 <TIM_Base_SetConfig+0xfc>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d01b      	beq.n	8001e72 <TIM_Base_SetConfig+0x8a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e40:	d017      	beq.n	8001e72 <TIM_Base_SetConfig+0x8a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a28      	ldr	r2, [pc, #160]	@ (8001ee8 <TIM_Base_SetConfig+0x100>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d013      	beq.n	8001e72 <TIM_Base_SetConfig+0x8a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a27      	ldr	r2, [pc, #156]	@ (8001eec <TIM_Base_SetConfig+0x104>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00f      	beq.n	8001e72 <TIM_Base_SetConfig+0x8a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a26      	ldr	r2, [pc, #152]	@ (8001ef0 <TIM_Base_SetConfig+0x108>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00b      	beq.n	8001e72 <TIM_Base_SetConfig+0x8a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a25      	ldr	r2, [pc, #148]	@ (8001ef4 <TIM_Base_SetConfig+0x10c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d007      	beq.n	8001e72 <TIM_Base_SetConfig+0x8a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a24      	ldr	r2, [pc, #144]	@ (8001ef8 <TIM_Base_SetConfig+0x110>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d003      	beq.n	8001e72 <TIM_Base_SetConfig+0x8a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a23      	ldr	r2, [pc, #140]	@ (8001efc <TIM_Base_SetConfig+0x114>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d108      	bne.n	8001e84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee4 <TIM_Base_SetConfig+0xfc>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d103      	bne.n	8001eb8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d105      	bne.n	8001ed6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	f023 0201 	bic.w	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	611a      	str	r2, [r3, #16]
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40000800 	.word	0x40000800
 8001ef0:	40000c00 	.word	0x40000c00
 8001ef4:	40014000 	.word	0x40014000
 8001ef8:	40014400 	.word	0x40014400
 8001efc:	40014800 	.word	0x40014800

08001f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e042      	b.n	8001fc0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d106      	bne.n	8001f54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7fe fcb4 	bl	80008bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2224      	movs	r2, #36	@ 0x24
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f82b 	bl	8001fc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695a      	ldr	r2, [r3, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001fa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fcc:	b0c0      	sub	sp, #256	@ 0x100
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fe4:	68d9      	ldr	r1, [r3, #12]
 8001fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	ea40 0301 	orr.w	r3, r0, r1
 8001ff0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	431a      	orrs	r2, r3
 8002000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	431a      	orrs	r2, r3
 8002008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002020:	f021 010c 	bic.w	r1, r1, #12
 8002024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800202e:	430b      	orrs	r3, r1
 8002030:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800203e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002042:	6999      	ldr	r1, [r3, #24]
 8002044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	ea40 0301 	orr.w	r3, r0, r1
 800204e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	4b8f      	ldr	r3, [pc, #572]	@ (8002294 <UART_SetConfig+0x2cc>)
 8002058:	429a      	cmp	r2, r3
 800205a:	d005      	beq.n	8002068 <UART_SetConfig+0xa0>
 800205c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	4b8d      	ldr	r3, [pc, #564]	@ (8002298 <UART_SetConfig+0x2d0>)
 8002064:	429a      	cmp	r2, r3
 8002066:	d104      	bne.n	8002072 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002068:	f7ff fca4 	bl	80019b4 <HAL_RCC_GetPCLK2Freq>
 800206c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002070:	e003      	b.n	800207a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002072:	f7ff fc8b 	bl	800198c <HAL_RCC_GetPCLK1Freq>
 8002076:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800207a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002084:	f040 810c 	bne.w	80022a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800208c:	2200      	movs	r2, #0
 800208e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002092:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002096:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800209a:	4622      	mov	r2, r4
 800209c:	462b      	mov	r3, r5
 800209e:	1891      	adds	r1, r2, r2
 80020a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80020a2:	415b      	adcs	r3, r3
 80020a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80020a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80020aa:	4621      	mov	r1, r4
 80020ac:	eb12 0801 	adds.w	r8, r2, r1
 80020b0:	4629      	mov	r1, r5
 80020b2:	eb43 0901 	adc.w	r9, r3, r1
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020ca:	4690      	mov	r8, r2
 80020cc:	4699      	mov	r9, r3
 80020ce:	4623      	mov	r3, r4
 80020d0:	eb18 0303 	adds.w	r3, r8, r3
 80020d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80020d8:	462b      	mov	r3, r5
 80020da:	eb49 0303 	adc.w	r3, r9, r3
 80020de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80020e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80020ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80020f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80020f6:	460b      	mov	r3, r1
 80020f8:	18db      	adds	r3, r3, r3
 80020fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80020fc:	4613      	mov	r3, r2
 80020fe:	eb42 0303 	adc.w	r3, r2, r3
 8002102:	657b      	str	r3, [r7, #84]	@ 0x54
 8002104:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002108:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800210c:	f7fe f868 	bl	80001e0 <__aeabi_uldivmod>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4b61      	ldr	r3, [pc, #388]	@ (800229c <UART_SetConfig+0x2d4>)
 8002116:	fba3 2302 	umull	r2, r3, r3, r2
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	011c      	lsls	r4, r3, #4
 800211e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002122:	2200      	movs	r2, #0
 8002124:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002128:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800212c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002130:	4642      	mov	r2, r8
 8002132:	464b      	mov	r3, r9
 8002134:	1891      	adds	r1, r2, r2
 8002136:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002138:	415b      	adcs	r3, r3
 800213a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800213c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002140:	4641      	mov	r1, r8
 8002142:	eb12 0a01 	adds.w	sl, r2, r1
 8002146:	4649      	mov	r1, r9
 8002148:	eb43 0b01 	adc.w	fp, r3, r1
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002158:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800215c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002160:	4692      	mov	sl, r2
 8002162:	469b      	mov	fp, r3
 8002164:	4643      	mov	r3, r8
 8002166:	eb1a 0303 	adds.w	r3, sl, r3
 800216a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800216e:	464b      	mov	r3, r9
 8002170:	eb4b 0303 	adc.w	r3, fp, r3
 8002174:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002184:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002188:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800218c:	460b      	mov	r3, r1
 800218e:	18db      	adds	r3, r3, r3
 8002190:	643b      	str	r3, [r7, #64]	@ 0x40
 8002192:	4613      	mov	r3, r2
 8002194:	eb42 0303 	adc.w	r3, r2, r3
 8002198:	647b      	str	r3, [r7, #68]	@ 0x44
 800219a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800219e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80021a2:	f7fe f81d 	bl	80001e0 <__aeabi_uldivmod>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4611      	mov	r1, r2
 80021ac:	4b3b      	ldr	r3, [pc, #236]	@ (800229c <UART_SetConfig+0x2d4>)
 80021ae:	fba3 2301 	umull	r2, r3, r3, r1
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	2264      	movs	r2, #100	@ 0x64
 80021b6:	fb02 f303 	mul.w	r3, r2, r3
 80021ba:	1acb      	subs	r3, r1, r3
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80021c2:	4b36      	ldr	r3, [pc, #216]	@ (800229c <UART_SetConfig+0x2d4>)
 80021c4:	fba3 2302 	umull	r2, r3, r3, r2
 80021c8:	095b      	lsrs	r3, r3, #5
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80021d0:	441c      	add	r4, r3
 80021d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021d6:	2200      	movs	r2, #0
 80021d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80021dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80021e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80021e4:	4642      	mov	r2, r8
 80021e6:	464b      	mov	r3, r9
 80021e8:	1891      	adds	r1, r2, r2
 80021ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80021ec:	415b      	adcs	r3, r3
 80021ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80021f4:	4641      	mov	r1, r8
 80021f6:	1851      	adds	r1, r2, r1
 80021f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80021fa:	4649      	mov	r1, r9
 80021fc:	414b      	adcs	r3, r1
 80021fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800220c:	4659      	mov	r1, fp
 800220e:	00cb      	lsls	r3, r1, #3
 8002210:	4651      	mov	r1, sl
 8002212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002216:	4651      	mov	r1, sl
 8002218:	00ca      	lsls	r2, r1, #3
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	4603      	mov	r3, r0
 8002220:	4642      	mov	r2, r8
 8002222:	189b      	adds	r3, r3, r2
 8002224:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002228:	464b      	mov	r3, r9
 800222a:	460a      	mov	r2, r1
 800222c:	eb42 0303 	adc.w	r3, r2, r3
 8002230:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002240:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002244:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002248:	460b      	mov	r3, r1
 800224a:	18db      	adds	r3, r3, r3
 800224c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800224e:	4613      	mov	r3, r2
 8002250:	eb42 0303 	adc.w	r3, r2, r3
 8002254:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002256:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800225a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800225e:	f7fd ffbf 	bl	80001e0 <__aeabi_uldivmod>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4b0d      	ldr	r3, [pc, #52]	@ (800229c <UART_SetConfig+0x2d4>)
 8002268:	fba3 1302 	umull	r1, r3, r3, r2
 800226c:	095b      	lsrs	r3, r3, #5
 800226e:	2164      	movs	r1, #100	@ 0x64
 8002270:	fb01 f303 	mul.w	r3, r1, r3
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	3332      	adds	r3, #50	@ 0x32
 800227a:	4a08      	ldr	r2, [pc, #32]	@ (800229c <UART_SetConfig+0x2d4>)
 800227c:	fba2 2303 	umull	r2, r3, r2, r3
 8002280:	095b      	lsrs	r3, r3, #5
 8002282:	f003 0207 	and.w	r2, r3, #7
 8002286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4422      	add	r2, r4
 800228e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002290:	e106      	b.n	80024a0 <UART_SetConfig+0x4d8>
 8002292:	bf00      	nop
 8002294:	40011000 	.word	0x40011000
 8002298:	40011400 	.word	0x40011400
 800229c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022a4:	2200      	movs	r2, #0
 80022a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80022aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80022ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80022b2:	4642      	mov	r2, r8
 80022b4:	464b      	mov	r3, r9
 80022b6:	1891      	adds	r1, r2, r2
 80022b8:	6239      	str	r1, [r7, #32]
 80022ba:	415b      	adcs	r3, r3
 80022bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80022be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022c2:	4641      	mov	r1, r8
 80022c4:	1854      	adds	r4, r2, r1
 80022c6:	4649      	mov	r1, r9
 80022c8:	eb43 0501 	adc.w	r5, r3, r1
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	00eb      	lsls	r3, r5, #3
 80022d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022da:	00e2      	lsls	r2, r4, #3
 80022dc:	4614      	mov	r4, r2
 80022de:	461d      	mov	r5, r3
 80022e0:	4643      	mov	r3, r8
 80022e2:	18e3      	adds	r3, r4, r3
 80022e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80022e8:	464b      	mov	r3, r9
 80022ea:	eb45 0303 	adc.w	r3, r5, r3
 80022ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80022f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800230e:	4629      	mov	r1, r5
 8002310:	008b      	lsls	r3, r1, #2
 8002312:	4621      	mov	r1, r4
 8002314:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002318:	4621      	mov	r1, r4
 800231a:	008a      	lsls	r2, r1, #2
 800231c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002320:	f7fd ff5e 	bl	80001e0 <__aeabi_uldivmod>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4b60      	ldr	r3, [pc, #384]	@ (80024ac <UART_SetConfig+0x4e4>)
 800232a:	fba3 2302 	umull	r2, r3, r3, r2
 800232e:	095b      	lsrs	r3, r3, #5
 8002330:	011c      	lsls	r4, r3, #4
 8002332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002336:	2200      	movs	r2, #0
 8002338:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800233c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002340:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002344:	4642      	mov	r2, r8
 8002346:	464b      	mov	r3, r9
 8002348:	1891      	adds	r1, r2, r2
 800234a:	61b9      	str	r1, [r7, #24]
 800234c:	415b      	adcs	r3, r3
 800234e:	61fb      	str	r3, [r7, #28]
 8002350:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002354:	4641      	mov	r1, r8
 8002356:	1851      	adds	r1, r2, r1
 8002358:	6139      	str	r1, [r7, #16]
 800235a:	4649      	mov	r1, r9
 800235c:	414b      	adcs	r3, r1
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800236c:	4659      	mov	r1, fp
 800236e:	00cb      	lsls	r3, r1, #3
 8002370:	4651      	mov	r1, sl
 8002372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002376:	4651      	mov	r1, sl
 8002378:	00ca      	lsls	r2, r1, #3
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	4603      	mov	r3, r0
 8002380:	4642      	mov	r2, r8
 8002382:	189b      	adds	r3, r3, r2
 8002384:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002388:	464b      	mov	r3, r9
 800238a:	460a      	mov	r2, r1
 800238c:	eb42 0303 	adc.w	r3, r2, r3
 8002390:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800239e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80023ac:	4649      	mov	r1, r9
 80023ae:	008b      	lsls	r3, r1, #2
 80023b0:	4641      	mov	r1, r8
 80023b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023b6:	4641      	mov	r1, r8
 80023b8:	008a      	lsls	r2, r1, #2
 80023ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80023be:	f7fd ff0f 	bl	80001e0 <__aeabi_uldivmod>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4611      	mov	r1, r2
 80023c8:	4b38      	ldr	r3, [pc, #224]	@ (80024ac <UART_SetConfig+0x4e4>)
 80023ca:	fba3 2301 	umull	r2, r3, r3, r1
 80023ce:	095b      	lsrs	r3, r3, #5
 80023d0:	2264      	movs	r2, #100	@ 0x64
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
 80023d6:	1acb      	subs	r3, r1, r3
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	3332      	adds	r3, #50	@ 0x32
 80023dc:	4a33      	ldr	r2, [pc, #204]	@ (80024ac <UART_SetConfig+0x4e4>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023e8:	441c      	add	r4, r3
 80023ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023ee:	2200      	movs	r2, #0
 80023f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80023f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80023f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80023f8:	4642      	mov	r2, r8
 80023fa:	464b      	mov	r3, r9
 80023fc:	1891      	adds	r1, r2, r2
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	415b      	adcs	r3, r3
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002408:	4641      	mov	r1, r8
 800240a:	1851      	adds	r1, r2, r1
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	4649      	mov	r1, r9
 8002410:	414b      	adcs	r3, r1
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	f04f 0300 	mov.w	r3, #0
 800241c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002420:	4659      	mov	r1, fp
 8002422:	00cb      	lsls	r3, r1, #3
 8002424:	4651      	mov	r1, sl
 8002426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800242a:	4651      	mov	r1, sl
 800242c:	00ca      	lsls	r2, r1, #3
 800242e:	4610      	mov	r0, r2
 8002430:	4619      	mov	r1, r3
 8002432:	4603      	mov	r3, r0
 8002434:	4642      	mov	r2, r8
 8002436:	189b      	adds	r3, r3, r2
 8002438:	66bb      	str	r3, [r7, #104]	@ 0x68
 800243a:	464b      	mov	r3, r9
 800243c:	460a      	mov	r2, r1
 800243e:	eb42 0303 	adc.w	r3, r2, r3
 8002442:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	663b      	str	r3, [r7, #96]	@ 0x60
 800244e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800245c:	4649      	mov	r1, r9
 800245e:	008b      	lsls	r3, r1, #2
 8002460:	4641      	mov	r1, r8
 8002462:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002466:	4641      	mov	r1, r8
 8002468:	008a      	lsls	r2, r1, #2
 800246a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800246e:	f7fd feb7 	bl	80001e0 <__aeabi_uldivmod>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4b0d      	ldr	r3, [pc, #52]	@ (80024ac <UART_SetConfig+0x4e4>)
 8002478:	fba3 1302 	umull	r1, r3, r3, r2
 800247c:	095b      	lsrs	r3, r3, #5
 800247e:	2164      	movs	r1, #100	@ 0x64
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	3332      	adds	r3, #50	@ 0x32
 800248a:	4a08      	ldr	r2, [pc, #32]	@ (80024ac <UART_SetConfig+0x4e4>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	f003 020f 	and.w	r2, r3, #15
 8002496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4422      	add	r2, r4
 800249e:	609a      	str	r2, [r3, #8]
}
 80024a0:	bf00      	nop
 80024a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80024a6:	46bd      	mov	sp, r7
 80024a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ac:	51eb851f 	.word	0x51eb851f

080024b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80024be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024c2:	2b84      	cmp	r3, #132	@ 0x84
 80024c4:	d005      	beq.n	80024d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80024c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4413      	add	r3, r2
 80024ce:	3303      	adds	r3, #3
 80024d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80024d2:	68fb      	ldr	r3, [r7, #12]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80024e4:	f000 fafc 	bl	8002ae0 <vTaskStartScheduler>
  
  return osOK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	bd80      	pop	{r7, pc}

080024ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80024ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024f0:	b089      	sub	sp, #36	@ 0x24
 80024f2:	af04      	add	r7, sp, #16
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d020      	beq.n	8002542 <osThreadCreate+0x54>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d01c      	beq.n	8002542 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685c      	ldr	r4, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691e      	ldr	r6, [r3, #16]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff ffc8 	bl	80024b0 <makeFreeRtosPriority>
 8002520:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800252a:	9202      	str	r2, [sp, #8]
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	9100      	str	r1, [sp, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	4632      	mov	r2, r6
 8002534:	4629      	mov	r1, r5
 8002536:	4620      	mov	r0, r4
 8002538:	f000 f8ed 	bl	8002716 <xTaskCreateStatic>
 800253c:	4603      	mov	r3, r0
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	e01c      	b.n	800257c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685c      	ldr	r4, [r3, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800254e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ffaa 	bl	80024b0 <makeFreeRtosPriority>
 800255c:	4602      	mov	r2, r0
 800255e:	f107 030c 	add.w	r3, r7, #12
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	9200      	str	r2, [sp, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	4632      	mov	r2, r6
 800256a:	4629      	mov	r1, r5
 800256c:	4620      	mov	r0, r4
 800256e:	f000 f932 	bl	80027d6 <xTaskCreate>
 8002572:	4603      	mov	r3, r0
 8002574:	2b01      	cmp	r3, #1
 8002576:	d001      	beq.n	800257c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002578:	2300      	movs	r3, #0
 800257a:	e000      	b.n	800257e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800257c:	68fb      	ldr	r3, [r7, #12]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002586 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <osDelay+0x16>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	e000      	b.n	800259e <osDelay+0x18>
 800259c:	2301      	movs	r3, #1
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 fa68 	bl	8002a74 <vTaskDelay>
  
  return osOK;
 80025a4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f103 0208 	add.w	r2, r3, #8
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025c6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f103 0208 	add.w	r2, r3, #8
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f103 0208 	add.w	r2, r3, #8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	601a      	str	r2, [r3, #0]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002666:	d103      	bne.n	8002670 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	e00c      	b.n	800268a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3308      	adds	r3, #8
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	e002      	b.n	800267e <vListInsert+0x2e>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	429a      	cmp	r2, r3
 8002688:	d2f6      	bcs.n	8002678 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	601a      	str	r2, [r3, #0]
}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026c2:	b480      	push	{r7}
 80026c4:	b085      	sub	sp, #20
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6892      	ldr	r2, [r2, #8]
 80026d8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6852      	ldr	r2, [r2, #4]
 80026e2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d103      	bne.n	80026f6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	1e5a      	subs	r2, r3, #1
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002716:	b580      	push	{r7, lr}
 8002718:	b08e      	sub	sp, #56	@ 0x38
 800271a:	af04      	add	r7, sp, #16
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10b      	bne.n	8002742 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800272a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800272e:	f383 8811 	msr	BASEPRI, r3
 8002732:	f3bf 8f6f 	isb	sy
 8002736:	f3bf 8f4f 	dsb	sy
 800273a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	e7fd      	b.n	800273e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10b      	bne.n	8002760 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800274c:	f383 8811 	msr	BASEPRI, r3
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	f3bf 8f4f 	dsb	sy
 8002758:	61fb      	str	r3, [r7, #28]
}
 800275a:	bf00      	nop
 800275c:	bf00      	nop
 800275e:	e7fd      	b.n	800275c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002760:	23a0      	movs	r3, #160	@ 0xa0
 8002762:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	2ba0      	cmp	r3, #160	@ 0xa0
 8002768:	d00b      	beq.n	8002782 <xTaskCreateStatic+0x6c>
	__asm volatile
 800276a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800276e:	f383 8811 	msr	BASEPRI, r3
 8002772:	f3bf 8f6f 	isb	sy
 8002776:	f3bf 8f4f 	dsb	sy
 800277a:	61bb      	str	r3, [r7, #24]
}
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	e7fd      	b.n	800277e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002782:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002786:	2b00      	cmp	r3, #0
 8002788:	d01e      	beq.n	80027c8 <xTaskCreateStatic+0xb2>
 800278a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800278c:	2b00      	cmp	r3, #0
 800278e:	d01b      	beq.n	80027c8 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002796:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002798:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	2202      	movs	r2, #2
 800279e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80027a2:	2300      	movs	r3, #0
 80027a4:	9303      	str	r3, [sp, #12]
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	9302      	str	r3, [sp, #8]
 80027aa:	f107 0314 	add.w	r3, r7, #20
 80027ae:	9301      	str	r3, [sp, #4]
 80027b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f850 	bl	8002860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80027c2:	f000 f8ed 	bl	80029a0 <prvAddNewTaskToReadyList>
 80027c6:	e001      	b.n	80027cc <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80027cc:	697b      	ldr	r3, [r7, #20]
	}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3728      	adds	r7, #40	@ 0x28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b08c      	sub	sp, #48	@ 0x30
 80027da:	af04      	add	r7, sp, #16
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	4613      	mov	r3, r2
 80027e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fefc 	bl	80035e8 <pvPortMalloc>
 80027f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00e      	beq.n	8002816 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80027f8:	20a0      	movs	r0, #160	@ 0xa0
 80027fa:	f000 fef5 	bl	80035e8 <pvPortMalloc>
 80027fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	631a      	str	r2, [r3, #48]	@ 0x30
 800280c:	e005      	b.n	800281a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800280e:	6978      	ldr	r0, [r7, #20]
 8002810:	f000 ffb8 	bl	8003784 <vPortFree>
 8002814:	e001      	b.n	800281a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d017      	beq.n	8002850 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002828:	88fa      	ldrh	r2, [r7, #6]
 800282a:	2300      	movs	r3, #0
 800282c:	9303      	str	r3, [sp, #12]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	9302      	str	r3, [sp, #8]
 8002832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002834:	9301      	str	r3, [sp, #4]
 8002836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f80e 	bl	8002860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002844:	69f8      	ldr	r0, [r7, #28]
 8002846:	f000 f8ab 	bl	80029a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800284a:	2301      	movs	r3, #1
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	e002      	b.n	8002856 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002850:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002854:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002856:	69bb      	ldr	r3, [r7, #24]
	}
 8002858:	4618      	mov	r0, r3
 800285a:	3720      	adds	r7, #32
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
 800286c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800286e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002870:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002878:	3b01      	subs	r3, #1
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	f023 0307 	bic.w	r3, r3, #7
 8002886:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002896:	f383 8811 	msr	BASEPRI, r3
 800289a:	f3bf 8f6f 	isb	sy
 800289e:	f3bf 8f4f 	dsb	sy
 80028a2:	617b      	str	r3, [r7, #20]
}
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop
 80028a8:	e7fd      	b.n	80028a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01f      	beq.n	80028f0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
 80028b4:	e012      	b.n	80028dc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	4413      	add	r3, r2
 80028bc:	7819      	ldrb	r1, [r3, #0]
 80028be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	4413      	add	r3, r2
 80028c4:	3334      	adds	r3, #52	@ 0x34
 80028c6:	460a      	mov	r2, r1
 80028c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	4413      	add	r3, r2
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d006      	beq.n	80028e4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3301      	adds	r3, #1
 80028da:	61fb      	str	r3, [r7, #28]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	2b0f      	cmp	r3, #15
 80028e0:	d9e9      	bls.n	80028b6 <prvInitialiseNewTask+0x56>
 80028e2:	e000      	b.n	80028e6 <prvInitialiseNewTask+0x86>
			{
				break;
 80028e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028ee:	e003      	b.n	80028f8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80028f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028fa:	2b06      	cmp	r3, #6
 80028fc:	d901      	bls.n	8002902 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028fe:	2306      	movs	r3, #6
 8002900:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002904:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002906:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800290c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800290e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002910:	2200      	movs	r2, #0
 8002912:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002916:	3304      	adds	r3, #4
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fe68 	bl	80025ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800291e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002920:	3318      	adds	r3, #24
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fe63 	bl	80025ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800292a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800292c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800292e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002930:	f1c3 0207 	rsb	r2, r3, #7
 8002934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002936:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800293c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800293e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002940:	2200      	movs	r2, #0
 8002942:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002948:	2200      	movs	r2, #0
 800294a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800294e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002950:	334c      	adds	r3, #76	@ 0x4c
 8002952:	224c      	movs	r2, #76	@ 0x4c
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f001 f834 	bl	80039c4 <memset>
 800295c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800295e:	4a0d      	ldr	r2, [pc, #52]	@ (8002994 <prvInitialiseNewTask+0x134>)
 8002960:	651a      	str	r2, [r3, #80]	@ 0x50
 8002962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002964:	4a0c      	ldr	r2, [pc, #48]	@ (8002998 <prvInitialiseNewTask+0x138>)
 8002966:	655a      	str	r2, [r3, #84]	@ 0x54
 8002968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296a:	4a0c      	ldr	r2, [pc, #48]	@ (800299c <prvInitialiseNewTask+0x13c>)
 800296c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	68f9      	ldr	r1, [r7, #12]
 8002972:	69b8      	ldr	r0, [r7, #24]
 8002974:	f000 fc2a 	bl	80031cc <pxPortInitialiseStack>
 8002978:	4602      	mov	r2, r0
 800297a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800297e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002988:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800298a:	bf00      	nop
 800298c:	3720      	adds	r7, #32
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20004110 	.word	0x20004110
 8002998:	20004178 	.word	0x20004178
 800299c:	200041e0 	.word	0x200041e0

080029a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80029a8:	f000 fd3e 	bl	8003428 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80029ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002a58 <prvAddNewTaskToReadyList+0xb8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3301      	adds	r3, #1
 80029b2:	4a29      	ldr	r2, [pc, #164]	@ (8002a58 <prvAddNewTaskToReadyList+0xb8>)
 80029b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80029b6:	4b29      	ldr	r3, [pc, #164]	@ (8002a5c <prvAddNewTaskToReadyList+0xbc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80029be:	4a27      	ldr	r2, [pc, #156]	@ (8002a5c <prvAddNewTaskToReadyList+0xbc>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029c4:	4b24      	ldr	r3, [pc, #144]	@ (8002a58 <prvAddNewTaskToReadyList+0xb8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d110      	bne.n	80029ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80029cc:	f000 fad4 	bl	8002f78 <prvInitialiseTaskLists>
 80029d0:	e00d      	b.n	80029ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80029d2:	4b23      	ldr	r3, [pc, #140]	@ (8002a60 <prvAddNewTaskToReadyList+0xc0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029da:	4b20      	ldr	r3, [pc, #128]	@ (8002a5c <prvAddNewTaskToReadyList+0xbc>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d802      	bhi.n	80029ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80029e8:	4a1c      	ldr	r2, [pc, #112]	@ (8002a5c <prvAddNewTaskToReadyList+0xbc>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80029ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002a64 <prvAddNewTaskToReadyList+0xc4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3301      	adds	r3, #1
 80029f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a64 <prvAddNewTaskToReadyList+0xc4>)
 80029f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fc:	2201      	movs	r2, #1
 80029fe:	409a      	lsls	r2, r3
 8002a00:	4b19      	ldr	r3, [pc, #100]	@ (8002a68 <prvAddNewTaskToReadyList+0xc8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	4a18      	ldr	r2, [pc, #96]	@ (8002a68 <prvAddNewTaskToReadyList+0xc8>)
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4a15      	ldr	r2, [pc, #84]	@ (8002a6c <prvAddNewTaskToReadyList+0xcc>)
 8002a18:	441a      	add	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4610      	mov	r0, r2
 8002a22:	f7ff fdf1 	bl	8002608 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002a26:	f000 fd31 	bl	800348c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a60 <prvAddNewTaskToReadyList+0xc0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00e      	beq.n	8002a50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a32:	4b0a      	ldr	r3, [pc, #40]	@ (8002a5c <prvAddNewTaskToReadyList+0xbc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d207      	bcs.n	8002a50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a40:	4b0b      	ldr	r3, [pc, #44]	@ (8002a70 <prvAddNewTaskToReadyList+0xd0>)
 8002a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	200004bc 	.word	0x200004bc
 8002a5c:	200003bc 	.word	0x200003bc
 8002a60:	200004c8 	.word	0x200004c8
 8002a64:	200004d8 	.word	0x200004d8
 8002a68:	200004c4 	.word	0x200004c4
 8002a6c:	200003c0 	.word	0x200003c0
 8002a70:	e000ed04 	.word	0xe000ed04

08002a74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d018      	beq.n	8002ab8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a86:	4b14      	ldr	r3, [pc, #80]	@ (8002ad8 <vTaskDelay+0x64>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00b      	beq.n	8002aa6 <vTaskDelay+0x32>
	__asm volatile
 8002a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a92:	f383 8811 	msr	BASEPRI, r3
 8002a96:	f3bf 8f6f 	isb	sy
 8002a9a:	f3bf 8f4f 	dsb	sy
 8002a9e:	60bb      	str	r3, [r7, #8]
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	e7fd      	b.n	8002aa2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002aa6:	f000 f885 	bl	8002bb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002aaa:	2100      	movs	r1, #0
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 fb27 	bl	8003100 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002ab2:	f000 f88d 	bl	8002bd0 <xTaskResumeAll>
 8002ab6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d107      	bne.n	8002ace <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002abe:	4b07      	ldr	r3, [pc, #28]	@ (8002adc <vTaskDelay+0x68>)
 8002ac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	200004e4 	.word	0x200004e4
 8002adc:	e000ed04 	.word	0xe000ed04

08002ae0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	@ 0x28
 8002ae4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002aee:	463a      	mov	r2, r7
 8002af0:	1d39      	adds	r1, r7, #4
 8002af2:	f107 0308 	add.w	r3, r7, #8
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd fcea 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002afc:	6839      	ldr	r1, [r7, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	9202      	str	r2, [sp, #8]
 8002b04:	9301      	str	r3, [sp, #4]
 8002b06:	2300      	movs	r3, #0
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	460a      	mov	r2, r1
 8002b0e:	4921      	ldr	r1, [pc, #132]	@ (8002b94 <vTaskStartScheduler+0xb4>)
 8002b10:	4821      	ldr	r0, [pc, #132]	@ (8002b98 <vTaskStartScheduler+0xb8>)
 8002b12:	f7ff fe00 	bl	8002716 <xTaskCreateStatic>
 8002b16:	4603      	mov	r3, r0
 8002b18:	4a20      	ldr	r2, [pc, #128]	@ (8002b9c <vTaskStartScheduler+0xbc>)
 8002b1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002b9c <vTaskStartScheduler+0xbc>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002b24:	2301      	movs	r3, #1
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	e001      	b.n	8002b2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d11b      	bne.n	8002b6c <vTaskStartScheduler+0x8c>
	__asm volatile
 8002b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b38:	f383 8811 	msr	BASEPRI, r3
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	613b      	str	r3, [r7, #16]
}
 8002b46:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002b48:	4b15      	ldr	r3, [pc, #84]	@ (8002ba0 <vTaskStartScheduler+0xc0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	334c      	adds	r3, #76	@ 0x4c
 8002b4e:	4a15      	ldr	r2, [pc, #84]	@ (8002ba4 <vTaskStartScheduler+0xc4>)
 8002b50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b52:	4b15      	ldr	r3, [pc, #84]	@ (8002ba8 <vTaskStartScheduler+0xc8>)
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b5a:	4b14      	ldr	r3, [pc, #80]	@ (8002bac <vTaskStartScheduler+0xcc>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b60:	4b13      	ldr	r3, [pc, #76]	@ (8002bb0 <vTaskStartScheduler+0xd0>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b66:	f000 fbbb 	bl	80032e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b6a:	e00f      	b.n	8002b8c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b72:	d10b      	bne.n	8002b8c <vTaskStartScheduler+0xac>
	__asm volatile
 8002b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b78:	f383 8811 	msr	BASEPRI, r3
 8002b7c:	f3bf 8f6f 	isb	sy
 8002b80:	f3bf 8f4f 	dsb	sy
 8002b84:	60fb      	str	r3, [r7, #12]
}
 8002b86:	bf00      	nop
 8002b88:	bf00      	nop
 8002b8a:	e7fd      	b.n	8002b88 <vTaskStartScheduler+0xa8>
}
 8002b8c:	bf00      	nop
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	08003c08 	.word	0x08003c08
 8002b98:	08002f49 	.word	0x08002f49
 8002b9c:	200004e0 	.word	0x200004e0
 8002ba0:	200003bc 	.word	0x200003bc
 8002ba4:	20000010 	.word	0x20000010
 8002ba8:	200004dc 	.word	0x200004dc
 8002bac:	200004c8 	.word	0x200004c8
 8002bb0:	200004c0 	.word	0x200004c0

08002bb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002bb8:	4b04      	ldr	r3, [pc, #16]	@ (8002bcc <vTaskSuspendAll+0x18>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	4a03      	ldr	r2, [pc, #12]	@ (8002bcc <vTaskSuspendAll+0x18>)
 8002bc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002bc2:	bf00      	nop
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	200004e4 	.word	0x200004e4

08002bd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002bde:	4b42      	ldr	r3, [pc, #264]	@ (8002ce8 <xTaskResumeAll+0x118>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10b      	bne.n	8002bfe <xTaskResumeAll+0x2e>
	__asm volatile
 8002be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bea:	f383 8811 	msr	BASEPRI, r3
 8002bee:	f3bf 8f6f 	isb	sy
 8002bf2:	f3bf 8f4f 	dsb	sy
 8002bf6:	603b      	str	r3, [r7, #0]
}
 8002bf8:	bf00      	nop
 8002bfa:	bf00      	nop
 8002bfc:	e7fd      	b.n	8002bfa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002bfe:	f000 fc13 	bl	8003428 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002c02:	4b39      	ldr	r3, [pc, #228]	@ (8002ce8 <xTaskResumeAll+0x118>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	4a37      	ldr	r2, [pc, #220]	@ (8002ce8 <xTaskResumeAll+0x118>)
 8002c0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c0c:	4b36      	ldr	r3, [pc, #216]	@ (8002ce8 <xTaskResumeAll+0x118>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d161      	bne.n	8002cd8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c14:	4b35      	ldr	r3, [pc, #212]	@ (8002cec <xTaskResumeAll+0x11c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d05d      	beq.n	8002cd8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c1c:	e02e      	b.n	8002c7c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c1e:	4b34      	ldr	r3, [pc, #208]	@ (8002cf0 <xTaskResumeAll+0x120>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3318      	adds	r3, #24
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fd49 	bl	80026c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	3304      	adds	r3, #4
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fd44 	bl	80026c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3e:	2201      	movs	r2, #1
 8002c40:	409a      	lsls	r2, r3
 8002c42:	4b2c      	ldr	r3, [pc, #176]	@ (8002cf4 <xTaskResumeAll+0x124>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	4a2a      	ldr	r2, [pc, #168]	@ (8002cf4 <xTaskResumeAll+0x124>)
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4a27      	ldr	r2, [pc, #156]	@ (8002cf8 <xTaskResumeAll+0x128>)
 8002c5a:	441a      	add	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	3304      	adds	r3, #4
 8002c60:	4619      	mov	r1, r3
 8002c62:	4610      	mov	r0, r2
 8002c64:	f7ff fcd0 	bl	8002608 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c6c:	4b23      	ldr	r3, [pc, #140]	@ (8002cfc <xTaskResumeAll+0x12c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d302      	bcc.n	8002c7c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002c76:	4b22      	ldr	r3, [pc, #136]	@ (8002d00 <xTaskResumeAll+0x130>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002cf0 <xTaskResumeAll+0x120>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1cc      	bne.n	8002c1e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c8a:	f000 fa19 	bl	80030c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d04 <xTaskResumeAll+0x134>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d010      	beq.n	8002cbc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c9a:	f000 f837 	bl	8002d0c <xTaskIncrementTick>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002ca4:	4b16      	ldr	r3, [pc, #88]	@ (8002d00 <xTaskResumeAll+0x130>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3b01      	subs	r3, #1
 8002cae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f1      	bne.n	8002c9a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002cb6:	4b13      	ldr	r3, [pc, #76]	@ (8002d04 <xTaskResumeAll+0x134>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002cbc:	4b10      	ldr	r3, [pc, #64]	@ (8002d00 <xTaskResumeAll+0x130>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d009      	beq.n	8002cd8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d08 <xTaskResumeAll+0x138>)
 8002cca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002cd8:	f000 fbd8 	bl	800348c <vPortExitCritical>

	return xAlreadyYielded;
 8002cdc:	68bb      	ldr	r3, [r7, #8]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200004e4 	.word	0x200004e4
 8002cec:	200004bc 	.word	0x200004bc
 8002cf0:	2000047c 	.word	0x2000047c
 8002cf4:	200004c4 	.word	0x200004c4
 8002cf8:	200003c0 	.word	0x200003c0
 8002cfc:	200003bc 	.word	0x200003bc
 8002d00:	200004d0 	.word	0x200004d0
 8002d04:	200004cc 	.word	0x200004cc
 8002d08:	e000ed04 	.word	0xe000ed04

08002d0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d16:	4b4f      	ldr	r3, [pc, #316]	@ (8002e54 <xTaskIncrementTick+0x148>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f040 808f 	bne.w	8002e3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d20:	4b4d      	ldr	r3, [pc, #308]	@ (8002e58 <xTaskIncrementTick+0x14c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3301      	adds	r3, #1
 8002d26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d28:	4a4b      	ldr	r2, [pc, #300]	@ (8002e58 <xTaskIncrementTick+0x14c>)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d121      	bne.n	8002d78 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d34:	4b49      	ldr	r3, [pc, #292]	@ (8002e5c <xTaskIncrementTick+0x150>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	603b      	str	r3, [r7, #0]
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	e7fd      	b.n	8002d52 <xTaskIncrementTick+0x46>
 8002d56:	4b41      	ldr	r3, [pc, #260]	@ (8002e5c <xTaskIncrementTick+0x150>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	4b40      	ldr	r3, [pc, #256]	@ (8002e60 <xTaskIncrementTick+0x154>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a3e      	ldr	r2, [pc, #248]	@ (8002e5c <xTaskIncrementTick+0x150>)
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	4a3e      	ldr	r2, [pc, #248]	@ (8002e60 <xTaskIncrementTick+0x154>)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e64 <xTaskIncrementTick+0x158>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	4a3c      	ldr	r2, [pc, #240]	@ (8002e64 <xTaskIncrementTick+0x158>)
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	f000 f9a4 	bl	80030c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d78:	4b3b      	ldr	r3, [pc, #236]	@ (8002e68 <xTaskIncrementTick+0x15c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d348      	bcc.n	8002e14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d82:	4b36      	ldr	r3, [pc, #216]	@ (8002e5c <xTaskIncrementTick+0x150>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d104      	bne.n	8002d96 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d8c:	4b36      	ldr	r3, [pc, #216]	@ (8002e68 <xTaskIncrementTick+0x15c>)
 8002d8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d92:	601a      	str	r2, [r3, #0]
					break;
 8002d94:	e03e      	b.n	8002e14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d96:	4b31      	ldr	r3, [pc, #196]	@ (8002e5c <xTaskIncrementTick+0x150>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d203      	bcs.n	8002db6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002dae:	4a2e      	ldr	r2, [pc, #184]	@ (8002e68 <xTaskIncrementTick+0x15c>)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002db4:	e02e      	b.n	8002e14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	3304      	adds	r3, #4
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fc81 	bl	80026c2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d004      	beq.n	8002dd2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	3318      	adds	r3, #24
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fc78 	bl	80026c2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	409a      	lsls	r2, r3
 8002dda:	4b24      	ldr	r3, [pc, #144]	@ (8002e6c <xTaskIncrementTick+0x160>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	4a22      	ldr	r2, [pc, #136]	@ (8002e6c <xTaskIncrementTick+0x160>)
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4a1f      	ldr	r2, [pc, #124]	@ (8002e70 <xTaskIncrementTick+0x164>)
 8002df2:	441a      	add	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	3304      	adds	r3, #4
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	f7ff fc04 	bl	8002608 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e04:	4b1b      	ldr	r3, [pc, #108]	@ (8002e74 <xTaskIncrementTick+0x168>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d3b9      	bcc.n	8002d82 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e12:	e7b6      	b.n	8002d82 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e14:	4b17      	ldr	r3, [pc, #92]	@ (8002e74 <xTaskIncrementTick+0x168>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e1a:	4915      	ldr	r1, [pc, #84]	@ (8002e70 <xTaskIncrementTick+0x164>)
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d901      	bls.n	8002e30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002e30:	4b11      	ldr	r3, [pc, #68]	@ (8002e78 <xTaskIncrementTick+0x16c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d007      	beq.n	8002e48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	e004      	b.n	8002e48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e7c <xTaskIncrementTick+0x170>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	3301      	adds	r3, #1
 8002e44:	4a0d      	ldr	r2, [pc, #52]	@ (8002e7c <xTaskIncrementTick+0x170>)
 8002e46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002e48:	697b      	ldr	r3, [r7, #20]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	200004e4 	.word	0x200004e4
 8002e58:	200004c0 	.word	0x200004c0
 8002e5c:	20000474 	.word	0x20000474
 8002e60:	20000478 	.word	0x20000478
 8002e64:	200004d4 	.word	0x200004d4
 8002e68:	200004dc 	.word	0x200004dc
 8002e6c:	200004c4 	.word	0x200004c4
 8002e70:	200003c0 	.word	0x200003c0
 8002e74:	200003bc 	.word	0x200003bc
 8002e78:	200004d0 	.word	0x200004d0
 8002e7c:	200004cc 	.word	0x200004cc

08002e80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e86:	4b2a      	ldr	r3, [pc, #168]	@ (8002f30 <vTaskSwitchContext+0xb0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e8e:	4b29      	ldr	r3, [pc, #164]	@ (8002f34 <vTaskSwitchContext+0xb4>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e94:	e045      	b.n	8002f22 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8002e96:	4b27      	ldr	r3, [pc, #156]	@ (8002f34 <vTaskSwitchContext+0xb4>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e9c:	4b26      	ldr	r3, [pc, #152]	@ (8002f38 <vTaskSwitchContext+0xb8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	fab3 f383 	clz	r3, r3
 8002ea8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002eaa:	7afb      	ldrb	r3, [r7, #11]
 8002eac:	f1c3 031f 	rsb	r3, r3, #31
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	4922      	ldr	r1, [pc, #136]	@ (8002f3c <vTaskSwitchContext+0xbc>)
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10b      	bne.n	8002ede <vTaskSwitchContext+0x5e>
	__asm volatile
 8002ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eca:	f383 8811 	msr	BASEPRI, r3
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	f3bf 8f4f 	dsb	sy
 8002ed6:	607b      	str	r3, [r7, #4]
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop
 8002edc:	e7fd      	b.n	8002eda <vTaskSwitchContext+0x5a>
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4a14      	ldr	r2, [pc, #80]	@ (8002f3c <vTaskSwitchContext+0xbc>)
 8002eea:	4413      	add	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	605a      	str	r2, [r3, #4]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	3308      	adds	r3, #8
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d104      	bne.n	8002f0e <vTaskSwitchContext+0x8e>
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	4a0a      	ldr	r2, [pc, #40]	@ (8002f40 <vTaskSwitchContext+0xc0>)
 8002f16:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002f18:	4b09      	ldr	r3, [pc, #36]	@ (8002f40 <vTaskSwitchContext+0xc0>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	334c      	adds	r3, #76	@ 0x4c
 8002f1e:	4a09      	ldr	r2, [pc, #36]	@ (8002f44 <vTaskSwitchContext+0xc4>)
 8002f20:	6013      	str	r3, [r2, #0]
}
 8002f22:	bf00      	nop
 8002f24:	371c      	adds	r7, #28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	200004e4 	.word	0x200004e4
 8002f34:	200004d0 	.word	0x200004d0
 8002f38:	200004c4 	.word	0x200004c4
 8002f3c:	200003c0 	.word	0x200003c0
 8002f40:	200003bc 	.word	0x200003bc
 8002f44:	20000010 	.word	0x20000010

08002f48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f50:	f000 f852 	bl	8002ff8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f54:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <prvIdleTask+0x28>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d9f9      	bls.n	8002f50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002f5c:	4b05      	ldr	r3, [pc, #20]	@ (8002f74 <prvIdleTask+0x2c>)
 8002f5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	f3bf 8f4f 	dsb	sy
 8002f68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002f6c:	e7f0      	b.n	8002f50 <prvIdleTask+0x8>
 8002f6e:	bf00      	nop
 8002f70:	200003c0 	.word	0x200003c0
 8002f74:	e000ed04 	.word	0xe000ed04

08002f78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	e00c      	b.n	8002f9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4a12      	ldr	r2, [pc, #72]	@ (8002fd8 <prvInitialiseTaskLists+0x60>)
 8002f90:	4413      	add	r3, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fb0b 	bl	80025ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	607b      	str	r3, [r7, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b06      	cmp	r3, #6
 8002fa2:	d9ef      	bls.n	8002f84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002fa4:	480d      	ldr	r0, [pc, #52]	@ (8002fdc <prvInitialiseTaskLists+0x64>)
 8002fa6:	f7ff fb02 	bl	80025ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002faa:	480d      	ldr	r0, [pc, #52]	@ (8002fe0 <prvInitialiseTaskLists+0x68>)
 8002fac:	f7ff faff 	bl	80025ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002fb0:	480c      	ldr	r0, [pc, #48]	@ (8002fe4 <prvInitialiseTaskLists+0x6c>)
 8002fb2:	f7ff fafc 	bl	80025ae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002fb6:	480c      	ldr	r0, [pc, #48]	@ (8002fe8 <prvInitialiseTaskLists+0x70>)
 8002fb8:	f7ff faf9 	bl	80025ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002fbc:	480b      	ldr	r0, [pc, #44]	@ (8002fec <prvInitialiseTaskLists+0x74>)
 8002fbe:	f7ff faf6 	bl	80025ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff0 <prvInitialiseTaskLists+0x78>)
 8002fc4:	4a05      	ldr	r2, [pc, #20]	@ (8002fdc <prvInitialiseTaskLists+0x64>)
 8002fc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff4 <prvInitialiseTaskLists+0x7c>)
 8002fca:	4a05      	ldr	r2, [pc, #20]	@ (8002fe0 <prvInitialiseTaskLists+0x68>)
 8002fcc:	601a      	str	r2, [r3, #0]
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	200003c0 	.word	0x200003c0
 8002fdc:	2000044c 	.word	0x2000044c
 8002fe0:	20000460 	.word	0x20000460
 8002fe4:	2000047c 	.word	0x2000047c
 8002fe8:	20000490 	.word	0x20000490
 8002fec:	200004a8 	.word	0x200004a8
 8002ff0:	20000474 	.word	0x20000474
 8002ff4:	20000478 	.word	0x20000478

08002ff8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ffe:	e019      	b.n	8003034 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003000:	f000 fa12 	bl	8003428 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003004:	4b10      	ldr	r3, [pc, #64]	@ (8003048 <prvCheckTasksWaitingTermination+0x50>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3304      	adds	r3, #4
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff fb56 	bl	80026c2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003016:	4b0d      	ldr	r3, [pc, #52]	@ (800304c <prvCheckTasksWaitingTermination+0x54>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3b01      	subs	r3, #1
 800301c:	4a0b      	ldr	r2, [pc, #44]	@ (800304c <prvCheckTasksWaitingTermination+0x54>)
 800301e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003020:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <prvCheckTasksWaitingTermination+0x58>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3b01      	subs	r3, #1
 8003026:	4a0a      	ldr	r2, [pc, #40]	@ (8003050 <prvCheckTasksWaitingTermination+0x58>)
 8003028:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800302a:	f000 fa2f 	bl	800348c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f810 	bl	8003054 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003034:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <prvCheckTasksWaitingTermination+0x58>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1e1      	bne.n	8003000 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800303c:	bf00      	nop
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20000490 	.word	0x20000490
 800304c:	200004bc 	.word	0x200004bc
 8003050:	200004a4 	.word	0x200004a4

08003054 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	334c      	adds	r3, #76	@ 0x4c
 8003060:	4618      	mov	r0, r3
 8003062:	f000 fcb7 	bl	80039d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800306c:	2b00      	cmp	r3, #0
 800306e:	d108      	bne.n	8003082 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003074:	4618      	mov	r0, r3
 8003076:	f000 fb85 	bl	8003784 <vPortFree>
				vPortFree( pxTCB );
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fb82 	bl	8003784 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003080:	e019      	b.n	80030b6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003088:	2b01      	cmp	r3, #1
 800308a:	d103      	bne.n	8003094 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fb79 	bl	8003784 <vPortFree>
	}
 8003092:	e010      	b.n	80030b6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800309a:	2b02      	cmp	r3, #2
 800309c:	d00b      	beq.n	80030b6 <prvDeleteTCB+0x62>
	__asm volatile
 800309e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a2:	f383 8811 	msr	BASEPRI, r3
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	60fb      	str	r3, [r7, #12]
}
 80030b0:	bf00      	nop
 80030b2:	bf00      	nop
 80030b4:	e7fd      	b.n	80030b2 <prvDeleteTCB+0x5e>
	}
 80030b6:	bf00      	nop
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030c6:	4b0c      	ldr	r3, [pc, #48]	@ (80030f8 <prvResetNextTaskUnblockTime+0x38>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d104      	bne.n	80030da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80030d0:	4b0a      	ldr	r3, [pc, #40]	@ (80030fc <prvResetNextTaskUnblockTime+0x3c>)
 80030d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80030d8:	e008      	b.n	80030ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030da:	4b07      	ldr	r3, [pc, #28]	@ (80030f8 <prvResetNextTaskUnblockTime+0x38>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4a04      	ldr	r2, [pc, #16]	@ (80030fc <prvResetNextTaskUnblockTime+0x3c>)
 80030ea:	6013      	str	r3, [r2, #0]
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	20000474 	.word	0x20000474
 80030fc:	200004dc 	.word	0x200004dc

08003100 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800310a:	4b29      	ldr	r3, [pc, #164]	@ (80031b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003110:	4b28      	ldr	r3, [pc, #160]	@ (80031b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3304      	adds	r3, #4
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fad3 	bl	80026c2 <uxListRemove>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10b      	bne.n	800313a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003122:	4b24      	ldr	r3, [pc, #144]	@ (80031b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003128:	2201      	movs	r2, #1
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43da      	mvns	r2, r3
 8003130:	4b21      	ldr	r3, [pc, #132]	@ (80031b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4013      	ands	r3, r2
 8003136:	4a20      	ldr	r2, [pc, #128]	@ (80031b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003138:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003140:	d10a      	bne.n	8003158 <prvAddCurrentTaskToDelayedList+0x58>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d007      	beq.n	8003158 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003148:	4b1a      	ldr	r3, [pc, #104]	@ (80031b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3304      	adds	r3, #4
 800314e:	4619      	mov	r1, r3
 8003150:	481a      	ldr	r0, [pc, #104]	@ (80031bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8003152:	f7ff fa59 	bl	8002608 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003156:	e026      	b.n	80031a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003160:	4b14      	ldr	r3, [pc, #80]	@ (80031b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	429a      	cmp	r2, r3
 800316e:	d209      	bcs.n	8003184 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003170:	4b13      	ldr	r3, [pc, #76]	@ (80031c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b0f      	ldr	r3, [pc, #60]	@ (80031b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3304      	adds	r3, #4
 800317a:	4619      	mov	r1, r3
 800317c:	4610      	mov	r0, r2
 800317e:	f7ff fa67 	bl	8002650 <vListInsert>
}
 8003182:	e010      	b.n	80031a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003184:	4b0f      	ldr	r3, [pc, #60]	@ (80031c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	4b0a      	ldr	r3, [pc, #40]	@ (80031b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	3304      	adds	r3, #4
 800318e:	4619      	mov	r1, r3
 8003190:	4610      	mov	r0, r2
 8003192:	f7ff fa5d 	bl	8002650 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003196:	4b0c      	ldr	r3, [pc, #48]	@ (80031c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	429a      	cmp	r2, r3
 800319e:	d202      	bcs.n	80031a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80031a0:	4a09      	ldr	r2, [pc, #36]	@ (80031c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	6013      	str	r3, [r2, #0]
}
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	200004c0 	.word	0x200004c0
 80031b4:	200003bc 	.word	0x200003bc
 80031b8:	200004c4 	.word	0x200004c4
 80031bc:	200004a8 	.word	0x200004a8
 80031c0:	20000478 	.word	0x20000478
 80031c4:	20000474 	.word	0x20000474
 80031c8:	200004dc 	.word	0x200004dc

080031cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3b04      	subs	r3, #4
 80031dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	3b04      	subs	r3, #4
 80031ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f023 0201 	bic.w	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	3b04      	subs	r3, #4
 80031fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80031fc:	4a0c      	ldr	r2, [pc, #48]	@ (8003230 <pxPortInitialiseStack+0x64>)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	3b14      	subs	r3, #20
 8003206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3b04      	subs	r3, #4
 8003212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f06f 0202 	mvn.w	r2, #2
 800321a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	3b20      	subs	r3, #32
 8003220:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003222:	68fb      	ldr	r3, [r7, #12]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	08003235 	.word	0x08003235

08003234 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800323e:	4b13      	ldr	r3, [pc, #76]	@ (800328c <prvTaskExitError+0x58>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003246:	d00b      	beq.n	8003260 <prvTaskExitError+0x2c>
	__asm volatile
 8003248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800324c:	f383 8811 	msr	BASEPRI, r3
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	60fb      	str	r3, [r7, #12]
}
 800325a:	bf00      	nop
 800325c:	bf00      	nop
 800325e:	e7fd      	b.n	800325c <prvTaskExitError+0x28>
	__asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	60bb      	str	r3, [r7, #8]
}
 8003272:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003274:	bf00      	nop
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0fc      	beq.n	8003276 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	2000000c 	.word	0x2000000c

08003290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003290:	4b07      	ldr	r3, [pc, #28]	@ (80032b0 <pxCurrentTCBConst2>)
 8003292:	6819      	ldr	r1, [r3, #0]
 8003294:	6808      	ldr	r0, [r1, #0]
 8003296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800329a:	f380 8809 	msr	PSP, r0
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f04f 0000 	mov.w	r0, #0
 80032a6:	f380 8811 	msr	BASEPRI, r0
 80032aa:	4770      	bx	lr
 80032ac:	f3af 8000 	nop.w

080032b0 <pxCurrentTCBConst2>:
 80032b0:	200003bc 	.word	0x200003bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop

080032b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80032b8:	4808      	ldr	r0, [pc, #32]	@ (80032dc <prvPortStartFirstTask+0x24>)
 80032ba:	6800      	ldr	r0, [r0, #0]
 80032bc:	6800      	ldr	r0, [r0, #0]
 80032be:	f380 8808 	msr	MSP, r0
 80032c2:	f04f 0000 	mov.w	r0, #0
 80032c6:	f380 8814 	msr	CONTROL, r0
 80032ca:	b662      	cpsie	i
 80032cc:	b661      	cpsie	f
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	df00      	svc	0
 80032d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80032da:	bf00      	nop
 80032dc:	e000ed08 	.word	0xe000ed08

080032e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80032e6:	4b47      	ldr	r3, [pc, #284]	@ (8003404 <xPortStartScheduler+0x124>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a47      	ldr	r2, [pc, #284]	@ (8003408 <xPortStartScheduler+0x128>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d10b      	bne.n	8003308 <xPortStartScheduler+0x28>
	__asm volatile
 80032f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	613b      	str	r3, [r7, #16]
}
 8003302:	bf00      	nop
 8003304:	bf00      	nop
 8003306:	e7fd      	b.n	8003304 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003308:	4b3e      	ldr	r3, [pc, #248]	@ (8003404 <xPortStartScheduler+0x124>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a3f      	ldr	r2, [pc, #252]	@ (800340c <xPortStartScheduler+0x12c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d10b      	bne.n	800332a <xPortStartScheduler+0x4a>
	__asm volatile
 8003312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003316:	f383 8811 	msr	BASEPRI, r3
 800331a:	f3bf 8f6f 	isb	sy
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	60fb      	str	r3, [r7, #12]
}
 8003324:	bf00      	nop
 8003326:	bf00      	nop
 8003328:	e7fd      	b.n	8003326 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800332a:	4b39      	ldr	r3, [pc, #228]	@ (8003410 <xPortStartScheduler+0x130>)
 800332c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	b2db      	uxtb	r3, r3
 8003334:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	22ff      	movs	r2, #255	@ 0xff
 800333a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800334c:	b2da      	uxtb	r2, r3
 800334e:	4b31      	ldr	r3, [pc, #196]	@ (8003414 <xPortStartScheduler+0x134>)
 8003350:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003352:	4b31      	ldr	r3, [pc, #196]	@ (8003418 <xPortStartScheduler+0x138>)
 8003354:	2207      	movs	r2, #7
 8003356:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003358:	e009      	b.n	800336e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800335a:	4b2f      	ldr	r3, [pc, #188]	@ (8003418 <xPortStartScheduler+0x138>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3b01      	subs	r3, #1
 8003360:	4a2d      	ldr	r2, [pc, #180]	@ (8003418 <xPortStartScheduler+0x138>)
 8003362:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	b2db      	uxtb	r3, r3
 800336c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800336e:	78fb      	ldrb	r3, [r7, #3]
 8003370:	b2db      	uxtb	r3, r3
 8003372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003376:	2b80      	cmp	r3, #128	@ 0x80
 8003378:	d0ef      	beq.n	800335a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800337a:	4b27      	ldr	r3, [pc, #156]	@ (8003418 <xPortStartScheduler+0x138>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f1c3 0307 	rsb	r3, r3, #7
 8003382:	2b04      	cmp	r3, #4
 8003384:	d00b      	beq.n	800339e <xPortStartScheduler+0xbe>
	__asm volatile
 8003386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	60bb      	str	r3, [r7, #8]
}
 8003398:	bf00      	nop
 800339a:	bf00      	nop
 800339c:	e7fd      	b.n	800339a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800339e:	4b1e      	ldr	r3, [pc, #120]	@ (8003418 <xPortStartScheduler+0x138>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	021b      	lsls	r3, r3, #8
 80033a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003418 <xPortStartScheduler+0x138>)
 80033a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003418 <xPortStartScheduler+0x138>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80033b0:	4a19      	ldr	r2, [pc, #100]	@ (8003418 <xPortStartScheduler+0x138>)
 80033b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80033bc:	4b17      	ldr	r3, [pc, #92]	@ (800341c <xPortStartScheduler+0x13c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a16      	ldr	r2, [pc, #88]	@ (800341c <xPortStartScheduler+0x13c>)
 80033c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80033c8:	4b14      	ldr	r3, [pc, #80]	@ (800341c <xPortStartScheduler+0x13c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a13      	ldr	r2, [pc, #76]	@ (800341c <xPortStartScheduler+0x13c>)
 80033ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80033d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80033d4:	f000 f8da 	bl	800358c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80033d8:	4b11      	ldr	r3, [pc, #68]	@ (8003420 <xPortStartScheduler+0x140>)
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80033de:	f000 f8f9 	bl	80035d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80033e2:	4b10      	ldr	r3, [pc, #64]	@ (8003424 <xPortStartScheduler+0x144>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a0f      	ldr	r2, [pc, #60]	@ (8003424 <xPortStartScheduler+0x144>)
 80033e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80033ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80033ee:	f7ff ff63 	bl	80032b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80033f2:	f7ff fd45 	bl	8002e80 <vTaskSwitchContext>
	prvTaskExitError();
 80033f6:	f7ff ff1d 	bl	8003234 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	e000ed00 	.word	0xe000ed00
 8003408:	410fc271 	.word	0x410fc271
 800340c:	410fc270 	.word	0x410fc270
 8003410:	e000e400 	.word	0xe000e400
 8003414:	200004e8 	.word	0x200004e8
 8003418:	200004ec 	.word	0x200004ec
 800341c:	e000ed20 	.word	0xe000ed20
 8003420:	2000000c 	.word	0x2000000c
 8003424:	e000ef34 	.word	0xe000ef34

08003428 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
	__asm volatile
 800342e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003432:	f383 8811 	msr	BASEPRI, r3
 8003436:	f3bf 8f6f 	isb	sy
 800343a:	f3bf 8f4f 	dsb	sy
 800343e:	607b      	str	r3, [r7, #4]
}
 8003440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003442:	4b10      	ldr	r3, [pc, #64]	@ (8003484 <vPortEnterCritical+0x5c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3301      	adds	r3, #1
 8003448:	4a0e      	ldr	r2, [pc, #56]	@ (8003484 <vPortEnterCritical+0x5c>)
 800344a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800344c:	4b0d      	ldr	r3, [pc, #52]	@ (8003484 <vPortEnterCritical+0x5c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d110      	bne.n	8003476 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003454:	4b0c      	ldr	r3, [pc, #48]	@ (8003488 <vPortEnterCritical+0x60>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00b      	beq.n	8003476 <vPortEnterCritical+0x4e>
	__asm volatile
 800345e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003462:	f383 8811 	msr	BASEPRI, r3
 8003466:	f3bf 8f6f 	isb	sy
 800346a:	f3bf 8f4f 	dsb	sy
 800346e:	603b      	str	r3, [r7, #0]
}
 8003470:	bf00      	nop
 8003472:	bf00      	nop
 8003474:	e7fd      	b.n	8003472 <vPortEnterCritical+0x4a>
	}
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	2000000c 	.word	0x2000000c
 8003488:	e000ed04 	.word	0xe000ed04

0800348c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003492:	4b12      	ldr	r3, [pc, #72]	@ (80034dc <vPortExitCritical+0x50>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10b      	bne.n	80034b2 <vPortExitCritical+0x26>
	__asm volatile
 800349a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800349e:	f383 8811 	msr	BASEPRI, r3
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	607b      	str	r3, [r7, #4]
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	e7fd      	b.n	80034ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80034b2:	4b0a      	ldr	r3, [pc, #40]	@ (80034dc <vPortExitCritical+0x50>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	4a08      	ldr	r2, [pc, #32]	@ (80034dc <vPortExitCritical+0x50>)
 80034ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80034bc:	4b07      	ldr	r3, [pc, #28]	@ (80034dc <vPortExitCritical+0x50>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d105      	bne.n	80034d0 <vPortExitCritical+0x44>
 80034c4:	2300      	movs	r3, #0
 80034c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	2000000c 	.word	0x2000000c

080034e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80034e0:	f3ef 8009 	mrs	r0, PSP
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	4b15      	ldr	r3, [pc, #84]	@ (8003540 <pxCurrentTCBConst>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	f01e 0f10 	tst.w	lr, #16
 80034f0:	bf08      	it	eq
 80034f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80034f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034fa:	6010      	str	r0, [r2, #0]
 80034fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003500:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003504:	f380 8811 	msr	BASEPRI, r0
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f7ff fcb6 	bl	8002e80 <vTaskSwitchContext>
 8003514:	f04f 0000 	mov.w	r0, #0
 8003518:	f380 8811 	msr	BASEPRI, r0
 800351c:	bc09      	pop	{r0, r3}
 800351e:	6819      	ldr	r1, [r3, #0]
 8003520:	6808      	ldr	r0, [r1, #0]
 8003522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003526:	f01e 0f10 	tst.w	lr, #16
 800352a:	bf08      	it	eq
 800352c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003530:	f380 8809 	msr	PSP, r0
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	f3af 8000 	nop.w

08003540 <pxCurrentTCBConst>:
 8003540:	200003bc 	.word	0x200003bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop

08003548 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
	__asm volatile
 800354e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003552:	f383 8811 	msr	BASEPRI, r3
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	607b      	str	r3, [r7, #4]
}
 8003560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003562:	f7ff fbd3 	bl	8002d0c <xTaskIncrementTick>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800356c:	4b06      	ldr	r3, [pc, #24]	@ (8003588 <SysTick_Handler+0x40>)
 800356e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	2300      	movs	r3, #0
 8003576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	f383 8811 	msr	BASEPRI, r3
}
 800357e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003580:	bf00      	nop
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	e000ed04 	.word	0xe000ed04

0800358c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003590:	4b0b      	ldr	r3, [pc, #44]	@ (80035c0 <vPortSetupTimerInterrupt+0x34>)
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003596:	4b0b      	ldr	r3, [pc, #44]	@ (80035c4 <vPortSetupTimerInterrupt+0x38>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800359c:	4b0a      	ldr	r3, [pc, #40]	@ (80035c8 <vPortSetupTimerInterrupt+0x3c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a0a      	ldr	r2, [pc, #40]	@ (80035cc <vPortSetupTimerInterrupt+0x40>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	099b      	lsrs	r3, r3, #6
 80035a8:	4a09      	ldr	r2, [pc, #36]	@ (80035d0 <vPortSetupTimerInterrupt+0x44>)
 80035aa:	3b01      	subs	r3, #1
 80035ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80035ae:	4b04      	ldr	r3, [pc, #16]	@ (80035c0 <vPortSetupTimerInterrupt+0x34>)
 80035b0:	2207      	movs	r2, #7
 80035b2:	601a      	str	r2, [r3, #0]
}
 80035b4:	bf00      	nop
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	e000e010 	.word	0xe000e010
 80035c4:	e000e018 	.word	0xe000e018
 80035c8:	20000000 	.word	0x20000000
 80035cc:	10624dd3 	.word	0x10624dd3
 80035d0:	e000e014 	.word	0xe000e014

080035d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80035d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80035e4 <vPortEnableVFP+0x10>
 80035d8:	6801      	ldr	r1, [r0, #0]
 80035da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80035de:	6001      	str	r1, [r0, #0]
 80035e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80035e2:	bf00      	nop
 80035e4:	e000ed88 	.word	0xe000ed88

080035e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	@ 0x28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80035f4:	f7ff fade 	bl	8002bb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80035f8:	4b5c      	ldr	r3, [pc, #368]	@ (800376c <pvPortMalloc+0x184>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003600:	f000 f924 	bl	800384c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003604:	4b5a      	ldr	r3, [pc, #360]	@ (8003770 <pvPortMalloc+0x188>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4013      	ands	r3, r2
 800360c:	2b00      	cmp	r3, #0
 800360e:	f040 8095 	bne.w	800373c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01e      	beq.n	8003656 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003618:	2208      	movs	r2, #8
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4413      	add	r3, r2
 800361e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	2b00      	cmp	r3, #0
 8003628:	d015      	beq.n	8003656 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f023 0307 	bic.w	r3, r3, #7
 8003630:	3308      	adds	r3, #8
 8003632:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00b      	beq.n	8003656 <pvPortMalloc+0x6e>
	__asm volatile
 800363e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003642:	f383 8811 	msr	BASEPRI, r3
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	617b      	str	r3, [r7, #20]
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	e7fd      	b.n	8003652 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d06f      	beq.n	800373c <pvPortMalloc+0x154>
 800365c:	4b45      	ldr	r3, [pc, #276]	@ (8003774 <pvPortMalloc+0x18c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	429a      	cmp	r2, r3
 8003664:	d86a      	bhi.n	800373c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003666:	4b44      	ldr	r3, [pc, #272]	@ (8003778 <pvPortMalloc+0x190>)
 8003668:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800366a:	4b43      	ldr	r3, [pc, #268]	@ (8003778 <pvPortMalloc+0x190>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003670:	e004      	b.n	800367c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003674:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	429a      	cmp	r2, r3
 8003684:	d903      	bls.n	800368e <pvPortMalloc+0xa6>
 8003686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f1      	bne.n	8003672 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800368e:	4b37      	ldr	r3, [pc, #220]	@ (800376c <pvPortMalloc+0x184>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003694:	429a      	cmp	r2, r3
 8003696:	d051      	beq.n	800373c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2208      	movs	r2, #8
 800369e:	4413      	add	r3, r2
 80036a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80036a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	1ad2      	subs	r2, r2, r3
 80036b2:	2308      	movs	r3, #8
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d920      	bls.n	80036fc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80036ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4413      	add	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00b      	beq.n	80036e4 <pvPortMalloc+0xfc>
	__asm volatile
 80036cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d0:	f383 8811 	msr	BASEPRI, r3
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	613b      	str	r3, [r7, #16]
}
 80036de:	bf00      	nop
 80036e0:	bf00      	nop
 80036e2:	e7fd      	b.n	80036e0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80036e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	1ad2      	subs	r2, r2, r3
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80036f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80036f6:	69b8      	ldr	r0, [r7, #24]
 80036f8:	f000 f90a 	bl	8003910 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80036fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003774 <pvPortMalloc+0x18c>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	4a1b      	ldr	r2, [pc, #108]	@ (8003774 <pvPortMalloc+0x18c>)
 8003708:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800370a:	4b1a      	ldr	r3, [pc, #104]	@ (8003774 <pvPortMalloc+0x18c>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	4b1b      	ldr	r3, [pc, #108]	@ (800377c <pvPortMalloc+0x194>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d203      	bcs.n	800371e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003716:	4b17      	ldr	r3, [pc, #92]	@ (8003774 <pvPortMalloc+0x18c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a18      	ldr	r2, [pc, #96]	@ (800377c <pvPortMalloc+0x194>)
 800371c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	4b13      	ldr	r3, [pc, #76]	@ (8003770 <pvPortMalloc+0x188>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	431a      	orrs	r2, r3
 8003728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800372c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003732:	4b13      	ldr	r3, [pc, #76]	@ (8003780 <pvPortMalloc+0x198>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	3301      	adds	r3, #1
 8003738:	4a11      	ldr	r2, [pc, #68]	@ (8003780 <pvPortMalloc+0x198>)
 800373a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800373c:	f7ff fa48 	bl	8002bd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00b      	beq.n	8003762 <pvPortMalloc+0x17a>
	__asm volatile
 800374a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	60fb      	str	r3, [r7, #12]
}
 800375c:	bf00      	nop
 800375e:	bf00      	nop
 8003760:	e7fd      	b.n	800375e <pvPortMalloc+0x176>
	return pvReturn;
 8003762:	69fb      	ldr	r3, [r7, #28]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3728      	adds	r7, #40	@ 0x28
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	200040f8 	.word	0x200040f8
 8003770:	2000410c 	.word	0x2000410c
 8003774:	200040fc 	.word	0x200040fc
 8003778:	200040f0 	.word	0x200040f0
 800377c:	20004100 	.word	0x20004100
 8003780:	20004104 	.word	0x20004104

08003784 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d04f      	beq.n	8003836 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003796:	2308      	movs	r3, #8
 8003798:	425b      	negs	r3, r3
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4413      	add	r3, r2
 800379e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	4b25      	ldr	r3, [pc, #148]	@ (8003840 <vPortFree+0xbc>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10b      	bne.n	80037ca <vPortFree+0x46>
	__asm volatile
 80037b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b6:	f383 8811 	msr	BASEPRI, r3
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	60fb      	str	r3, [r7, #12]
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	e7fd      	b.n	80037c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <vPortFree+0x66>
	__asm volatile
 80037d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	60bb      	str	r3, [r7, #8]
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop
 80037e8:	e7fd      	b.n	80037e6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	4b14      	ldr	r3, [pc, #80]	@ (8003840 <vPortFree+0xbc>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01e      	beq.n	8003836 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d11a      	bne.n	8003836 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	4b0e      	ldr	r3, [pc, #56]	@ (8003840 <vPortFree+0xbc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	43db      	mvns	r3, r3
 800380a:	401a      	ands	r2, r3
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003810:	f7ff f9d0 	bl	8002bb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	4b0a      	ldr	r3, [pc, #40]	@ (8003844 <vPortFree+0xc0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4413      	add	r3, r2
 800381e:	4a09      	ldr	r2, [pc, #36]	@ (8003844 <vPortFree+0xc0>)
 8003820:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003822:	6938      	ldr	r0, [r7, #16]
 8003824:	f000 f874 	bl	8003910 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003828:	4b07      	ldr	r3, [pc, #28]	@ (8003848 <vPortFree+0xc4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3301      	adds	r3, #1
 800382e:	4a06      	ldr	r2, [pc, #24]	@ (8003848 <vPortFree+0xc4>)
 8003830:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003832:	f7ff f9cd 	bl	8002bd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003836:	bf00      	nop
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	2000410c 	.word	0x2000410c
 8003844:	200040fc 	.word	0x200040fc
 8003848:	20004108 	.word	0x20004108

0800384c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003852:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003856:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003858:	4b27      	ldr	r3, [pc, #156]	@ (80038f8 <prvHeapInit+0xac>)
 800385a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00c      	beq.n	8003880 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	3307      	adds	r3, #7
 800386a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0307 	bic.w	r3, r3, #7
 8003872:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	4a1f      	ldr	r2, [pc, #124]	@ (80038f8 <prvHeapInit+0xac>)
 800387c:	4413      	add	r3, r2
 800387e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003884:	4a1d      	ldr	r2, [pc, #116]	@ (80038fc <prvHeapInit+0xb0>)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800388a:	4b1c      	ldr	r3, [pc, #112]	@ (80038fc <prvHeapInit+0xb0>)
 800388c:	2200      	movs	r2, #0
 800388e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	4413      	add	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003898:	2208      	movs	r2, #8
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0307 	bic.w	r3, r3, #7
 80038a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4a15      	ldr	r2, [pc, #84]	@ (8003900 <prvHeapInit+0xb4>)
 80038ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80038ae:	4b14      	ldr	r3, [pc, #80]	@ (8003900 <prvHeapInit+0xb4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2200      	movs	r2, #0
 80038b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80038b6:	4b12      	ldr	r3, [pc, #72]	@ (8003900 <prvHeapInit+0xb4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	1ad2      	subs	r2, r2, r3
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80038cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003900 <prvHeapInit+0xb4>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003904 <prvHeapInit+0xb8>)
 80038da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4a09      	ldr	r2, [pc, #36]	@ (8003908 <prvHeapInit+0xbc>)
 80038e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80038e4:	4b09      	ldr	r3, [pc, #36]	@ (800390c <prvHeapInit+0xc0>)
 80038e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80038ea:	601a      	str	r2, [r3, #0]
}
 80038ec:	bf00      	nop
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	200004f0 	.word	0x200004f0
 80038fc:	200040f0 	.word	0x200040f0
 8003900:	200040f8 	.word	0x200040f8
 8003904:	20004100 	.word	0x20004100
 8003908:	200040fc 	.word	0x200040fc
 800390c:	2000410c 	.word	0x2000410c

08003910 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003918:	4b28      	ldr	r3, [pc, #160]	@ (80039bc <prvInsertBlockIntoFreeList+0xac>)
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	e002      	b.n	8003924 <prvInsertBlockIntoFreeList+0x14>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	429a      	cmp	r2, r3
 800392c:	d8f7      	bhi.n	800391e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	4413      	add	r3, r2
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	429a      	cmp	r2, r3
 800393e:	d108      	bne.n	8003952 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	441a      	add	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	441a      	add	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d118      	bne.n	8003998 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	4b15      	ldr	r3, [pc, #84]	@ (80039c0 <prvInsertBlockIntoFreeList+0xb0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d00d      	beq.n	800398e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	441a      	add	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	e008      	b.n	80039a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800398e:	4b0c      	ldr	r3, [pc, #48]	@ (80039c0 <prvInsertBlockIntoFreeList+0xb0>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	e003      	b.n	80039a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d002      	beq.n	80039ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039ae:	bf00      	nop
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	200040f0 	.word	0x200040f0
 80039c0:	200040f8 	.word	0x200040f8

080039c4 <memset>:
 80039c4:	4402      	add	r2, r0
 80039c6:	4603      	mov	r3, r0
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d100      	bne.n	80039ce <memset+0xa>
 80039cc:	4770      	bx	lr
 80039ce:	f803 1b01 	strb.w	r1, [r3], #1
 80039d2:	e7f9      	b.n	80039c8 <memset+0x4>

080039d4 <_reclaim_reent>:
 80039d4:	4b29      	ldr	r3, [pc, #164]	@ (8003a7c <_reclaim_reent+0xa8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4283      	cmp	r3, r0
 80039da:	b570      	push	{r4, r5, r6, lr}
 80039dc:	4604      	mov	r4, r0
 80039de:	d04b      	beq.n	8003a78 <_reclaim_reent+0xa4>
 80039e0:	69c3      	ldr	r3, [r0, #28]
 80039e2:	b1ab      	cbz	r3, 8003a10 <_reclaim_reent+0x3c>
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	b16b      	cbz	r3, 8003a04 <_reclaim_reent+0x30>
 80039e8:	2500      	movs	r5, #0
 80039ea:	69e3      	ldr	r3, [r4, #28]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	5959      	ldr	r1, [r3, r5]
 80039f0:	2900      	cmp	r1, #0
 80039f2:	d13b      	bne.n	8003a6c <_reclaim_reent+0x98>
 80039f4:	3504      	adds	r5, #4
 80039f6:	2d80      	cmp	r5, #128	@ 0x80
 80039f8:	d1f7      	bne.n	80039ea <_reclaim_reent+0x16>
 80039fa:	69e3      	ldr	r3, [r4, #28]
 80039fc:	4620      	mov	r0, r4
 80039fe:	68d9      	ldr	r1, [r3, #12]
 8003a00:	f000 f864 	bl	8003acc <_free_r>
 8003a04:	69e3      	ldr	r3, [r4, #28]
 8003a06:	6819      	ldr	r1, [r3, #0]
 8003a08:	b111      	cbz	r1, 8003a10 <_reclaim_reent+0x3c>
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	f000 f85e 	bl	8003acc <_free_r>
 8003a10:	6961      	ldr	r1, [r4, #20]
 8003a12:	b111      	cbz	r1, 8003a1a <_reclaim_reent+0x46>
 8003a14:	4620      	mov	r0, r4
 8003a16:	f000 f859 	bl	8003acc <_free_r>
 8003a1a:	69e1      	ldr	r1, [r4, #28]
 8003a1c:	b111      	cbz	r1, 8003a24 <_reclaim_reent+0x50>
 8003a1e:	4620      	mov	r0, r4
 8003a20:	f000 f854 	bl	8003acc <_free_r>
 8003a24:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003a26:	b111      	cbz	r1, 8003a2e <_reclaim_reent+0x5a>
 8003a28:	4620      	mov	r0, r4
 8003a2a:	f000 f84f 	bl	8003acc <_free_r>
 8003a2e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a30:	b111      	cbz	r1, 8003a38 <_reclaim_reent+0x64>
 8003a32:	4620      	mov	r0, r4
 8003a34:	f000 f84a 	bl	8003acc <_free_r>
 8003a38:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003a3a:	b111      	cbz	r1, 8003a42 <_reclaim_reent+0x6e>
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	f000 f845 	bl	8003acc <_free_r>
 8003a42:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003a44:	b111      	cbz	r1, 8003a4c <_reclaim_reent+0x78>
 8003a46:	4620      	mov	r0, r4
 8003a48:	f000 f840 	bl	8003acc <_free_r>
 8003a4c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003a4e:	b111      	cbz	r1, 8003a56 <_reclaim_reent+0x82>
 8003a50:	4620      	mov	r0, r4
 8003a52:	f000 f83b 	bl	8003acc <_free_r>
 8003a56:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003a58:	b111      	cbz	r1, 8003a60 <_reclaim_reent+0x8c>
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f000 f836 	bl	8003acc <_free_r>
 8003a60:	6a23      	ldr	r3, [r4, #32]
 8003a62:	b14b      	cbz	r3, 8003a78 <_reclaim_reent+0xa4>
 8003a64:	4620      	mov	r0, r4
 8003a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003a6a:	4718      	bx	r3
 8003a6c:	680e      	ldr	r6, [r1, #0]
 8003a6e:	4620      	mov	r0, r4
 8003a70:	f000 f82c 	bl	8003acc <_free_r>
 8003a74:	4631      	mov	r1, r6
 8003a76:	e7bb      	b.n	80039f0 <_reclaim_reent+0x1c>
 8003a78:	bd70      	pop	{r4, r5, r6, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20000010 	.word	0x20000010

08003a80 <__libc_init_array>:
 8003a80:	b570      	push	{r4, r5, r6, lr}
 8003a82:	4d0d      	ldr	r5, [pc, #52]	@ (8003ab8 <__libc_init_array+0x38>)
 8003a84:	4c0d      	ldr	r4, [pc, #52]	@ (8003abc <__libc_init_array+0x3c>)
 8003a86:	1b64      	subs	r4, r4, r5
 8003a88:	10a4      	asrs	r4, r4, #2
 8003a8a:	2600      	movs	r6, #0
 8003a8c:	42a6      	cmp	r6, r4
 8003a8e:	d109      	bne.n	8003aa4 <__libc_init_array+0x24>
 8003a90:	4d0b      	ldr	r5, [pc, #44]	@ (8003ac0 <__libc_init_array+0x40>)
 8003a92:	4c0c      	ldr	r4, [pc, #48]	@ (8003ac4 <__libc_init_array+0x44>)
 8003a94:	f000 f870 	bl	8003b78 <_init>
 8003a98:	1b64      	subs	r4, r4, r5
 8003a9a:	10a4      	asrs	r4, r4, #2
 8003a9c:	2600      	movs	r6, #0
 8003a9e:	42a6      	cmp	r6, r4
 8003aa0:	d105      	bne.n	8003aae <__libc_init_array+0x2e>
 8003aa2:	bd70      	pop	{r4, r5, r6, pc}
 8003aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aa8:	4798      	blx	r3
 8003aaa:	3601      	adds	r6, #1
 8003aac:	e7ee      	b.n	8003a8c <__libc_init_array+0xc>
 8003aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ab2:	4798      	blx	r3
 8003ab4:	3601      	adds	r6, #1
 8003ab6:	e7f2      	b.n	8003a9e <__libc_init_array+0x1e>
 8003ab8:	08003c30 	.word	0x08003c30
 8003abc:	08003c30 	.word	0x08003c30
 8003ac0:	08003c30 	.word	0x08003c30
 8003ac4:	08003c34 	.word	0x08003c34

08003ac8 <__retarget_lock_acquire_recursive>:
 8003ac8:	4770      	bx	lr

08003aca <__retarget_lock_release_recursive>:
 8003aca:	4770      	bx	lr

08003acc <_free_r>:
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	4605      	mov	r5, r0
 8003ad0:	2900      	cmp	r1, #0
 8003ad2:	d041      	beq.n	8003b58 <_free_r+0x8c>
 8003ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ad8:	1f0c      	subs	r4, r1, #4
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	bfb8      	it	lt
 8003ade:	18e4      	addlt	r4, r4, r3
 8003ae0:	f000 f83e 	bl	8003b60 <__malloc_lock>
 8003ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b5c <_free_r+0x90>)
 8003ae6:	6813      	ldr	r3, [r2, #0]
 8003ae8:	b933      	cbnz	r3, 8003af8 <_free_r+0x2c>
 8003aea:	6063      	str	r3, [r4, #4]
 8003aec:	6014      	str	r4, [r2, #0]
 8003aee:	4628      	mov	r0, r5
 8003af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003af4:	f000 b83a 	b.w	8003b6c <__malloc_unlock>
 8003af8:	42a3      	cmp	r3, r4
 8003afa:	d908      	bls.n	8003b0e <_free_r+0x42>
 8003afc:	6820      	ldr	r0, [r4, #0]
 8003afe:	1821      	adds	r1, r4, r0
 8003b00:	428b      	cmp	r3, r1
 8003b02:	bf01      	itttt	eq
 8003b04:	6819      	ldreq	r1, [r3, #0]
 8003b06:	685b      	ldreq	r3, [r3, #4]
 8003b08:	1809      	addeq	r1, r1, r0
 8003b0a:	6021      	streq	r1, [r4, #0]
 8003b0c:	e7ed      	b.n	8003aea <_free_r+0x1e>
 8003b0e:	461a      	mov	r2, r3
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	b10b      	cbz	r3, 8003b18 <_free_r+0x4c>
 8003b14:	42a3      	cmp	r3, r4
 8003b16:	d9fa      	bls.n	8003b0e <_free_r+0x42>
 8003b18:	6811      	ldr	r1, [r2, #0]
 8003b1a:	1850      	adds	r0, r2, r1
 8003b1c:	42a0      	cmp	r0, r4
 8003b1e:	d10b      	bne.n	8003b38 <_free_r+0x6c>
 8003b20:	6820      	ldr	r0, [r4, #0]
 8003b22:	4401      	add	r1, r0
 8003b24:	1850      	adds	r0, r2, r1
 8003b26:	4283      	cmp	r3, r0
 8003b28:	6011      	str	r1, [r2, #0]
 8003b2a:	d1e0      	bne.n	8003aee <_free_r+0x22>
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	6053      	str	r3, [r2, #4]
 8003b32:	4408      	add	r0, r1
 8003b34:	6010      	str	r0, [r2, #0]
 8003b36:	e7da      	b.n	8003aee <_free_r+0x22>
 8003b38:	d902      	bls.n	8003b40 <_free_r+0x74>
 8003b3a:	230c      	movs	r3, #12
 8003b3c:	602b      	str	r3, [r5, #0]
 8003b3e:	e7d6      	b.n	8003aee <_free_r+0x22>
 8003b40:	6820      	ldr	r0, [r4, #0]
 8003b42:	1821      	adds	r1, r4, r0
 8003b44:	428b      	cmp	r3, r1
 8003b46:	bf04      	itt	eq
 8003b48:	6819      	ldreq	r1, [r3, #0]
 8003b4a:	685b      	ldreq	r3, [r3, #4]
 8003b4c:	6063      	str	r3, [r4, #4]
 8003b4e:	bf04      	itt	eq
 8003b50:	1809      	addeq	r1, r1, r0
 8003b52:	6021      	streq	r1, [r4, #0]
 8003b54:	6054      	str	r4, [r2, #4]
 8003b56:	e7ca      	b.n	8003aee <_free_r+0x22>
 8003b58:	bd38      	pop	{r3, r4, r5, pc}
 8003b5a:	bf00      	nop
 8003b5c:	2000424c 	.word	0x2000424c

08003b60 <__malloc_lock>:
 8003b60:	4801      	ldr	r0, [pc, #4]	@ (8003b68 <__malloc_lock+0x8>)
 8003b62:	f7ff bfb1 	b.w	8003ac8 <__retarget_lock_acquire_recursive>
 8003b66:	bf00      	nop
 8003b68:	20004248 	.word	0x20004248

08003b6c <__malloc_unlock>:
 8003b6c:	4801      	ldr	r0, [pc, #4]	@ (8003b74 <__malloc_unlock+0x8>)
 8003b6e:	f7ff bfac 	b.w	8003aca <__retarget_lock_release_recursive>
 8003b72:	bf00      	nop
 8003b74:	20004248 	.word	0x20004248

08003b78 <_init>:
 8003b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7a:	bf00      	nop
 8003b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7e:	bc08      	pop	{r3}
 8003b80:	469e      	mov	lr, r3
 8003b82:	4770      	bx	lr

08003b84 <_fini>:
 8003b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b86:	bf00      	nop
 8003b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b8a:	bc08      	pop	{r3}
 8003b8c:	469e      	mov	lr, r3
 8003b8e:	4770      	bx	lr
