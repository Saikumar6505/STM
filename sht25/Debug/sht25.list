
sht25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b54  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  08008cf8  08008cf8  00009cf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009280  08009280  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009280  08009280  0000a280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009288  08009288  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009288  08009288  0000a288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800928c  0800928c  0000a28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009290  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200001d4  08009464  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08009464  0000b430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a85b  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001902  00000000  00000000  00015a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  00017368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ca  00000000  00000000  00017d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168c8  00000000  00000000  0001852a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf9c  00000000  00000000  0002edf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089f23  00000000  00000000  0003ad8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4cb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ef0  00000000  00000000  000c4cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000c8be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008cdc 	.word	0x08008cdc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08008cdc 	.word	0x08008cdc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <WE10_Init>:
    ITM_SendChar(ch);
    return ch;
}

void WE10_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b0a0      	sub	sp, #128	@ 0x80
 8000ff8:	af00      	add	r7, sp, #0
	char buffer[128];
	sprintf (&buffer[0], "CMD+RESET\r\n");
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4973      	ldr	r1, [pc, #460]	@ (80011cc <WE10_Init+0x1d8>)
 8000ffe:	4618      	mov	r0, r3
 8001000:	f004 fa30 	bl	8005464 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001004:	463b      	mov	r3, r7
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff f93a 	bl	8000280 <strlen>
 800100c:	4603      	mov	r3, r0
 800100e:	b29a      	uxth	r2, r3
 8001010:	4639      	mov	r1, r7
 8001012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001016:	486e      	ldr	r0, [pc, #440]	@ (80011d0 <WE10_Init+0x1dc>)
 8001018:	f002 fe92 	bl	8003d40 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800101c:	463b      	mov	r3, r7
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff f92e 	bl	8000280 <strlen>
 8001024:	4603      	mov	r3, r0
 8001026:	b29a      	uxth	r2, r3
 8001028:	4639      	mov	r1, r7
 800102a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102e:	4869      	ldr	r0, [pc, #420]	@ (80011d4 <WE10_Init+0x1e0>)
 8001030:	f002 fe86 	bl	8003d40 <HAL_UART_Transmit>

		HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001034:	463b      	mov	r3, r7
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff f922 	bl	8000280 <strlen>
 800103c:	4603      	mov	r3, r0
 800103e:	b29a      	uxth	r2, r3
 8001040:	4639      	mov	r1, r7
 8001042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001046:	4862      	ldr	r0, [pc, #392]	@ (80011d0 <WE10_Init+0x1dc>)
 8001048:	f002 ff05 	bl	8003e56 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800104c:	463b      	mov	r3, r7
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff f916 	bl	8000280 <strlen>
 8001054:	4603      	mov	r3, r0
 8001056:	b29a      	uxth	r2, r3
 8001058:	4639      	mov	r1, r7
 800105a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800105e:	485d      	ldr	r0, [pc, #372]	@ (80011d4 <WE10_Init+0x1e0>)
 8001060:	f002 fe6e 	bl	8003d40 <HAL_UART_Transmit>


		/*********  CMD+WIFIMODE=1  **********/
		//memset(&buffer[0],0x00,strlen(buffer));
		sprintf (&buffer[0], "CMD+WIFIMODE=1\r\n");
 8001064:	463b      	mov	r3, r7
 8001066:	495c      	ldr	r1, [pc, #368]	@ (80011d8 <WE10_Init+0x1e4>)
 8001068:	4618      	mov	r0, r3
 800106a:	f004 f9fb 	bl	8005464 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800106e:	463b      	mov	r3, r7
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff f905 	bl	8000280 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	b29a      	uxth	r2, r3
 800107a:	4639      	mov	r1, r7
 800107c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001080:	4853      	ldr	r0, [pc, #332]	@ (80011d0 <WE10_Init+0x1dc>)
 8001082:	f002 fe5d 	bl	8003d40 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001086:	463b      	mov	r3, r7
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff f8f9 	bl	8000280 <strlen>
 800108e:	4603      	mov	r3, r0
 8001090:	b29a      	uxth	r2, r3
 8001092:	4639      	mov	r1, r7
 8001094:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001098:	484e      	ldr	r0, [pc, #312]	@ (80011d4 <WE10_Init+0x1e0>)
 800109a:	f002 fe51 	bl	8003d40 <HAL_UART_Transmit>

		HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800109e:	463b      	mov	r3, r7
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff f8ed 	bl	8000280 <strlen>
 80010a6:	4603      	mov	r3, r0
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	4639      	mov	r1, r7
 80010ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b0:	4847      	ldr	r0, [pc, #284]	@ (80011d0 <WE10_Init+0x1dc>)
 80010b2:	f002 fed0 	bl	8003e56 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80010b6:	463b      	mov	r3, r7
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff f8e1 	bl	8000280 <strlen>
 80010be:	4603      	mov	r3, r0
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	4639      	mov	r1, r7
 80010c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c8:	4842      	ldr	r0, [pc, #264]	@ (80011d4 <WE10_Init+0x1e0>)
 80010ca:	f002 fe39 	bl	8003d40 <HAL_UART_Transmit>
		HAL_Delay(2000);
 80010ce:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010d2:	f000 feab 	bl	8001e2c <HAL_Delay>


		/********* CMD+CONTOAP=SSID,PASSWD **********/
		//memset(&buffer[0],0x00,strlen(buffer));
		sprintf (&buffer[0], "CMD+CONTOAP=VIVO,12345678\r\n");
 80010d6:	463b      	mov	r3, r7
 80010d8:	4940      	ldr	r1, [pc, #256]	@ (80011dc <WE10_Init+0x1e8>)
 80010da:	4618      	mov	r0, r3
 80010dc:	f004 f9c2 	bl	8005464 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 80010e0:	463b      	mov	r3, r7
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f8cc 	bl	8000280 <strlen>
 80010e8:	4603      	mov	r3, r0
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	4639      	mov	r1, r7
 80010ee:	f242 7310 	movw	r3, #10000	@ 0x2710
 80010f2:	4837      	ldr	r0, [pc, #220]	@ (80011d0 <WE10_Init+0x1dc>)
 80010f4:	f002 fe24 	bl	8003d40 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 80010f8:	463b      	mov	r3, r7
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f8c0 	bl	8000280 <strlen>
 8001100:	4603      	mov	r3, r0
 8001102:	b29a      	uxth	r2, r3
 8001104:	4639      	mov	r1, r7
 8001106:	f242 7310 	movw	r3, #10000	@ 0x2710
 800110a:	4832      	ldr	r0, [pc, #200]	@ (80011d4 <WE10_Init+0x1e0>)
 800110c:	f002 fe18 	bl	8003d40 <HAL_UART_Transmit>
		//memset(&buffer[0],0x00,strlen(buffer));
		HAL_Delay(2000);
 8001110:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001114:	f000 fe8a 	bl	8001e2c <HAL_Delay>
		HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 8001118:	463b      	mov	r3, r7
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f8b0 	bl	8000280 <strlen>
 8001120:	4603      	mov	r3, r0
 8001122:	b29a      	uxth	r2, r3
 8001124:	4639      	mov	r1, r7
 8001126:	f242 7310 	movw	r3, #10000	@ 0x2710
 800112a:	4829      	ldr	r0, [pc, #164]	@ (80011d0 <WE10_Init+0x1dc>)
 800112c:	f002 fe93 	bl	8003e56 <HAL_UART_Receive>
		HAL_Delay(500);
 8001130:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001134:	f000 fe7a 	bl	8001e2c <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 8001138:	463b      	mov	r3, r7
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f8a0 	bl	8000280 <strlen>
 8001140:	4603      	mov	r3, r0
 8001142:	b29a      	uxth	r2, r3
 8001144:	4639      	mov	r1, r7
 8001146:	f242 7310 	movw	r3, #10000	@ 0x2710
 800114a:	4822      	ldr	r0, [pc, #136]	@ (80011d4 <WE10_Init+0x1e0>)
 800114c:	f002 fdf8 	bl	8003d40 <HAL_UART_Transmit>

		/********* CMD?WIFI**********/
		//memset(&buffer[0],0x00,strlen(buffer));
		sprintf (&buffer[0], "CMD?WIFI\r\n");
 8001150:	463b      	mov	r3, r7
 8001152:	4923      	ldr	r1, [pc, #140]	@ (80011e0 <WE10_Init+0x1ec>)
 8001154:	4618      	mov	r0, r3
 8001156:	f004 f985 	bl	8005464 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 800115a:	463b      	mov	r3, r7
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f88f 	bl	8000280 <strlen>
 8001162:	4603      	mov	r3, r0
 8001164:	b29a      	uxth	r2, r3
 8001166:	4639      	mov	r1, r7
 8001168:	f242 7310 	movw	r3, #10000	@ 0x2710
 800116c:	4818      	ldr	r0, [pc, #96]	@ (80011d0 <WE10_Init+0x1dc>)
 800116e:	f002 fde7 	bl	8003d40 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 8001172:	463b      	mov	r3, r7
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f883 	bl	8000280 <strlen>
 800117a:	4603      	mov	r3, r0
 800117c:	b29a      	uxth	r2, r3
 800117e:	4639      	mov	r1, r7
 8001180:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001184:	4813      	ldr	r0, [pc, #76]	@ (80011d4 <WE10_Init+0x1e0>)
 8001186:	f002 fddb 	bl	8003d40 <HAL_UART_Transmit>
	//	memset(&buffer[0],0x00,strlen(buffer));
	//	HAL_Delay(500);
		HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 800118a:	463b      	mov	r3, r7
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f877 	bl	8000280 <strlen>
 8001192:	4603      	mov	r3, r0
 8001194:	b29a      	uxth	r2, r3
 8001196:	4639      	mov	r1, r7
 8001198:	f242 7310 	movw	r3, #10000	@ 0x2710
 800119c:	480c      	ldr	r0, [pc, #48]	@ (80011d0 <WE10_Init+0x1dc>)
 800119e:	f002 fe5a 	bl	8003e56 <HAL_UART_Receive>
		HAL_Delay(500);
 80011a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011a6:	f000 fe41 	bl	8001e2c <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 80011aa:	463b      	mov	r3, r7
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f867 	bl	8000280 <strlen>
 80011b2:	4603      	mov	r3, r0
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	4639      	mov	r1, r7
 80011b8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80011bc:	4805      	ldr	r0, [pc, #20]	@ (80011d4 <WE10_Init+0x1e0>)
 80011be:	f002 fdbf 	bl	8003d40 <HAL_UART_Transmit>

}
 80011c2:	bf00      	nop
 80011c4:	3780      	adds	r7, #128	@ 0x80
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	08008cf8 	.word	0x08008cf8
 80011d0:	20000244 	.word	0x20000244
 80011d4:	2000028c 	.word	0x2000028c
 80011d8:	08008d04 	.word	0x08008d04
 80011dc:	08008d18 	.word	0x08008d18
 80011e0:	08008d34 	.word	0x08008d34

080011e4 <MQTT_Init>:
void MQTT_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b0a0      	sub	sp, #128	@ 0x80
 80011e8:	af00      	add	r7, sp, #0
	char buffer[128];
	sprintf (&buffer[0], "CMD+MQTTNETCFG=dev.rightech.io,1883\r\n");
 80011ea:	463b      	mov	r3, r7
 80011ec:	4958      	ldr	r1, [pc, #352]	@ (8001350 <MQTT_Init+0x16c>)
 80011ee:	4618      	mov	r0, r3
 80011f0:	f004 f938 	bl	8005464 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 80011f4:	463b      	mov	r3, r7
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f842 	bl	8000280 <strlen>
 80011fc:	4603      	mov	r3, r0
 80011fe:	b29a      	uxth	r2, r3
 8001200:	4639      	mov	r1, r7
 8001202:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001206:	4853      	ldr	r0, [pc, #332]	@ (8001354 <MQTT_Init+0x170>)
 8001208:	f002 fd9a 	bl	8003d40 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 800120c:	463b      	mov	r3, r7
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f836 	bl	8000280 <strlen>
 8001214:	4603      	mov	r3, r0
 8001216:	b29a      	uxth	r2, r3
 8001218:	4639      	mov	r1, r7
 800121a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800121e:	484e      	ldr	r0, [pc, #312]	@ (8001358 <MQTT_Init+0x174>)
 8001220:	f002 fd8e 	bl	8003d40 <HAL_UART_Transmit>
		//memset(&buffer[0],0x00,strlen(buffer));
		//HAL_Delay(500);
		HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 8001224:	463b      	mov	r3, r7
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f82a 	bl	8000280 <strlen>
 800122c:	4603      	mov	r3, r0
 800122e:	b29a      	uxth	r2, r3
 8001230:	4639      	mov	r1, r7
 8001232:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001236:	4847      	ldr	r0, [pc, #284]	@ (8001354 <MQTT_Init+0x170>)
 8001238:	f002 fe0d 	bl	8003e56 <HAL_UART_Receive>
		HAL_Delay(500);
 800123c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001240:	f000 fdf4 	bl	8001e2c <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 8001244:	463b      	mov	r3, r7
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f81a 	bl	8000280 <strlen>
 800124c:	4603      	mov	r3, r0
 800124e:	b29a      	uxth	r2, r3
 8001250:	4639      	mov	r1, r7
 8001252:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001256:	4840      	ldr	r0, [pc, #256]	@ (8001358 <MQTT_Init+0x174>)
 8001258:	f002 fd72 	bl	8003d40 <HAL_UART_Transmit>


		/*********CMD+MQTTCONCFG **********/
		//memset(&buffer[0],0x00,strlen(buffer));
		sprintf (&buffer[0], "CMD+MQTTCONCFG=3,mqtt-saikumarsunny2002-3ruesz,,,,,,,,,\r\n");
 800125c:	463b      	mov	r3, r7
 800125e:	493f      	ldr	r1, [pc, #252]	@ (800135c <MQTT_Init+0x178>)
 8001260:	4618      	mov	r0, r3
 8001262:	f004 f8ff 	bl	8005464 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001266:	463b      	mov	r3, r7
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f809 	bl	8000280 <strlen>
 800126e:	4603      	mov	r3, r0
 8001270:	b29a      	uxth	r2, r3
 8001272:	4639      	mov	r1, r7
 8001274:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001278:	4836      	ldr	r0, [pc, #216]	@ (8001354 <MQTT_Init+0x170>)
 800127a:	f002 fd61 	bl	8003d40 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800127e:	463b      	mov	r3, r7
 8001280:	4618      	mov	r0, r3
 8001282:	f7fe fffd 	bl	8000280 <strlen>
 8001286:	4603      	mov	r3, r0
 8001288:	b29a      	uxth	r2, r3
 800128a:	4639      	mov	r1, r7
 800128c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001290:	4831      	ldr	r0, [pc, #196]	@ (8001358 <MQTT_Init+0x174>)
 8001292:	f002 fd55 	bl	8003d40 <HAL_UART_Transmit>
		//memset(&buffer[0],0x00,strlen(buffer));
		//HAL_Delay(500);
		HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001296:	463b      	mov	r3, r7
 8001298:	4618      	mov	r0, r3
 800129a:	f7fe fff1 	bl	8000280 <strlen>
 800129e:	4603      	mov	r3, r0
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	4639      	mov	r1, r7
 80012a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a8:	482a      	ldr	r0, [pc, #168]	@ (8001354 <MQTT_Init+0x170>)
 80012aa:	f002 fdd4 	bl	8003e56 <HAL_UART_Receive>
		HAL_Delay(500);
 80012ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012b2:	f000 fdbb 	bl	8001e2c <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80012b6:	463b      	mov	r3, r7
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7fe ffe1 	bl	8000280 <strlen>
 80012be:	4603      	mov	r3, r0
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	4639      	mov	r1, r7
 80012c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012c8:	4823      	ldr	r0, [pc, #140]	@ (8001358 <MQTT_Init+0x174>)
 80012ca:	f002 fd39 	bl	8003d40 <HAL_UART_Transmit>


		/*********CMD+MQTTSTART **********/
		//memset(&buffer[0],0x00,strlen(buffer));
		sprintf (&buffer[0], "CMD+MQTTSTART=1\r\n");
 80012ce:	463b      	mov	r3, r7
 80012d0:	4923      	ldr	r1, [pc, #140]	@ (8001360 <MQTT_Init+0x17c>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	f004 f8c6 	bl	8005464 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80012d8:	463b      	mov	r3, r7
 80012da:	4618      	mov	r0, r3
 80012dc:	f7fe ffd0 	bl	8000280 <strlen>
 80012e0:	4603      	mov	r3, r0
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	4639      	mov	r1, r7
 80012e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ea:	481a      	ldr	r0, [pc, #104]	@ (8001354 <MQTT_Init+0x170>)
 80012ec:	f002 fd28 	bl	8003d40 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80012f0:	463b      	mov	r3, r7
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7fe ffc4 	bl	8000280 <strlen>
 80012f8:	4603      	mov	r3, r0
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	4639      	mov	r1, r7
 80012fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001302:	4815      	ldr	r0, [pc, #84]	@ (8001358 <MQTT_Init+0x174>)
 8001304:	f002 fd1c 	bl	8003d40 <HAL_UART_Transmit>
	//	memset(&buffer[0],0x00,strlen(buffer));
		HAL_Delay(5000);
 8001308:	f241 3088 	movw	r0, #5000	@ 0x1388
 800130c:	f000 fd8e 	bl	8001e2c <HAL_Delay>
		HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001310:	463b      	mov	r3, r7
 8001312:	4618      	mov	r0, r3
 8001314:	f7fe ffb4 	bl	8000280 <strlen>
 8001318:	4603      	mov	r3, r0
 800131a:	b29a      	uxth	r2, r3
 800131c:	4639      	mov	r1, r7
 800131e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001322:	480c      	ldr	r0, [pc, #48]	@ (8001354 <MQTT_Init+0x170>)
 8001324:	f002 fd97 	bl	8003e56 <HAL_UART_Receive>
		HAL_Delay(500);
 8001328:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800132c:	f000 fd7e 	bl	8001e2c <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001330:	463b      	mov	r3, r7
 8001332:	4618      	mov	r0, r3
 8001334:	f7fe ffa4 	bl	8000280 <strlen>
 8001338:	4603      	mov	r3, r0
 800133a:	b29a      	uxth	r2, r3
 800133c:	4639      	mov	r1, r7
 800133e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001342:	4805      	ldr	r0, [pc, #20]	@ (8001358 <MQTT_Init+0x174>)
 8001344:	f002 fcfc 	bl	8003d40 <HAL_UART_Transmit>

}
 8001348:	bf00      	nop
 800134a:	3780      	adds	r7, #128	@ 0x80
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	08008d40 	.word	0x08008d40
 8001354:	20000244 	.word	0x20000244
 8001358:	2000028c 	.word	0x2000028c
 800135c:	08008d68 	.word	0x08008d68
 8001360:	08008da4 	.word	0x08008da4

08001364 <mqtt_data_send>:

void mqtt_data_send(float temp, float hum) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b09c      	sub	sp, #112	@ 0x70
 8001368:	af00      	add	r7, sp, #0
 800136a:	ed87 0a01 	vstr	s0, [r7, #4]
 800136e:	edc7 0a00 	vstr	s1, [r7]
    char buffer[100];

    // Send temperature
    sprintf(buffer, "CMD+MQTTPUB=base/state/temperature,%.2f C\r\n", temp);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff f8f0 	bl	8000558 <__aeabi_f2d>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	f107 000c 	add.w	r0, r7, #12
 8001380:	4916      	ldr	r1, [pc, #88]	@ (80013dc <mqtt_data_send+0x78>)
 8001382:	f004 f86f 	bl	8005464 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	4618      	mov	r0, r3
 800138c:	f7fe ff78 	bl	8000280 <strlen>
 8001390:	4603      	mov	r3, r0
 8001392:	b29a      	uxth	r2, r3
 8001394:	f107 010c 	add.w	r1, r7, #12
 8001398:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800139c:	4810      	ldr	r0, [pc, #64]	@ (80013e0 <mqtt_data_send+0x7c>)
 800139e:	f002 fccf 	bl	8003d40 <HAL_UART_Transmit>
        // Handle transmission error for temperature


    // Send humidity
    sprintf(buffer, "CMD+MQTTPUB=base/state/humidity,%.2f %%\r\n", hum);
 80013a2:	6838      	ldr	r0, [r7, #0]
 80013a4:	f7ff f8d8 	bl	8000558 <__aeabi_f2d>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	f107 000c 	add.w	r0, r7, #12
 80013b0:	490c      	ldr	r1, [pc, #48]	@ (80013e4 <mqtt_data_send+0x80>)
 80013b2:	f004 f857 	bl	8005464 <siprintf>
   HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000) ;
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7fe ff60 	bl	8000280 <strlen>
 80013c0:	4603      	mov	r3, r0
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	f107 010c 	add.w	r1, r7, #12
 80013c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013cc:	4804      	ldr	r0, [pc, #16]	@ (80013e0 <mqtt_data_send+0x7c>)
 80013ce:	f002 fcb7 	bl	8003d40 <HAL_UART_Transmit>
        // Handle transmission error for humidity

}
 80013d2:	bf00      	nop
 80013d4:	3770      	adds	r7, #112	@ 0x70
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	08008db8 	.word	0x08008db8
 80013e0:	20000244 	.word	0x20000244
 80013e4:	08008de4 	.word	0x08008de4

080013e8 <SHT25_ReadTemperature>:

float SHT25_ReadTemperature(void) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af02      	add	r7, sp, #8
    uint8_t command = 0xE3;  // Command to read temperature
 80013ee:	23e3      	movs	r3, #227	@ 0xe3
 80013f0:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];

    HAL_I2C_Master_Transmit(&hi2c1, SHT25_I2C_ADDRESS << 1, &command, 1, HAL_MAX_DELAY);  // Send command
 80013f2:	1dfa      	adds	r2, r7, #7
 80013f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2301      	movs	r3, #1
 80013fc:	2180      	movs	r1, #128	@ 0x80
 80013fe:	4828      	ldr	r0, [pc, #160]	@ (80014a0 <SHT25_ReadTemperature+0xb8>)
 8001400:	f001 f900 	bl	8002604 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, SHT25_I2C_ADDRESS << 1, data, 2, HAL_MAX_DELAY);       // Receive data
 8001404:	1d3a      	adds	r2, r7, #4
 8001406:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2302      	movs	r3, #2
 800140e:	2180      	movs	r1, #128	@ 0x80
 8001410:	4823      	ldr	r0, [pc, #140]	@ (80014a0 <SHT25_ReadTemperature+0xb8>)
 8001412:	f001 f9f5 	bl	8002800 <HAL_I2C_Master_Receive>

    uint16_t tempRaw = (data[0] << 8) | data[1];
 8001416:	793b      	ldrb	r3, [r7, #4]
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	b21a      	sxth	r2, r3
 800141c:	797b      	ldrb	r3, [r7, #5]
 800141e:	b21b      	sxth	r3, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	b21b      	sxth	r3, r3
 8001424:	81fb      	strh	r3, [r7, #14]
    tempRaw &= ~0x0003;  // Clear status bits
 8001426:	89fb      	ldrh	r3, [r7, #14]
 8001428:	f023 0303 	bic.w	r3, r3, #3
 800142c:	81fb      	strh	r3, [r7, #14]
    float temperature = -46.85 + (175.72 * (float)tempRaw / 65536.0);
 800142e:	89fb      	ldrh	r3, [r7, #14]
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001438:	ee17 0a90 	vmov	r0, s15
 800143c:	f7ff f88c 	bl	8000558 <__aeabi_f2d>
 8001440:	a313      	add	r3, pc, #76	@ (adr r3, 8001490 <SHT25_ReadTemperature+0xa8>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff f8df 	bl	8000608 <__aeabi_dmul>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <SHT25_ReadTemperature+0xbc>)
 8001458:	f7ff fa00 	bl	800085c <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	a30c      	add	r3, pc, #48	@ (adr r3, 8001498 <SHT25_ReadTemperature+0xb0>)
 8001466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146a:	f7fe ff15 	bl	8000298 <__aeabi_dsub>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff fbbf 	bl	8000bf8 <__aeabi_d2f>
 800147a:	4603      	mov	r3, r0
 800147c:	60bb      	str	r3, [r7, #8]
    return temperature;
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	ee07 3a90 	vmov	s15, r3
}
 8001484:	eeb0 0a67 	vmov.f32	s0, s15
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	3d70a3d7 	.word	0x3d70a3d7
 8001494:	4065f70a 	.word	0x4065f70a
 8001498:	cccccccd 	.word	0xcccccccd
 800149c:	40476ccc 	.word	0x40476ccc
 80014a0:	200001f0 	.word	0x200001f0
 80014a4:	40f00000 	.word	0x40f00000

080014a8 <SHT25_ReadHumidity>:
float SHT25_ReadHumidity(void) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af02      	add	r7, sp, #8
    uint8_t command = 0xE5;  // Command to read humidity
 80014ae:	23e5      	movs	r3, #229	@ 0xe5
 80014b0:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];

    HAL_I2C_Master_Transmit(&hi2c1, SHT25_I2C_ADDRESS << 1, &command, 1, HAL_MAX_DELAY);  // Send command
 80014b2:	1dfa      	adds	r2, r7, #7
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2301      	movs	r3, #1
 80014bc:	2180      	movs	r1, #128	@ 0x80
 80014be:	4824      	ldr	r0, [pc, #144]	@ (8001550 <SHT25_ReadHumidity+0xa8>)
 80014c0:	f001 f8a0 	bl	8002604 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, SHT25_I2C_ADDRESS << 1, data, 2, HAL_MAX_DELAY);       // Receive data
 80014c4:	1d3a      	adds	r2, r7, #4
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2302      	movs	r3, #2
 80014ce:	2180      	movs	r1, #128	@ 0x80
 80014d0:	481f      	ldr	r0, [pc, #124]	@ (8001550 <SHT25_ReadHumidity+0xa8>)
 80014d2:	f001 f995 	bl	8002800 <HAL_I2C_Master_Receive>

    uint16_t humRaw = (data[0] << 8) | data[1];
 80014d6:	793b      	ldrb	r3, [r7, #4]
 80014d8:	021b      	lsls	r3, r3, #8
 80014da:	b21a      	sxth	r2, r3
 80014dc:	797b      	ldrb	r3, [r7, #5]
 80014de:	b21b      	sxth	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	81fb      	strh	r3, [r7, #14]
    humRaw &= ~0x0003;  // Clear status bits
 80014e6:	89fb      	ldrh	r3, [r7, #14]
 80014e8:	f023 0303 	bic.w	r3, r3, #3
 80014ec:	81fb      	strh	r3, [r7, #14]
    float humidity = -6.0 + (125.0 * (float)humRaw / 65536.0);
 80014ee:	89fb      	ldrh	r3, [r7, #14]
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f8:	ee17 0a90 	vmov	r0, s15
 80014fc:	f7ff f82c 	bl	8000558 <__aeabi_f2d>
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <SHT25_ReadHumidity+0xac>)
 8001506:	f7ff f87f 	bl	8000608 <__aeabi_dmul>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <SHT25_ReadHumidity+0xb0>)
 8001518:	f7ff f9a0 	bl	800085c <__aeabi_ddiv>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <SHT25_ReadHumidity+0xb4>)
 800152a:	f7fe feb5 	bl	8000298 <__aeabi_dsub>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	f7ff fb5f 	bl	8000bf8 <__aeabi_d2f>
 800153a:	4603      	mov	r3, r0
 800153c:	60bb      	str	r3, [r7, #8]
    return humidity;
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	ee07 3a90 	vmov	s15, r3
}
 8001544:	eeb0 0a67 	vmov.f32	s0, s15
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200001f0 	.word	0x200001f0
 8001554:	405f4000 	.word	0x405f4000
 8001558:	40f00000 	.word	0x40f00000
 800155c:	40180000 	.word	0x40180000

08001560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001560:	b5b0      	push	{r4, r5, r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001566:	f000 fbef 	bl	8001d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800156a:	f000 f847 	bl	80015fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800156e:	f000 f931 	bl	80017d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001572:	f000 f8ad 	bl	80016d0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001576:	f000 f903 	bl	8001780 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800157a:	f000 f8d7 	bl	800172c <MX_USART1_UART_Init>
  WE10_Init();
 800157e:	f7ff fd39 	bl	8000ff4 <WE10_Init>
    MQTT_Init();
 8001582:	f7ff fe2f 	bl	80011e4 <MQTT_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
       while (1) {
           temperature = SHT25_ReadTemperature();
 8001586:	f7ff ff2f 	bl	80013e8 <SHT25_ReadTemperature>
 800158a:	eef0 7a40 	vmov.f32	s15, s0
 800158e:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <main+0x90>)
 8001590:	edc3 7a00 	vstr	s15, [r3]
           humidity = SHT25_ReadHumidity();
 8001594:	f7ff ff88 	bl	80014a8 <SHT25_ReadHumidity>
 8001598:	eef0 7a40 	vmov.f32	s15, s0
 800159c:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <main+0x94>)
 800159e:	edc3 7a00 	vstr	s15, [r3]
           mqtt_data_send(temperature,humidity);  // Now sends the correct temperature
 80015a2:	4b13      	ldr	r3, [pc, #76]	@ (80015f0 <main+0x90>)
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <main+0x94>)
 80015aa:	ed93 7a00 	vldr	s14, [r3]
 80015ae:	eef0 0a47 	vmov.f32	s1, s14
 80015b2:	eeb0 0a67 	vmov.f32	s0, s15
 80015b6:	f7ff fed5 	bl	8001364 <mqtt_data_send>
           printf("Temperature: %.2f C, Humidity: %.2f%%\n", temperature, humidity);
 80015ba:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <main+0x90>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe ffca 	bl	8000558 <__aeabi_f2d>
 80015c4:	4604      	mov	r4, r0
 80015c6:	460d      	mov	r5, r1
 80015c8:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <main+0x94>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ffc3 	bl	8000558 <__aeabi_f2d>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	e9cd 2300 	strd	r2, r3, [sp]
 80015da:	4622      	mov	r2, r4
 80015dc:	462b      	mov	r3, r5
 80015de:	4806      	ldr	r0, [pc, #24]	@ (80015f8 <main+0x98>)
 80015e0:	f003 ff2e 	bl	8005440 <iprintf>
           HAL_Delay(1000);
 80015e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015e8:	f000 fc20 	bl	8001e2c <HAL_Delay>
           temperature = SHT25_ReadTemperature();
 80015ec:	bf00      	nop
 80015ee:	e7ca      	b.n	8001586 <main+0x26>
 80015f0:	200002d4 	.word	0x200002d4
 80015f4:	200002d8 	.word	0x200002d8
 80015f8:	08008e10 	.word	0x08008e10

080015fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b094      	sub	sp, #80	@ 0x50
 8001600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001602:	f107 0320 	add.w	r3, r7, #32
 8001606:	2230      	movs	r2, #48	@ 0x30
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f003 ff8d 	bl	800552a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	4b28      	ldr	r3, [pc, #160]	@ (80016c8 <SystemClock_Config+0xcc>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001628:	4a27      	ldr	r2, [pc, #156]	@ (80016c8 <SystemClock_Config+0xcc>)
 800162a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800162e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001630:	4b25      	ldr	r3, [pc, #148]	@ (80016c8 <SystemClock_Config+0xcc>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800163c:	2300      	movs	r3, #0
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	4b22      	ldr	r3, [pc, #136]	@ (80016cc <SystemClock_Config+0xd0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a21      	ldr	r2, [pc, #132]	@ (80016cc <SystemClock_Config+0xd0>)
 8001646:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b1f      	ldr	r3, [pc, #124]	@ (80016cc <SystemClock_Config+0xd0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001658:	2302      	movs	r3, #2
 800165a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800165c:	2301      	movs	r3, #1
 800165e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001660:	2310      	movs	r3, #16
 8001662:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001664:	2302      	movs	r3, #2
 8001666:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001668:	2300      	movs	r3, #0
 800166a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800166c:	2310      	movs	r3, #16
 800166e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001670:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001674:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001676:	2304      	movs	r3, #4
 8001678:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800167a:	2304      	movs	r3, #4
 800167c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167e:	f107 0320 	add.w	r3, r7, #32
 8001682:	4618      	mov	r0, r3
 8001684:	f001 fe74 	bl	8003370 <HAL_RCC_OscConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800168e:	f000 f90f 	bl	80018b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001692:	230f      	movs	r3, #15
 8001694:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001696:	2302      	movs	r3, #2
 8001698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800169e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	2102      	movs	r1, #2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f002 f8d6 	bl	8003860 <HAL_RCC_ClockConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016ba:	f000 f8f9 	bl	80018b0 <Error_Handler>
  }
}
 80016be:	bf00      	nop
 80016c0:	3750      	adds	r7, #80	@ 0x50
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40007000 	.word	0x40007000

080016d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016d4:	4b12      	ldr	r3, [pc, #72]	@ (8001720 <MX_I2C1_Init+0x50>)
 80016d6:	4a13      	ldr	r2, [pc, #76]	@ (8001724 <MX_I2C1_Init+0x54>)
 80016d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016da:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <MX_I2C1_Init+0x50>)
 80016dc:	4a12      	ldr	r2, [pc, #72]	@ (8001728 <MX_I2C1_Init+0x58>)
 80016de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <MX_I2C1_Init+0x50>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <MX_I2C1_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <MX_I2C1_Init+0x50>)
 80016ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <MX_I2C1_Init+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016fa:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <MX_I2C1_Init+0x50>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001700:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <MX_I2C1_Init+0x50>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001706:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <MX_I2C1_Init+0x50>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800170c:	4804      	ldr	r0, [pc, #16]	@ (8001720 <MX_I2C1_Init+0x50>)
 800170e:	f000 fe35 	bl	800237c <HAL_I2C_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001718:	f000 f8ca 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200001f0 	.word	0x200001f0
 8001724:	40005400 	.word	0x40005400
 8001728:	000186a0 	.word	0x000186a0

0800172c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001730:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <MX_USART1_UART_Init+0x4c>)
 8001732:	4a12      	ldr	r2, [pc, #72]	@ (800177c <MX_USART1_UART_Init+0x50>)
 8001734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001736:	4b10      	ldr	r3, [pc, #64]	@ (8001778 <MX_USART1_UART_Init+0x4c>)
 8001738:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800173c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <MX_USART1_UART_Init+0x4c>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <MX_USART1_UART_Init+0x4c>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800174a:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <MX_USART1_UART_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <MX_USART1_UART_Init+0x4c>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <MX_USART1_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <MX_USART1_UART_Init+0x4c>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001762:	4805      	ldr	r0, [pc, #20]	@ (8001778 <MX_USART1_UART_Init+0x4c>)
 8001764:	f002 fa9c 	bl	8003ca0 <HAL_UART_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800176e:	f000 f89f 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000244 	.word	0x20000244
 800177c:	40011000 	.word	0x40011000

08001780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001784:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <MX_USART2_UART_Init+0x4c>)
 8001786:	4a12      	ldr	r2, [pc, #72]	@ (80017d0 <MX_USART2_UART_Init+0x50>)
 8001788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <MX_USART2_UART_Init+0x4c>)
 800178c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001792:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <MX_USART2_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001798:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <MX_USART2_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <MX_USART2_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a4:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <MX_USART2_UART_Init+0x4c>)
 80017a6:	220c      	movs	r2, #12
 80017a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <MX_USART2_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b0:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <MX_USART2_UART_Init+0x4c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017b6:	4805      	ldr	r0, [pc, #20]	@ (80017cc <MX_USART2_UART_Init+0x4c>)
 80017b8:	f002 fa72 	bl	8003ca0 <HAL_UART_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017c2:	f000 f875 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000028c 	.word	0x2000028c
 80017d0:	40004400 	.word	0x40004400

080017d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	@ 0x28
 80017d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	4b2d      	ldr	r3, [pc, #180]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a2c      	ldr	r2, [pc, #176]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 80017f4:	f043 0304 	orr.w	r3, r3, #4
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b2a      	ldr	r3, [pc, #168]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b26      	ldr	r3, [pc, #152]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	4a25      	ldr	r2, [pc, #148]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 8001810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001814:	6313      	str	r3, [r2, #48]	@ 0x30
 8001816:	4b23      	ldr	r3, [pc, #140]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	4b1f      	ldr	r3, [pc, #124]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	4a1e      	ldr	r2, [pc, #120]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6313      	str	r3, [r2, #48]	@ 0x30
 8001832:	4b1c      	ldr	r3, [pc, #112]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	4b18      	ldr	r3, [pc, #96]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a17      	ldr	r2, [pc, #92]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	2120      	movs	r1, #32
 800185e:	4812      	ldr	r0, [pc, #72]	@ (80018a8 <MX_GPIO_Init+0xd4>)
 8001860:	f000 fd72 	bl	8002348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001864:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800186a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800186e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	480c      	ldr	r0, [pc, #48]	@ (80018ac <MX_GPIO_Init+0xd8>)
 800187c:	f000 fbe0 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001880:	2320      	movs	r3, #32
 8001882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4619      	mov	r1, r3
 8001896:	4804      	ldr	r0, [pc, #16]	@ (80018a8 <MX_GPIO_Init+0xd4>)
 8001898:	f000 fbd2 	bl	8002040 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800189c:	bf00      	nop
 800189e:	3728      	adds	r7, #40	@ 0x28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020000 	.word	0x40020000
 80018ac:	40020800 	.word	0x40020800

080018b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b4:	b672      	cpsid	i
}
 80018b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <Error_Handler+0x8>

080018bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <HAL_MspInit+0x4c>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001908 <HAL_MspInit+0x4c>)
 80018cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001908 <HAL_MspInit+0x4c>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <HAL_MspInit+0x4c>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e6:	4a08      	ldr	r2, [pc, #32]	@ (8001908 <HAL_MspInit+0x4c>)
 80018e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ee:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <HAL_MspInit+0x4c>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018fa:	2007      	movs	r0, #7
 80018fc:	f000 fb6c 	bl	8001fd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800

0800190c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	@ 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a19      	ldr	r2, [pc, #100]	@ (8001990 <HAL_I2C_MspInit+0x84>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d12b      	bne.n	8001986 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	4b18      	ldr	r3, [pc, #96]	@ (8001994 <HAL_I2C_MspInit+0x88>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a17      	ldr	r2, [pc, #92]	@ (8001994 <HAL_I2C_MspInit+0x88>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <HAL_I2C_MspInit+0x88>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800194a:	23c0      	movs	r3, #192	@ 0xc0
 800194c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800194e:	2312      	movs	r3, #18
 8001950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001952:	2301      	movs	r3, #1
 8001954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001956:	2303      	movs	r3, #3
 8001958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800195a:	2304      	movs	r3, #4
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	480c      	ldr	r0, [pc, #48]	@ (8001998 <HAL_I2C_MspInit+0x8c>)
 8001966:	f000 fb6b 	bl	8002040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <HAL_I2C_MspInit+0x88>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	4a08      	ldr	r2, [pc, #32]	@ (8001994 <HAL_I2C_MspInit+0x88>)
 8001974:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001978:	6413      	str	r3, [r2, #64]	@ 0x40
 800197a:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <HAL_I2C_MspInit+0x88>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	@ 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40005400 	.word	0x40005400
 8001994:	40023800 	.word	0x40023800
 8001998:	40020400 	.word	0x40020400

0800199c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08c      	sub	sp, #48	@ 0x30
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a32      	ldr	r2, [pc, #200]	@ (8001a84 <HAL_UART_MspInit+0xe8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d12d      	bne.n	8001a1a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
 80019c2:	4b31      	ldr	r3, [pc, #196]	@ (8001a88 <HAL_UART_MspInit+0xec>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c6:	4a30      	ldr	r2, [pc, #192]	@ (8001a88 <HAL_UART_MspInit+0xec>)
 80019c8:	f043 0310 	orr.w	r3, r3, #16
 80019cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001a88 <HAL_UART_MspInit+0xec>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d2:	f003 0310 	and.w	r3, r3, #16
 80019d6:	61bb      	str	r3, [r7, #24]
 80019d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	4b2a      	ldr	r3, [pc, #168]	@ (8001a88 <HAL_UART_MspInit+0xec>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	4a29      	ldr	r2, [pc, #164]	@ (8001a88 <HAL_UART_MspInit+0xec>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ea:	4b27      	ldr	r3, [pc, #156]	@ (8001a88 <HAL_UART_MspInit+0xec>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019f6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a08:	2307      	movs	r3, #7
 8001a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	4619      	mov	r1, r3
 8001a12:	481e      	ldr	r0, [pc, #120]	@ (8001a8c <HAL_UART_MspInit+0xf0>)
 8001a14:	f000 fb14 	bl	8002040 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a18:	e030      	b.n	8001a7c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001a90 <HAL_UART_MspInit+0xf4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d12b      	bne.n	8001a7c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	4b17      	ldr	r3, [pc, #92]	@ (8001a88 <HAL_UART_MspInit+0xec>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2c:	4a16      	ldr	r2, [pc, #88]	@ (8001a88 <HAL_UART_MspInit+0xec>)
 8001a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a32:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a34:	4b14      	ldr	r3, [pc, #80]	@ (8001a88 <HAL_UART_MspInit+0xec>)
 8001a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <HAL_UART_MspInit+0xec>)
 8001a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a48:	4a0f      	ldr	r2, [pc, #60]	@ (8001a88 <HAL_UART_MspInit+0xec>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a50:	4b0d      	ldr	r3, [pc, #52]	@ (8001a88 <HAL_UART_MspInit+0xec>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a5c:	230c      	movs	r3, #12
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a6c:	2307      	movs	r3, #7
 8001a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4619      	mov	r1, r3
 8001a76:	4805      	ldr	r0, [pc, #20]	@ (8001a8c <HAL_UART_MspInit+0xf0>)
 8001a78:	f000 fae2 	bl	8002040 <HAL_GPIO_Init>
}
 8001a7c:	bf00      	nop
 8001a7e:	3730      	adds	r7, #48	@ 0x30
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40011000 	.word	0x40011000
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40004400 	.word	0x40004400

08001a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <NMI_Handler+0x4>

08001a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <HardFault_Handler+0x4>

08001aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <MemManage_Handler+0x4>

08001aac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <BusFault_Handler+0x4>

08001ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <UsageFault_Handler+0x4>

08001abc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aea:	f000 f97f 	bl	8001dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001afe:	4b0f      	ldr	r3, [pc, #60]	@ (8001b3c <ITM_SendChar+0x48>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a0e      	ldr	r2, [pc, #56]	@ (8001b3c <ITM_SendChar+0x48>)
 8001b04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b08:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b40 <ITM_SendChar+0x4c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b40 <ITM_SendChar+0x4c>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001b16:	bf00      	nop
 8001b18:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f8      	beq.n	8001b18 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001b26:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	6013      	str	r3, [r2, #0]
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000edfc 	.word	0xe000edfc
 8001b40:	e0000e00 	.word	0xe0000e00

08001b44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return 1;
 8001b48:	2301      	movs	r3, #1
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_kill>:

int _kill(int pid, int sig)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b5e:	f003 fd37 	bl	80055d0 <__errno>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2216      	movs	r2, #22
 8001b66:	601a      	str	r2, [r3, #0]
  return -1;
 8001b68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <_exit>:

void _exit (int status)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b7c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ffe7 	bl	8001b54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b86:	bf00      	nop
 8001b88:	e7fd      	b.n	8001b86 <_exit+0x12>

08001b8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e00a      	b.n	8001bb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b9c:	f3af 8000 	nop.w
 8001ba0:	4601      	mov	r1, r0
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	60ba      	str	r2, [r7, #8]
 8001ba8:	b2ca      	uxtb	r2, r1
 8001baa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	dbf0      	blt.n	8001b9c <_read+0x12>
  }

  return len;
 8001bba:	687b      	ldr	r3, [r7, #4]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	e009      	b.n	8001bea <_write+0x26>
  {
	  //__io_putchar(*ptr++);
	  	  ITM_SendChar(*ptr++);
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	60ba      	str	r2, [r7, #8]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ff88 	bl	8001af4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	3301      	adds	r3, #1
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	dbf1      	blt.n	8001bd6 <_write+0x12>
  }
  return len;
 8001bf2:	687b      	ldr	r3, [r7, #4]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <_close>:

int _close(int file)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c24:	605a      	str	r2, [r3, #4]
  return 0;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <_isatty>:

int _isatty(int file)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b085      	sub	sp, #20
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c6c:	4a14      	ldr	r2, [pc, #80]	@ (8001cc0 <_sbrk+0x5c>)
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <_sbrk+0x60>)
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c78:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d102      	bne.n	8001c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c80:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <_sbrk+0x64>)
 8001c82:	4a12      	ldr	r2, [pc, #72]	@ (8001ccc <_sbrk+0x68>)
 8001c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c86:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <_sbrk+0x64>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d207      	bcs.n	8001ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c94:	f003 fc9c 	bl	80055d0 <__errno>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ca2:	e009      	b.n	8001cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca4:	4b08      	ldr	r3, [pc, #32]	@ (8001cc8 <_sbrk+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001caa:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4a05      	ldr	r2, [pc, #20]	@ (8001cc8 <_sbrk+0x64>)
 8001cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20020000 	.word	0x20020000
 8001cc4:	00000400 	.word	0x00000400
 8001cc8:	200002dc 	.word	0x200002dc
 8001ccc:	20000430 	.word	0x20000430

08001cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <SystemInit+0x20>)
 8001cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cda:	4a05      	ldr	r2, [pc, #20]	@ (8001cf0 <SystemInit+0x20>)
 8001cdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ce0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cf8:	f7ff ffea 	bl	8001cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cfc:	480c      	ldr	r0, [pc, #48]	@ (8001d30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cfe:	490d      	ldr	r1, [pc, #52]	@ (8001d34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d00:	4a0d      	ldr	r2, [pc, #52]	@ (8001d38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d04:	e002      	b.n	8001d0c <LoopCopyDataInit>

08001d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0a:	3304      	adds	r3, #4

08001d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d10:	d3f9      	bcc.n	8001d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d12:	4a0a      	ldr	r2, [pc, #40]	@ (8001d3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d14:	4c0a      	ldr	r4, [pc, #40]	@ (8001d40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d18:	e001      	b.n	8001d1e <LoopFillZerobss>

08001d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d1c:	3204      	adds	r2, #4

08001d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d20:	d3fb      	bcc.n	8001d1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d22:	f003 fc5b 	bl	80055dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d26:	f7ff fc1b 	bl	8001560 <main>
  bx  lr    
 8001d2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d34:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d38:	08009290 	.word	0x08009290
  ldr r2, =_sbss
 8001d3c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d40:	20000430 	.word	0x20000430

08001d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d44:	e7fe      	b.n	8001d44 <ADC_IRQHandler>
	...

08001d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <HAL_Init+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0d      	ldr	r2, [pc, #52]	@ (8001d88 <HAL_Init+0x40>)
 8001d52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d58:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <HAL_Init+0x40>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d88 <HAL_Init+0x40>)
 8001d5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d64:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a07      	ldr	r2, [pc, #28]	@ (8001d88 <HAL_Init+0x40>)
 8001d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d70:	2003      	movs	r0, #3
 8001d72:	f000 f931 	bl	8001fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d76:	2000      	movs	r0, #0
 8001d78:	f000 f808 	bl	8001d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d7c:	f7ff fd9e 	bl	80018bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023c00 	.word	0x40023c00

08001d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d94:	4b12      	ldr	r3, [pc, #72]	@ (8001de0 <HAL_InitTick+0x54>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b12      	ldr	r3, [pc, #72]	@ (8001de4 <HAL_InitTick+0x58>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 f93b 	bl	8002026 <HAL_SYSTICK_Config>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00e      	b.n	8001dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b0f      	cmp	r3, #15
 8001dbe:	d80a      	bhi.n	8001dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dc8:	f000 f911 	bl	8001fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dcc:	4a06      	ldr	r2, [pc, #24]	@ (8001de8 <HAL_InitTick+0x5c>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e000      	b.n	8001dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000000 	.word	0x20000000
 8001de4:	20000008 	.word	0x20000008
 8001de8:	20000004 	.word	0x20000004

08001dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df0:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <HAL_IncTick+0x20>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <HAL_IncTick+0x24>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	4a04      	ldr	r2, [pc, #16]	@ (8001e10 <HAL_IncTick+0x24>)
 8001dfe:	6013      	str	r3, [r2, #0]
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000008 	.word	0x20000008
 8001e10:	200002e0 	.word	0x200002e0

08001e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return uwTick;
 8001e18:	4b03      	ldr	r3, [pc, #12]	@ (8001e28 <HAL_GetTick+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	200002e0 	.word	0x200002e0

08001e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e34:	f7ff ffee 	bl	8001e14 <HAL_GetTick>
 8001e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e44:	d005      	beq.n	8001e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e46:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <HAL_Delay+0x44>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4413      	add	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e52:	bf00      	nop
 8001e54:	f7ff ffde 	bl	8001e14 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d8f7      	bhi.n	8001e54 <HAL_Delay+0x28>
  {
  }
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000008 	.word	0x20000008

08001e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e84:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e90:	4013      	ands	r3, r2
 8001e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea6:	4a04      	ldr	r2, [pc, #16]	@ (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	60d3      	str	r3, [r2, #12]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec0:	4b04      	ldr	r3, [pc, #16]	@ (8001ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	f003 0307 	and.w	r3, r3, #7
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	db0a      	blt.n	8001f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	490c      	ldr	r1, [pc, #48]	@ (8001f24 <__NVIC_SetPriority+0x4c>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	0112      	lsls	r2, r2, #4
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	440b      	add	r3, r1
 8001efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f00:	e00a      	b.n	8001f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4908      	ldr	r1, [pc, #32]	@ (8001f28 <__NVIC_SetPriority+0x50>)
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	3b04      	subs	r3, #4
 8001f10:	0112      	lsls	r2, r2, #4
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	440b      	add	r3, r1
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000e100 	.word	0xe000e100
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	@ 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f1c3 0307 	rsb	r3, r3, #7
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf28      	it	cs
 8001f4a:	2304      	movcs	r3, #4
 8001f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3304      	adds	r3, #4
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d902      	bls.n	8001f5c <NVIC_EncodePriority+0x30>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3b03      	subs	r3, #3
 8001f5a:	e000      	b.n	8001f5e <NVIC_EncodePriority+0x32>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	401a      	ands	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	4313      	orrs	r3, r2
         );
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	@ 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fa4:	d301      	bcc.n	8001faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00f      	b.n	8001fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001faa:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <SysTick_Config+0x40>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb2:	210f      	movs	r1, #15
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fb8:	f7ff ff8e 	bl	8001ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <SysTick_Config+0x40>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc2:	4b04      	ldr	r3, [pc, #16]	@ (8001fd4 <SysTick_Config+0x40>)
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	e000e010 	.word	0xe000e010

08001fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ff47 	bl	8001e74 <__NVIC_SetPriorityGrouping>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002000:	f7ff ff5c 	bl	8001ebc <__NVIC_GetPriorityGrouping>
 8002004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	6978      	ldr	r0, [r7, #20]
 800200c:	f7ff ff8e 	bl	8001f2c <NVIC_EncodePriority>
 8002010:	4602      	mov	r2, r0
 8002012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff5d 	bl	8001ed8 <__NVIC_SetPriority>
}
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ffb0 	bl	8001f94 <SysTick_Config>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002040:	b480      	push	{r7}
 8002042:	b089      	sub	sp, #36	@ 0x24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	e159      	b.n	8002310 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800205c:	2201      	movs	r2, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	429a      	cmp	r2, r3
 8002076:	f040 8148 	bne.w	800230a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b01      	cmp	r3, #1
 8002084:	d005      	beq.n	8002092 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800208e:	2b02      	cmp	r3, #2
 8002090:	d130      	bne.n	80020f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	2203      	movs	r2, #3
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c8:	2201      	movs	r2, #1
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 0201 	and.w	r2, r3, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d017      	beq.n	8002130 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d123      	bne.n	8002184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	08da      	lsrs	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3208      	adds	r2, #8
 8002144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	08da      	lsrs	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3208      	adds	r2, #8
 800217e:	69b9      	ldr	r1, [r7, #24]
 8002180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0203 	and.w	r2, r3, #3
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80a2 	beq.w	800230a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b57      	ldr	r3, [pc, #348]	@ (8002328 <HAL_GPIO_Init+0x2e8>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	4a56      	ldr	r2, [pc, #344]	@ (8002328 <HAL_GPIO_Init+0x2e8>)
 80021d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021d6:	4b54      	ldr	r3, [pc, #336]	@ (8002328 <HAL_GPIO_Init+0x2e8>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021e2:	4a52      	ldr	r2, [pc, #328]	@ (800232c <HAL_GPIO_Init+0x2ec>)
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	3302      	adds	r3, #2
 80021ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	220f      	movs	r2, #15
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a49      	ldr	r2, [pc, #292]	@ (8002330 <HAL_GPIO_Init+0x2f0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d019      	beq.n	8002242 <HAL_GPIO_Init+0x202>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a48      	ldr	r2, [pc, #288]	@ (8002334 <HAL_GPIO_Init+0x2f4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d013      	beq.n	800223e <HAL_GPIO_Init+0x1fe>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a47      	ldr	r2, [pc, #284]	@ (8002338 <HAL_GPIO_Init+0x2f8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00d      	beq.n	800223a <HAL_GPIO_Init+0x1fa>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a46      	ldr	r2, [pc, #280]	@ (800233c <HAL_GPIO_Init+0x2fc>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d007      	beq.n	8002236 <HAL_GPIO_Init+0x1f6>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a45      	ldr	r2, [pc, #276]	@ (8002340 <HAL_GPIO_Init+0x300>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d101      	bne.n	8002232 <HAL_GPIO_Init+0x1f2>
 800222e:	2304      	movs	r3, #4
 8002230:	e008      	b.n	8002244 <HAL_GPIO_Init+0x204>
 8002232:	2307      	movs	r3, #7
 8002234:	e006      	b.n	8002244 <HAL_GPIO_Init+0x204>
 8002236:	2303      	movs	r3, #3
 8002238:	e004      	b.n	8002244 <HAL_GPIO_Init+0x204>
 800223a:	2302      	movs	r3, #2
 800223c:	e002      	b.n	8002244 <HAL_GPIO_Init+0x204>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <HAL_GPIO_Init+0x204>
 8002242:	2300      	movs	r3, #0
 8002244:	69fa      	ldr	r2, [r7, #28]
 8002246:	f002 0203 	and.w	r2, r2, #3
 800224a:	0092      	lsls	r2, r2, #2
 800224c:	4093      	lsls	r3, r2
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002254:	4935      	ldr	r1, [pc, #212]	@ (800232c <HAL_GPIO_Init+0x2ec>)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	089b      	lsrs	r3, r3, #2
 800225a:	3302      	adds	r3, #2
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002262:	4b38      	ldr	r3, [pc, #224]	@ (8002344 <HAL_GPIO_Init+0x304>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002286:	4a2f      	ldr	r2, [pc, #188]	@ (8002344 <HAL_GPIO_Init+0x304>)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800228c:	4b2d      	ldr	r3, [pc, #180]	@ (8002344 <HAL_GPIO_Init+0x304>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022b0:	4a24      	ldr	r2, [pc, #144]	@ (8002344 <HAL_GPIO_Init+0x304>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022b6:	4b23      	ldr	r3, [pc, #140]	@ (8002344 <HAL_GPIO_Init+0x304>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022da:	4a1a      	ldr	r2, [pc, #104]	@ (8002344 <HAL_GPIO_Init+0x304>)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e0:	4b18      	ldr	r3, [pc, #96]	@ (8002344 <HAL_GPIO_Init+0x304>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002304:	4a0f      	ldr	r2, [pc, #60]	@ (8002344 <HAL_GPIO_Init+0x304>)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3301      	adds	r3, #1
 800230e:	61fb      	str	r3, [r7, #28]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	2b0f      	cmp	r3, #15
 8002314:	f67f aea2 	bls.w	800205c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002318:	bf00      	nop
 800231a:	bf00      	nop
 800231c:	3724      	adds	r7, #36	@ 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40023800 	.word	0x40023800
 800232c:	40013800 	.word	0x40013800
 8002330:	40020000 	.word	0x40020000
 8002334:	40020400 	.word	0x40020400
 8002338:	40020800 	.word	0x40020800
 800233c:	40020c00 	.word	0x40020c00
 8002340:	40021000 	.word	0x40021000
 8002344:	40013c00 	.word	0x40013c00

08002348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	807b      	strh	r3, [r7, #2]
 8002354:	4613      	mov	r3, r2
 8002356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002358:	787b      	ldrb	r3, [r7, #1]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800235e:	887a      	ldrh	r2, [r7, #2]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002364:	e003      	b.n	800236e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002366:	887b      	ldrh	r3, [r7, #2]
 8002368:	041a      	lsls	r2, r3, #16
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	619a      	str	r2, [r3, #24]
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e12b      	b.n	80025e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff fab2 	bl	800190c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2224      	movs	r2, #36	@ 0x24
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0201 	bic.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023e0:	f001 fc36 	bl	8003c50 <HAL_RCC_GetPCLK1Freq>
 80023e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4a81      	ldr	r2, [pc, #516]	@ (80025f0 <HAL_I2C_Init+0x274>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d807      	bhi.n	8002400 <HAL_I2C_Init+0x84>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4a80      	ldr	r2, [pc, #512]	@ (80025f4 <HAL_I2C_Init+0x278>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	bf94      	ite	ls
 80023f8:	2301      	movls	r3, #1
 80023fa:	2300      	movhi	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e006      	b.n	800240e <HAL_I2C_Init+0x92>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4a7d      	ldr	r2, [pc, #500]	@ (80025f8 <HAL_I2C_Init+0x27c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	bf94      	ite	ls
 8002408:	2301      	movls	r3, #1
 800240a:	2300      	movhi	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e0e7      	b.n	80025e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4a78      	ldr	r2, [pc, #480]	@ (80025fc <HAL_I2C_Init+0x280>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	0c9b      	lsrs	r3, r3, #18
 8002420:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	430a      	orrs	r2, r1
 8002434:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4a6a      	ldr	r2, [pc, #424]	@ (80025f0 <HAL_I2C_Init+0x274>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d802      	bhi.n	8002450 <HAL_I2C_Init+0xd4>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	3301      	adds	r3, #1
 800244e:	e009      	b.n	8002464 <HAL_I2C_Init+0xe8>
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	4a69      	ldr	r2, [pc, #420]	@ (8002600 <HAL_I2C_Init+0x284>)
 800245c:	fba2 2303 	umull	r2, r3, r2, r3
 8002460:	099b      	lsrs	r3, r3, #6
 8002462:	3301      	adds	r3, #1
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	430b      	orrs	r3, r1
 800246a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002476:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	495c      	ldr	r1, [pc, #368]	@ (80025f0 <HAL_I2C_Init+0x274>)
 8002480:	428b      	cmp	r3, r1
 8002482:	d819      	bhi.n	80024b8 <HAL_I2C_Init+0x13c>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1e59      	subs	r1, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002492:	1c59      	adds	r1, r3, #1
 8002494:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002498:	400b      	ands	r3, r1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HAL_I2C_Init+0x138>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1e59      	subs	r1, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024ac:	3301      	adds	r3, #1
 80024ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b2:	e051      	b.n	8002558 <HAL_I2C_Init+0x1dc>
 80024b4:	2304      	movs	r3, #4
 80024b6:	e04f      	b.n	8002558 <HAL_I2C_Init+0x1dc>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d111      	bne.n	80024e4 <HAL_I2C_Init+0x168>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	1e58      	subs	r0, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6859      	ldr	r1, [r3, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	440b      	add	r3, r1
 80024ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d2:	3301      	adds	r3, #1
 80024d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d8:	2b00      	cmp	r3, #0
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	e012      	b.n	800250a <HAL_I2C_Init+0x18e>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1e58      	subs	r0, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6859      	ldr	r1, [r3, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	0099      	lsls	r1, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024fa:	3301      	adds	r3, #1
 80024fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002500:	2b00      	cmp	r3, #0
 8002502:	bf0c      	ite	eq
 8002504:	2301      	moveq	r3, #1
 8002506:	2300      	movne	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_I2C_Init+0x196>
 800250e:	2301      	movs	r3, #1
 8002510:	e022      	b.n	8002558 <HAL_I2C_Init+0x1dc>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10e      	bne.n	8002538 <HAL_I2C_Init+0x1bc>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1e58      	subs	r0, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6859      	ldr	r1, [r3, #4]
 8002522:	460b      	mov	r3, r1
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	440b      	add	r3, r1
 8002528:	fbb0 f3f3 	udiv	r3, r0, r3
 800252c:	3301      	adds	r3, #1
 800252e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002532:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002536:	e00f      	b.n	8002558 <HAL_I2C_Init+0x1dc>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	1e58      	subs	r0, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6859      	ldr	r1, [r3, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	0099      	lsls	r1, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	fbb0 f3f3 	udiv	r3, r0, r3
 800254e:	3301      	adds	r3, #1
 8002550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002554:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	6809      	ldr	r1, [r1, #0]
 800255c:	4313      	orrs	r3, r2
 800255e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69da      	ldr	r2, [r3, #28]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002586:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6911      	ldr	r1, [r2, #16]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68d2      	ldr	r2, [r2, #12]
 8002592:	4311      	orrs	r1, r2
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	430b      	orrs	r3, r1
 800259a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	000186a0 	.word	0x000186a0
 80025f4:	001e847f 	.word	0x001e847f
 80025f8:	003d08ff 	.word	0x003d08ff
 80025fc:	431bde83 	.word	0x431bde83
 8002600:	10624dd3 	.word	0x10624dd3

08002604 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af02      	add	r7, sp, #8
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	461a      	mov	r2, r3
 8002610:	460b      	mov	r3, r1
 8002612:	817b      	strh	r3, [r7, #10]
 8002614:	4613      	mov	r3, r2
 8002616:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002618:	f7ff fbfc 	bl	8001e14 <HAL_GetTick>
 800261c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b20      	cmp	r3, #32
 8002628:	f040 80e0 	bne.w	80027ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2319      	movs	r3, #25
 8002632:	2201      	movs	r2, #1
 8002634:	4970      	ldr	r1, [pc, #448]	@ (80027f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 fc64 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002642:	2302      	movs	r3, #2
 8002644:	e0d3      	b.n	80027ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_I2C_Master_Transmit+0x50>
 8002650:	2302      	movs	r3, #2
 8002652:	e0cc      	b.n	80027ee <HAL_I2C_Master_Transmit+0x1ea>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b01      	cmp	r3, #1
 8002668:	d007      	beq.n	800267a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f042 0201 	orr.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002688:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2221      	movs	r2, #33	@ 0x21
 800268e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2210      	movs	r2, #16
 8002696:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	893a      	ldrh	r2, [r7, #8]
 80026aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4a50      	ldr	r2, [pc, #320]	@ (80027fc <HAL_I2C_Master_Transmit+0x1f8>)
 80026ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026bc:	8979      	ldrh	r1, [r7, #10]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	6a3a      	ldr	r2, [r7, #32]
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 face 	bl	8002c64 <I2C_MasterRequestWrite>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e08d      	b.n	80027ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026e8:	e066      	b.n	80027b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	6a39      	ldr	r1, [r7, #32]
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fd22 	bl	8003138 <I2C_WaitOnTXEFlagUntilTimeout>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00d      	beq.n	8002716 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d107      	bne.n	8002712 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002710:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e06b      	b.n	80027ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	781a      	ldrb	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002730:	b29b      	uxth	r3, r3
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b04      	cmp	r3, #4
 8002752:	d11b      	bne.n	800278c <HAL_I2C_Master_Transmit+0x188>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002758:	2b00      	cmp	r3, #0
 800275a:	d017      	beq.n	800278c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002760:	781a      	ldrb	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002776:	b29b      	uxth	r3, r3
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	6a39      	ldr	r1, [r7, #32]
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fd19 	bl	80031c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00d      	beq.n	80027b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d107      	bne.n	80027b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e01a      	b.n	80027ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d194      	bne.n	80026ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	e000      	b.n	80027ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027ec:	2302      	movs	r3, #2
  }
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	00100002 	.word	0x00100002
 80027fc:	ffff0000 	.word	0xffff0000

08002800 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08c      	sub	sp, #48	@ 0x30
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	461a      	mov	r2, r3
 800280c:	460b      	mov	r3, r1
 800280e:	817b      	strh	r3, [r7, #10]
 8002810:	4613      	mov	r3, r2
 8002812:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002814:	f7ff fafe 	bl	8001e14 <HAL_GetTick>
 8002818:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b20      	cmp	r3, #32
 8002824:	f040 8217 	bne.w	8002c56 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	2319      	movs	r3, #25
 800282e:	2201      	movs	r2, #1
 8002830:	497c      	ldr	r1, [pc, #496]	@ (8002a24 <HAL_I2C_Master_Receive+0x224>)
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 fb66 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800283e:	2302      	movs	r3, #2
 8002840:	e20a      	b.n	8002c58 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_I2C_Master_Receive+0x50>
 800284c:	2302      	movs	r3, #2
 800284e:	e203      	b.n	8002c58 <HAL_I2C_Master_Receive+0x458>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b01      	cmp	r3, #1
 8002864:	d007      	beq.n	8002876 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0201 	orr.w	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002884:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2222      	movs	r2, #34	@ 0x22
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2210      	movs	r2, #16
 8002892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	893a      	ldrh	r2, [r7, #8]
 80028a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4a5c      	ldr	r2, [pc, #368]	@ (8002a28 <HAL_I2C_Master_Receive+0x228>)
 80028b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028b8:	8979      	ldrh	r1, [r7, #10]
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 fa52 	bl	8002d68 <I2C_MasterRequestRead>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e1c4      	b.n	8002c58 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d113      	bne.n	80028fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028d6:	2300      	movs	r3, #0
 80028d8:	623b      	str	r3, [r7, #32]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	623b      	str	r3, [r7, #32]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	623b      	str	r3, [r7, #32]
 80028ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	e198      	b.n	8002c30 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002902:	2b01      	cmp	r3, #1
 8002904:	d11b      	bne.n	800293e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002914:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	e178      	b.n	8002c30 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002942:	2b02      	cmp	r3, #2
 8002944:	d11b      	bne.n	800297e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002954:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002964:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002966:	2300      	movs	r3, #0
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	e158      	b.n	8002c30 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800298c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80029a4:	e144      	b.n	8002c30 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	f200 80f1 	bhi.w	8002b92 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d123      	bne.n	8002a00 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fc4b 	bl	8003258 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e145      	b.n	8002c58 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029fe:	e117      	b.n	8002c30 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d14e      	bne.n	8002aa6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a0e:	2200      	movs	r2, #0
 8002a10:	4906      	ldr	r1, [pc, #24]	@ (8002a2c <HAL_I2C_Master_Receive+0x22c>)
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fa76 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d008      	beq.n	8002a30 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e11a      	b.n	8002c58 <HAL_I2C_Master_Receive+0x458>
 8002a22:	bf00      	nop
 8002a24:	00100002 	.word	0x00100002
 8002a28:	ffff0000 	.word	0xffff0000
 8002a2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002aa4:	e0c4      	b.n	8002c30 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aac:	2200      	movs	r2, #0
 8002aae:	496c      	ldr	r1, [pc, #432]	@ (8002c60 <HAL_I2C_Master_Receive+0x460>)
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 fa27 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0cb      	b.n	8002c58 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ace:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b08:	2200      	movs	r2, #0
 8002b0a:	4955      	ldr	r1, [pc, #340]	@ (8002c60 <HAL_I2C_Master_Receive+0x460>)
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f9f9 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e09d      	b.n	8002c58 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b90:	e04e      	b.n	8002c30 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b94:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fb5e 	bl	8003258 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e058      	b.n	8002c58 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d124      	bne.n	8002c30 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d107      	bne.n	8002bfe <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bfc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f47f aeb6 	bne.w	80029a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e000      	b.n	8002c58 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002c56:	2302      	movs	r3, #2
  }
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3728      	adds	r7, #40	@ 0x28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	00010004 	.word	0x00010004

08002c64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	607a      	str	r2, [r7, #4]
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	460b      	mov	r3, r1
 8002c72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d006      	beq.n	8002c8e <I2C_MasterRequestWrite+0x2a>
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d003      	beq.n	8002c8e <I2C_MasterRequestWrite+0x2a>
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c8c:	d108      	bne.n	8002ca0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	e00b      	b.n	8002cb8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca4:	2b12      	cmp	r3, #18
 8002ca6:	d107      	bne.n	8002cb8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f91d 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00d      	beq.n	8002cec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cde:	d103      	bne.n	8002ce8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ce6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e035      	b.n	8002d58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cf4:	d108      	bne.n	8002d08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cf6:	897b      	ldrh	r3, [r7, #10]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d04:	611a      	str	r2, [r3, #16]
 8002d06:	e01b      	b.n	8002d40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d08:	897b      	ldrh	r3, [r7, #10]
 8002d0a:	11db      	asrs	r3, r3, #7
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	f003 0306 	and.w	r3, r3, #6
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f063 030f 	orn	r3, r3, #15
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	490e      	ldr	r1, [pc, #56]	@ (8002d60 <I2C_MasterRequestWrite+0xfc>)
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 f966 	bl	8002ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e010      	b.n	8002d58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d36:	897b      	ldrh	r3, [r7, #10]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	4907      	ldr	r1, [pc, #28]	@ (8002d64 <I2C_MasterRequestWrite+0x100>)
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f956 	bl	8002ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	00010008 	.word	0x00010008
 8002d64:	00010002 	.word	0x00010002

08002d68 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	460b      	mov	r3, r1
 8002d76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d8c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d006      	beq.n	8002da2 <I2C_MasterRequestRead+0x3a>
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d003      	beq.n	8002da2 <I2C_MasterRequestRead+0x3a>
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002da0:	d108      	bne.n	8002db4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	e00b      	b.n	8002dcc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db8:	2b11      	cmp	r3, #17
 8002dba:	d107      	bne.n	8002dcc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f893 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00d      	beq.n	8002e00 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002df2:	d103      	bne.n	8002dfc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dfa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e079      	b.n	8002ef4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e08:	d108      	bne.n	8002e1c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e0a:	897b      	ldrh	r3, [r7, #10]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	611a      	str	r2, [r3, #16]
 8002e1a:	e05f      	b.n	8002edc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e1c:	897b      	ldrh	r3, [r7, #10]
 8002e1e:	11db      	asrs	r3, r3, #7
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	f003 0306 	and.w	r3, r3, #6
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	f063 030f 	orn	r3, r3, #15
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	4930      	ldr	r1, [pc, #192]	@ (8002efc <I2C_MasterRequestRead+0x194>)
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f8dc 	bl	8002ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e054      	b.n	8002ef4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e4a:	897b      	ldrh	r3, [r7, #10]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	4929      	ldr	r1, [pc, #164]	@ (8002f00 <I2C_MasterRequestRead+0x198>)
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f8cc 	bl	8002ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e044      	b.n	8002ef4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e8e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 f831 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00d      	beq.n	8002ec4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eb6:	d103      	bne.n	8002ec0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ebe:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e017      	b.n	8002ef4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002ec4:	897b      	ldrh	r3, [r7, #10]
 8002ec6:	11db      	asrs	r3, r3, #7
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	f003 0306 	and.w	r3, r3, #6
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f063 030e 	orn	r3, r3, #14
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	4907      	ldr	r1, [pc, #28]	@ (8002f00 <I2C_MasterRequestRead+0x198>)
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f888 	bl	8002ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	00010008 	.word	0x00010008
 8002f00:	00010002 	.word	0x00010002

08002f04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	4613      	mov	r3, r2
 8002f12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f14:	e048      	b.n	8002fa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f1c:	d044      	beq.n	8002fa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1e:	f7fe ff79 	bl	8001e14 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d302      	bcc.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d139      	bne.n	8002fa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	0c1b      	lsrs	r3, r3, #16
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d10d      	bne.n	8002f5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	43da      	mvns	r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	e00c      	b.n	8002f74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	43da      	mvns	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4013      	ands	r3, r2
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d116      	bne.n	8002fa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	f043 0220 	orr.w	r2, r3, #32
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e023      	b.n	8002ff0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	0c1b      	lsrs	r3, r3, #16
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d10d      	bne.n	8002fce <I2C_WaitOnFlagUntilTimeout+0xca>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	43da      	mvns	r2, r3
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	461a      	mov	r2, r3
 8002fcc:	e00c      	b.n	8002fe8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	43da      	mvns	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d093      	beq.n	8002f16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003006:	e071      	b.n	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003016:	d123      	bne.n	8003060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003026:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003030:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304c:	f043 0204 	orr.w	r2, r3, #4
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e067      	b.n	8003130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003066:	d041      	beq.n	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003068:	f7fe fed4 	bl	8001e14 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	429a      	cmp	r2, r3
 8003076:	d302      	bcc.n	800307e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d136      	bne.n	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	0c1b      	lsrs	r3, r3, #16
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b01      	cmp	r3, #1
 8003086:	d10c      	bne.n	80030a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	43da      	mvns	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4013      	ands	r3, r2
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	bf14      	ite	ne
 800309a:	2301      	movne	r3, #1
 800309c:	2300      	moveq	r3, #0
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	e00b      	b.n	80030ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	43da      	mvns	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	4013      	ands	r3, r2
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf14      	ite	ne
 80030b4:	2301      	movne	r3, #1
 80030b6:	2300      	moveq	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d016      	beq.n	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d8:	f043 0220 	orr.w	r2, r3, #32
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e021      	b.n	8003130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	0c1b      	lsrs	r3, r3, #16
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d10c      	bne.n	8003110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	43da      	mvns	r2, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	4013      	ands	r3, r2
 8003102:	b29b      	uxth	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf14      	ite	ne
 8003108:	2301      	movne	r3, #1
 800310a:	2300      	moveq	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e00b      	b.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	43da      	mvns	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4013      	ands	r3, r2
 800311c:	b29b      	uxth	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	bf14      	ite	ne
 8003122:	2301      	movne	r3, #1
 8003124:	2300      	moveq	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	f47f af6d 	bne.w	8003008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003144:	e034      	b.n	80031b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f8e3 	bl	8003312 <I2C_IsAcknowledgeFailed>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e034      	b.n	80031c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800315c:	d028      	beq.n	80031b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315e:	f7fe fe59 	bl	8001e14 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	429a      	cmp	r2, r3
 800316c:	d302      	bcc.n	8003174 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d11d      	bne.n	80031b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800317e:	2b80      	cmp	r3, #128	@ 0x80
 8003180:	d016      	beq.n	80031b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	f043 0220 	orr.w	r2, r3, #32
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e007      	b.n	80031c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ba:	2b80      	cmp	r3, #128	@ 0x80
 80031bc:	d1c3      	bne.n	8003146 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031d4:	e034      	b.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f89b 	bl	8003312 <I2C_IsAcknowledgeFailed>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e034      	b.n	8003250 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031ec:	d028      	beq.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ee:	f7fe fe11 	bl	8001e14 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d302      	bcc.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d11d      	bne.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b04      	cmp	r3, #4
 8003210:	d016      	beq.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322c:	f043 0220 	orr.w	r2, r3, #32
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e007      	b.n	8003250 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b04      	cmp	r3, #4
 800324c:	d1c3      	bne.n	80031d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003264:	e049      	b.n	80032fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b10      	cmp	r3, #16
 8003272:	d119      	bne.n	80032a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0210 	mvn.w	r2, #16
 800327c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e030      	b.n	800330a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a8:	f7fe fdb4 	bl	8001e14 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d302      	bcc.n	80032be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d11d      	bne.n	80032fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c8:	2b40      	cmp	r3, #64	@ 0x40
 80032ca:	d016      	beq.n	80032fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e6:	f043 0220 	orr.w	r2, r3, #32
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e007      	b.n	800330a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003304:	2b40      	cmp	r3, #64	@ 0x40
 8003306:	d1ae      	bne.n	8003266 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003324:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003328:	d11b      	bne.n	8003362 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003332:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2220      	movs	r2, #32
 800333e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	f043 0204 	orr.w	r2, r3, #4
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e267      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d075      	beq.n	800347a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800338e:	4b88      	ldr	r3, [pc, #544]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b04      	cmp	r3, #4
 8003398:	d00c      	beq.n	80033b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339a:	4b85      	ldr	r3, [pc, #532]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d112      	bne.n	80033cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a6:	4b82      	ldr	r3, [pc, #520]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033b2:	d10b      	bne.n	80033cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b4:	4b7e      	ldr	r3, [pc, #504]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d05b      	beq.n	8003478 <HAL_RCC_OscConfig+0x108>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d157      	bne.n	8003478 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e242      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033d4:	d106      	bne.n	80033e4 <HAL_RCC_OscConfig+0x74>
 80033d6:	4b76      	ldr	r3, [pc, #472]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a75      	ldr	r2, [pc, #468]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e01d      	b.n	8003420 <HAL_RCC_OscConfig+0xb0>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033ec:	d10c      	bne.n	8003408 <HAL_RCC_OscConfig+0x98>
 80033ee:	4b70      	ldr	r3, [pc, #448]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a6f      	ldr	r2, [pc, #444]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	4b6d      	ldr	r3, [pc, #436]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a6c      	ldr	r2, [pc, #432]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e00b      	b.n	8003420 <HAL_RCC_OscConfig+0xb0>
 8003408:	4b69      	ldr	r3, [pc, #420]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a68      	ldr	r2, [pc, #416]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 800340e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	4b66      	ldr	r3, [pc, #408]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a65      	ldr	r2, [pc, #404]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 800341a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800341e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d013      	beq.n	8003450 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fe fcf4 	bl	8001e14 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003430:	f7fe fcf0 	bl	8001e14 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	@ 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e207      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	4b5b      	ldr	r3, [pc, #364]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0xc0>
 800344e:	e014      	b.n	800347a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003450:	f7fe fce0 	bl	8001e14 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003458:	f7fe fcdc 	bl	8001e14 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b64      	cmp	r3, #100	@ 0x64
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e1f3      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346a:	4b51      	ldr	r3, [pc, #324]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0xe8>
 8003476:	e000      	b.n	800347a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d063      	beq.n	800354e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003486:	4b4a      	ldr	r3, [pc, #296]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00b      	beq.n	80034aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003492:	4b47      	ldr	r3, [pc, #284]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800349a:	2b08      	cmp	r3, #8
 800349c:	d11c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800349e:	4b44      	ldr	r3, [pc, #272]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d116      	bne.n	80034d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034aa:	4b41      	ldr	r3, [pc, #260]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <HAL_RCC_OscConfig+0x152>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e1c7      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c2:	4b3b      	ldr	r3, [pc, #236]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4937      	ldr	r1, [pc, #220]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d6:	e03a      	b.n	800354e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d020      	beq.n	8003522 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e0:	4b34      	ldr	r3, [pc, #208]	@ (80035b4 <HAL_RCC_OscConfig+0x244>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e6:	f7fe fc95 	bl	8001e14 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ee:	f7fe fc91 	bl	8001e14 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e1a8      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003500:	4b2b      	ldr	r3, [pc, #172]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350c:	4b28      	ldr	r3, [pc, #160]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4925      	ldr	r1, [pc, #148]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 800351c:	4313      	orrs	r3, r2
 800351e:	600b      	str	r3, [r1, #0]
 8003520:	e015      	b.n	800354e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003522:	4b24      	ldr	r3, [pc, #144]	@ (80035b4 <HAL_RCC_OscConfig+0x244>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fe fc74 	bl	8001e14 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003530:	f7fe fc70 	bl	8001e14 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e187      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003542:	4b1b      	ldr	r3, [pc, #108]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d036      	beq.n	80035c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d016      	beq.n	8003590 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003562:	4b15      	ldr	r3, [pc, #84]	@ (80035b8 <HAL_RCC_OscConfig+0x248>)
 8003564:	2201      	movs	r2, #1
 8003566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003568:	f7fe fc54 	bl	8001e14 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003570:	f7fe fc50 	bl	8001e14 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e167      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003582:	4b0b      	ldr	r3, [pc, #44]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0x200>
 800358e:	e01b      	b.n	80035c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003590:	4b09      	ldr	r3, [pc, #36]	@ (80035b8 <HAL_RCC_OscConfig+0x248>)
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003596:	f7fe fc3d 	bl	8001e14 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800359c:	e00e      	b.n	80035bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800359e:	f7fe fc39 	bl	8001e14 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d907      	bls.n	80035bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e150      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
 80035b0:	40023800 	.word	0x40023800
 80035b4:	42470000 	.word	0x42470000
 80035b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035bc:	4b88      	ldr	r3, [pc, #544]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 80035be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1ea      	bne.n	800359e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 8097 	beq.w	8003704 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d6:	2300      	movs	r3, #0
 80035d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035da:	4b81      	ldr	r3, [pc, #516]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10f      	bne.n	8003606 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	4b7d      	ldr	r3, [pc, #500]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ee:	4a7c      	ldr	r2, [pc, #496]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 80035f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80035f6:	4b7a      	ldr	r3, [pc, #488]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003602:	2301      	movs	r3, #1
 8003604:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003606:	4b77      	ldr	r3, [pc, #476]	@ (80037e4 <HAL_RCC_OscConfig+0x474>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d118      	bne.n	8003644 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003612:	4b74      	ldr	r3, [pc, #464]	@ (80037e4 <HAL_RCC_OscConfig+0x474>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a73      	ldr	r2, [pc, #460]	@ (80037e4 <HAL_RCC_OscConfig+0x474>)
 8003618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800361c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800361e:	f7fe fbf9 	bl	8001e14 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003626:	f7fe fbf5 	bl	8001e14 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e10c      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003638:	4b6a      	ldr	r3, [pc, #424]	@ (80037e4 <HAL_RCC_OscConfig+0x474>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f0      	beq.n	8003626 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d106      	bne.n	800365a <HAL_RCC_OscConfig+0x2ea>
 800364c:	4b64      	ldr	r3, [pc, #400]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003650:	4a63      	ldr	r2, [pc, #396]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	6713      	str	r3, [r2, #112]	@ 0x70
 8003658:	e01c      	b.n	8003694 <HAL_RCC_OscConfig+0x324>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2b05      	cmp	r3, #5
 8003660:	d10c      	bne.n	800367c <HAL_RCC_OscConfig+0x30c>
 8003662:	4b5f      	ldr	r3, [pc, #380]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003666:	4a5e      	ldr	r2, [pc, #376]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003668:	f043 0304 	orr.w	r3, r3, #4
 800366c:	6713      	str	r3, [r2, #112]	@ 0x70
 800366e:	4b5c      	ldr	r3, [pc, #368]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003672:	4a5b      	ldr	r2, [pc, #364]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6713      	str	r3, [r2, #112]	@ 0x70
 800367a:	e00b      	b.n	8003694 <HAL_RCC_OscConfig+0x324>
 800367c:	4b58      	ldr	r3, [pc, #352]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003680:	4a57      	ldr	r2, [pc, #348]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003682:	f023 0301 	bic.w	r3, r3, #1
 8003686:	6713      	str	r3, [r2, #112]	@ 0x70
 8003688:	4b55      	ldr	r3, [pc, #340]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 800368a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800368c:	4a54      	ldr	r2, [pc, #336]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 800368e:	f023 0304 	bic.w	r3, r3, #4
 8003692:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d015      	beq.n	80036c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7fe fbba 	bl	8001e14 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a4:	f7fe fbb6 	bl	8001e14 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e0cb      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ba:	4b49      	ldr	r3, [pc, #292]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0ee      	beq.n	80036a4 <HAL_RCC_OscConfig+0x334>
 80036c6:	e014      	b.n	80036f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c8:	f7fe fba4 	bl	8001e14 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ce:	e00a      	b.n	80036e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d0:	f7fe fba0 	bl	8001e14 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036de:	4293      	cmp	r3, r2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e0b5      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e6:	4b3e      	ldr	r3, [pc, #248]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1ee      	bne.n	80036d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d105      	bne.n	8003704 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f8:	4b39      	ldr	r3, [pc, #228]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	4a38      	ldr	r2, [pc, #224]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 80036fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003702:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 80a1 	beq.w	8003850 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800370e:	4b34      	ldr	r3, [pc, #208]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b08      	cmp	r3, #8
 8003718:	d05c      	beq.n	80037d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d141      	bne.n	80037a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003722:	4b31      	ldr	r3, [pc, #196]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7fe fb74 	bl	8001e14 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003730:	f7fe fb70 	bl	8001e14 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e087      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003742:	4b27      	ldr	r3, [pc, #156]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69da      	ldr	r2, [r3, #28]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375c:	019b      	lsls	r3, r3, #6
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003764:	085b      	lsrs	r3, r3, #1
 8003766:	3b01      	subs	r3, #1
 8003768:	041b      	lsls	r3, r3, #16
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003770:	061b      	lsls	r3, r3, #24
 8003772:	491b      	ldr	r1, [pc, #108]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003778:	4b1b      	ldr	r3, [pc, #108]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 800377a:	2201      	movs	r2, #1
 800377c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377e:	f7fe fb49 	bl	8001e14 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003786:	f7fe fb45 	bl	8001e14 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e05c      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003798:	4b11      	ldr	r3, [pc, #68]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x416>
 80037a4:	e054      	b.n	8003850 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	4b10      	ldr	r3, [pc, #64]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ac:	f7fe fb32 	bl	8001e14 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fe fb2e 	bl	8001e14 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e045      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c6:	4b06      	ldr	r3, [pc, #24]	@ (80037e0 <HAL_RCC_OscConfig+0x470>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x444>
 80037d2:	e03d      	b.n	8003850 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d107      	bne.n	80037ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e038      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40007000 	.word	0x40007000
 80037e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037ec:	4b1b      	ldr	r3, [pc, #108]	@ (800385c <HAL_RCC_OscConfig+0x4ec>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d028      	beq.n	800384c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003804:	429a      	cmp	r2, r3
 8003806:	d121      	bne.n	800384c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d11a      	bne.n	800384c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800381c:	4013      	ands	r3, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003822:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003824:	4293      	cmp	r3, r2
 8003826:	d111      	bne.n	800384c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003832:	085b      	lsrs	r3, r3, #1
 8003834:	3b01      	subs	r3, #1
 8003836:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d107      	bne.n	800384c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003846:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40023800 	.word	0x40023800

08003860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0cc      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003874:	4b68      	ldr	r3, [pc, #416]	@ (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d90c      	bls.n	800389c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b65      	ldr	r3, [pc, #404]	@ (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388a:	4b63      	ldr	r3, [pc, #396]	@ (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0b8      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d020      	beq.n	80038ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b4:	4b59      	ldr	r3, [pc, #356]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	4a58      	ldr	r2, [pc, #352]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038cc:	4b53      	ldr	r3, [pc, #332]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	4a52      	ldr	r2, [pc, #328]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d8:	4b50      	ldr	r3, [pc, #320]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	494d      	ldr	r1, [pc, #308]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d044      	beq.n	8003980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d107      	bne.n	800390e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	4b47      	ldr	r3, [pc, #284]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d119      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e07f      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d003      	beq.n	800391e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800391a:	2b03      	cmp	r3, #3
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e06f      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e067      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800393e:	4b37      	ldr	r3, [pc, #220]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f023 0203 	bic.w	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4934      	ldr	r1, [pc, #208]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	4313      	orrs	r3, r2
 800394e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003950:	f7fe fa60 	bl	8001e14 <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	e00a      	b.n	800396e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003958:	f7fe fa5c 	bl	8001e14 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e04f      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	4b2b      	ldr	r3, [pc, #172]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 020c 	and.w	r2, r3, #12
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	429a      	cmp	r2, r3
 800397e:	d1eb      	bne.n	8003958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003980:	4b25      	ldr	r3, [pc, #148]	@ (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d20c      	bcs.n	80039a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b22      	ldr	r3, [pc, #136]	@ (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003996:	4b20      	ldr	r3, [pc, #128]	@ (8003a18 <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e032      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b4:	4b19      	ldr	r3, [pc, #100]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4916      	ldr	r1, [pc, #88]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d009      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039d2:	4b12      	ldr	r3, [pc, #72]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	490e      	ldr	r1, [pc, #56]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039e6:	f000 f821 	bl	8003a2c <HAL_RCC_GetSysClockFreq>
 80039ea:	4602      	mov	r2, r0
 80039ec:	4b0b      	ldr	r3, [pc, #44]	@ (8003a1c <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	490a      	ldr	r1, [pc, #40]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 80039f8:	5ccb      	ldrb	r3, [r1, r3]
 80039fa:	fa22 f303 	lsr.w	r3, r2, r3
 80039fe:	4a09      	ldr	r2, [pc, #36]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a02:	4b09      	ldr	r3, [pc, #36]	@ (8003a28 <HAL_RCC_ClockConfig+0x1c8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe f9c0 	bl	8001d8c <HAL_InitTick>

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40023c00 	.word	0x40023c00
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	08008e38 	.word	0x08008e38
 8003a24:	20000000 	.word	0x20000000
 8003a28:	20000004 	.word	0x20000004

08003a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a30:	b094      	sub	sp, #80	@ 0x50
 8003a32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a44:	4b79      	ldr	r3, [pc, #484]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 030c 	and.w	r3, r3, #12
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d00d      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0x40>
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	f200 80e1 	bhi.w	8003c18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0x34>
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d003      	beq.n	8003a66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a5e:	e0db      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a60:	4b73      	ldr	r3, [pc, #460]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a64:	e0db      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a66:	4b73      	ldr	r3, [pc, #460]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a6a:	e0d8      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a6c:	4b6f      	ldr	r3, [pc, #444]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a74:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a76:	4b6d      	ldr	r3, [pc, #436]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d063      	beq.n	8003b4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a82:	4b6a      	ldr	r3, [pc, #424]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	099b      	lsrs	r3, r3, #6
 8003a88:	2200      	movs	r2, #0
 8003a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a94:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a96:	2300      	movs	r3, #0
 8003a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a9e:	4622      	mov	r2, r4
 8003aa0:	462b      	mov	r3, r5
 8003aa2:	f04f 0000 	mov.w	r0, #0
 8003aa6:	f04f 0100 	mov.w	r1, #0
 8003aaa:	0159      	lsls	r1, r3, #5
 8003aac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab0:	0150      	lsls	r0, r2, #5
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	1a51      	subs	r1, r2, r1
 8003aba:	6139      	str	r1, [r7, #16]
 8003abc:	4629      	mov	r1, r5
 8003abe:	eb63 0301 	sbc.w	r3, r3, r1
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ad0:	4659      	mov	r1, fp
 8003ad2:	018b      	lsls	r3, r1, #6
 8003ad4:	4651      	mov	r1, sl
 8003ad6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ada:	4651      	mov	r1, sl
 8003adc:	018a      	lsls	r2, r1, #6
 8003ade:	4651      	mov	r1, sl
 8003ae0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ae4:	4659      	mov	r1, fp
 8003ae6:	eb63 0901 	sbc.w	r9, r3, r1
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003afe:	4690      	mov	r8, r2
 8003b00:	4699      	mov	r9, r3
 8003b02:	4623      	mov	r3, r4
 8003b04:	eb18 0303 	adds.w	r3, r8, r3
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	462b      	mov	r3, r5
 8003b0c:	eb49 0303 	adc.w	r3, r9, r3
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b1e:	4629      	mov	r1, r5
 8003b20:	024b      	lsls	r3, r1, #9
 8003b22:	4621      	mov	r1, r4
 8003b24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b28:	4621      	mov	r1, r4
 8003b2a:	024a      	lsls	r2, r1, #9
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	4619      	mov	r1, r3
 8003b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b32:	2200      	movs	r2, #0
 8003b34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b3c:	f7fd f8ac 	bl	8000c98 <__aeabi_uldivmod>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4613      	mov	r3, r2
 8003b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b48:	e058      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b4a:	4b38      	ldr	r3, [pc, #224]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	099b      	lsrs	r3, r3, #6
 8003b50:	2200      	movs	r2, #0
 8003b52:	4618      	mov	r0, r3
 8003b54:	4611      	mov	r1, r2
 8003b56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b5a:	623b      	str	r3, [r7, #32]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b64:	4642      	mov	r2, r8
 8003b66:	464b      	mov	r3, r9
 8003b68:	f04f 0000 	mov.w	r0, #0
 8003b6c:	f04f 0100 	mov.w	r1, #0
 8003b70:	0159      	lsls	r1, r3, #5
 8003b72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b76:	0150      	lsls	r0, r2, #5
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4641      	mov	r1, r8
 8003b7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b82:	4649      	mov	r1, r9
 8003b84:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b9c:	ebb2 040a 	subs.w	r4, r2, sl
 8003ba0:	eb63 050b 	sbc.w	r5, r3, fp
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	00eb      	lsls	r3, r5, #3
 8003bae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bb2:	00e2      	lsls	r2, r4, #3
 8003bb4:	4614      	mov	r4, r2
 8003bb6:	461d      	mov	r5, r3
 8003bb8:	4643      	mov	r3, r8
 8003bba:	18e3      	adds	r3, r4, r3
 8003bbc:	603b      	str	r3, [r7, #0]
 8003bbe:	464b      	mov	r3, r9
 8003bc0:	eb45 0303 	adc.w	r3, r5, r3
 8003bc4:	607b      	str	r3, [r7, #4]
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bd2:	4629      	mov	r1, r5
 8003bd4:	028b      	lsls	r3, r1, #10
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bdc:	4621      	mov	r1, r4
 8003bde:	028a      	lsls	r2, r1, #10
 8003be0:	4610      	mov	r0, r2
 8003be2:	4619      	mov	r1, r3
 8003be4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003be6:	2200      	movs	r2, #0
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	61fa      	str	r2, [r7, #28]
 8003bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf0:	f7fd f852 	bl	8000c98 <__aeabi_uldivmod>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	0c1b      	lsrs	r3, r3, #16
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	3301      	adds	r3, #1
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c16:	e002      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c18:	4b05      	ldr	r3, [pc, #20]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3750      	adds	r7, #80	@ 0x50
 8003c24:	46bd      	mov	sp, r7
 8003c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	00f42400 	.word	0x00f42400
 8003c34:	007a1200 	.word	0x007a1200

08003c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c3c:	4b03      	ldr	r3, [pc, #12]	@ (8003c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000000 	.word	0x20000000

08003c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c54:	f7ff fff0 	bl	8003c38 <HAL_RCC_GetHCLKFreq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b05      	ldr	r3, [pc, #20]	@ (8003c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	0a9b      	lsrs	r3, r3, #10
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	4903      	ldr	r1, [pc, #12]	@ (8003c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c66:	5ccb      	ldrb	r3, [r1, r3]
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40023800 	.word	0x40023800
 8003c74:	08008e48 	.word	0x08008e48

08003c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c7c:	f7ff ffdc 	bl	8003c38 <HAL_RCC_GetHCLKFreq>
 8003c80:	4602      	mov	r2, r0
 8003c82:	4b05      	ldr	r3, [pc, #20]	@ (8003c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	0b5b      	lsrs	r3, r3, #13
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	4903      	ldr	r1, [pc, #12]	@ (8003c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c8e:	5ccb      	ldrb	r3, [r1, r3]
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	08008e48 	.word	0x08008e48

08003ca0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e042      	b.n	8003d38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7fd fe68 	bl	800199c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2224      	movs	r2, #36	@ 0x24
 8003cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ce2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 fa09 	bl	80040fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695a      	ldr	r2, [r3, #20]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08a      	sub	sp, #40	@ 0x28
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b20      	cmp	r3, #32
 8003d5e:	d175      	bne.n	8003e4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_UART_Transmit+0x2c>
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e06e      	b.n	8003e4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2221      	movs	r2, #33	@ 0x21
 8003d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d7e:	f7fe f849 	bl	8001e14 <HAL_GetTick>
 8003d82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	88fa      	ldrh	r2, [r7, #6]
 8003d88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	88fa      	ldrh	r2, [r7, #6]
 8003d8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d98:	d108      	bne.n	8003dac <HAL_UART_Transmit+0x6c>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d104      	bne.n	8003dac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	61bb      	str	r3, [r7, #24]
 8003daa:	e003      	b.n	8003db4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003db4:	e02e      	b.n	8003e14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2180      	movs	r1, #128	@ 0x80
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f8df 	bl	8003f84 <UART_WaitOnFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e03a      	b.n	8003e4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10b      	bne.n	8003df6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	3302      	adds	r3, #2
 8003df2:	61bb      	str	r3, [r7, #24]
 8003df4:	e007      	b.n	8003e06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	781a      	ldrb	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	3301      	adds	r3, #1
 8003e04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1cb      	bne.n	8003db6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2200      	movs	r2, #0
 8003e26:	2140      	movs	r1, #64	@ 0x40
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f8ab 	bl	8003f84 <UART_WaitOnFlagUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e006      	b.n	8003e4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	e000      	b.n	8003e4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e4c:	2302      	movs	r3, #2
  }
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3720      	adds	r7, #32
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b08a      	sub	sp, #40	@ 0x28
 8003e5a:	af02      	add	r7, sp, #8
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	603b      	str	r3, [r7, #0]
 8003e62:	4613      	mov	r3, r2
 8003e64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b20      	cmp	r3, #32
 8003e74:	f040 8081 	bne.w	8003f7a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <HAL_UART_Receive+0x2e>
 8003e7e:	88fb      	ldrh	r3, [r7, #6]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e079      	b.n	8003f7c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2222      	movs	r2, #34	@ 0x22
 8003e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e9c:	f7fd ffba 	bl	8001e14 <HAL_GetTick>
 8003ea0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	88fa      	ldrh	r2, [r7, #6]
 8003ea6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	88fa      	ldrh	r2, [r7, #6]
 8003eac:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb6:	d108      	bne.n	8003eca <HAL_UART_Receive+0x74>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d104      	bne.n	8003eca <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	61bb      	str	r3, [r7, #24]
 8003ec8:	e003      	b.n	8003ed2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003ed2:	e047      	b.n	8003f64 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2200      	movs	r2, #0
 8003edc:	2120      	movs	r1, #32
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 f850 	bl	8003f84 <UART_WaitOnFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e042      	b.n	8003f7c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10c      	bne.n	8003f16 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	3302      	adds	r3, #2
 8003f12:	61bb      	str	r3, [r7, #24]
 8003f14:	e01f      	b.n	8003f56 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f1e:	d007      	beq.n	8003f30 <HAL_UART_Receive+0xda>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <HAL_UART_Receive+0xe8>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d106      	bne.n	8003f3e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	701a      	strb	r2, [r3, #0]
 8003f3c:	e008      	b.n	8003f50 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	3301      	adds	r3, #1
 8003f54:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1b2      	bne.n	8003ed4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	e000      	b.n	8003f7c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003f7a:	2302      	movs	r3, #2
  }
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3720      	adds	r7, #32
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	4613      	mov	r3, r2
 8003f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f94:	e03b      	b.n	800400e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f9c:	d037      	beq.n	800400e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f9e:	f7fd ff39 	bl	8001e14 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	6a3a      	ldr	r2, [r7, #32]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d302      	bcc.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e03a      	b.n	800402e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d023      	beq.n	800400e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b80      	cmp	r3, #128	@ 0x80
 8003fca:	d020      	beq.n	800400e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2b40      	cmp	r3, #64	@ 0x40
 8003fd0:	d01d      	beq.n	800400e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d116      	bne.n	800400e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	617b      	str	r3, [r7, #20]
 8003ff4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f81d 	bl	8004036 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2208      	movs	r2, #8
 8004000:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e00f      	b.n	800402e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4013      	ands	r3, r2
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	429a      	cmp	r2, r3
 800401c:	bf0c      	ite	eq
 800401e:	2301      	moveq	r3, #1
 8004020:	2300      	movne	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	429a      	cmp	r2, r3
 800402a:	d0b4      	beq.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004036:	b480      	push	{r7}
 8004038:	b095      	sub	sp, #84	@ 0x54
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	330c      	adds	r3, #12
 8004044:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800404e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004050:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004054:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	330c      	adds	r3, #12
 800405c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800405e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004060:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004062:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004064:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004066:	e841 2300 	strex	r3, r2, [r1]
 800406a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800406c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1e5      	bne.n	800403e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3314      	adds	r3, #20
 8004078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	e853 3f00 	ldrex	r3, [r3]
 8004080:	61fb      	str	r3, [r7, #28]
   return(result);
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	64bb      	str	r3, [r7, #72]	@ 0x48
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3314      	adds	r3, #20
 8004090:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004092:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004094:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004096:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004098:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1e5      	bne.n	8004072 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d119      	bne.n	80040e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	330c      	adds	r3, #12
 80040b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	e853 3f00 	ldrex	r3, [r3]
 80040bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f023 0310 	bic.w	r3, r3, #16
 80040c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	330c      	adds	r3, #12
 80040cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040ce:	61ba      	str	r2, [r7, #24]
 80040d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d2:	6979      	ldr	r1, [r7, #20]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	e841 2300 	strex	r3, r2, [r1]
 80040da:	613b      	str	r3, [r7, #16]
   return(result);
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1e5      	bne.n	80040ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040f0:	bf00      	nop
 80040f2:	3754      	adds	r7, #84	@ 0x54
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004100:	b0c0      	sub	sp, #256	@ 0x100
 8004102:	af00      	add	r7, sp, #0
 8004104:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004118:	68d9      	ldr	r1, [r3, #12]
 800411a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	ea40 0301 	orr.w	r3, r0, r1
 8004124:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	431a      	orrs	r2, r3
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	431a      	orrs	r2, r3
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004154:	f021 010c 	bic.w	r1, r1, #12
 8004158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004162:	430b      	orrs	r3, r1
 8004164:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004176:	6999      	ldr	r1, [r3, #24]
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	ea40 0301 	orr.w	r3, r0, r1
 8004182:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	4b8f      	ldr	r3, [pc, #572]	@ (80043c8 <UART_SetConfig+0x2cc>)
 800418c:	429a      	cmp	r2, r3
 800418e:	d005      	beq.n	800419c <UART_SetConfig+0xa0>
 8004190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	4b8d      	ldr	r3, [pc, #564]	@ (80043cc <UART_SetConfig+0x2d0>)
 8004198:	429a      	cmp	r2, r3
 800419a:	d104      	bne.n	80041a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800419c:	f7ff fd6c 	bl	8003c78 <HAL_RCC_GetPCLK2Freq>
 80041a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80041a4:	e003      	b.n	80041ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041a6:	f7ff fd53 	bl	8003c50 <HAL_RCC_GetPCLK1Freq>
 80041aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041b8:	f040 810c 	bne.w	80043d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041c0:	2200      	movs	r2, #0
 80041c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80041ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80041ce:	4622      	mov	r2, r4
 80041d0:	462b      	mov	r3, r5
 80041d2:	1891      	adds	r1, r2, r2
 80041d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80041d6:	415b      	adcs	r3, r3
 80041d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80041de:	4621      	mov	r1, r4
 80041e0:	eb12 0801 	adds.w	r8, r2, r1
 80041e4:	4629      	mov	r1, r5
 80041e6:	eb43 0901 	adc.w	r9, r3, r1
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	f04f 0300 	mov.w	r3, #0
 80041f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041fe:	4690      	mov	r8, r2
 8004200:	4699      	mov	r9, r3
 8004202:	4623      	mov	r3, r4
 8004204:	eb18 0303 	adds.w	r3, r8, r3
 8004208:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800420c:	462b      	mov	r3, r5
 800420e:	eb49 0303 	adc.w	r3, r9, r3
 8004212:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004222:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004226:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800422a:	460b      	mov	r3, r1
 800422c:	18db      	adds	r3, r3, r3
 800422e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004230:	4613      	mov	r3, r2
 8004232:	eb42 0303 	adc.w	r3, r2, r3
 8004236:	657b      	str	r3, [r7, #84]	@ 0x54
 8004238:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800423c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004240:	f7fc fd2a 	bl	8000c98 <__aeabi_uldivmod>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4b61      	ldr	r3, [pc, #388]	@ (80043d0 <UART_SetConfig+0x2d4>)
 800424a:	fba3 2302 	umull	r2, r3, r3, r2
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	011c      	lsls	r4, r3, #4
 8004252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004256:	2200      	movs	r2, #0
 8004258:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800425c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004260:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004264:	4642      	mov	r2, r8
 8004266:	464b      	mov	r3, r9
 8004268:	1891      	adds	r1, r2, r2
 800426a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800426c:	415b      	adcs	r3, r3
 800426e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004270:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004274:	4641      	mov	r1, r8
 8004276:	eb12 0a01 	adds.w	sl, r2, r1
 800427a:	4649      	mov	r1, r9
 800427c:	eb43 0b01 	adc.w	fp, r3, r1
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800428c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004290:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004294:	4692      	mov	sl, r2
 8004296:	469b      	mov	fp, r3
 8004298:	4643      	mov	r3, r8
 800429a:	eb1a 0303 	adds.w	r3, sl, r3
 800429e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042a2:	464b      	mov	r3, r9
 80042a4:	eb4b 0303 	adc.w	r3, fp, r3
 80042a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80042bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80042c0:	460b      	mov	r3, r1
 80042c2:	18db      	adds	r3, r3, r3
 80042c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80042c6:	4613      	mov	r3, r2
 80042c8:	eb42 0303 	adc.w	r3, r2, r3
 80042cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80042ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80042d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80042d6:	f7fc fcdf 	bl	8000c98 <__aeabi_uldivmod>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4611      	mov	r1, r2
 80042e0:	4b3b      	ldr	r3, [pc, #236]	@ (80043d0 <UART_SetConfig+0x2d4>)
 80042e2:	fba3 2301 	umull	r2, r3, r3, r1
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	2264      	movs	r2, #100	@ 0x64
 80042ea:	fb02 f303 	mul.w	r3, r2, r3
 80042ee:	1acb      	subs	r3, r1, r3
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80042f6:	4b36      	ldr	r3, [pc, #216]	@ (80043d0 <UART_SetConfig+0x2d4>)
 80042f8:	fba3 2302 	umull	r2, r3, r3, r2
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004304:	441c      	add	r4, r3
 8004306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800430a:	2200      	movs	r2, #0
 800430c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004310:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004314:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004318:	4642      	mov	r2, r8
 800431a:	464b      	mov	r3, r9
 800431c:	1891      	adds	r1, r2, r2
 800431e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004320:	415b      	adcs	r3, r3
 8004322:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004324:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004328:	4641      	mov	r1, r8
 800432a:	1851      	adds	r1, r2, r1
 800432c:	6339      	str	r1, [r7, #48]	@ 0x30
 800432e:	4649      	mov	r1, r9
 8004330:	414b      	adcs	r3, r1
 8004332:	637b      	str	r3, [r7, #52]	@ 0x34
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004340:	4659      	mov	r1, fp
 8004342:	00cb      	lsls	r3, r1, #3
 8004344:	4651      	mov	r1, sl
 8004346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800434a:	4651      	mov	r1, sl
 800434c:	00ca      	lsls	r2, r1, #3
 800434e:	4610      	mov	r0, r2
 8004350:	4619      	mov	r1, r3
 8004352:	4603      	mov	r3, r0
 8004354:	4642      	mov	r2, r8
 8004356:	189b      	adds	r3, r3, r2
 8004358:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800435c:	464b      	mov	r3, r9
 800435e:	460a      	mov	r2, r1
 8004360:	eb42 0303 	adc.w	r3, r2, r3
 8004364:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004374:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004378:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800437c:	460b      	mov	r3, r1
 800437e:	18db      	adds	r3, r3, r3
 8004380:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004382:	4613      	mov	r3, r2
 8004384:	eb42 0303 	adc.w	r3, r2, r3
 8004388:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800438a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800438e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004392:	f7fc fc81 	bl	8000c98 <__aeabi_uldivmod>
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4b0d      	ldr	r3, [pc, #52]	@ (80043d0 <UART_SetConfig+0x2d4>)
 800439c:	fba3 1302 	umull	r1, r3, r3, r2
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	2164      	movs	r1, #100	@ 0x64
 80043a4:	fb01 f303 	mul.w	r3, r1, r3
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	3332      	adds	r3, #50	@ 0x32
 80043ae:	4a08      	ldr	r2, [pc, #32]	@ (80043d0 <UART_SetConfig+0x2d4>)
 80043b0:	fba2 2303 	umull	r2, r3, r2, r3
 80043b4:	095b      	lsrs	r3, r3, #5
 80043b6:	f003 0207 	and.w	r2, r3, #7
 80043ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4422      	add	r2, r4
 80043c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043c4:	e106      	b.n	80045d4 <UART_SetConfig+0x4d8>
 80043c6:	bf00      	nop
 80043c8:	40011000 	.word	0x40011000
 80043cc:	40011400 	.word	0x40011400
 80043d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043d8:	2200      	movs	r2, #0
 80043da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80043de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80043e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80043e6:	4642      	mov	r2, r8
 80043e8:	464b      	mov	r3, r9
 80043ea:	1891      	adds	r1, r2, r2
 80043ec:	6239      	str	r1, [r7, #32]
 80043ee:	415b      	adcs	r3, r3
 80043f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80043f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043f6:	4641      	mov	r1, r8
 80043f8:	1854      	adds	r4, r2, r1
 80043fa:	4649      	mov	r1, r9
 80043fc:	eb43 0501 	adc.w	r5, r3, r1
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	00eb      	lsls	r3, r5, #3
 800440a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800440e:	00e2      	lsls	r2, r4, #3
 8004410:	4614      	mov	r4, r2
 8004412:	461d      	mov	r5, r3
 8004414:	4643      	mov	r3, r8
 8004416:	18e3      	adds	r3, r4, r3
 8004418:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800441c:	464b      	mov	r3, r9
 800441e:	eb45 0303 	adc.w	r3, r5, r3
 8004422:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004432:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	f04f 0300 	mov.w	r3, #0
 800443e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004442:	4629      	mov	r1, r5
 8004444:	008b      	lsls	r3, r1, #2
 8004446:	4621      	mov	r1, r4
 8004448:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800444c:	4621      	mov	r1, r4
 800444e:	008a      	lsls	r2, r1, #2
 8004450:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004454:	f7fc fc20 	bl	8000c98 <__aeabi_uldivmod>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4b60      	ldr	r3, [pc, #384]	@ (80045e0 <UART_SetConfig+0x4e4>)
 800445e:	fba3 2302 	umull	r2, r3, r3, r2
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	011c      	lsls	r4, r3, #4
 8004466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800446a:	2200      	movs	r2, #0
 800446c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004470:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004474:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004478:	4642      	mov	r2, r8
 800447a:	464b      	mov	r3, r9
 800447c:	1891      	adds	r1, r2, r2
 800447e:	61b9      	str	r1, [r7, #24]
 8004480:	415b      	adcs	r3, r3
 8004482:	61fb      	str	r3, [r7, #28]
 8004484:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004488:	4641      	mov	r1, r8
 800448a:	1851      	adds	r1, r2, r1
 800448c:	6139      	str	r1, [r7, #16]
 800448e:	4649      	mov	r1, r9
 8004490:	414b      	adcs	r3, r1
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044a0:	4659      	mov	r1, fp
 80044a2:	00cb      	lsls	r3, r1, #3
 80044a4:	4651      	mov	r1, sl
 80044a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044aa:	4651      	mov	r1, sl
 80044ac:	00ca      	lsls	r2, r1, #3
 80044ae:	4610      	mov	r0, r2
 80044b0:	4619      	mov	r1, r3
 80044b2:	4603      	mov	r3, r0
 80044b4:	4642      	mov	r2, r8
 80044b6:	189b      	adds	r3, r3, r2
 80044b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044bc:	464b      	mov	r3, r9
 80044be:	460a      	mov	r2, r1
 80044c0:	eb42 0303 	adc.w	r3, r2, r3
 80044c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80044e0:	4649      	mov	r1, r9
 80044e2:	008b      	lsls	r3, r1, #2
 80044e4:	4641      	mov	r1, r8
 80044e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044ea:	4641      	mov	r1, r8
 80044ec:	008a      	lsls	r2, r1, #2
 80044ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80044f2:	f7fc fbd1 	bl	8000c98 <__aeabi_uldivmod>
 80044f6:	4602      	mov	r2, r0
 80044f8:	460b      	mov	r3, r1
 80044fa:	4611      	mov	r1, r2
 80044fc:	4b38      	ldr	r3, [pc, #224]	@ (80045e0 <UART_SetConfig+0x4e4>)
 80044fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004502:	095b      	lsrs	r3, r3, #5
 8004504:	2264      	movs	r2, #100	@ 0x64
 8004506:	fb02 f303 	mul.w	r3, r2, r3
 800450a:	1acb      	subs	r3, r1, r3
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	3332      	adds	r3, #50	@ 0x32
 8004510:	4a33      	ldr	r2, [pc, #204]	@ (80045e0 <UART_SetConfig+0x4e4>)
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800451c:	441c      	add	r4, r3
 800451e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004522:	2200      	movs	r2, #0
 8004524:	673b      	str	r3, [r7, #112]	@ 0x70
 8004526:	677a      	str	r2, [r7, #116]	@ 0x74
 8004528:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800452c:	4642      	mov	r2, r8
 800452e:	464b      	mov	r3, r9
 8004530:	1891      	adds	r1, r2, r2
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	415b      	adcs	r3, r3
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800453c:	4641      	mov	r1, r8
 800453e:	1851      	adds	r1, r2, r1
 8004540:	6039      	str	r1, [r7, #0]
 8004542:	4649      	mov	r1, r9
 8004544:	414b      	adcs	r3, r1
 8004546:	607b      	str	r3, [r7, #4]
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004554:	4659      	mov	r1, fp
 8004556:	00cb      	lsls	r3, r1, #3
 8004558:	4651      	mov	r1, sl
 800455a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800455e:	4651      	mov	r1, sl
 8004560:	00ca      	lsls	r2, r1, #3
 8004562:	4610      	mov	r0, r2
 8004564:	4619      	mov	r1, r3
 8004566:	4603      	mov	r3, r0
 8004568:	4642      	mov	r2, r8
 800456a:	189b      	adds	r3, r3, r2
 800456c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800456e:	464b      	mov	r3, r9
 8004570:	460a      	mov	r2, r1
 8004572:	eb42 0303 	adc.w	r3, r2, r3
 8004576:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	663b      	str	r3, [r7, #96]	@ 0x60
 8004582:	667a      	str	r2, [r7, #100]	@ 0x64
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004590:	4649      	mov	r1, r9
 8004592:	008b      	lsls	r3, r1, #2
 8004594:	4641      	mov	r1, r8
 8004596:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800459a:	4641      	mov	r1, r8
 800459c:	008a      	lsls	r2, r1, #2
 800459e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80045a2:	f7fc fb79 	bl	8000c98 <__aeabi_uldivmod>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4b0d      	ldr	r3, [pc, #52]	@ (80045e0 <UART_SetConfig+0x4e4>)
 80045ac:	fba3 1302 	umull	r1, r3, r3, r2
 80045b0:	095b      	lsrs	r3, r3, #5
 80045b2:	2164      	movs	r1, #100	@ 0x64
 80045b4:	fb01 f303 	mul.w	r3, r1, r3
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	3332      	adds	r3, #50	@ 0x32
 80045be:	4a08      	ldr	r2, [pc, #32]	@ (80045e0 <UART_SetConfig+0x4e4>)
 80045c0:	fba2 2303 	umull	r2, r3, r2, r3
 80045c4:	095b      	lsrs	r3, r3, #5
 80045c6:	f003 020f 	and.w	r2, r3, #15
 80045ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4422      	add	r2, r4
 80045d2:	609a      	str	r2, [r3, #8]
}
 80045d4:	bf00      	nop
 80045d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80045da:	46bd      	mov	sp, r7
 80045dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045e0:	51eb851f 	.word	0x51eb851f

080045e4 <__cvt>:
 80045e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045e8:	ec57 6b10 	vmov	r6, r7, d0
 80045ec:	2f00      	cmp	r7, #0
 80045ee:	460c      	mov	r4, r1
 80045f0:	4619      	mov	r1, r3
 80045f2:	463b      	mov	r3, r7
 80045f4:	bfbb      	ittet	lt
 80045f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80045fa:	461f      	movlt	r7, r3
 80045fc:	2300      	movge	r3, #0
 80045fe:	232d      	movlt	r3, #45	@ 0x2d
 8004600:	700b      	strb	r3, [r1, #0]
 8004602:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004604:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004608:	4691      	mov	r9, r2
 800460a:	f023 0820 	bic.w	r8, r3, #32
 800460e:	bfbc      	itt	lt
 8004610:	4632      	movlt	r2, r6
 8004612:	4616      	movlt	r6, r2
 8004614:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004618:	d005      	beq.n	8004626 <__cvt+0x42>
 800461a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800461e:	d100      	bne.n	8004622 <__cvt+0x3e>
 8004620:	3401      	adds	r4, #1
 8004622:	2102      	movs	r1, #2
 8004624:	e000      	b.n	8004628 <__cvt+0x44>
 8004626:	2103      	movs	r1, #3
 8004628:	ab03      	add	r3, sp, #12
 800462a:	9301      	str	r3, [sp, #4]
 800462c:	ab02      	add	r3, sp, #8
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	ec47 6b10 	vmov	d0, r6, r7
 8004634:	4653      	mov	r3, sl
 8004636:	4622      	mov	r2, r4
 8004638:	f001 f886 	bl	8005748 <_dtoa_r>
 800463c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004640:	4605      	mov	r5, r0
 8004642:	d119      	bne.n	8004678 <__cvt+0x94>
 8004644:	f019 0f01 	tst.w	r9, #1
 8004648:	d00e      	beq.n	8004668 <__cvt+0x84>
 800464a:	eb00 0904 	add.w	r9, r0, r4
 800464e:	2200      	movs	r2, #0
 8004650:	2300      	movs	r3, #0
 8004652:	4630      	mov	r0, r6
 8004654:	4639      	mov	r1, r7
 8004656:	f7fc fa3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800465a:	b108      	cbz	r0, 8004660 <__cvt+0x7c>
 800465c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004660:	2230      	movs	r2, #48	@ 0x30
 8004662:	9b03      	ldr	r3, [sp, #12]
 8004664:	454b      	cmp	r3, r9
 8004666:	d31e      	bcc.n	80046a6 <__cvt+0xc2>
 8004668:	9b03      	ldr	r3, [sp, #12]
 800466a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800466c:	1b5b      	subs	r3, r3, r5
 800466e:	4628      	mov	r0, r5
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	b004      	add	sp, #16
 8004674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004678:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800467c:	eb00 0904 	add.w	r9, r0, r4
 8004680:	d1e5      	bne.n	800464e <__cvt+0x6a>
 8004682:	7803      	ldrb	r3, [r0, #0]
 8004684:	2b30      	cmp	r3, #48	@ 0x30
 8004686:	d10a      	bne.n	800469e <__cvt+0xba>
 8004688:	2200      	movs	r2, #0
 800468a:	2300      	movs	r3, #0
 800468c:	4630      	mov	r0, r6
 800468e:	4639      	mov	r1, r7
 8004690:	f7fc fa22 	bl	8000ad8 <__aeabi_dcmpeq>
 8004694:	b918      	cbnz	r0, 800469e <__cvt+0xba>
 8004696:	f1c4 0401 	rsb	r4, r4, #1
 800469a:	f8ca 4000 	str.w	r4, [sl]
 800469e:	f8da 3000 	ldr.w	r3, [sl]
 80046a2:	4499      	add	r9, r3
 80046a4:	e7d3      	b.n	800464e <__cvt+0x6a>
 80046a6:	1c59      	adds	r1, r3, #1
 80046a8:	9103      	str	r1, [sp, #12]
 80046aa:	701a      	strb	r2, [r3, #0]
 80046ac:	e7d9      	b.n	8004662 <__cvt+0x7e>

080046ae <__exponent>:
 80046ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046b0:	2900      	cmp	r1, #0
 80046b2:	bfba      	itte	lt
 80046b4:	4249      	neglt	r1, r1
 80046b6:	232d      	movlt	r3, #45	@ 0x2d
 80046b8:	232b      	movge	r3, #43	@ 0x2b
 80046ba:	2909      	cmp	r1, #9
 80046bc:	7002      	strb	r2, [r0, #0]
 80046be:	7043      	strb	r3, [r0, #1]
 80046c0:	dd29      	ble.n	8004716 <__exponent+0x68>
 80046c2:	f10d 0307 	add.w	r3, sp, #7
 80046c6:	461d      	mov	r5, r3
 80046c8:	270a      	movs	r7, #10
 80046ca:	461a      	mov	r2, r3
 80046cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80046d0:	fb07 1416 	mls	r4, r7, r6, r1
 80046d4:	3430      	adds	r4, #48	@ 0x30
 80046d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80046da:	460c      	mov	r4, r1
 80046dc:	2c63      	cmp	r4, #99	@ 0x63
 80046de:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80046e2:	4631      	mov	r1, r6
 80046e4:	dcf1      	bgt.n	80046ca <__exponent+0x1c>
 80046e6:	3130      	adds	r1, #48	@ 0x30
 80046e8:	1e94      	subs	r4, r2, #2
 80046ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80046ee:	1c41      	adds	r1, r0, #1
 80046f0:	4623      	mov	r3, r4
 80046f2:	42ab      	cmp	r3, r5
 80046f4:	d30a      	bcc.n	800470c <__exponent+0x5e>
 80046f6:	f10d 0309 	add.w	r3, sp, #9
 80046fa:	1a9b      	subs	r3, r3, r2
 80046fc:	42ac      	cmp	r4, r5
 80046fe:	bf88      	it	hi
 8004700:	2300      	movhi	r3, #0
 8004702:	3302      	adds	r3, #2
 8004704:	4403      	add	r3, r0
 8004706:	1a18      	subs	r0, r3, r0
 8004708:	b003      	add	sp, #12
 800470a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800470c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004710:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004714:	e7ed      	b.n	80046f2 <__exponent+0x44>
 8004716:	2330      	movs	r3, #48	@ 0x30
 8004718:	3130      	adds	r1, #48	@ 0x30
 800471a:	7083      	strb	r3, [r0, #2]
 800471c:	70c1      	strb	r1, [r0, #3]
 800471e:	1d03      	adds	r3, r0, #4
 8004720:	e7f1      	b.n	8004706 <__exponent+0x58>
	...

08004724 <_printf_float>:
 8004724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004728:	b08d      	sub	sp, #52	@ 0x34
 800472a:	460c      	mov	r4, r1
 800472c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004730:	4616      	mov	r6, r2
 8004732:	461f      	mov	r7, r3
 8004734:	4605      	mov	r5, r0
 8004736:	f000 ff01 	bl	800553c <_localeconv_r>
 800473a:	6803      	ldr	r3, [r0, #0]
 800473c:	9304      	str	r3, [sp, #16]
 800473e:	4618      	mov	r0, r3
 8004740:	f7fb fd9e 	bl	8000280 <strlen>
 8004744:	2300      	movs	r3, #0
 8004746:	930a      	str	r3, [sp, #40]	@ 0x28
 8004748:	f8d8 3000 	ldr.w	r3, [r8]
 800474c:	9005      	str	r0, [sp, #20]
 800474e:	3307      	adds	r3, #7
 8004750:	f023 0307 	bic.w	r3, r3, #7
 8004754:	f103 0208 	add.w	r2, r3, #8
 8004758:	f894 a018 	ldrb.w	sl, [r4, #24]
 800475c:	f8d4 b000 	ldr.w	fp, [r4]
 8004760:	f8c8 2000 	str.w	r2, [r8]
 8004764:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004768:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800476c:	9307      	str	r3, [sp, #28]
 800476e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004772:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004776:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800477a:	4b9c      	ldr	r3, [pc, #624]	@ (80049ec <_printf_float+0x2c8>)
 800477c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004780:	f7fc f9dc 	bl	8000b3c <__aeabi_dcmpun>
 8004784:	bb70      	cbnz	r0, 80047e4 <_printf_float+0xc0>
 8004786:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800478a:	4b98      	ldr	r3, [pc, #608]	@ (80049ec <_printf_float+0x2c8>)
 800478c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004790:	f7fc f9b6 	bl	8000b00 <__aeabi_dcmple>
 8004794:	bb30      	cbnz	r0, 80047e4 <_printf_float+0xc0>
 8004796:	2200      	movs	r2, #0
 8004798:	2300      	movs	r3, #0
 800479a:	4640      	mov	r0, r8
 800479c:	4649      	mov	r1, r9
 800479e:	f7fc f9a5 	bl	8000aec <__aeabi_dcmplt>
 80047a2:	b110      	cbz	r0, 80047aa <_printf_float+0x86>
 80047a4:	232d      	movs	r3, #45	@ 0x2d
 80047a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047aa:	4a91      	ldr	r2, [pc, #580]	@ (80049f0 <_printf_float+0x2cc>)
 80047ac:	4b91      	ldr	r3, [pc, #580]	@ (80049f4 <_printf_float+0x2d0>)
 80047ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80047b2:	bf94      	ite	ls
 80047b4:	4690      	movls	r8, r2
 80047b6:	4698      	movhi	r8, r3
 80047b8:	2303      	movs	r3, #3
 80047ba:	6123      	str	r3, [r4, #16]
 80047bc:	f02b 0304 	bic.w	r3, fp, #4
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	f04f 0900 	mov.w	r9, #0
 80047c6:	9700      	str	r7, [sp, #0]
 80047c8:	4633      	mov	r3, r6
 80047ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 80047cc:	4621      	mov	r1, r4
 80047ce:	4628      	mov	r0, r5
 80047d0:	f000 f9d2 	bl	8004b78 <_printf_common>
 80047d4:	3001      	adds	r0, #1
 80047d6:	f040 808d 	bne.w	80048f4 <_printf_float+0x1d0>
 80047da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047de:	b00d      	add	sp, #52	@ 0x34
 80047e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e4:	4642      	mov	r2, r8
 80047e6:	464b      	mov	r3, r9
 80047e8:	4640      	mov	r0, r8
 80047ea:	4649      	mov	r1, r9
 80047ec:	f7fc f9a6 	bl	8000b3c <__aeabi_dcmpun>
 80047f0:	b140      	cbz	r0, 8004804 <_printf_float+0xe0>
 80047f2:	464b      	mov	r3, r9
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	bfbc      	itt	lt
 80047f8:	232d      	movlt	r3, #45	@ 0x2d
 80047fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80047fe:	4a7e      	ldr	r2, [pc, #504]	@ (80049f8 <_printf_float+0x2d4>)
 8004800:	4b7e      	ldr	r3, [pc, #504]	@ (80049fc <_printf_float+0x2d8>)
 8004802:	e7d4      	b.n	80047ae <_printf_float+0x8a>
 8004804:	6863      	ldr	r3, [r4, #4]
 8004806:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800480a:	9206      	str	r2, [sp, #24]
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	d13b      	bne.n	8004888 <_printf_float+0x164>
 8004810:	2306      	movs	r3, #6
 8004812:	6063      	str	r3, [r4, #4]
 8004814:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004818:	2300      	movs	r3, #0
 800481a:	6022      	str	r2, [r4, #0]
 800481c:	9303      	str	r3, [sp, #12]
 800481e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004820:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004824:	ab09      	add	r3, sp, #36	@ 0x24
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	6861      	ldr	r1, [r4, #4]
 800482a:	ec49 8b10 	vmov	d0, r8, r9
 800482e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004832:	4628      	mov	r0, r5
 8004834:	f7ff fed6 	bl	80045e4 <__cvt>
 8004838:	9b06      	ldr	r3, [sp, #24]
 800483a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800483c:	2b47      	cmp	r3, #71	@ 0x47
 800483e:	4680      	mov	r8, r0
 8004840:	d129      	bne.n	8004896 <_printf_float+0x172>
 8004842:	1cc8      	adds	r0, r1, #3
 8004844:	db02      	blt.n	800484c <_printf_float+0x128>
 8004846:	6863      	ldr	r3, [r4, #4]
 8004848:	4299      	cmp	r1, r3
 800484a:	dd41      	ble.n	80048d0 <_printf_float+0x1ac>
 800484c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004850:	fa5f fa8a 	uxtb.w	sl, sl
 8004854:	3901      	subs	r1, #1
 8004856:	4652      	mov	r2, sl
 8004858:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800485c:	9109      	str	r1, [sp, #36]	@ 0x24
 800485e:	f7ff ff26 	bl	80046ae <__exponent>
 8004862:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004864:	1813      	adds	r3, r2, r0
 8004866:	2a01      	cmp	r2, #1
 8004868:	4681      	mov	r9, r0
 800486a:	6123      	str	r3, [r4, #16]
 800486c:	dc02      	bgt.n	8004874 <_printf_float+0x150>
 800486e:	6822      	ldr	r2, [r4, #0]
 8004870:	07d2      	lsls	r2, r2, #31
 8004872:	d501      	bpl.n	8004878 <_printf_float+0x154>
 8004874:	3301      	adds	r3, #1
 8004876:	6123      	str	r3, [r4, #16]
 8004878:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0a2      	beq.n	80047c6 <_printf_float+0xa2>
 8004880:	232d      	movs	r3, #45	@ 0x2d
 8004882:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004886:	e79e      	b.n	80047c6 <_printf_float+0xa2>
 8004888:	9a06      	ldr	r2, [sp, #24]
 800488a:	2a47      	cmp	r2, #71	@ 0x47
 800488c:	d1c2      	bne.n	8004814 <_printf_float+0xf0>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1c0      	bne.n	8004814 <_printf_float+0xf0>
 8004892:	2301      	movs	r3, #1
 8004894:	e7bd      	b.n	8004812 <_printf_float+0xee>
 8004896:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800489a:	d9db      	bls.n	8004854 <_printf_float+0x130>
 800489c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80048a0:	d118      	bne.n	80048d4 <_printf_float+0x1b0>
 80048a2:	2900      	cmp	r1, #0
 80048a4:	6863      	ldr	r3, [r4, #4]
 80048a6:	dd0b      	ble.n	80048c0 <_printf_float+0x19c>
 80048a8:	6121      	str	r1, [r4, #16]
 80048aa:	b913      	cbnz	r3, 80048b2 <_printf_float+0x18e>
 80048ac:	6822      	ldr	r2, [r4, #0]
 80048ae:	07d0      	lsls	r0, r2, #31
 80048b0:	d502      	bpl.n	80048b8 <_printf_float+0x194>
 80048b2:	3301      	adds	r3, #1
 80048b4:	440b      	add	r3, r1
 80048b6:	6123      	str	r3, [r4, #16]
 80048b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80048ba:	f04f 0900 	mov.w	r9, #0
 80048be:	e7db      	b.n	8004878 <_printf_float+0x154>
 80048c0:	b913      	cbnz	r3, 80048c8 <_printf_float+0x1a4>
 80048c2:	6822      	ldr	r2, [r4, #0]
 80048c4:	07d2      	lsls	r2, r2, #31
 80048c6:	d501      	bpl.n	80048cc <_printf_float+0x1a8>
 80048c8:	3302      	adds	r3, #2
 80048ca:	e7f4      	b.n	80048b6 <_printf_float+0x192>
 80048cc:	2301      	movs	r3, #1
 80048ce:	e7f2      	b.n	80048b6 <_printf_float+0x192>
 80048d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80048d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048d6:	4299      	cmp	r1, r3
 80048d8:	db05      	blt.n	80048e6 <_printf_float+0x1c2>
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	6121      	str	r1, [r4, #16]
 80048de:	07d8      	lsls	r0, r3, #31
 80048e0:	d5ea      	bpl.n	80048b8 <_printf_float+0x194>
 80048e2:	1c4b      	adds	r3, r1, #1
 80048e4:	e7e7      	b.n	80048b6 <_printf_float+0x192>
 80048e6:	2900      	cmp	r1, #0
 80048e8:	bfd4      	ite	le
 80048ea:	f1c1 0202 	rsble	r2, r1, #2
 80048ee:	2201      	movgt	r2, #1
 80048f0:	4413      	add	r3, r2
 80048f2:	e7e0      	b.n	80048b6 <_printf_float+0x192>
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	055a      	lsls	r2, r3, #21
 80048f8:	d407      	bmi.n	800490a <_printf_float+0x1e6>
 80048fa:	6923      	ldr	r3, [r4, #16]
 80048fc:	4642      	mov	r2, r8
 80048fe:	4631      	mov	r1, r6
 8004900:	4628      	mov	r0, r5
 8004902:	47b8      	blx	r7
 8004904:	3001      	adds	r0, #1
 8004906:	d12b      	bne.n	8004960 <_printf_float+0x23c>
 8004908:	e767      	b.n	80047da <_printf_float+0xb6>
 800490a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800490e:	f240 80dd 	bls.w	8004acc <_printf_float+0x3a8>
 8004912:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004916:	2200      	movs	r2, #0
 8004918:	2300      	movs	r3, #0
 800491a:	f7fc f8dd 	bl	8000ad8 <__aeabi_dcmpeq>
 800491e:	2800      	cmp	r0, #0
 8004920:	d033      	beq.n	800498a <_printf_float+0x266>
 8004922:	4a37      	ldr	r2, [pc, #220]	@ (8004a00 <_printf_float+0x2dc>)
 8004924:	2301      	movs	r3, #1
 8004926:	4631      	mov	r1, r6
 8004928:	4628      	mov	r0, r5
 800492a:	47b8      	blx	r7
 800492c:	3001      	adds	r0, #1
 800492e:	f43f af54 	beq.w	80047da <_printf_float+0xb6>
 8004932:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004936:	4543      	cmp	r3, r8
 8004938:	db02      	blt.n	8004940 <_printf_float+0x21c>
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	07d8      	lsls	r0, r3, #31
 800493e:	d50f      	bpl.n	8004960 <_printf_float+0x23c>
 8004940:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004944:	4631      	mov	r1, r6
 8004946:	4628      	mov	r0, r5
 8004948:	47b8      	blx	r7
 800494a:	3001      	adds	r0, #1
 800494c:	f43f af45 	beq.w	80047da <_printf_float+0xb6>
 8004950:	f04f 0900 	mov.w	r9, #0
 8004954:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004958:	f104 0a1a 	add.w	sl, r4, #26
 800495c:	45c8      	cmp	r8, r9
 800495e:	dc09      	bgt.n	8004974 <_printf_float+0x250>
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	079b      	lsls	r3, r3, #30
 8004964:	f100 8103 	bmi.w	8004b6e <_printf_float+0x44a>
 8004968:	68e0      	ldr	r0, [r4, #12]
 800496a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800496c:	4298      	cmp	r0, r3
 800496e:	bfb8      	it	lt
 8004970:	4618      	movlt	r0, r3
 8004972:	e734      	b.n	80047de <_printf_float+0xba>
 8004974:	2301      	movs	r3, #1
 8004976:	4652      	mov	r2, sl
 8004978:	4631      	mov	r1, r6
 800497a:	4628      	mov	r0, r5
 800497c:	47b8      	blx	r7
 800497e:	3001      	adds	r0, #1
 8004980:	f43f af2b 	beq.w	80047da <_printf_float+0xb6>
 8004984:	f109 0901 	add.w	r9, r9, #1
 8004988:	e7e8      	b.n	800495c <_printf_float+0x238>
 800498a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800498c:	2b00      	cmp	r3, #0
 800498e:	dc39      	bgt.n	8004a04 <_printf_float+0x2e0>
 8004990:	4a1b      	ldr	r2, [pc, #108]	@ (8004a00 <_printf_float+0x2dc>)
 8004992:	2301      	movs	r3, #1
 8004994:	4631      	mov	r1, r6
 8004996:	4628      	mov	r0, r5
 8004998:	47b8      	blx	r7
 800499a:	3001      	adds	r0, #1
 800499c:	f43f af1d 	beq.w	80047da <_printf_float+0xb6>
 80049a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80049a4:	ea59 0303 	orrs.w	r3, r9, r3
 80049a8:	d102      	bne.n	80049b0 <_printf_float+0x28c>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	07d9      	lsls	r1, r3, #31
 80049ae:	d5d7      	bpl.n	8004960 <_printf_float+0x23c>
 80049b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049b4:	4631      	mov	r1, r6
 80049b6:	4628      	mov	r0, r5
 80049b8:	47b8      	blx	r7
 80049ba:	3001      	adds	r0, #1
 80049bc:	f43f af0d 	beq.w	80047da <_printf_float+0xb6>
 80049c0:	f04f 0a00 	mov.w	sl, #0
 80049c4:	f104 0b1a 	add.w	fp, r4, #26
 80049c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049ca:	425b      	negs	r3, r3
 80049cc:	4553      	cmp	r3, sl
 80049ce:	dc01      	bgt.n	80049d4 <_printf_float+0x2b0>
 80049d0:	464b      	mov	r3, r9
 80049d2:	e793      	b.n	80048fc <_printf_float+0x1d8>
 80049d4:	2301      	movs	r3, #1
 80049d6:	465a      	mov	r2, fp
 80049d8:	4631      	mov	r1, r6
 80049da:	4628      	mov	r0, r5
 80049dc:	47b8      	blx	r7
 80049de:	3001      	adds	r0, #1
 80049e0:	f43f aefb 	beq.w	80047da <_printf_float+0xb6>
 80049e4:	f10a 0a01 	add.w	sl, sl, #1
 80049e8:	e7ee      	b.n	80049c8 <_printf_float+0x2a4>
 80049ea:	bf00      	nop
 80049ec:	7fefffff 	.word	0x7fefffff
 80049f0:	08008e50 	.word	0x08008e50
 80049f4:	08008e54 	.word	0x08008e54
 80049f8:	08008e58 	.word	0x08008e58
 80049fc:	08008e5c 	.word	0x08008e5c
 8004a00:	08008e60 	.word	0x08008e60
 8004a04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004a06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004a0a:	4553      	cmp	r3, sl
 8004a0c:	bfa8      	it	ge
 8004a0e:	4653      	movge	r3, sl
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	4699      	mov	r9, r3
 8004a14:	dc36      	bgt.n	8004a84 <_printf_float+0x360>
 8004a16:	f04f 0b00 	mov.w	fp, #0
 8004a1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a1e:	f104 021a 	add.w	r2, r4, #26
 8004a22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004a24:	9306      	str	r3, [sp, #24]
 8004a26:	eba3 0309 	sub.w	r3, r3, r9
 8004a2a:	455b      	cmp	r3, fp
 8004a2c:	dc31      	bgt.n	8004a92 <_printf_float+0x36e>
 8004a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a30:	459a      	cmp	sl, r3
 8004a32:	dc3a      	bgt.n	8004aaa <_printf_float+0x386>
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	07da      	lsls	r2, r3, #31
 8004a38:	d437      	bmi.n	8004aaa <_printf_float+0x386>
 8004a3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a3c:	ebaa 0903 	sub.w	r9, sl, r3
 8004a40:	9b06      	ldr	r3, [sp, #24]
 8004a42:	ebaa 0303 	sub.w	r3, sl, r3
 8004a46:	4599      	cmp	r9, r3
 8004a48:	bfa8      	it	ge
 8004a4a:	4699      	movge	r9, r3
 8004a4c:	f1b9 0f00 	cmp.w	r9, #0
 8004a50:	dc33      	bgt.n	8004aba <_printf_float+0x396>
 8004a52:	f04f 0800 	mov.w	r8, #0
 8004a56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a5a:	f104 0b1a 	add.w	fp, r4, #26
 8004a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a60:	ebaa 0303 	sub.w	r3, sl, r3
 8004a64:	eba3 0309 	sub.w	r3, r3, r9
 8004a68:	4543      	cmp	r3, r8
 8004a6a:	f77f af79 	ble.w	8004960 <_printf_float+0x23c>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	465a      	mov	r2, fp
 8004a72:	4631      	mov	r1, r6
 8004a74:	4628      	mov	r0, r5
 8004a76:	47b8      	blx	r7
 8004a78:	3001      	adds	r0, #1
 8004a7a:	f43f aeae 	beq.w	80047da <_printf_float+0xb6>
 8004a7e:	f108 0801 	add.w	r8, r8, #1
 8004a82:	e7ec      	b.n	8004a5e <_printf_float+0x33a>
 8004a84:	4642      	mov	r2, r8
 8004a86:	4631      	mov	r1, r6
 8004a88:	4628      	mov	r0, r5
 8004a8a:	47b8      	blx	r7
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	d1c2      	bne.n	8004a16 <_printf_float+0x2f2>
 8004a90:	e6a3      	b.n	80047da <_printf_float+0xb6>
 8004a92:	2301      	movs	r3, #1
 8004a94:	4631      	mov	r1, r6
 8004a96:	4628      	mov	r0, r5
 8004a98:	9206      	str	r2, [sp, #24]
 8004a9a:	47b8      	blx	r7
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	f43f ae9c 	beq.w	80047da <_printf_float+0xb6>
 8004aa2:	9a06      	ldr	r2, [sp, #24]
 8004aa4:	f10b 0b01 	add.w	fp, fp, #1
 8004aa8:	e7bb      	b.n	8004a22 <_printf_float+0x2fe>
 8004aaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004aae:	4631      	mov	r1, r6
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	47b8      	blx	r7
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	d1c0      	bne.n	8004a3a <_printf_float+0x316>
 8004ab8:	e68f      	b.n	80047da <_printf_float+0xb6>
 8004aba:	9a06      	ldr	r2, [sp, #24]
 8004abc:	464b      	mov	r3, r9
 8004abe:	4442      	add	r2, r8
 8004ac0:	4631      	mov	r1, r6
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	47b8      	blx	r7
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	d1c3      	bne.n	8004a52 <_printf_float+0x32e>
 8004aca:	e686      	b.n	80047da <_printf_float+0xb6>
 8004acc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004ad0:	f1ba 0f01 	cmp.w	sl, #1
 8004ad4:	dc01      	bgt.n	8004ada <_printf_float+0x3b6>
 8004ad6:	07db      	lsls	r3, r3, #31
 8004ad8:	d536      	bpl.n	8004b48 <_printf_float+0x424>
 8004ada:	2301      	movs	r3, #1
 8004adc:	4642      	mov	r2, r8
 8004ade:	4631      	mov	r1, r6
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	47b8      	blx	r7
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	f43f ae78 	beq.w	80047da <_printf_float+0xb6>
 8004aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004aee:	4631      	mov	r1, r6
 8004af0:	4628      	mov	r0, r5
 8004af2:	47b8      	blx	r7
 8004af4:	3001      	adds	r0, #1
 8004af6:	f43f ae70 	beq.w	80047da <_printf_float+0xb6>
 8004afa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004afe:	2200      	movs	r2, #0
 8004b00:	2300      	movs	r3, #0
 8004b02:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004b06:	f7fb ffe7 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b0a:	b9c0      	cbnz	r0, 8004b3e <_printf_float+0x41a>
 8004b0c:	4653      	mov	r3, sl
 8004b0e:	f108 0201 	add.w	r2, r8, #1
 8004b12:	4631      	mov	r1, r6
 8004b14:	4628      	mov	r0, r5
 8004b16:	47b8      	blx	r7
 8004b18:	3001      	adds	r0, #1
 8004b1a:	d10c      	bne.n	8004b36 <_printf_float+0x412>
 8004b1c:	e65d      	b.n	80047da <_printf_float+0xb6>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	465a      	mov	r2, fp
 8004b22:	4631      	mov	r1, r6
 8004b24:	4628      	mov	r0, r5
 8004b26:	47b8      	blx	r7
 8004b28:	3001      	adds	r0, #1
 8004b2a:	f43f ae56 	beq.w	80047da <_printf_float+0xb6>
 8004b2e:	f108 0801 	add.w	r8, r8, #1
 8004b32:	45d0      	cmp	r8, sl
 8004b34:	dbf3      	blt.n	8004b1e <_printf_float+0x3fa>
 8004b36:	464b      	mov	r3, r9
 8004b38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004b3c:	e6df      	b.n	80048fe <_printf_float+0x1da>
 8004b3e:	f04f 0800 	mov.w	r8, #0
 8004b42:	f104 0b1a 	add.w	fp, r4, #26
 8004b46:	e7f4      	b.n	8004b32 <_printf_float+0x40e>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	4642      	mov	r2, r8
 8004b4c:	e7e1      	b.n	8004b12 <_printf_float+0x3ee>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	464a      	mov	r2, r9
 8004b52:	4631      	mov	r1, r6
 8004b54:	4628      	mov	r0, r5
 8004b56:	47b8      	blx	r7
 8004b58:	3001      	adds	r0, #1
 8004b5a:	f43f ae3e 	beq.w	80047da <_printf_float+0xb6>
 8004b5e:	f108 0801 	add.w	r8, r8, #1
 8004b62:	68e3      	ldr	r3, [r4, #12]
 8004b64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004b66:	1a5b      	subs	r3, r3, r1
 8004b68:	4543      	cmp	r3, r8
 8004b6a:	dcf0      	bgt.n	8004b4e <_printf_float+0x42a>
 8004b6c:	e6fc      	b.n	8004968 <_printf_float+0x244>
 8004b6e:	f04f 0800 	mov.w	r8, #0
 8004b72:	f104 0919 	add.w	r9, r4, #25
 8004b76:	e7f4      	b.n	8004b62 <_printf_float+0x43e>

08004b78 <_printf_common>:
 8004b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b7c:	4616      	mov	r6, r2
 8004b7e:	4698      	mov	r8, r3
 8004b80:	688a      	ldr	r2, [r1, #8]
 8004b82:	690b      	ldr	r3, [r1, #16]
 8004b84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	bfb8      	it	lt
 8004b8c:	4613      	movlt	r3, r2
 8004b8e:	6033      	str	r3, [r6, #0]
 8004b90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b94:	4607      	mov	r7, r0
 8004b96:	460c      	mov	r4, r1
 8004b98:	b10a      	cbz	r2, 8004b9e <_printf_common+0x26>
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	6033      	str	r3, [r6, #0]
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	0699      	lsls	r1, r3, #26
 8004ba2:	bf42      	ittt	mi
 8004ba4:	6833      	ldrmi	r3, [r6, #0]
 8004ba6:	3302      	addmi	r3, #2
 8004ba8:	6033      	strmi	r3, [r6, #0]
 8004baa:	6825      	ldr	r5, [r4, #0]
 8004bac:	f015 0506 	ands.w	r5, r5, #6
 8004bb0:	d106      	bne.n	8004bc0 <_printf_common+0x48>
 8004bb2:	f104 0a19 	add.w	sl, r4, #25
 8004bb6:	68e3      	ldr	r3, [r4, #12]
 8004bb8:	6832      	ldr	r2, [r6, #0]
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	42ab      	cmp	r3, r5
 8004bbe:	dc26      	bgt.n	8004c0e <_printf_common+0x96>
 8004bc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004bc4:	6822      	ldr	r2, [r4, #0]
 8004bc6:	3b00      	subs	r3, #0
 8004bc8:	bf18      	it	ne
 8004bca:	2301      	movne	r3, #1
 8004bcc:	0692      	lsls	r2, r2, #26
 8004bce:	d42b      	bmi.n	8004c28 <_printf_common+0xb0>
 8004bd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004bd4:	4641      	mov	r1, r8
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	47c8      	blx	r9
 8004bda:	3001      	adds	r0, #1
 8004bdc:	d01e      	beq.n	8004c1c <_printf_common+0xa4>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	6922      	ldr	r2, [r4, #16]
 8004be2:	f003 0306 	and.w	r3, r3, #6
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	bf02      	ittt	eq
 8004bea:	68e5      	ldreq	r5, [r4, #12]
 8004bec:	6833      	ldreq	r3, [r6, #0]
 8004bee:	1aed      	subeq	r5, r5, r3
 8004bf0:	68a3      	ldr	r3, [r4, #8]
 8004bf2:	bf0c      	ite	eq
 8004bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bf8:	2500      	movne	r5, #0
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	bfc4      	itt	gt
 8004bfe:	1a9b      	subgt	r3, r3, r2
 8004c00:	18ed      	addgt	r5, r5, r3
 8004c02:	2600      	movs	r6, #0
 8004c04:	341a      	adds	r4, #26
 8004c06:	42b5      	cmp	r5, r6
 8004c08:	d11a      	bne.n	8004c40 <_printf_common+0xc8>
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	e008      	b.n	8004c20 <_printf_common+0xa8>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	4652      	mov	r2, sl
 8004c12:	4641      	mov	r1, r8
 8004c14:	4638      	mov	r0, r7
 8004c16:	47c8      	blx	r9
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d103      	bne.n	8004c24 <_printf_common+0xac>
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c24:	3501      	adds	r5, #1
 8004c26:	e7c6      	b.n	8004bb6 <_printf_common+0x3e>
 8004c28:	18e1      	adds	r1, r4, r3
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	2030      	movs	r0, #48	@ 0x30
 8004c2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c32:	4422      	add	r2, r4
 8004c34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c3c:	3302      	adds	r3, #2
 8004c3e:	e7c7      	b.n	8004bd0 <_printf_common+0x58>
 8004c40:	2301      	movs	r3, #1
 8004c42:	4622      	mov	r2, r4
 8004c44:	4641      	mov	r1, r8
 8004c46:	4638      	mov	r0, r7
 8004c48:	47c8      	blx	r9
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d0e6      	beq.n	8004c1c <_printf_common+0xa4>
 8004c4e:	3601      	adds	r6, #1
 8004c50:	e7d9      	b.n	8004c06 <_printf_common+0x8e>
	...

08004c54 <_printf_i>:
 8004c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c58:	7e0f      	ldrb	r7, [r1, #24]
 8004c5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c5c:	2f78      	cmp	r7, #120	@ 0x78
 8004c5e:	4691      	mov	r9, r2
 8004c60:	4680      	mov	r8, r0
 8004c62:	460c      	mov	r4, r1
 8004c64:	469a      	mov	sl, r3
 8004c66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c6a:	d807      	bhi.n	8004c7c <_printf_i+0x28>
 8004c6c:	2f62      	cmp	r7, #98	@ 0x62
 8004c6e:	d80a      	bhi.n	8004c86 <_printf_i+0x32>
 8004c70:	2f00      	cmp	r7, #0
 8004c72:	f000 80d2 	beq.w	8004e1a <_printf_i+0x1c6>
 8004c76:	2f58      	cmp	r7, #88	@ 0x58
 8004c78:	f000 80b9 	beq.w	8004dee <_printf_i+0x19a>
 8004c7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c84:	e03a      	b.n	8004cfc <_printf_i+0xa8>
 8004c86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c8a:	2b15      	cmp	r3, #21
 8004c8c:	d8f6      	bhi.n	8004c7c <_printf_i+0x28>
 8004c8e:	a101      	add	r1, pc, #4	@ (adr r1, 8004c94 <_printf_i+0x40>)
 8004c90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c94:	08004ced 	.word	0x08004ced
 8004c98:	08004d01 	.word	0x08004d01
 8004c9c:	08004c7d 	.word	0x08004c7d
 8004ca0:	08004c7d 	.word	0x08004c7d
 8004ca4:	08004c7d 	.word	0x08004c7d
 8004ca8:	08004c7d 	.word	0x08004c7d
 8004cac:	08004d01 	.word	0x08004d01
 8004cb0:	08004c7d 	.word	0x08004c7d
 8004cb4:	08004c7d 	.word	0x08004c7d
 8004cb8:	08004c7d 	.word	0x08004c7d
 8004cbc:	08004c7d 	.word	0x08004c7d
 8004cc0:	08004e01 	.word	0x08004e01
 8004cc4:	08004d2b 	.word	0x08004d2b
 8004cc8:	08004dbb 	.word	0x08004dbb
 8004ccc:	08004c7d 	.word	0x08004c7d
 8004cd0:	08004c7d 	.word	0x08004c7d
 8004cd4:	08004e23 	.word	0x08004e23
 8004cd8:	08004c7d 	.word	0x08004c7d
 8004cdc:	08004d2b 	.word	0x08004d2b
 8004ce0:	08004c7d 	.word	0x08004c7d
 8004ce4:	08004c7d 	.word	0x08004c7d
 8004ce8:	08004dc3 	.word	0x08004dc3
 8004cec:	6833      	ldr	r3, [r6, #0]
 8004cee:	1d1a      	adds	r2, r3, #4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6032      	str	r2, [r6, #0]
 8004cf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cf8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e09d      	b.n	8004e3c <_printf_i+0x1e8>
 8004d00:	6833      	ldr	r3, [r6, #0]
 8004d02:	6820      	ldr	r0, [r4, #0]
 8004d04:	1d19      	adds	r1, r3, #4
 8004d06:	6031      	str	r1, [r6, #0]
 8004d08:	0606      	lsls	r6, r0, #24
 8004d0a:	d501      	bpl.n	8004d10 <_printf_i+0xbc>
 8004d0c:	681d      	ldr	r5, [r3, #0]
 8004d0e:	e003      	b.n	8004d18 <_printf_i+0xc4>
 8004d10:	0645      	lsls	r5, r0, #25
 8004d12:	d5fb      	bpl.n	8004d0c <_printf_i+0xb8>
 8004d14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d18:	2d00      	cmp	r5, #0
 8004d1a:	da03      	bge.n	8004d24 <_printf_i+0xd0>
 8004d1c:	232d      	movs	r3, #45	@ 0x2d
 8004d1e:	426d      	negs	r5, r5
 8004d20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d24:	4859      	ldr	r0, [pc, #356]	@ (8004e8c <_printf_i+0x238>)
 8004d26:	230a      	movs	r3, #10
 8004d28:	e011      	b.n	8004d4e <_printf_i+0xfa>
 8004d2a:	6821      	ldr	r1, [r4, #0]
 8004d2c:	6833      	ldr	r3, [r6, #0]
 8004d2e:	0608      	lsls	r0, r1, #24
 8004d30:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d34:	d402      	bmi.n	8004d3c <_printf_i+0xe8>
 8004d36:	0649      	lsls	r1, r1, #25
 8004d38:	bf48      	it	mi
 8004d3a:	b2ad      	uxthmi	r5, r5
 8004d3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d3e:	4853      	ldr	r0, [pc, #332]	@ (8004e8c <_printf_i+0x238>)
 8004d40:	6033      	str	r3, [r6, #0]
 8004d42:	bf14      	ite	ne
 8004d44:	230a      	movne	r3, #10
 8004d46:	2308      	moveq	r3, #8
 8004d48:	2100      	movs	r1, #0
 8004d4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d4e:	6866      	ldr	r6, [r4, #4]
 8004d50:	60a6      	str	r6, [r4, #8]
 8004d52:	2e00      	cmp	r6, #0
 8004d54:	bfa2      	ittt	ge
 8004d56:	6821      	ldrge	r1, [r4, #0]
 8004d58:	f021 0104 	bicge.w	r1, r1, #4
 8004d5c:	6021      	strge	r1, [r4, #0]
 8004d5e:	b90d      	cbnz	r5, 8004d64 <_printf_i+0x110>
 8004d60:	2e00      	cmp	r6, #0
 8004d62:	d04b      	beq.n	8004dfc <_printf_i+0x1a8>
 8004d64:	4616      	mov	r6, r2
 8004d66:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d6a:	fb03 5711 	mls	r7, r3, r1, r5
 8004d6e:	5dc7      	ldrb	r7, [r0, r7]
 8004d70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d74:	462f      	mov	r7, r5
 8004d76:	42bb      	cmp	r3, r7
 8004d78:	460d      	mov	r5, r1
 8004d7a:	d9f4      	bls.n	8004d66 <_printf_i+0x112>
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d10b      	bne.n	8004d98 <_printf_i+0x144>
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	07df      	lsls	r7, r3, #31
 8004d84:	d508      	bpl.n	8004d98 <_printf_i+0x144>
 8004d86:	6923      	ldr	r3, [r4, #16]
 8004d88:	6861      	ldr	r1, [r4, #4]
 8004d8a:	4299      	cmp	r1, r3
 8004d8c:	bfde      	ittt	le
 8004d8e:	2330      	movle	r3, #48	@ 0x30
 8004d90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d94:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004d98:	1b92      	subs	r2, r2, r6
 8004d9a:	6122      	str	r2, [r4, #16]
 8004d9c:	f8cd a000 	str.w	sl, [sp]
 8004da0:	464b      	mov	r3, r9
 8004da2:	aa03      	add	r2, sp, #12
 8004da4:	4621      	mov	r1, r4
 8004da6:	4640      	mov	r0, r8
 8004da8:	f7ff fee6 	bl	8004b78 <_printf_common>
 8004dac:	3001      	adds	r0, #1
 8004dae:	d14a      	bne.n	8004e46 <_printf_i+0x1f2>
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004db4:	b004      	add	sp, #16
 8004db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	f043 0320 	orr.w	r3, r3, #32
 8004dc0:	6023      	str	r3, [r4, #0]
 8004dc2:	4833      	ldr	r0, [pc, #204]	@ (8004e90 <_printf_i+0x23c>)
 8004dc4:	2778      	movs	r7, #120	@ 0x78
 8004dc6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	6831      	ldr	r1, [r6, #0]
 8004dce:	061f      	lsls	r7, r3, #24
 8004dd0:	f851 5b04 	ldr.w	r5, [r1], #4
 8004dd4:	d402      	bmi.n	8004ddc <_printf_i+0x188>
 8004dd6:	065f      	lsls	r7, r3, #25
 8004dd8:	bf48      	it	mi
 8004dda:	b2ad      	uxthmi	r5, r5
 8004ddc:	6031      	str	r1, [r6, #0]
 8004dde:	07d9      	lsls	r1, r3, #31
 8004de0:	bf44      	itt	mi
 8004de2:	f043 0320 	orrmi.w	r3, r3, #32
 8004de6:	6023      	strmi	r3, [r4, #0]
 8004de8:	b11d      	cbz	r5, 8004df2 <_printf_i+0x19e>
 8004dea:	2310      	movs	r3, #16
 8004dec:	e7ac      	b.n	8004d48 <_printf_i+0xf4>
 8004dee:	4827      	ldr	r0, [pc, #156]	@ (8004e8c <_printf_i+0x238>)
 8004df0:	e7e9      	b.n	8004dc6 <_printf_i+0x172>
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	f023 0320 	bic.w	r3, r3, #32
 8004df8:	6023      	str	r3, [r4, #0]
 8004dfa:	e7f6      	b.n	8004dea <_printf_i+0x196>
 8004dfc:	4616      	mov	r6, r2
 8004dfe:	e7bd      	b.n	8004d7c <_printf_i+0x128>
 8004e00:	6833      	ldr	r3, [r6, #0]
 8004e02:	6825      	ldr	r5, [r4, #0]
 8004e04:	6961      	ldr	r1, [r4, #20]
 8004e06:	1d18      	adds	r0, r3, #4
 8004e08:	6030      	str	r0, [r6, #0]
 8004e0a:	062e      	lsls	r6, r5, #24
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	d501      	bpl.n	8004e14 <_printf_i+0x1c0>
 8004e10:	6019      	str	r1, [r3, #0]
 8004e12:	e002      	b.n	8004e1a <_printf_i+0x1c6>
 8004e14:	0668      	lsls	r0, r5, #25
 8004e16:	d5fb      	bpl.n	8004e10 <_printf_i+0x1bc>
 8004e18:	8019      	strh	r1, [r3, #0]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	6123      	str	r3, [r4, #16]
 8004e1e:	4616      	mov	r6, r2
 8004e20:	e7bc      	b.n	8004d9c <_printf_i+0x148>
 8004e22:	6833      	ldr	r3, [r6, #0]
 8004e24:	1d1a      	adds	r2, r3, #4
 8004e26:	6032      	str	r2, [r6, #0]
 8004e28:	681e      	ldr	r6, [r3, #0]
 8004e2a:	6862      	ldr	r2, [r4, #4]
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	4630      	mov	r0, r6
 8004e30:	f7fb f9d6 	bl	80001e0 <memchr>
 8004e34:	b108      	cbz	r0, 8004e3a <_printf_i+0x1e6>
 8004e36:	1b80      	subs	r0, r0, r6
 8004e38:	6060      	str	r0, [r4, #4]
 8004e3a:	6863      	ldr	r3, [r4, #4]
 8004e3c:	6123      	str	r3, [r4, #16]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e44:	e7aa      	b.n	8004d9c <_printf_i+0x148>
 8004e46:	6923      	ldr	r3, [r4, #16]
 8004e48:	4632      	mov	r2, r6
 8004e4a:	4649      	mov	r1, r9
 8004e4c:	4640      	mov	r0, r8
 8004e4e:	47d0      	blx	sl
 8004e50:	3001      	adds	r0, #1
 8004e52:	d0ad      	beq.n	8004db0 <_printf_i+0x15c>
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	079b      	lsls	r3, r3, #30
 8004e58:	d413      	bmi.n	8004e82 <_printf_i+0x22e>
 8004e5a:	68e0      	ldr	r0, [r4, #12]
 8004e5c:	9b03      	ldr	r3, [sp, #12]
 8004e5e:	4298      	cmp	r0, r3
 8004e60:	bfb8      	it	lt
 8004e62:	4618      	movlt	r0, r3
 8004e64:	e7a6      	b.n	8004db4 <_printf_i+0x160>
 8004e66:	2301      	movs	r3, #1
 8004e68:	4632      	mov	r2, r6
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	4640      	mov	r0, r8
 8004e6e:	47d0      	blx	sl
 8004e70:	3001      	adds	r0, #1
 8004e72:	d09d      	beq.n	8004db0 <_printf_i+0x15c>
 8004e74:	3501      	adds	r5, #1
 8004e76:	68e3      	ldr	r3, [r4, #12]
 8004e78:	9903      	ldr	r1, [sp, #12]
 8004e7a:	1a5b      	subs	r3, r3, r1
 8004e7c:	42ab      	cmp	r3, r5
 8004e7e:	dcf2      	bgt.n	8004e66 <_printf_i+0x212>
 8004e80:	e7eb      	b.n	8004e5a <_printf_i+0x206>
 8004e82:	2500      	movs	r5, #0
 8004e84:	f104 0619 	add.w	r6, r4, #25
 8004e88:	e7f5      	b.n	8004e76 <_printf_i+0x222>
 8004e8a:	bf00      	nop
 8004e8c:	08008e62 	.word	0x08008e62
 8004e90:	08008e73 	.word	0x08008e73

08004e94 <_scanf_float>:
 8004e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e98:	b087      	sub	sp, #28
 8004e9a:	4617      	mov	r7, r2
 8004e9c:	9303      	str	r3, [sp, #12]
 8004e9e:	688b      	ldr	r3, [r1, #8]
 8004ea0:	1e5a      	subs	r2, r3, #1
 8004ea2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004ea6:	bf81      	itttt	hi
 8004ea8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004eac:	eb03 0b05 	addhi.w	fp, r3, r5
 8004eb0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004eb4:	608b      	strhi	r3, [r1, #8]
 8004eb6:	680b      	ldr	r3, [r1, #0]
 8004eb8:	460a      	mov	r2, r1
 8004eba:	f04f 0500 	mov.w	r5, #0
 8004ebe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004ec2:	f842 3b1c 	str.w	r3, [r2], #28
 8004ec6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004eca:	4680      	mov	r8, r0
 8004ecc:	460c      	mov	r4, r1
 8004ece:	bf98      	it	ls
 8004ed0:	f04f 0b00 	movls.w	fp, #0
 8004ed4:	9201      	str	r2, [sp, #4]
 8004ed6:	4616      	mov	r6, r2
 8004ed8:	46aa      	mov	sl, r5
 8004eda:	46a9      	mov	r9, r5
 8004edc:	9502      	str	r5, [sp, #8]
 8004ede:	68a2      	ldr	r2, [r4, #8]
 8004ee0:	b152      	cbz	r2, 8004ef8 <_scanf_float+0x64>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b4e      	cmp	r3, #78	@ 0x4e
 8004ee8:	d864      	bhi.n	8004fb4 <_scanf_float+0x120>
 8004eea:	2b40      	cmp	r3, #64	@ 0x40
 8004eec:	d83c      	bhi.n	8004f68 <_scanf_float+0xd4>
 8004eee:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004ef2:	b2c8      	uxtb	r0, r1
 8004ef4:	280e      	cmp	r0, #14
 8004ef6:	d93a      	bls.n	8004f6e <_scanf_float+0xda>
 8004ef8:	f1b9 0f00 	cmp.w	r9, #0
 8004efc:	d003      	beq.n	8004f06 <_scanf_float+0x72>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004f0a:	f1ba 0f01 	cmp.w	sl, #1
 8004f0e:	f200 8117 	bhi.w	8005140 <_scanf_float+0x2ac>
 8004f12:	9b01      	ldr	r3, [sp, #4]
 8004f14:	429e      	cmp	r6, r3
 8004f16:	f200 8108 	bhi.w	800512a <_scanf_float+0x296>
 8004f1a:	2001      	movs	r0, #1
 8004f1c:	b007      	add	sp, #28
 8004f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f22:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004f26:	2a0d      	cmp	r2, #13
 8004f28:	d8e6      	bhi.n	8004ef8 <_scanf_float+0x64>
 8004f2a:	a101      	add	r1, pc, #4	@ (adr r1, 8004f30 <_scanf_float+0x9c>)
 8004f2c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004f30:	08005077 	.word	0x08005077
 8004f34:	08004ef9 	.word	0x08004ef9
 8004f38:	08004ef9 	.word	0x08004ef9
 8004f3c:	08004ef9 	.word	0x08004ef9
 8004f40:	080050d7 	.word	0x080050d7
 8004f44:	080050af 	.word	0x080050af
 8004f48:	08004ef9 	.word	0x08004ef9
 8004f4c:	08004ef9 	.word	0x08004ef9
 8004f50:	08005085 	.word	0x08005085
 8004f54:	08004ef9 	.word	0x08004ef9
 8004f58:	08004ef9 	.word	0x08004ef9
 8004f5c:	08004ef9 	.word	0x08004ef9
 8004f60:	08004ef9 	.word	0x08004ef9
 8004f64:	0800503d 	.word	0x0800503d
 8004f68:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004f6c:	e7db      	b.n	8004f26 <_scanf_float+0x92>
 8004f6e:	290e      	cmp	r1, #14
 8004f70:	d8c2      	bhi.n	8004ef8 <_scanf_float+0x64>
 8004f72:	a001      	add	r0, pc, #4	@ (adr r0, 8004f78 <_scanf_float+0xe4>)
 8004f74:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004f78:	0800502d 	.word	0x0800502d
 8004f7c:	08004ef9 	.word	0x08004ef9
 8004f80:	0800502d 	.word	0x0800502d
 8004f84:	080050c3 	.word	0x080050c3
 8004f88:	08004ef9 	.word	0x08004ef9
 8004f8c:	08004fd5 	.word	0x08004fd5
 8004f90:	08005013 	.word	0x08005013
 8004f94:	08005013 	.word	0x08005013
 8004f98:	08005013 	.word	0x08005013
 8004f9c:	08005013 	.word	0x08005013
 8004fa0:	08005013 	.word	0x08005013
 8004fa4:	08005013 	.word	0x08005013
 8004fa8:	08005013 	.word	0x08005013
 8004fac:	08005013 	.word	0x08005013
 8004fb0:	08005013 	.word	0x08005013
 8004fb4:	2b6e      	cmp	r3, #110	@ 0x6e
 8004fb6:	d809      	bhi.n	8004fcc <_scanf_float+0x138>
 8004fb8:	2b60      	cmp	r3, #96	@ 0x60
 8004fba:	d8b2      	bhi.n	8004f22 <_scanf_float+0x8e>
 8004fbc:	2b54      	cmp	r3, #84	@ 0x54
 8004fbe:	d07b      	beq.n	80050b8 <_scanf_float+0x224>
 8004fc0:	2b59      	cmp	r3, #89	@ 0x59
 8004fc2:	d199      	bne.n	8004ef8 <_scanf_float+0x64>
 8004fc4:	2d07      	cmp	r5, #7
 8004fc6:	d197      	bne.n	8004ef8 <_scanf_float+0x64>
 8004fc8:	2508      	movs	r5, #8
 8004fca:	e02c      	b.n	8005026 <_scanf_float+0x192>
 8004fcc:	2b74      	cmp	r3, #116	@ 0x74
 8004fce:	d073      	beq.n	80050b8 <_scanf_float+0x224>
 8004fd0:	2b79      	cmp	r3, #121	@ 0x79
 8004fd2:	e7f6      	b.n	8004fc2 <_scanf_float+0x12e>
 8004fd4:	6821      	ldr	r1, [r4, #0]
 8004fd6:	05c8      	lsls	r0, r1, #23
 8004fd8:	d51b      	bpl.n	8005012 <_scanf_float+0x17e>
 8004fda:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004fde:	6021      	str	r1, [r4, #0]
 8004fe0:	f109 0901 	add.w	r9, r9, #1
 8004fe4:	f1bb 0f00 	cmp.w	fp, #0
 8004fe8:	d003      	beq.n	8004ff2 <_scanf_float+0x15e>
 8004fea:	3201      	adds	r2, #1
 8004fec:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8004ff0:	60a2      	str	r2, [r4, #8]
 8004ff2:	68a3      	ldr	r3, [r4, #8]
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	60a3      	str	r3, [r4, #8]
 8004ff8:	6923      	ldr	r3, [r4, #16]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	6123      	str	r3, [r4, #16]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3b01      	subs	r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	607b      	str	r3, [r7, #4]
 8005006:	f340 8087 	ble.w	8005118 <_scanf_float+0x284>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	3301      	adds	r3, #1
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	e765      	b.n	8004ede <_scanf_float+0x4a>
 8005012:	eb1a 0105 	adds.w	r1, sl, r5
 8005016:	f47f af6f 	bne.w	8004ef8 <_scanf_float+0x64>
 800501a:	6822      	ldr	r2, [r4, #0]
 800501c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005020:	6022      	str	r2, [r4, #0]
 8005022:	460d      	mov	r5, r1
 8005024:	468a      	mov	sl, r1
 8005026:	f806 3b01 	strb.w	r3, [r6], #1
 800502a:	e7e2      	b.n	8004ff2 <_scanf_float+0x15e>
 800502c:	6822      	ldr	r2, [r4, #0]
 800502e:	0610      	lsls	r0, r2, #24
 8005030:	f57f af62 	bpl.w	8004ef8 <_scanf_float+0x64>
 8005034:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005038:	6022      	str	r2, [r4, #0]
 800503a:	e7f4      	b.n	8005026 <_scanf_float+0x192>
 800503c:	f1ba 0f00 	cmp.w	sl, #0
 8005040:	d10e      	bne.n	8005060 <_scanf_float+0x1cc>
 8005042:	f1b9 0f00 	cmp.w	r9, #0
 8005046:	d10e      	bne.n	8005066 <_scanf_float+0x1d2>
 8005048:	6822      	ldr	r2, [r4, #0]
 800504a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800504e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005052:	d108      	bne.n	8005066 <_scanf_float+0x1d2>
 8005054:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005058:	6022      	str	r2, [r4, #0]
 800505a:	f04f 0a01 	mov.w	sl, #1
 800505e:	e7e2      	b.n	8005026 <_scanf_float+0x192>
 8005060:	f1ba 0f02 	cmp.w	sl, #2
 8005064:	d055      	beq.n	8005112 <_scanf_float+0x27e>
 8005066:	2d01      	cmp	r5, #1
 8005068:	d002      	beq.n	8005070 <_scanf_float+0x1dc>
 800506a:	2d04      	cmp	r5, #4
 800506c:	f47f af44 	bne.w	8004ef8 <_scanf_float+0x64>
 8005070:	3501      	adds	r5, #1
 8005072:	b2ed      	uxtb	r5, r5
 8005074:	e7d7      	b.n	8005026 <_scanf_float+0x192>
 8005076:	f1ba 0f01 	cmp.w	sl, #1
 800507a:	f47f af3d 	bne.w	8004ef8 <_scanf_float+0x64>
 800507e:	f04f 0a02 	mov.w	sl, #2
 8005082:	e7d0      	b.n	8005026 <_scanf_float+0x192>
 8005084:	b97d      	cbnz	r5, 80050a6 <_scanf_float+0x212>
 8005086:	f1b9 0f00 	cmp.w	r9, #0
 800508a:	f47f af38 	bne.w	8004efe <_scanf_float+0x6a>
 800508e:	6822      	ldr	r2, [r4, #0]
 8005090:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005094:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005098:	f040 8108 	bne.w	80052ac <_scanf_float+0x418>
 800509c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80050a0:	6022      	str	r2, [r4, #0]
 80050a2:	2501      	movs	r5, #1
 80050a4:	e7bf      	b.n	8005026 <_scanf_float+0x192>
 80050a6:	2d03      	cmp	r5, #3
 80050a8:	d0e2      	beq.n	8005070 <_scanf_float+0x1dc>
 80050aa:	2d05      	cmp	r5, #5
 80050ac:	e7de      	b.n	800506c <_scanf_float+0x1d8>
 80050ae:	2d02      	cmp	r5, #2
 80050b0:	f47f af22 	bne.w	8004ef8 <_scanf_float+0x64>
 80050b4:	2503      	movs	r5, #3
 80050b6:	e7b6      	b.n	8005026 <_scanf_float+0x192>
 80050b8:	2d06      	cmp	r5, #6
 80050ba:	f47f af1d 	bne.w	8004ef8 <_scanf_float+0x64>
 80050be:	2507      	movs	r5, #7
 80050c0:	e7b1      	b.n	8005026 <_scanf_float+0x192>
 80050c2:	6822      	ldr	r2, [r4, #0]
 80050c4:	0591      	lsls	r1, r2, #22
 80050c6:	f57f af17 	bpl.w	8004ef8 <_scanf_float+0x64>
 80050ca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80050ce:	6022      	str	r2, [r4, #0]
 80050d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80050d4:	e7a7      	b.n	8005026 <_scanf_float+0x192>
 80050d6:	6822      	ldr	r2, [r4, #0]
 80050d8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80050dc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80050e0:	d006      	beq.n	80050f0 <_scanf_float+0x25c>
 80050e2:	0550      	lsls	r0, r2, #21
 80050e4:	f57f af08 	bpl.w	8004ef8 <_scanf_float+0x64>
 80050e8:	f1b9 0f00 	cmp.w	r9, #0
 80050ec:	f000 80de 	beq.w	80052ac <_scanf_float+0x418>
 80050f0:	0591      	lsls	r1, r2, #22
 80050f2:	bf58      	it	pl
 80050f4:	9902      	ldrpl	r1, [sp, #8]
 80050f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80050fa:	bf58      	it	pl
 80050fc:	eba9 0101 	subpl.w	r1, r9, r1
 8005100:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005104:	bf58      	it	pl
 8005106:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800510a:	6022      	str	r2, [r4, #0]
 800510c:	f04f 0900 	mov.w	r9, #0
 8005110:	e789      	b.n	8005026 <_scanf_float+0x192>
 8005112:	f04f 0a03 	mov.w	sl, #3
 8005116:	e786      	b.n	8005026 <_scanf_float+0x192>
 8005118:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800511c:	4639      	mov	r1, r7
 800511e:	4640      	mov	r0, r8
 8005120:	4798      	blx	r3
 8005122:	2800      	cmp	r0, #0
 8005124:	f43f aedb 	beq.w	8004ede <_scanf_float+0x4a>
 8005128:	e6e6      	b.n	8004ef8 <_scanf_float+0x64>
 800512a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800512e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005132:	463a      	mov	r2, r7
 8005134:	4640      	mov	r0, r8
 8005136:	4798      	blx	r3
 8005138:	6923      	ldr	r3, [r4, #16]
 800513a:	3b01      	subs	r3, #1
 800513c:	6123      	str	r3, [r4, #16]
 800513e:	e6e8      	b.n	8004f12 <_scanf_float+0x7e>
 8005140:	1e6b      	subs	r3, r5, #1
 8005142:	2b06      	cmp	r3, #6
 8005144:	d824      	bhi.n	8005190 <_scanf_float+0x2fc>
 8005146:	2d02      	cmp	r5, #2
 8005148:	d836      	bhi.n	80051b8 <_scanf_float+0x324>
 800514a:	9b01      	ldr	r3, [sp, #4]
 800514c:	429e      	cmp	r6, r3
 800514e:	f67f aee4 	bls.w	8004f1a <_scanf_float+0x86>
 8005152:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005156:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800515a:	463a      	mov	r2, r7
 800515c:	4640      	mov	r0, r8
 800515e:	4798      	blx	r3
 8005160:	6923      	ldr	r3, [r4, #16]
 8005162:	3b01      	subs	r3, #1
 8005164:	6123      	str	r3, [r4, #16]
 8005166:	e7f0      	b.n	800514a <_scanf_float+0x2b6>
 8005168:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800516c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005170:	463a      	mov	r2, r7
 8005172:	4640      	mov	r0, r8
 8005174:	4798      	blx	r3
 8005176:	6923      	ldr	r3, [r4, #16]
 8005178:	3b01      	subs	r3, #1
 800517a:	6123      	str	r3, [r4, #16]
 800517c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005180:	fa5f fa8a 	uxtb.w	sl, sl
 8005184:	f1ba 0f02 	cmp.w	sl, #2
 8005188:	d1ee      	bne.n	8005168 <_scanf_float+0x2d4>
 800518a:	3d03      	subs	r5, #3
 800518c:	b2ed      	uxtb	r5, r5
 800518e:	1b76      	subs	r6, r6, r5
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	05da      	lsls	r2, r3, #23
 8005194:	d530      	bpl.n	80051f8 <_scanf_float+0x364>
 8005196:	055b      	lsls	r3, r3, #21
 8005198:	d511      	bpl.n	80051be <_scanf_float+0x32a>
 800519a:	9b01      	ldr	r3, [sp, #4]
 800519c:	429e      	cmp	r6, r3
 800519e:	f67f aebc 	bls.w	8004f1a <_scanf_float+0x86>
 80051a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80051a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80051aa:	463a      	mov	r2, r7
 80051ac:	4640      	mov	r0, r8
 80051ae:	4798      	blx	r3
 80051b0:	6923      	ldr	r3, [r4, #16]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	6123      	str	r3, [r4, #16]
 80051b6:	e7f0      	b.n	800519a <_scanf_float+0x306>
 80051b8:	46aa      	mov	sl, r5
 80051ba:	46b3      	mov	fp, r6
 80051bc:	e7de      	b.n	800517c <_scanf_float+0x2e8>
 80051be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80051c2:	6923      	ldr	r3, [r4, #16]
 80051c4:	2965      	cmp	r1, #101	@ 0x65
 80051c6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80051ca:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80051ce:	6123      	str	r3, [r4, #16]
 80051d0:	d00c      	beq.n	80051ec <_scanf_float+0x358>
 80051d2:	2945      	cmp	r1, #69	@ 0x45
 80051d4:	d00a      	beq.n	80051ec <_scanf_float+0x358>
 80051d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80051da:	463a      	mov	r2, r7
 80051dc:	4640      	mov	r0, r8
 80051de:	4798      	blx	r3
 80051e0:	6923      	ldr	r3, [r4, #16]
 80051e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	1eb5      	subs	r5, r6, #2
 80051ea:	6123      	str	r3, [r4, #16]
 80051ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80051f0:	463a      	mov	r2, r7
 80051f2:	4640      	mov	r0, r8
 80051f4:	4798      	blx	r3
 80051f6:	462e      	mov	r6, r5
 80051f8:	6822      	ldr	r2, [r4, #0]
 80051fa:	f012 0210 	ands.w	r2, r2, #16
 80051fe:	d001      	beq.n	8005204 <_scanf_float+0x370>
 8005200:	2000      	movs	r0, #0
 8005202:	e68b      	b.n	8004f1c <_scanf_float+0x88>
 8005204:	7032      	strb	r2, [r6, #0]
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800520c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005210:	d11c      	bne.n	800524c <_scanf_float+0x3b8>
 8005212:	9b02      	ldr	r3, [sp, #8]
 8005214:	454b      	cmp	r3, r9
 8005216:	eba3 0209 	sub.w	r2, r3, r9
 800521a:	d123      	bne.n	8005264 <_scanf_float+0x3d0>
 800521c:	9901      	ldr	r1, [sp, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	4640      	mov	r0, r8
 8005222:	f002 fc09 	bl	8007a38 <_strtod_r>
 8005226:	9b03      	ldr	r3, [sp, #12]
 8005228:	6821      	ldr	r1, [r4, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f011 0f02 	tst.w	r1, #2
 8005230:	ec57 6b10 	vmov	r6, r7, d0
 8005234:	f103 0204 	add.w	r2, r3, #4
 8005238:	d01f      	beq.n	800527a <_scanf_float+0x3e6>
 800523a:	9903      	ldr	r1, [sp, #12]
 800523c:	600a      	str	r2, [r1, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	e9c3 6700 	strd	r6, r7, [r3]
 8005244:	68e3      	ldr	r3, [r4, #12]
 8005246:	3301      	adds	r3, #1
 8005248:	60e3      	str	r3, [r4, #12]
 800524a:	e7d9      	b.n	8005200 <_scanf_float+0x36c>
 800524c:	9b04      	ldr	r3, [sp, #16]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0e4      	beq.n	800521c <_scanf_float+0x388>
 8005252:	9905      	ldr	r1, [sp, #20]
 8005254:	230a      	movs	r3, #10
 8005256:	3101      	adds	r1, #1
 8005258:	4640      	mov	r0, r8
 800525a:	f002 fc6d 	bl	8007b38 <_strtol_r>
 800525e:	9b04      	ldr	r3, [sp, #16]
 8005260:	9e05      	ldr	r6, [sp, #20]
 8005262:	1ac2      	subs	r2, r0, r3
 8005264:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005268:	429e      	cmp	r6, r3
 800526a:	bf28      	it	cs
 800526c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005270:	4910      	ldr	r1, [pc, #64]	@ (80052b4 <_scanf_float+0x420>)
 8005272:	4630      	mov	r0, r6
 8005274:	f000 f8f6 	bl	8005464 <siprintf>
 8005278:	e7d0      	b.n	800521c <_scanf_float+0x388>
 800527a:	f011 0f04 	tst.w	r1, #4
 800527e:	9903      	ldr	r1, [sp, #12]
 8005280:	600a      	str	r2, [r1, #0]
 8005282:	d1dc      	bne.n	800523e <_scanf_float+0x3aa>
 8005284:	681d      	ldr	r5, [r3, #0]
 8005286:	4632      	mov	r2, r6
 8005288:	463b      	mov	r3, r7
 800528a:	4630      	mov	r0, r6
 800528c:	4639      	mov	r1, r7
 800528e:	f7fb fc55 	bl	8000b3c <__aeabi_dcmpun>
 8005292:	b128      	cbz	r0, 80052a0 <_scanf_float+0x40c>
 8005294:	4808      	ldr	r0, [pc, #32]	@ (80052b8 <_scanf_float+0x424>)
 8005296:	f000 f9c9 	bl	800562c <nanf>
 800529a:	ed85 0a00 	vstr	s0, [r5]
 800529e:	e7d1      	b.n	8005244 <_scanf_float+0x3b0>
 80052a0:	4630      	mov	r0, r6
 80052a2:	4639      	mov	r1, r7
 80052a4:	f7fb fca8 	bl	8000bf8 <__aeabi_d2f>
 80052a8:	6028      	str	r0, [r5, #0]
 80052aa:	e7cb      	b.n	8005244 <_scanf_float+0x3b0>
 80052ac:	f04f 0900 	mov.w	r9, #0
 80052b0:	e629      	b.n	8004f06 <_scanf_float+0x72>
 80052b2:	bf00      	nop
 80052b4:	08008e84 	.word	0x08008e84
 80052b8:	0800921d 	.word	0x0800921d

080052bc <std>:
 80052bc:	2300      	movs	r3, #0
 80052be:	b510      	push	{r4, lr}
 80052c0:	4604      	mov	r4, r0
 80052c2:	e9c0 3300 	strd	r3, r3, [r0]
 80052c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052ca:	6083      	str	r3, [r0, #8]
 80052cc:	8181      	strh	r1, [r0, #12]
 80052ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80052d0:	81c2      	strh	r2, [r0, #14]
 80052d2:	6183      	str	r3, [r0, #24]
 80052d4:	4619      	mov	r1, r3
 80052d6:	2208      	movs	r2, #8
 80052d8:	305c      	adds	r0, #92	@ 0x5c
 80052da:	f000 f926 	bl	800552a <memset>
 80052de:	4b0d      	ldr	r3, [pc, #52]	@ (8005314 <std+0x58>)
 80052e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80052e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005318 <std+0x5c>)
 80052e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80052e6:	4b0d      	ldr	r3, [pc, #52]	@ (800531c <std+0x60>)
 80052e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80052ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005320 <std+0x64>)
 80052ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80052ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005324 <std+0x68>)
 80052f0:	6224      	str	r4, [r4, #32]
 80052f2:	429c      	cmp	r4, r3
 80052f4:	d006      	beq.n	8005304 <std+0x48>
 80052f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80052fa:	4294      	cmp	r4, r2
 80052fc:	d002      	beq.n	8005304 <std+0x48>
 80052fe:	33d0      	adds	r3, #208	@ 0xd0
 8005300:	429c      	cmp	r4, r3
 8005302:	d105      	bne.n	8005310 <std+0x54>
 8005304:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800530c:	f000 b98a 	b.w	8005624 <__retarget_lock_init_recursive>
 8005310:	bd10      	pop	{r4, pc}
 8005312:	bf00      	nop
 8005314:	080054a5 	.word	0x080054a5
 8005318:	080054c7 	.word	0x080054c7
 800531c:	080054ff 	.word	0x080054ff
 8005320:	08005523 	.word	0x08005523
 8005324:	200002e4 	.word	0x200002e4

08005328 <stdio_exit_handler>:
 8005328:	4a02      	ldr	r2, [pc, #8]	@ (8005334 <stdio_exit_handler+0xc>)
 800532a:	4903      	ldr	r1, [pc, #12]	@ (8005338 <stdio_exit_handler+0x10>)
 800532c:	4803      	ldr	r0, [pc, #12]	@ (800533c <stdio_exit_handler+0x14>)
 800532e:	f000 b869 	b.w	8005404 <_fwalk_sglue>
 8005332:	bf00      	nop
 8005334:	2000000c 	.word	0x2000000c
 8005338:	08008179 	.word	0x08008179
 800533c:	2000001c 	.word	0x2000001c

08005340 <cleanup_stdio>:
 8005340:	6841      	ldr	r1, [r0, #4]
 8005342:	4b0c      	ldr	r3, [pc, #48]	@ (8005374 <cleanup_stdio+0x34>)
 8005344:	4299      	cmp	r1, r3
 8005346:	b510      	push	{r4, lr}
 8005348:	4604      	mov	r4, r0
 800534a:	d001      	beq.n	8005350 <cleanup_stdio+0x10>
 800534c:	f002 ff14 	bl	8008178 <_fflush_r>
 8005350:	68a1      	ldr	r1, [r4, #8]
 8005352:	4b09      	ldr	r3, [pc, #36]	@ (8005378 <cleanup_stdio+0x38>)
 8005354:	4299      	cmp	r1, r3
 8005356:	d002      	beq.n	800535e <cleanup_stdio+0x1e>
 8005358:	4620      	mov	r0, r4
 800535a:	f002 ff0d 	bl	8008178 <_fflush_r>
 800535e:	68e1      	ldr	r1, [r4, #12]
 8005360:	4b06      	ldr	r3, [pc, #24]	@ (800537c <cleanup_stdio+0x3c>)
 8005362:	4299      	cmp	r1, r3
 8005364:	d004      	beq.n	8005370 <cleanup_stdio+0x30>
 8005366:	4620      	mov	r0, r4
 8005368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800536c:	f002 bf04 	b.w	8008178 <_fflush_r>
 8005370:	bd10      	pop	{r4, pc}
 8005372:	bf00      	nop
 8005374:	200002e4 	.word	0x200002e4
 8005378:	2000034c 	.word	0x2000034c
 800537c:	200003b4 	.word	0x200003b4

08005380 <global_stdio_init.part.0>:
 8005380:	b510      	push	{r4, lr}
 8005382:	4b0b      	ldr	r3, [pc, #44]	@ (80053b0 <global_stdio_init.part.0+0x30>)
 8005384:	4c0b      	ldr	r4, [pc, #44]	@ (80053b4 <global_stdio_init.part.0+0x34>)
 8005386:	4a0c      	ldr	r2, [pc, #48]	@ (80053b8 <global_stdio_init.part.0+0x38>)
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	4620      	mov	r0, r4
 800538c:	2200      	movs	r2, #0
 800538e:	2104      	movs	r1, #4
 8005390:	f7ff ff94 	bl	80052bc <std>
 8005394:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005398:	2201      	movs	r2, #1
 800539a:	2109      	movs	r1, #9
 800539c:	f7ff ff8e 	bl	80052bc <std>
 80053a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053a4:	2202      	movs	r2, #2
 80053a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053aa:	2112      	movs	r1, #18
 80053ac:	f7ff bf86 	b.w	80052bc <std>
 80053b0:	2000041c 	.word	0x2000041c
 80053b4:	200002e4 	.word	0x200002e4
 80053b8:	08005329 	.word	0x08005329

080053bc <__sfp_lock_acquire>:
 80053bc:	4801      	ldr	r0, [pc, #4]	@ (80053c4 <__sfp_lock_acquire+0x8>)
 80053be:	f000 b932 	b.w	8005626 <__retarget_lock_acquire_recursive>
 80053c2:	bf00      	nop
 80053c4:	20000425 	.word	0x20000425

080053c8 <__sfp_lock_release>:
 80053c8:	4801      	ldr	r0, [pc, #4]	@ (80053d0 <__sfp_lock_release+0x8>)
 80053ca:	f000 b92d 	b.w	8005628 <__retarget_lock_release_recursive>
 80053ce:	bf00      	nop
 80053d0:	20000425 	.word	0x20000425

080053d4 <__sinit>:
 80053d4:	b510      	push	{r4, lr}
 80053d6:	4604      	mov	r4, r0
 80053d8:	f7ff fff0 	bl	80053bc <__sfp_lock_acquire>
 80053dc:	6a23      	ldr	r3, [r4, #32]
 80053de:	b11b      	cbz	r3, 80053e8 <__sinit+0x14>
 80053e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053e4:	f7ff bff0 	b.w	80053c8 <__sfp_lock_release>
 80053e8:	4b04      	ldr	r3, [pc, #16]	@ (80053fc <__sinit+0x28>)
 80053ea:	6223      	str	r3, [r4, #32]
 80053ec:	4b04      	ldr	r3, [pc, #16]	@ (8005400 <__sinit+0x2c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1f5      	bne.n	80053e0 <__sinit+0xc>
 80053f4:	f7ff ffc4 	bl	8005380 <global_stdio_init.part.0>
 80053f8:	e7f2      	b.n	80053e0 <__sinit+0xc>
 80053fa:	bf00      	nop
 80053fc:	08005341 	.word	0x08005341
 8005400:	2000041c 	.word	0x2000041c

08005404 <_fwalk_sglue>:
 8005404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005408:	4607      	mov	r7, r0
 800540a:	4688      	mov	r8, r1
 800540c:	4614      	mov	r4, r2
 800540e:	2600      	movs	r6, #0
 8005410:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005414:	f1b9 0901 	subs.w	r9, r9, #1
 8005418:	d505      	bpl.n	8005426 <_fwalk_sglue+0x22>
 800541a:	6824      	ldr	r4, [r4, #0]
 800541c:	2c00      	cmp	r4, #0
 800541e:	d1f7      	bne.n	8005410 <_fwalk_sglue+0xc>
 8005420:	4630      	mov	r0, r6
 8005422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005426:	89ab      	ldrh	r3, [r5, #12]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d907      	bls.n	800543c <_fwalk_sglue+0x38>
 800542c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005430:	3301      	adds	r3, #1
 8005432:	d003      	beq.n	800543c <_fwalk_sglue+0x38>
 8005434:	4629      	mov	r1, r5
 8005436:	4638      	mov	r0, r7
 8005438:	47c0      	blx	r8
 800543a:	4306      	orrs	r6, r0
 800543c:	3568      	adds	r5, #104	@ 0x68
 800543e:	e7e9      	b.n	8005414 <_fwalk_sglue+0x10>

08005440 <iprintf>:
 8005440:	b40f      	push	{r0, r1, r2, r3}
 8005442:	b507      	push	{r0, r1, r2, lr}
 8005444:	4906      	ldr	r1, [pc, #24]	@ (8005460 <iprintf+0x20>)
 8005446:	ab04      	add	r3, sp, #16
 8005448:	6808      	ldr	r0, [r1, #0]
 800544a:	f853 2b04 	ldr.w	r2, [r3], #4
 800544e:	6881      	ldr	r1, [r0, #8]
 8005450:	9301      	str	r3, [sp, #4]
 8005452:	f002 fcf5 	bl	8007e40 <_vfiprintf_r>
 8005456:	b003      	add	sp, #12
 8005458:	f85d eb04 	ldr.w	lr, [sp], #4
 800545c:	b004      	add	sp, #16
 800545e:	4770      	bx	lr
 8005460:	20000018 	.word	0x20000018

08005464 <siprintf>:
 8005464:	b40e      	push	{r1, r2, r3}
 8005466:	b500      	push	{lr}
 8005468:	b09c      	sub	sp, #112	@ 0x70
 800546a:	ab1d      	add	r3, sp, #116	@ 0x74
 800546c:	9002      	str	r0, [sp, #8]
 800546e:	9006      	str	r0, [sp, #24]
 8005470:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005474:	4809      	ldr	r0, [pc, #36]	@ (800549c <siprintf+0x38>)
 8005476:	9107      	str	r1, [sp, #28]
 8005478:	9104      	str	r1, [sp, #16]
 800547a:	4909      	ldr	r1, [pc, #36]	@ (80054a0 <siprintf+0x3c>)
 800547c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005480:	9105      	str	r1, [sp, #20]
 8005482:	6800      	ldr	r0, [r0, #0]
 8005484:	9301      	str	r3, [sp, #4]
 8005486:	a902      	add	r1, sp, #8
 8005488:	f002 fbb4 	bl	8007bf4 <_svfiprintf_r>
 800548c:	9b02      	ldr	r3, [sp, #8]
 800548e:	2200      	movs	r2, #0
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	b01c      	add	sp, #112	@ 0x70
 8005494:	f85d eb04 	ldr.w	lr, [sp], #4
 8005498:	b003      	add	sp, #12
 800549a:	4770      	bx	lr
 800549c:	20000018 	.word	0x20000018
 80054a0:	ffff0208 	.word	0xffff0208

080054a4 <__sread>:
 80054a4:	b510      	push	{r4, lr}
 80054a6:	460c      	mov	r4, r1
 80054a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ac:	f000 f86c 	bl	8005588 <_read_r>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	bfab      	itete	ge
 80054b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80054b6:	89a3      	ldrhlt	r3, [r4, #12]
 80054b8:	181b      	addge	r3, r3, r0
 80054ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80054be:	bfac      	ite	ge
 80054c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80054c2:	81a3      	strhlt	r3, [r4, #12]
 80054c4:	bd10      	pop	{r4, pc}

080054c6 <__swrite>:
 80054c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ca:	461f      	mov	r7, r3
 80054cc:	898b      	ldrh	r3, [r1, #12]
 80054ce:	05db      	lsls	r3, r3, #23
 80054d0:	4605      	mov	r5, r0
 80054d2:	460c      	mov	r4, r1
 80054d4:	4616      	mov	r6, r2
 80054d6:	d505      	bpl.n	80054e4 <__swrite+0x1e>
 80054d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054dc:	2302      	movs	r3, #2
 80054de:	2200      	movs	r2, #0
 80054e0:	f000 f840 	bl	8005564 <_lseek_r>
 80054e4:	89a3      	ldrh	r3, [r4, #12]
 80054e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054ee:	81a3      	strh	r3, [r4, #12]
 80054f0:	4632      	mov	r2, r6
 80054f2:	463b      	mov	r3, r7
 80054f4:	4628      	mov	r0, r5
 80054f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054fa:	f000 b857 	b.w	80055ac <_write_r>

080054fe <__sseek>:
 80054fe:	b510      	push	{r4, lr}
 8005500:	460c      	mov	r4, r1
 8005502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005506:	f000 f82d 	bl	8005564 <_lseek_r>
 800550a:	1c43      	adds	r3, r0, #1
 800550c:	89a3      	ldrh	r3, [r4, #12]
 800550e:	bf15      	itete	ne
 8005510:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005512:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005516:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800551a:	81a3      	strheq	r3, [r4, #12]
 800551c:	bf18      	it	ne
 800551e:	81a3      	strhne	r3, [r4, #12]
 8005520:	bd10      	pop	{r4, pc}

08005522 <__sclose>:
 8005522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005526:	f000 b80d 	b.w	8005544 <_close_r>

0800552a <memset>:
 800552a:	4402      	add	r2, r0
 800552c:	4603      	mov	r3, r0
 800552e:	4293      	cmp	r3, r2
 8005530:	d100      	bne.n	8005534 <memset+0xa>
 8005532:	4770      	bx	lr
 8005534:	f803 1b01 	strb.w	r1, [r3], #1
 8005538:	e7f9      	b.n	800552e <memset+0x4>
	...

0800553c <_localeconv_r>:
 800553c:	4800      	ldr	r0, [pc, #0]	@ (8005540 <_localeconv_r+0x4>)
 800553e:	4770      	bx	lr
 8005540:	20000158 	.word	0x20000158

08005544 <_close_r>:
 8005544:	b538      	push	{r3, r4, r5, lr}
 8005546:	4d06      	ldr	r5, [pc, #24]	@ (8005560 <_close_r+0x1c>)
 8005548:	2300      	movs	r3, #0
 800554a:	4604      	mov	r4, r0
 800554c:	4608      	mov	r0, r1
 800554e:	602b      	str	r3, [r5, #0]
 8005550:	f7fc fb54 	bl	8001bfc <_close>
 8005554:	1c43      	adds	r3, r0, #1
 8005556:	d102      	bne.n	800555e <_close_r+0x1a>
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	b103      	cbz	r3, 800555e <_close_r+0x1a>
 800555c:	6023      	str	r3, [r4, #0]
 800555e:	bd38      	pop	{r3, r4, r5, pc}
 8005560:	20000420 	.word	0x20000420

08005564 <_lseek_r>:
 8005564:	b538      	push	{r3, r4, r5, lr}
 8005566:	4d07      	ldr	r5, [pc, #28]	@ (8005584 <_lseek_r+0x20>)
 8005568:	4604      	mov	r4, r0
 800556a:	4608      	mov	r0, r1
 800556c:	4611      	mov	r1, r2
 800556e:	2200      	movs	r2, #0
 8005570:	602a      	str	r2, [r5, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	f7fc fb69 	bl	8001c4a <_lseek>
 8005578:	1c43      	adds	r3, r0, #1
 800557a:	d102      	bne.n	8005582 <_lseek_r+0x1e>
 800557c:	682b      	ldr	r3, [r5, #0]
 800557e:	b103      	cbz	r3, 8005582 <_lseek_r+0x1e>
 8005580:	6023      	str	r3, [r4, #0]
 8005582:	bd38      	pop	{r3, r4, r5, pc}
 8005584:	20000420 	.word	0x20000420

08005588 <_read_r>:
 8005588:	b538      	push	{r3, r4, r5, lr}
 800558a:	4d07      	ldr	r5, [pc, #28]	@ (80055a8 <_read_r+0x20>)
 800558c:	4604      	mov	r4, r0
 800558e:	4608      	mov	r0, r1
 8005590:	4611      	mov	r1, r2
 8005592:	2200      	movs	r2, #0
 8005594:	602a      	str	r2, [r5, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	f7fc faf7 	bl	8001b8a <_read>
 800559c:	1c43      	adds	r3, r0, #1
 800559e:	d102      	bne.n	80055a6 <_read_r+0x1e>
 80055a0:	682b      	ldr	r3, [r5, #0]
 80055a2:	b103      	cbz	r3, 80055a6 <_read_r+0x1e>
 80055a4:	6023      	str	r3, [r4, #0]
 80055a6:	bd38      	pop	{r3, r4, r5, pc}
 80055a8:	20000420 	.word	0x20000420

080055ac <_write_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	4d07      	ldr	r5, [pc, #28]	@ (80055cc <_write_r+0x20>)
 80055b0:	4604      	mov	r4, r0
 80055b2:	4608      	mov	r0, r1
 80055b4:	4611      	mov	r1, r2
 80055b6:	2200      	movs	r2, #0
 80055b8:	602a      	str	r2, [r5, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	f7fc fb02 	bl	8001bc4 <_write>
 80055c0:	1c43      	adds	r3, r0, #1
 80055c2:	d102      	bne.n	80055ca <_write_r+0x1e>
 80055c4:	682b      	ldr	r3, [r5, #0]
 80055c6:	b103      	cbz	r3, 80055ca <_write_r+0x1e>
 80055c8:	6023      	str	r3, [r4, #0]
 80055ca:	bd38      	pop	{r3, r4, r5, pc}
 80055cc:	20000420 	.word	0x20000420

080055d0 <__errno>:
 80055d0:	4b01      	ldr	r3, [pc, #4]	@ (80055d8 <__errno+0x8>)
 80055d2:	6818      	ldr	r0, [r3, #0]
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	20000018 	.word	0x20000018

080055dc <__libc_init_array>:
 80055dc:	b570      	push	{r4, r5, r6, lr}
 80055de:	4d0d      	ldr	r5, [pc, #52]	@ (8005614 <__libc_init_array+0x38>)
 80055e0:	4c0d      	ldr	r4, [pc, #52]	@ (8005618 <__libc_init_array+0x3c>)
 80055e2:	1b64      	subs	r4, r4, r5
 80055e4:	10a4      	asrs	r4, r4, #2
 80055e6:	2600      	movs	r6, #0
 80055e8:	42a6      	cmp	r6, r4
 80055ea:	d109      	bne.n	8005600 <__libc_init_array+0x24>
 80055ec:	4d0b      	ldr	r5, [pc, #44]	@ (800561c <__libc_init_array+0x40>)
 80055ee:	4c0c      	ldr	r4, [pc, #48]	@ (8005620 <__libc_init_array+0x44>)
 80055f0:	f003 fb74 	bl	8008cdc <_init>
 80055f4:	1b64      	subs	r4, r4, r5
 80055f6:	10a4      	asrs	r4, r4, #2
 80055f8:	2600      	movs	r6, #0
 80055fa:	42a6      	cmp	r6, r4
 80055fc:	d105      	bne.n	800560a <__libc_init_array+0x2e>
 80055fe:	bd70      	pop	{r4, r5, r6, pc}
 8005600:	f855 3b04 	ldr.w	r3, [r5], #4
 8005604:	4798      	blx	r3
 8005606:	3601      	adds	r6, #1
 8005608:	e7ee      	b.n	80055e8 <__libc_init_array+0xc>
 800560a:	f855 3b04 	ldr.w	r3, [r5], #4
 800560e:	4798      	blx	r3
 8005610:	3601      	adds	r6, #1
 8005612:	e7f2      	b.n	80055fa <__libc_init_array+0x1e>
 8005614:	08009288 	.word	0x08009288
 8005618:	08009288 	.word	0x08009288
 800561c:	08009288 	.word	0x08009288
 8005620:	0800928c 	.word	0x0800928c

08005624 <__retarget_lock_init_recursive>:
 8005624:	4770      	bx	lr

08005626 <__retarget_lock_acquire_recursive>:
 8005626:	4770      	bx	lr

08005628 <__retarget_lock_release_recursive>:
 8005628:	4770      	bx	lr
	...

0800562c <nanf>:
 800562c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005634 <nanf+0x8>
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	7fc00000 	.word	0x7fc00000

08005638 <quorem>:
 8005638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563c:	6903      	ldr	r3, [r0, #16]
 800563e:	690c      	ldr	r4, [r1, #16]
 8005640:	42a3      	cmp	r3, r4
 8005642:	4607      	mov	r7, r0
 8005644:	db7e      	blt.n	8005744 <quorem+0x10c>
 8005646:	3c01      	subs	r4, #1
 8005648:	f101 0814 	add.w	r8, r1, #20
 800564c:	00a3      	lsls	r3, r4, #2
 800564e:	f100 0514 	add.w	r5, r0, #20
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005658:	9301      	str	r3, [sp, #4]
 800565a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800565e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005662:	3301      	adds	r3, #1
 8005664:	429a      	cmp	r2, r3
 8005666:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800566a:	fbb2 f6f3 	udiv	r6, r2, r3
 800566e:	d32e      	bcc.n	80056ce <quorem+0x96>
 8005670:	f04f 0a00 	mov.w	sl, #0
 8005674:	46c4      	mov	ip, r8
 8005676:	46ae      	mov	lr, r5
 8005678:	46d3      	mov	fp, sl
 800567a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800567e:	b298      	uxth	r0, r3
 8005680:	fb06 a000 	mla	r0, r6, r0, sl
 8005684:	0c02      	lsrs	r2, r0, #16
 8005686:	0c1b      	lsrs	r3, r3, #16
 8005688:	fb06 2303 	mla	r3, r6, r3, r2
 800568c:	f8de 2000 	ldr.w	r2, [lr]
 8005690:	b280      	uxth	r0, r0
 8005692:	b292      	uxth	r2, r2
 8005694:	1a12      	subs	r2, r2, r0
 8005696:	445a      	add	r2, fp
 8005698:	f8de 0000 	ldr.w	r0, [lr]
 800569c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80056a6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80056aa:	b292      	uxth	r2, r2
 80056ac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80056b0:	45e1      	cmp	r9, ip
 80056b2:	f84e 2b04 	str.w	r2, [lr], #4
 80056b6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80056ba:	d2de      	bcs.n	800567a <quorem+0x42>
 80056bc:	9b00      	ldr	r3, [sp, #0]
 80056be:	58eb      	ldr	r3, [r5, r3]
 80056c0:	b92b      	cbnz	r3, 80056ce <quorem+0x96>
 80056c2:	9b01      	ldr	r3, [sp, #4]
 80056c4:	3b04      	subs	r3, #4
 80056c6:	429d      	cmp	r5, r3
 80056c8:	461a      	mov	r2, r3
 80056ca:	d32f      	bcc.n	800572c <quorem+0xf4>
 80056cc:	613c      	str	r4, [r7, #16]
 80056ce:	4638      	mov	r0, r7
 80056d0:	f001 f9c2 	bl	8006a58 <__mcmp>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	db25      	blt.n	8005724 <quorem+0xec>
 80056d8:	4629      	mov	r1, r5
 80056da:	2000      	movs	r0, #0
 80056dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80056e0:	f8d1 c000 	ldr.w	ip, [r1]
 80056e4:	fa1f fe82 	uxth.w	lr, r2
 80056e8:	fa1f f38c 	uxth.w	r3, ip
 80056ec:	eba3 030e 	sub.w	r3, r3, lr
 80056f0:	4403      	add	r3, r0
 80056f2:	0c12      	lsrs	r2, r2, #16
 80056f4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80056f8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005702:	45c1      	cmp	r9, r8
 8005704:	f841 3b04 	str.w	r3, [r1], #4
 8005708:	ea4f 4022 	mov.w	r0, r2, asr #16
 800570c:	d2e6      	bcs.n	80056dc <quorem+0xa4>
 800570e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005712:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005716:	b922      	cbnz	r2, 8005722 <quorem+0xea>
 8005718:	3b04      	subs	r3, #4
 800571a:	429d      	cmp	r5, r3
 800571c:	461a      	mov	r2, r3
 800571e:	d30b      	bcc.n	8005738 <quorem+0x100>
 8005720:	613c      	str	r4, [r7, #16]
 8005722:	3601      	adds	r6, #1
 8005724:	4630      	mov	r0, r6
 8005726:	b003      	add	sp, #12
 8005728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800572c:	6812      	ldr	r2, [r2, #0]
 800572e:	3b04      	subs	r3, #4
 8005730:	2a00      	cmp	r2, #0
 8005732:	d1cb      	bne.n	80056cc <quorem+0x94>
 8005734:	3c01      	subs	r4, #1
 8005736:	e7c6      	b.n	80056c6 <quorem+0x8e>
 8005738:	6812      	ldr	r2, [r2, #0]
 800573a:	3b04      	subs	r3, #4
 800573c:	2a00      	cmp	r2, #0
 800573e:	d1ef      	bne.n	8005720 <quorem+0xe8>
 8005740:	3c01      	subs	r4, #1
 8005742:	e7ea      	b.n	800571a <quorem+0xe2>
 8005744:	2000      	movs	r0, #0
 8005746:	e7ee      	b.n	8005726 <quorem+0xee>

08005748 <_dtoa_r>:
 8005748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800574c:	69c7      	ldr	r7, [r0, #28]
 800574e:	b099      	sub	sp, #100	@ 0x64
 8005750:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005754:	ec55 4b10 	vmov	r4, r5, d0
 8005758:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800575a:	9109      	str	r1, [sp, #36]	@ 0x24
 800575c:	4683      	mov	fp, r0
 800575e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005760:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005762:	b97f      	cbnz	r7, 8005784 <_dtoa_r+0x3c>
 8005764:	2010      	movs	r0, #16
 8005766:	f000 fdfd 	bl	8006364 <malloc>
 800576a:	4602      	mov	r2, r0
 800576c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005770:	b920      	cbnz	r0, 800577c <_dtoa_r+0x34>
 8005772:	4ba7      	ldr	r3, [pc, #668]	@ (8005a10 <_dtoa_r+0x2c8>)
 8005774:	21ef      	movs	r1, #239	@ 0xef
 8005776:	48a7      	ldr	r0, [pc, #668]	@ (8005a14 <_dtoa_r+0x2cc>)
 8005778:	f002 fe0e 	bl	8008398 <__assert_func>
 800577c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005780:	6007      	str	r7, [r0, #0]
 8005782:	60c7      	str	r7, [r0, #12]
 8005784:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005788:	6819      	ldr	r1, [r3, #0]
 800578a:	b159      	cbz	r1, 80057a4 <_dtoa_r+0x5c>
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	604a      	str	r2, [r1, #4]
 8005790:	2301      	movs	r3, #1
 8005792:	4093      	lsls	r3, r2
 8005794:	608b      	str	r3, [r1, #8]
 8005796:	4658      	mov	r0, fp
 8005798:	f000 feda 	bl	8006550 <_Bfree>
 800579c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	1e2b      	subs	r3, r5, #0
 80057a6:	bfb9      	ittee	lt
 80057a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80057ac:	9303      	strlt	r3, [sp, #12]
 80057ae:	2300      	movge	r3, #0
 80057b0:	6033      	strge	r3, [r6, #0]
 80057b2:	9f03      	ldr	r7, [sp, #12]
 80057b4:	4b98      	ldr	r3, [pc, #608]	@ (8005a18 <_dtoa_r+0x2d0>)
 80057b6:	bfbc      	itt	lt
 80057b8:	2201      	movlt	r2, #1
 80057ba:	6032      	strlt	r2, [r6, #0]
 80057bc:	43bb      	bics	r3, r7
 80057be:	d112      	bne.n	80057e6 <_dtoa_r+0x9e>
 80057c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80057c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80057cc:	4323      	orrs	r3, r4
 80057ce:	f000 854d 	beq.w	800626c <_dtoa_r+0xb24>
 80057d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80057d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005a2c <_dtoa_r+0x2e4>
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 854f 	beq.w	800627c <_dtoa_r+0xb34>
 80057de:	f10a 0303 	add.w	r3, sl, #3
 80057e2:	f000 bd49 	b.w	8006278 <_dtoa_r+0xb30>
 80057e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80057ea:	2200      	movs	r2, #0
 80057ec:	ec51 0b17 	vmov	r0, r1, d7
 80057f0:	2300      	movs	r3, #0
 80057f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80057f6:	f7fb f96f 	bl	8000ad8 <__aeabi_dcmpeq>
 80057fa:	4680      	mov	r8, r0
 80057fc:	b158      	cbz	r0, 8005816 <_dtoa_r+0xce>
 80057fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005800:	2301      	movs	r3, #1
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005806:	b113      	cbz	r3, 800580e <_dtoa_r+0xc6>
 8005808:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800580a:	4b84      	ldr	r3, [pc, #528]	@ (8005a1c <_dtoa_r+0x2d4>)
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005a30 <_dtoa_r+0x2e8>
 8005812:	f000 bd33 	b.w	800627c <_dtoa_r+0xb34>
 8005816:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800581a:	aa16      	add	r2, sp, #88	@ 0x58
 800581c:	a917      	add	r1, sp, #92	@ 0x5c
 800581e:	4658      	mov	r0, fp
 8005820:	f001 fa3a 	bl	8006c98 <__d2b>
 8005824:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005828:	4681      	mov	r9, r0
 800582a:	2e00      	cmp	r6, #0
 800582c:	d077      	beq.n	800591e <_dtoa_r+0x1d6>
 800582e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005830:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005838:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800583c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005840:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005844:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005848:	4619      	mov	r1, r3
 800584a:	2200      	movs	r2, #0
 800584c:	4b74      	ldr	r3, [pc, #464]	@ (8005a20 <_dtoa_r+0x2d8>)
 800584e:	f7fa fd23 	bl	8000298 <__aeabi_dsub>
 8005852:	a369      	add	r3, pc, #420	@ (adr r3, 80059f8 <_dtoa_r+0x2b0>)
 8005854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005858:	f7fa fed6 	bl	8000608 <__aeabi_dmul>
 800585c:	a368      	add	r3, pc, #416	@ (adr r3, 8005a00 <_dtoa_r+0x2b8>)
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	f7fa fd1b 	bl	800029c <__adddf3>
 8005866:	4604      	mov	r4, r0
 8005868:	4630      	mov	r0, r6
 800586a:	460d      	mov	r5, r1
 800586c:	f7fa fe62 	bl	8000534 <__aeabi_i2d>
 8005870:	a365      	add	r3, pc, #404	@ (adr r3, 8005a08 <_dtoa_r+0x2c0>)
 8005872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005876:	f7fa fec7 	bl	8000608 <__aeabi_dmul>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	4620      	mov	r0, r4
 8005880:	4629      	mov	r1, r5
 8005882:	f7fa fd0b 	bl	800029c <__adddf3>
 8005886:	4604      	mov	r4, r0
 8005888:	460d      	mov	r5, r1
 800588a:	f7fb f96d 	bl	8000b68 <__aeabi_d2iz>
 800588e:	2200      	movs	r2, #0
 8005890:	4607      	mov	r7, r0
 8005892:	2300      	movs	r3, #0
 8005894:	4620      	mov	r0, r4
 8005896:	4629      	mov	r1, r5
 8005898:	f7fb f928 	bl	8000aec <__aeabi_dcmplt>
 800589c:	b140      	cbz	r0, 80058b0 <_dtoa_r+0x168>
 800589e:	4638      	mov	r0, r7
 80058a0:	f7fa fe48 	bl	8000534 <__aeabi_i2d>
 80058a4:	4622      	mov	r2, r4
 80058a6:	462b      	mov	r3, r5
 80058a8:	f7fb f916 	bl	8000ad8 <__aeabi_dcmpeq>
 80058ac:	b900      	cbnz	r0, 80058b0 <_dtoa_r+0x168>
 80058ae:	3f01      	subs	r7, #1
 80058b0:	2f16      	cmp	r7, #22
 80058b2:	d851      	bhi.n	8005958 <_dtoa_r+0x210>
 80058b4:	4b5b      	ldr	r3, [pc, #364]	@ (8005a24 <_dtoa_r+0x2dc>)
 80058b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80058ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058c2:	f7fb f913 	bl	8000aec <__aeabi_dcmplt>
 80058c6:	2800      	cmp	r0, #0
 80058c8:	d048      	beq.n	800595c <_dtoa_r+0x214>
 80058ca:	3f01      	subs	r7, #1
 80058cc:	2300      	movs	r3, #0
 80058ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80058d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80058d2:	1b9b      	subs	r3, r3, r6
 80058d4:	1e5a      	subs	r2, r3, #1
 80058d6:	bf44      	itt	mi
 80058d8:	f1c3 0801 	rsbmi	r8, r3, #1
 80058dc:	2300      	movmi	r3, #0
 80058de:	9208      	str	r2, [sp, #32]
 80058e0:	bf54      	ite	pl
 80058e2:	f04f 0800 	movpl.w	r8, #0
 80058e6:	9308      	strmi	r3, [sp, #32]
 80058e8:	2f00      	cmp	r7, #0
 80058ea:	db39      	blt.n	8005960 <_dtoa_r+0x218>
 80058ec:	9b08      	ldr	r3, [sp, #32]
 80058ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 80058f0:	443b      	add	r3, r7
 80058f2:	9308      	str	r3, [sp, #32]
 80058f4:	2300      	movs	r3, #0
 80058f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80058f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058fa:	2b09      	cmp	r3, #9
 80058fc:	d864      	bhi.n	80059c8 <_dtoa_r+0x280>
 80058fe:	2b05      	cmp	r3, #5
 8005900:	bfc4      	itt	gt
 8005902:	3b04      	subgt	r3, #4
 8005904:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005908:	f1a3 0302 	sub.w	r3, r3, #2
 800590c:	bfcc      	ite	gt
 800590e:	2400      	movgt	r4, #0
 8005910:	2401      	movle	r4, #1
 8005912:	2b03      	cmp	r3, #3
 8005914:	d863      	bhi.n	80059de <_dtoa_r+0x296>
 8005916:	e8df f003 	tbb	[pc, r3]
 800591a:	372a      	.short	0x372a
 800591c:	5535      	.short	0x5535
 800591e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005922:	441e      	add	r6, r3
 8005924:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005928:	2b20      	cmp	r3, #32
 800592a:	bfc1      	itttt	gt
 800592c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005930:	409f      	lslgt	r7, r3
 8005932:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005936:	fa24 f303 	lsrgt.w	r3, r4, r3
 800593a:	bfd6      	itet	le
 800593c:	f1c3 0320 	rsble	r3, r3, #32
 8005940:	ea47 0003 	orrgt.w	r0, r7, r3
 8005944:	fa04 f003 	lslle.w	r0, r4, r3
 8005948:	f7fa fde4 	bl	8000514 <__aeabi_ui2d>
 800594c:	2201      	movs	r2, #1
 800594e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005952:	3e01      	subs	r6, #1
 8005954:	9214      	str	r2, [sp, #80]	@ 0x50
 8005956:	e777      	b.n	8005848 <_dtoa_r+0x100>
 8005958:	2301      	movs	r3, #1
 800595a:	e7b8      	b.n	80058ce <_dtoa_r+0x186>
 800595c:	9012      	str	r0, [sp, #72]	@ 0x48
 800595e:	e7b7      	b.n	80058d0 <_dtoa_r+0x188>
 8005960:	427b      	negs	r3, r7
 8005962:	930a      	str	r3, [sp, #40]	@ 0x28
 8005964:	2300      	movs	r3, #0
 8005966:	eba8 0807 	sub.w	r8, r8, r7
 800596a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800596c:	e7c4      	b.n	80058f8 <_dtoa_r+0x1b0>
 800596e:	2300      	movs	r3, #0
 8005970:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005974:	2b00      	cmp	r3, #0
 8005976:	dc35      	bgt.n	80059e4 <_dtoa_r+0x29c>
 8005978:	2301      	movs	r3, #1
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	9307      	str	r3, [sp, #28]
 800597e:	461a      	mov	r2, r3
 8005980:	920e      	str	r2, [sp, #56]	@ 0x38
 8005982:	e00b      	b.n	800599c <_dtoa_r+0x254>
 8005984:	2301      	movs	r3, #1
 8005986:	e7f3      	b.n	8005970 <_dtoa_r+0x228>
 8005988:	2300      	movs	r3, #0
 800598a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800598c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800598e:	18fb      	adds	r3, r7, r3
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	3301      	adds	r3, #1
 8005994:	2b01      	cmp	r3, #1
 8005996:	9307      	str	r3, [sp, #28]
 8005998:	bfb8      	it	lt
 800599a:	2301      	movlt	r3, #1
 800599c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80059a0:	2100      	movs	r1, #0
 80059a2:	2204      	movs	r2, #4
 80059a4:	f102 0514 	add.w	r5, r2, #20
 80059a8:	429d      	cmp	r5, r3
 80059aa:	d91f      	bls.n	80059ec <_dtoa_r+0x2a4>
 80059ac:	6041      	str	r1, [r0, #4]
 80059ae:	4658      	mov	r0, fp
 80059b0:	f000 fd8e 	bl	80064d0 <_Balloc>
 80059b4:	4682      	mov	sl, r0
 80059b6:	2800      	cmp	r0, #0
 80059b8:	d13c      	bne.n	8005a34 <_dtoa_r+0x2ec>
 80059ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005a28 <_dtoa_r+0x2e0>)
 80059bc:	4602      	mov	r2, r0
 80059be:	f240 11af 	movw	r1, #431	@ 0x1af
 80059c2:	e6d8      	b.n	8005776 <_dtoa_r+0x2e>
 80059c4:	2301      	movs	r3, #1
 80059c6:	e7e0      	b.n	800598a <_dtoa_r+0x242>
 80059c8:	2401      	movs	r4, #1
 80059ca:	2300      	movs	r3, #0
 80059cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80059ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80059d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	9307      	str	r3, [sp, #28]
 80059d8:	2200      	movs	r2, #0
 80059da:	2312      	movs	r3, #18
 80059dc:	e7d0      	b.n	8005980 <_dtoa_r+0x238>
 80059de:	2301      	movs	r3, #1
 80059e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059e2:	e7f5      	b.n	80059d0 <_dtoa_r+0x288>
 80059e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	9307      	str	r3, [sp, #28]
 80059ea:	e7d7      	b.n	800599c <_dtoa_r+0x254>
 80059ec:	3101      	adds	r1, #1
 80059ee:	0052      	lsls	r2, r2, #1
 80059f0:	e7d8      	b.n	80059a4 <_dtoa_r+0x25c>
 80059f2:	bf00      	nop
 80059f4:	f3af 8000 	nop.w
 80059f8:	636f4361 	.word	0x636f4361
 80059fc:	3fd287a7 	.word	0x3fd287a7
 8005a00:	8b60c8b3 	.word	0x8b60c8b3
 8005a04:	3fc68a28 	.word	0x3fc68a28
 8005a08:	509f79fb 	.word	0x509f79fb
 8005a0c:	3fd34413 	.word	0x3fd34413
 8005a10:	08008e96 	.word	0x08008e96
 8005a14:	08008ead 	.word	0x08008ead
 8005a18:	7ff00000 	.word	0x7ff00000
 8005a1c:	08008e61 	.word	0x08008e61
 8005a20:	3ff80000 	.word	0x3ff80000
 8005a24:	08008fa8 	.word	0x08008fa8
 8005a28:	08008f05 	.word	0x08008f05
 8005a2c:	08008e92 	.word	0x08008e92
 8005a30:	08008e60 	.word	0x08008e60
 8005a34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005a38:	6018      	str	r0, [r3, #0]
 8005a3a:	9b07      	ldr	r3, [sp, #28]
 8005a3c:	2b0e      	cmp	r3, #14
 8005a3e:	f200 80a4 	bhi.w	8005b8a <_dtoa_r+0x442>
 8005a42:	2c00      	cmp	r4, #0
 8005a44:	f000 80a1 	beq.w	8005b8a <_dtoa_r+0x442>
 8005a48:	2f00      	cmp	r7, #0
 8005a4a:	dd33      	ble.n	8005ab4 <_dtoa_r+0x36c>
 8005a4c:	4bad      	ldr	r3, [pc, #692]	@ (8005d04 <_dtoa_r+0x5bc>)
 8005a4e:	f007 020f 	and.w	r2, r7, #15
 8005a52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a56:	ed93 7b00 	vldr	d7, [r3]
 8005a5a:	05f8      	lsls	r0, r7, #23
 8005a5c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005a60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005a64:	d516      	bpl.n	8005a94 <_dtoa_r+0x34c>
 8005a66:	4ba8      	ldr	r3, [pc, #672]	@ (8005d08 <_dtoa_r+0x5c0>)
 8005a68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a70:	f7fa fef4 	bl	800085c <__aeabi_ddiv>
 8005a74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a78:	f004 040f 	and.w	r4, r4, #15
 8005a7c:	2603      	movs	r6, #3
 8005a7e:	4da2      	ldr	r5, [pc, #648]	@ (8005d08 <_dtoa_r+0x5c0>)
 8005a80:	b954      	cbnz	r4, 8005a98 <_dtoa_r+0x350>
 8005a82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a8a:	f7fa fee7 	bl	800085c <__aeabi_ddiv>
 8005a8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a92:	e028      	b.n	8005ae6 <_dtoa_r+0x39e>
 8005a94:	2602      	movs	r6, #2
 8005a96:	e7f2      	b.n	8005a7e <_dtoa_r+0x336>
 8005a98:	07e1      	lsls	r1, r4, #31
 8005a9a:	d508      	bpl.n	8005aae <_dtoa_r+0x366>
 8005a9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aa0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005aa4:	f7fa fdb0 	bl	8000608 <__aeabi_dmul>
 8005aa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005aac:	3601      	adds	r6, #1
 8005aae:	1064      	asrs	r4, r4, #1
 8005ab0:	3508      	adds	r5, #8
 8005ab2:	e7e5      	b.n	8005a80 <_dtoa_r+0x338>
 8005ab4:	f000 80d2 	beq.w	8005c5c <_dtoa_r+0x514>
 8005ab8:	427c      	negs	r4, r7
 8005aba:	4b92      	ldr	r3, [pc, #584]	@ (8005d04 <_dtoa_r+0x5bc>)
 8005abc:	4d92      	ldr	r5, [pc, #584]	@ (8005d08 <_dtoa_r+0x5c0>)
 8005abe:	f004 020f 	and.w	r2, r4, #15
 8005ac2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ace:	f7fa fd9b 	bl	8000608 <__aeabi_dmul>
 8005ad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ad6:	1124      	asrs	r4, r4, #4
 8005ad8:	2300      	movs	r3, #0
 8005ada:	2602      	movs	r6, #2
 8005adc:	2c00      	cmp	r4, #0
 8005ade:	f040 80b2 	bne.w	8005c46 <_dtoa_r+0x4fe>
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1d3      	bne.n	8005a8e <_dtoa_r+0x346>
 8005ae6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005ae8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 80b7 	beq.w	8005c60 <_dtoa_r+0x518>
 8005af2:	4b86      	ldr	r3, [pc, #536]	@ (8005d0c <_dtoa_r+0x5c4>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	4620      	mov	r0, r4
 8005af8:	4629      	mov	r1, r5
 8005afa:	f7fa fff7 	bl	8000aec <__aeabi_dcmplt>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	f000 80ae 	beq.w	8005c60 <_dtoa_r+0x518>
 8005b04:	9b07      	ldr	r3, [sp, #28]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 80aa 	beq.w	8005c60 <_dtoa_r+0x518>
 8005b0c:	9b00      	ldr	r3, [sp, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	dd37      	ble.n	8005b82 <_dtoa_r+0x43a>
 8005b12:	1e7b      	subs	r3, r7, #1
 8005b14:	9304      	str	r3, [sp, #16]
 8005b16:	4620      	mov	r0, r4
 8005b18:	4b7d      	ldr	r3, [pc, #500]	@ (8005d10 <_dtoa_r+0x5c8>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	4629      	mov	r1, r5
 8005b1e:	f7fa fd73 	bl	8000608 <__aeabi_dmul>
 8005b22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b26:	9c00      	ldr	r4, [sp, #0]
 8005b28:	3601      	adds	r6, #1
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	f7fa fd02 	bl	8000534 <__aeabi_i2d>
 8005b30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b34:	f7fa fd68 	bl	8000608 <__aeabi_dmul>
 8005b38:	4b76      	ldr	r3, [pc, #472]	@ (8005d14 <_dtoa_r+0x5cc>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f7fa fbae 	bl	800029c <__adddf3>
 8005b40:	4605      	mov	r5, r0
 8005b42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005b46:	2c00      	cmp	r4, #0
 8005b48:	f040 808d 	bne.w	8005c66 <_dtoa_r+0x51e>
 8005b4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b50:	4b71      	ldr	r3, [pc, #452]	@ (8005d18 <_dtoa_r+0x5d0>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	f7fa fba0 	bl	8000298 <__aeabi_dsub>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b60:	462a      	mov	r2, r5
 8005b62:	4633      	mov	r3, r6
 8005b64:	f7fa ffe0 	bl	8000b28 <__aeabi_dcmpgt>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	f040 828b 	bne.w	8006084 <_dtoa_r+0x93c>
 8005b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b72:	462a      	mov	r2, r5
 8005b74:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005b78:	f7fa ffb8 	bl	8000aec <__aeabi_dcmplt>
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	f040 8128 	bne.w	8005dd2 <_dtoa_r+0x68a>
 8005b82:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005b86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005b8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f2c0 815a 	blt.w	8005e46 <_dtoa_r+0x6fe>
 8005b92:	2f0e      	cmp	r7, #14
 8005b94:	f300 8157 	bgt.w	8005e46 <_dtoa_r+0x6fe>
 8005b98:	4b5a      	ldr	r3, [pc, #360]	@ (8005d04 <_dtoa_r+0x5bc>)
 8005b9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b9e:	ed93 7b00 	vldr	d7, [r3]
 8005ba2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	ed8d 7b00 	vstr	d7, [sp]
 8005baa:	da03      	bge.n	8005bb4 <_dtoa_r+0x46c>
 8005bac:	9b07      	ldr	r3, [sp, #28]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f340 8101 	ble.w	8005db6 <_dtoa_r+0x66e>
 8005bb4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005bb8:	4656      	mov	r6, sl
 8005bba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	f7fa fe4b 	bl	800085c <__aeabi_ddiv>
 8005bc6:	f7fa ffcf 	bl	8000b68 <__aeabi_d2iz>
 8005bca:	4680      	mov	r8, r0
 8005bcc:	f7fa fcb2 	bl	8000534 <__aeabi_i2d>
 8005bd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bd4:	f7fa fd18 	bl	8000608 <__aeabi_dmul>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4620      	mov	r0, r4
 8005bde:	4629      	mov	r1, r5
 8005be0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005be4:	f7fa fb58 	bl	8000298 <__aeabi_dsub>
 8005be8:	f806 4b01 	strb.w	r4, [r6], #1
 8005bec:	9d07      	ldr	r5, [sp, #28]
 8005bee:	eba6 040a 	sub.w	r4, r6, sl
 8005bf2:	42a5      	cmp	r5, r4
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	f040 8117 	bne.w	8005e2a <_dtoa_r+0x6e2>
 8005bfc:	f7fa fb4e 	bl	800029c <__adddf3>
 8005c00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c04:	4604      	mov	r4, r0
 8005c06:	460d      	mov	r5, r1
 8005c08:	f7fa ff8e 	bl	8000b28 <__aeabi_dcmpgt>
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	f040 80f9 	bne.w	8005e04 <_dtoa_r+0x6bc>
 8005c12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c16:	4620      	mov	r0, r4
 8005c18:	4629      	mov	r1, r5
 8005c1a:	f7fa ff5d 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c1e:	b118      	cbz	r0, 8005c28 <_dtoa_r+0x4e0>
 8005c20:	f018 0f01 	tst.w	r8, #1
 8005c24:	f040 80ee 	bne.w	8005e04 <_dtoa_r+0x6bc>
 8005c28:	4649      	mov	r1, r9
 8005c2a:	4658      	mov	r0, fp
 8005c2c:	f000 fc90 	bl	8006550 <_Bfree>
 8005c30:	2300      	movs	r3, #0
 8005c32:	7033      	strb	r3, [r6, #0]
 8005c34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005c36:	3701      	adds	r7, #1
 8005c38:	601f      	str	r7, [r3, #0]
 8005c3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 831d 	beq.w	800627c <_dtoa_r+0xb34>
 8005c42:	601e      	str	r6, [r3, #0]
 8005c44:	e31a      	b.n	800627c <_dtoa_r+0xb34>
 8005c46:	07e2      	lsls	r2, r4, #31
 8005c48:	d505      	bpl.n	8005c56 <_dtoa_r+0x50e>
 8005c4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c4e:	f7fa fcdb 	bl	8000608 <__aeabi_dmul>
 8005c52:	3601      	adds	r6, #1
 8005c54:	2301      	movs	r3, #1
 8005c56:	1064      	asrs	r4, r4, #1
 8005c58:	3508      	adds	r5, #8
 8005c5a:	e73f      	b.n	8005adc <_dtoa_r+0x394>
 8005c5c:	2602      	movs	r6, #2
 8005c5e:	e742      	b.n	8005ae6 <_dtoa_r+0x39e>
 8005c60:	9c07      	ldr	r4, [sp, #28]
 8005c62:	9704      	str	r7, [sp, #16]
 8005c64:	e761      	b.n	8005b2a <_dtoa_r+0x3e2>
 8005c66:	4b27      	ldr	r3, [pc, #156]	@ (8005d04 <_dtoa_r+0x5bc>)
 8005c68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c6e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c72:	4454      	add	r4, sl
 8005c74:	2900      	cmp	r1, #0
 8005c76:	d053      	beq.n	8005d20 <_dtoa_r+0x5d8>
 8005c78:	4928      	ldr	r1, [pc, #160]	@ (8005d1c <_dtoa_r+0x5d4>)
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	f7fa fdee 	bl	800085c <__aeabi_ddiv>
 8005c80:	4633      	mov	r3, r6
 8005c82:	462a      	mov	r2, r5
 8005c84:	f7fa fb08 	bl	8000298 <__aeabi_dsub>
 8005c88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c8c:	4656      	mov	r6, sl
 8005c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c92:	f7fa ff69 	bl	8000b68 <__aeabi_d2iz>
 8005c96:	4605      	mov	r5, r0
 8005c98:	f7fa fc4c 	bl	8000534 <__aeabi_i2d>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ca4:	f7fa faf8 	bl	8000298 <__aeabi_dsub>
 8005ca8:	3530      	adds	r5, #48	@ 0x30
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005cb2:	f806 5b01 	strb.w	r5, [r6], #1
 8005cb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005cba:	f7fa ff17 	bl	8000aec <__aeabi_dcmplt>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d171      	bne.n	8005da6 <_dtoa_r+0x65e>
 8005cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cc6:	4911      	ldr	r1, [pc, #68]	@ (8005d0c <_dtoa_r+0x5c4>)
 8005cc8:	2000      	movs	r0, #0
 8005cca:	f7fa fae5 	bl	8000298 <__aeabi_dsub>
 8005cce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005cd2:	f7fa ff0b 	bl	8000aec <__aeabi_dcmplt>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	f040 8095 	bne.w	8005e06 <_dtoa_r+0x6be>
 8005cdc:	42a6      	cmp	r6, r4
 8005cde:	f43f af50 	beq.w	8005b82 <_dtoa_r+0x43a>
 8005ce2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8005d10 <_dtoa_r+0x5c8>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f7fa fc8d 	bl	8000608 <__aeabi_dmul>
 8005cee:	4b08      	ldr	r3, [pc, #32]	@ (8005d10 <_dtoa_r+0x5c8>)
 8005cf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cfa:	f7fa fc85 	bl	8000608 <__aeabi_dmul>
 8005cfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d02:	e7c4      	b.n	8005c8e <_dtoa_r+0x546>
 8005d04:	08008fa8 	.word	0x08008fa8
 8005d08:	08008f80 	.word	0x08008f80
 8005d0c:	3ff00000 	.word	0x3ff00000
 8005d10:	40240000 	.word	0x40240000
 8005d14:	401c0000 	.word	0x401c0000
 8005d18:	40140000 	.word	0x40140000
 8005d1c:	3fe00000 	.word	0x3fe00000
 8005d20:	4631      	mov	r1, r6
 8005d22:	4628      	mov	r0, r5
 8005d24:	f7fa fc70 	bl	8000608 <__aeabi_dmul>
 8005d28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d2c:	9415      	str	r4, [sp, #84]	@ 0x54
 8005d2e:	4656      	mov	r6, sl
 8005d30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d34:	f7fa ff18 	bl	8000b68 <__aeabi_d2iz>
 8005d38:	4605      	mov	r5, r0
 8005d3a:	f7fa fbfb 	bl	8000534 <__aeabi_i2d>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d46:	f7fa faa7 	bl	8000298 <__aeabi_dsub>
 8005d4a:	3530      	adds	r5, #48	@ 0x30
 8005d4c:	f806 5b01 	strb.w	r5, [r6], #1
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	42a6      	cmp	r6, r4
 8005d56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d5a:	f04f 0200 	mov.w	r2, #0
 8005d5e:	d124      	bne.n	8005daa <_dtoa_r+0x662>
 8005d60:	4bac      	ldr	r3, [pc, #688]	@ (8006014 <_dtoa_r+0x8cc>)
 8005d62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005d66:	f7fa fa99 	bl	800029c <__adddf3>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d72:	f7fa fed9 	bl	8000b28 <__aeabi_dcmpgt>
 8005d76:	2800      	cmp	r0, #0
 8005d78:	d145      	bne.n	8005e06 <_dtoa_r+0x6be>
 8005d7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d7e:	49a5      	ldr	r1, [pc, #660]	@ (8006014 <_dtoa_r+0x8cc>)
 8005d80:	2000      	movs	r0, #0
 8005d82:	f7fa fa89 	bl	8000298 <__aeabi_dsub>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d8e:	f7fa fead 	bl	8000aec <__aeabi_dcmplt>
 8005d92:	2800      	cmp	r0, #0
 8005d94:	f43f aef5 	beq.w	8005b82 <_dtoa_r+0x43a>
 8005d98:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005d9a:	1e73      	subs	r3, r6, #1
 8005d9c:	9315      	str	r3, [sp, #84]	@ 0x54
 8005d9e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005da2:	2b30      	cmp	r3, #48	@ 0x30
 8005da4:	d0f8      	beq.n	8005d98 <_dtoa_r+0x650>
 8005da6:	9f04      	ldr	r7, [sp, #16]
 8005da8:	e73e      	b.n	8005c28 <_dtoa_r+0x4e0>
 8005daa:	4b9b      	ldr	r3, [pc, #620]	@ (8006018 <_dtoa_r+0x8d0>)
 8005dac:	f7fa fc2c 	bl	8000608 <__aeabi_dmul>
 8005db0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005db4:	e7bc      	b.n	8005d30 <_dtoa_r+0x5e8>
 8005db6:	d10c      	bne.n	8005dd2 <_dtoa_r+0x68a>
 8005db8:	4b98      	ldr	r3, [pc, #608]	@ (800601c <_dtoa_r+0x8d4>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dc0:	f7fa fc22 	bl	8000608 <__aeabi_dmul>
 8005dc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dc8:	f7fa fea4 	bl	8000b14 <__aeabi_dcmpge>
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	f000 8157 	beq.w	8006080 <_dtoa_r+0x938>
 8005dd2:	2400      	movs	r4, #0
 8005dd4:	4625      	mov	r5, r4
 8005dd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	9304      	str	r3, [sp, #16]
 8005ddc:	4656      	mov	r6, sl
 8005dde:	2700      	movs	r7, #0
 8005de0:	4621      	mov	r1, r4
 8005de2:	4658      	mov	r0, fp
 8005de4:	f000 fbb4 	bl	8006550 <_Bfree>
 8005de8:	2d00      	cmp	r5, #0
 8005dea:	d0dc      	beq.n	8005da6 <_dtoa_r+0x65e>
 8005dec:	b12f      	cbz	r7, 8005dfa <_dtoa_r+0x6b2>
 8005dee:	42af      	cmp	r7, r5
 8005df0:	d003      	beq.n	8005dfa <_dtoa_r+0x6b2>
 8005df2:	4639      	mov	r1, r7
 8005df4:	4658      	mov	r0, fp
 8005df6:	f000 fbab 	bl	8006550 <_Bfree>
 8005dfa:	4629      	mov	r1, r5
 8005dfc:	4658      	mov	r0, fp
 8005dfe:	f000 fba7 	bl	8006550 <_Bfree>
 8005e02:	e7d0      	b.n	8005da6 <_dtoa_r+0x65e>
 8005e04:	9704      	str	r7, [sp, #16]
 8005e06:	4633      	mov	r3, r6
 8005e08:	461e      	mov	r6, r3
 8005e0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e0e:	2a39      	cmp	r2, #57	@ 0x39
 8005e10:	d107      	bne.n	8005e22 <_dtoa_r+0x6da>
 8005e12:	459a      	cmp	sl, r3
 8005e14:	d1f8      	bne.n	8005e08 <_dtoa_r+0x6c0>
 8005e16:	9a04      	ldr	r2, [sp, #16]
 8005e18:	3201      	adds	r2, #1
 8005e1a:	9204      	str	r2, [sp, #16]
 8005e1c:	2230      	movs	r2, #48	@ 0x30
 8005e1e:	f88a 2000 	strb.w	r2, [sl]
 8005e22:	781a      	ldrb	r2, [r3, #0]
 8005e24:	3201      	adds	r2, #1
 8005e26:	701a      	strb	r2, [r3, #0]
 8005e28:	e7bd      	b.n	8005da6 <_dtoa_r+0x65e>
 8005e2a:	4b7b      	ldr	r3, [pc, #492]	@ (8006018 <_dtoa_r+0x8d0>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f7fa fbeb 	bl	8000608 <__aeabi_dmul>
 8005e32:	2200      	movs	r2, #0
 8005e34:	2300      	movs	r3, #0
 8005e36:	4604      	mov	r4, r0
 8005e38:	460d      	mov	r5, r1
 8005e3a:	f7fa fe4d 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	f43f aebb 	beq.w	8005bba <_dtoa_r+0x472>
 8005e44:	e6f0      	b.n	8005c28 <_dtoa_r+0x4e0>
 8005e46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005e48:	2a00      	cmp	r2, #0
 8005e4a:	f000 80db 	beq.w	8006004 <_dtoa_r+0x8bc>
 8005e4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e50:	2a01      	cmp	r2, #1
 8005e52:	f300 80bf 	bgt.w	8005fd4 <_dtoa_r+0x88c>
 8005e56:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005e58:	2a00      	cmp	r2, #0
 8005e5a:	f000 80b7 	beq.w	8005fcc <_dtoa_r+0x884>
 8005e5e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005e62:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005e64:	4646      	mov	r6, r8
 8005e66:	9a08      	ldr	r2, [sp, #32]
 8005e68:	2101      	movs	r1, #1
 8005e6a:	441a      	add	r2, r3
 8005e6c:	4658      	mov	r0, fp
 8005e6e:	4498      	add	r8, r3
 8005e70:	9208      	str	r2, [sp, #32]
 8005e72:	f000 fc6b 	bl	800674c <__i2b>
 8005e76:	4605      	mov	r5, r0
 8005e78:	b15e      	cbz	r6, 8005e92 <_dtoa_r+0x74a>
 8005e7a:	9b08      	ldr	r3, [sp, #32]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	dd08      	ble.n	8005e92 <_dtoa_r+0x74a>
 8005e80:	42b3      	cmp	r3, r6
 8005e82:	9a08      	ldr	r2, [sp, #32]
 8005e84:	bfa8      	it	ge
 8005e86:	4633      	movge	r3, r6
 8005e88:	eba8 0803 	sub.w	r8, r8, r3
 8005e8c:	1af6      	subs	r6, r6, r3
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	9308      	str	r3, [sp, #32]
 8005e92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e94:	b1f3      	cbz	r3, 8005ed4 <_dtoa_r+0x78c>
 8005e96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 80b7 	beq.w	800600c <_dtoa_r+0x8c4>
 8005e9e:	b18c      	cbz	r4, 8005ec4 <_dtoa_r+0x77c>
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	4622      	mov	r2, r4
 8005ea4:	4658      	mov	r0, fp
 8005ea6:	f000 fd11 	bl	80068cc <__pow5mult>
 8005eaa:	464a      	mov	r2, r9
 8005eac:	4601      	mov	r1, r0
 8005eae:	4605      	mov	r5, r0
 8005eb0:	4658      	mov	r0, fp
 8005eb2:	f000 fc61 	bl	8006778 <__multiply>
 8005eb6:	4649      	mov	r1, r9
 8005eb8:	9004      	str	r0, [sp, #16]
 8005eba:	4658      	mov	r0, fp
 8005ebc:	f000 fb48 	bl	8006550 <_Bfree>
 8005ec0:	9b04      	ldr	r3, [sp, #16]
 8005ec2:	4699      	mov	r9, r3
 8005ec4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ec6:	1b1a      	subs	r2, r3, r4
 8005ec8:	d004      	beq.n	8005ed4 <_dtoa_r+0x78c>
 8005eca:	4649      	mov	r1, r9
 8005ecc:	4658      	mov	r0, fp
 8005ece:	f000 fcfd 	bl	80068cc <__pow5mult>
 8005ed2:	4681      	mov	r9, r0
 8005ed4:	2101      	movs	r1, #1
 8005ed6:	4658      	mov	r0, fp
 8005ed8:	f000 fc38 	bl	800674c <__i2b>
 8005edc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ede:	4604      	mov	r4, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 81cf 	beq.w	8006284 <_dtoa_r+0xb3c>
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	4601      	mov	r1, r0
 8005eea:	4658      	mov	r0, fp
 8005eec:	f000 fcee 	bl	80068cc <__pow5mult>
 8005ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	f300 8095 	bgt.w	8006024 <_dtoa_r+0x8dc>
 8005efa:	9b02      	ldr	r3, [sp, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f040 8087 	bne.w	8006010 <_dtoa_r+0x8c8>
 8005f02:	9b03      	ldr	r3, [sp, #12]
 8005f04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f040 8089 	bne.w	8006020 <_dtoa_r+0x8d8>
 8005f0e:	9b03      	ldr	r3, [sp, #12]
 8005f10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f14:	0d1b      	lsrs	r3, r3, #20
 8005f16:	051b      	lsls	r3, r3, #20
 8005f18:	b12b      	cbz	r3, 8005f26 <_dtoa_r+0x7de>
 8005f1a:	9b08      	ldr	r3, [sp, #32]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	9308      	str	r3, [sp, #32]
 8005f20:	f108 0801 	add.w	r8, r8, #1
 8005f24:	2301      	movs	r3, #1
 8005f26:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 81b0 	beq.w	8006290 <_dtoa_r+0xb48>
 8005f30:	6923      	ldr	r3, [r4, #16]
 8005f32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f36:	6918      	ldr	r0, [r3, #16]
 8005f38:	f000 fbbc 	bl	80066b4 <__hi0bits>
 8005f3c:	f1c0 0020 	rsb	r0, r0, #32
 8005f40:	9b08      	ldr	r3, [sp, #32]
 8005f42:	4418      	add	r0, r3
 8005f44:	f010 001f 	ands.w	r0, r0, #31
 8005f48:	d077      	beq.n	800603a <_dtoa_r+0x8f2>
 8005f4a:	f1c0 0320 	rsb	r3, r0, #32
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	dd6b      	ble.n	800602a <_dtoa_r+0x8e2>
 8005f52:	9b08      	ldr	r3, [sp, #32]
 8005f54:	f1c0 001c 	rsb	r0, r0, #28
 8005f58:	4403      	add	r3, r0
 8005f5a:	4480      	add	r8, r0
 8005f5c:	4406      	add	r6, r0
 8005f5e:	9308      	str	r3, [sp, #32]
 8005f60:	f1b8 0f00 	cmp.w	r8, #0
 8005f64:	dd05      	ble.n	8005f72 <_dtoa_r+0x82a>
 8005f66:	4649      	mov	r1, r9
 8005f68:	4642      	mov	r2, r8
 8005f6a:	4658      	mov	r0, fp
 8005f6c:	f000 fd08 	bl	8006980 <__lshift>
 8005f70:	4681      	mov	r9, r0
 8005f72:	9b08      	ldr	r3, [sp, #32]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	dd05      	ble.n	8005f84 <_dtoa_r+0x83c>
 8005f78:	4621      	mov	r1, r4
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	4658      	mov	r0, fp
 8005f7e:	f000 fcff 	bl	8006980 <__lshift>
 8005f82:	4604      	mov	r4, r0
 8005f84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d059      	beq.n	800603e <_dtoa_r+0x8f6>
 8005f8a:	4621      	mov	r1, r4
 8005f8c:	4648      	mov	r0, r9
 8005f8e:	f000 fd63 	bl	8006a58 <__mcmp>
 8005f92:	2800      	cmp	r0, #0
 8005f94:	da53      	bge.n	800603e <_dtoa_r+0x8f6>
 8005f96:	1e7b      	subs	r3, r7, #1
 8005f98:	9304      	str	r3, [sp, #16]
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	220a      	movs	r2, #10
 8005fa0:	4658      	mov	r0, fp
 8005fa2:	f000 faf7 	bl	8006594 <__multadd>
 8005fa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fa8:	4681      	mov	r9, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 8172 	beq.w	8006294 <_dtoa_r+0xb4c>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	220a      	movs	r2, #10
 8005fb6:	4658      	mov	r0, fp
 8005fb8:	f000 faec 	bl	8006594 <__multadd>
 8005fbc:	9b00      	ldr	r3, [sp, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	4605      	mov	r5, r0
 8005fc2:	dc67      	bgt.n	8006094 <_dtoa_r+0x94c>
 8005fc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	dc41      	bgt.n	800604e <_dtoa_r+0x906>
 8005fca:	e063      	b.n	8006094 <_dtoa_r+0x94c>
 8005fcc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005fce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005fd2:	e746      	b.n	8005e62 <_dtoa_r+0x71a>
 8005fd4:	9b07      	ldr	r3, [sp, #28]
 8005fd6:	1e5c      	subs	r4, r3, #1
 8005fd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fda:	42a3      	cmp	r3, r4
 8005fdc:	bfbf      	itttt	lt
 8005fde:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005fe0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005fe2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005fe4:	1ae3      	sublt	r3, r4, r3
 8005fe6:	bfb4      	ite	lt
 8005fe8:	18d2      	addlt	r2, r2, r3
 8005fea:	1b1c      	subge	r4, r3, r4
 8005fec:	9b07      	ldr	r3, [sp, #28]
 8005fee:	bfbc      	itt	lt
 8005ff0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005ff2:	2400      	movlt	r4, #0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	bfb5      	itete	lt
 8005ff8:	eba8 0603 	sublt.w	r6, r8, r3
 8005ffc:	9b07      	ldrge	r3, [sp, #28]
 8005ffe:	2300      	movlt	r3, #0
 8006000:	4646      	movge	r6, r8
 8006002:	e730      	b.n	8005e66 <_dtoa_r+0x71e>
 8006004:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006006:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006008:	4646      	mov	r6, r8
 800600a:	e735      	b.n	8005e78 <_dtoa_r+0x730>
 800600c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800600e:	e75c      	b.n	8005eca <_dtoa_r+0x782>
 8006010:	2300      	movs	r3, #0
 8006012:	e788      	b.n	8005f26 <_dtoa_r+0x7de>
 8006014:	3fe00000 	.word	0x3fe00000
 8006018:	40240000 	.word	0x40240000
 800601c:	40140000 	.word	0x40140000
 8006020:	9b02      	ldr	r3, [sp, #8]
 8006022:	e780      	b.n	8005f26 <_dtoa_r+0x7de>
 8006024:	2300      	movs	r3, #0
 8006026:	930a      	str	r3, [sp, #40]	@ 0x28
 8006028:	e782      	b.n	8005f30 <_dtoa_r+0x7e8>
 800602a:	d099      	beq.n	8005f60 <_dtoa_r+0x818>
 800602c:	9a08      	ldr	r2, [sp, #32]
 800602e:	331c      	adds	r3, #28
 8006030:	441a      	add	r2, r3
 8006032:	4498      	add	r8, r3
 8006034:	441e      	add	r6, r3
 8006036:	9208      	str	r2, [sp, #32]
 8006038:	e792      	b.n	8005f60 <_dtoa_r+0x818>
 800603a:	4603      	mov	r3, r0
 800603c:	e7f6      	b.n	800602c <_dtoa_r+0x8e4>
 800603e:	9b07      	ldr	r3, [sp, #28]
 8006040:	9704      	str	r7, [sp, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	dc20      	bgt.n	8006088 <_dtoa_r+0x940>
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800604a:	2b02      	cmp	r3, #2
 800604c:	dd1e      	ble.n	800608c <_dtoa_r+0x944>
 800604e:	9b00      	ldr	r3, [sp, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	f47f aec0 	bne.w	8005dd6 <_dtoa_r+0x68e>
 8006056:	4621      	mov	r1, r4
 8006058:	2205      	movs	r2, #5
 800605a:	4658      	mov	r0, fp
 800605c:	f000 fa9a 	bl	8006594 <__multadd>
 8006060:	4601      	mov	r1, r0
 8006062:	4604      	mov	r4, r0
 8006064:	4648      	mov	r0, r9
 8006066:	f000 fcf7 	bl	8006a58 <__mcmp>
 800606a:	2800      	cmp	r0, #0
 800606c:	f77f aeb3 	ble.w	8005dd6 <_dtoa_r+0x68e>
 8006070:	4656      	mov	r6, sl
 8006072:	2331      	movs	r3, #49	@ 0x31
 8006074:	f806 3b01 	strb.w	r3, [r6], #1
 8006078:	9b04      	ldr	r3, [sp, #16]
 800607a:	3301      	adds	r3, #1
 800607c:	9304      	str	r3, [sp, #16]
 800607e:	e6ae      	b.n	8005dde <_dtoa_r+0x696>
 8006080:	9c07      	ldr	r4, [sp, #28]
 8006082:	9704      	str	r7, [sp, #16]
 8006084:	4625      	mov	r5, r4
 8006086:	e7f3      	b.n	8006070 <_dtoa_r+0x928>
 8006088:	9b07      	ldr	r3, [sp, #28]
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800608e:	2b00      	cmp	r3, #0
 8006090:	f000 8104 	beq.w	800629c <_dtoa_r+0xb54>
 8006094:	2e00      	cmp	r6, #0
 8006096:	dd05      	ble.n	80060a4 <_dtoa_r+0x95c>
 8006098:	4629      	mov	r1, r5
 800609a:	4632      	mov	r2, r6
 800609c:	4658      	mov	r0, fp
 800609e:	f000 fc6f 	bl	8006980 <__lshift>
 80060a2:	4605      	mov	r5, r0
 80060a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d05a      	beq.n	8006160 <_dtoa_r+0xa18>
 80060aa:	6869      	ldr	r1, [r5, #4]
 80060ac:	4658      	mov	r0, fp
 80060ae:	f000 fa0f 	bl	80064d0 <_Balloc>
 80060b2:	4606      	mov	r6, r0
 80060b4:	b928      	cbnz	r0, 80060c2 <_dtoa_r+0x97a>
 80060b6:	4b84      	ldr	r3, [pc, #528]	@ (80062c8 <_dtoa_r+0xb80>)
 80060b8:	4602      	mov	r2, r0
 80060ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80060be:	f7ff bb5a 	b.w	8005776 <_dtoa_r+0x2e>
 80060c2:	692a      	ldr	r2, [r5, #16]
 80060c4:	3202      	adds	r2, #2
 80060c6:	0092      	lsls	r2, r2, #2
 80060c8:	f105 010c 	add.w	r1, r5, #12
 80060cc:	300c      	adds	r0, #12
 80060ce:	f002 f94b 	bl	8008368 <memcpy>
 80060d2:	2201      	movs	r2, #1
 80060d4:	4631      	mov	r1, r6
 80060d6:	4658      	mov	r0, fp
 80060d8:	f000 fc52 	bl	8006980 <__lshift>
 80060dc:	f10a 0301 	add.w	r3, sl, #1
 80060e0:	9307      	str	r3, [sp, #28]
 80060e2:	9b00      	ldr	r3, [sp, #0]
 80060e4:	4453      	add	r3, sl
 80060e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060e8:	9b02      	ldr	r3, [sp, #8]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	462f      	mov	r7, r5
 80060f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80060f2:	4605      	mov	r5, r0
 80060f4:	9b07      	ldr	r3, [sp, #28]
 80060f6:	4621      	mov	r1, r4
 80060f8:	3b01      	subs	r3, #1
 80060fa:	4648      	mov	r0, r9
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	f7ff fa9b 	bl	8005638 <quorem>
 8006102:	4639      	mov	r1, r7
 8006104:	9002      	str	r0, [sp, #8]
 8006106:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800610a:	4648      	mov	r0, r9
 800610c:	f000 fca4 	bl	8006a58 <__mcmp>
 8006110:	462a      	mov	r2, r5
 8006112:	9008      	str	r0, [sp, #32]
 8006114:	4621      	mov	r1, r4
 8006116:	4658      	mov	r0, fp
 8006118:	f000 fcba 	bl	8006a90 <__mdiff>
 800611c:	68c2      	ldr	r2, [r0, #12]
 800611e:	4606      	mov	r6, r0
 8006120:	bb02      	cbnz	r2, 8006164 <_dtoa_r+0xa1c>
 8006122:	4601      	mov	r1, r0
 8006124:	4648      	mov	r0, r9
 8006126:	f000 fc97 	bl	8006a58 <__mcmp>
 800612a:	4602      	mov	r2, r0
 800612c:	4631      	mov	r1, r6
 800612e:	4658      	mov	r0, fp
 8006130:	920e      	str	r2, [sp, #56]	@ 0x38
 8006132:	f000 fa0d 	bl	8006550 <_Bfree>
 8006136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006138:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800613a:	9e07      	ldr	r6, [sp, #28]
 800613c:	ea43 0102 	orr.w	r1, r3, r2
 8006140:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006142:	4319      	orrs	r1, r3
 8006144:	d110      	bne.n	8006168 <_dtoa_r+0xa20>
 8006146:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800614a:	d029      	beq.n	80061a0 <_dtoa_r+0xa58>
 800614c:	9b08      	ldr	r3, [sp, #32]
 800614e:	2b00      	cmp	r3, #0
 8006150:	dd02      	ble.n	8006158 <_dtoa_r+0xa10>
 8006152:	9b02      	ldr	r3, [sp, #8]
 8006154:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006158:	9b00      	ldr	r3, [sp, #0]
 800615a:	f883 8000 	strb.w	r8, [r3]
 800615e:	e63f      	b.n	8005de0 <_dtoa_r+0x698>
 8006160:	4628      	mov	r0, r5
 8006162:	e7bb      	b.n	80060dc <_dtoa_r+0x994>
 8006164:	2201      	movs	r2, #1
 8006166:	e7e1      	b.n	800612c <_dtoa_r+0x9e4>
 8006168:	9b08      	ldr	r3, [sp, #32]
 800616a:	2b00      	cmp	r3, #0
 800616c:	db04      	blt.n	8006178 <_dtoa_r+0xa30>
 800616e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006170:	430b      	orrs	r3, r1
 8006172:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006174:	430b      	orrs	r3, r1
 8006176:	d120      	bne.n	80061ba <_dtoa_r+0xa72>
 8006178:	2a00      	cmp	r2, #0
 800617a:	dded      	ble.n	8006158 <_dtoa_r+0xa10>
 800617c:	4649      	mov	r1, r9
 800617e:	2201      	movs	r2, #1
 8006180:	4658      	mov	r0, fp
 8006182:	f000 fbfd 	bl	8006980 <__lshift>
 8006186:	4621      	mov	r1, r4
 8006188:	4681      	mov	r9, r0
 800618a:	f000 fc65 	bl	8006a58 <__mcmp>
 800618e:	2800      	cmp	r0, #0
 8006190:	dc03      	bgt.n	800619a <_dtoa_r+0xa52>
 8006192:	d1e1      	bne.n	8006158 <_dtoa_r+0xa10>
 8006194:	f018 0f01 	tst.w	r8, #1
 8006198:	d0de      	beq.n	8006158 <_dtoa_r+0xa10>
 800619a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800619e:	d1d8      	bne.n	8006152 <_dtoa_r+0xa0a>
 80061a0:	9a00      	ldr	r2, [sp, #0]
 80061a2:	2339      	movs	r3, #57	@ 0x39
 80061a4:	7013      	strb	r3, [r2, #0]
 80061a6:	4633      	mov	r3, r6
 80061a8:	461e      	mov	r6, r3
 80061aa:	3b01      	subs	r3, #1
 80061ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80061b0:	2a39      	cmp	r2, #57	@ 0x39
 80061b2:	d052      	beq.n	800625a <_dtoa_r+0xb12>
 80061b4:	3201      	adds	r2, #1
 80061b6:	701a      	strb	r2, [r3, #0]
 80061b8:	e612      	b.n	8005de0 <_dtoa_r+0x698>
 80061ba:	2a00      	cmp	r2, #0
 80061bc:	dd07      	ble.n	80061ce <_dtoa_r+0xa86>
 80061be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80061c2:	d0ed      	beq.n	80061a0 <_dtoa_r+0xa58>
 80061c4:	9a00      	ldr	r2, [sp, #0]
 80061c6:	f108 0301 	add.w	r3, r8, #1
 80061ca:	7013      	strb	r3, [r2, #0]
 80061cc:	e608      	b.n	8005de0 <_dtoa_r+0x698>
 80061ce:	9b07      	ldr	r3, [sp, #28]
 80061d0:	9a07      	ldr	r2, [sp, #28]
 80061d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80061d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061d8:	4293      	cmp	r3, r2
 80061da:	d028      	beq.n	800622e <_dtoa_r+0xae6>
 80061dc:	4649      	mov	r1, r9
 80061de:	2300      	movs	r3, #0
 80061e0:	220a      	movs	r2, #10
 80061e2:	4658      	mov	r0, fp
 80061e4:	f000 f9d6 	bl	8006594 <__multadd>
 80061e8:	42af      	cmp	r7, r5
 80061ea:	4681      	mov	r9, r0
 80061ec:	f04f 0300 	mov.w	r3, #0
 80061f0:	f04f 020a 	mov.w	r2, #10
 80061f4:	4639      	mov	r1, r7
 80061f6:	4658      	mov	r0, fp
 80061f8:	d107      	bne.n	800620a <_dtoa_r+0xac2>
 80061fa:	f000 f9cb 	bl	8006594 <__multadd>
 80061fe:	4607      	mov	r7, r0
 8006200:	4605      	mov	r5, r0
 8006202:	9b07      	ldr	r3, [sp, #28]
 8006204:	3301      	adds	r3, #1
 8006206:	9307      	str	r3, [sp, #28]
 8006208:	e774      	b.n	80060f4 <_dtoa_r+0x9ac>
 800620a:	f000 f9c3 	bl	8006594 <__multadd>
 800620e:	4629      	mov	r1, r5
 8006210:	4607      	mov	r7, r0
 8006212:	2300      	movs	r3, #0
 8006214:	220a      	movs	r2, #10
 8006216:	4658      	mov	r0, fp
 8006218:	f000 f9bc 	bl	8006594 <__multadd>
 800621c:	4605      	mov	r5, r0
 800621e:	e7f0      	b.n	8006202 <_dtoa_r+0xaba>
 8006220:	9b00      	ldr	r3, [sp, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	bfcc      	ite	gt
 8006226:	461e      	movgt	r6, r3
 8006228:	2601      	movle	r6, #1
 800622a:	4456      	add	r6, sl
 800622c:	2700      	movs	r7, #0
 800622e:	4649      	mov	r1, r9
 8006230:	2201      	movs	r2, #1
 8006232:	4658      	mov	r0, fp
 8006234:	f000 fba4 	bl	8006980 <__lshift>
 8006238:	4621      	mov	r1, r4
 800623a:	4681      	mov	r9, r0
 800623c:	f000 fc0c 	bl	8006a58 <__mcmp>
 8006240:	2800      	cmp	r0, #0
 8006242:	dcb0      	bgt.n	80061a6 <_dtoa_r+0xa5e>
 8006244:	d102      	bne.n	800624c <_dtoa_r+0xb04>
 8006246:	f018 0f01 	tst.w	r8, #1
 800624a:	d1ac      	bne.n	80061a6 <_dtoa_r+0xa5e>
 800624c:	4633      	mov	r3, r6
 800624e:	461e      	mov	r6, r3
 8006250:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006254:	2a30      	cmp	r2, #48	@ 0x30
 8006256:	d0fa      	beq.n	800624e <_dtoa_r+0xb06>
 8006258:	e5c2      	b.n	8005de0 <_dtoa_r+0x698>
 800625a:	459a      	cmp	sl, r3
 800625c:	d1a4      	bne.n	80061a8 <_dtoa_r+0xa60>
 800625e:	9b04      	ldr	r3, [sp, #16]
 8006260:	3301      	adds	r3, #1
 8006262:	9304      	str	r3, [sp, #16]
 8006264:	2331      	movs	r3, #49	@ 0x31
 8006266:	f88a 3000 	strb.w	r3, [sl]
 800626a:	e5b9      	b.n	8005de0 <_dtoa_r+0x698>
 800626c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800626e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80062cc <_dtoa_r+0xb84>
 8006272:	b11b      	cbz	r3, 800627c <_dtoa_r+0xb34>
 8006274:	f10a 0308 	add.w	r3, sl, #8
 8006278:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	4650      	mov	r0, sl
 800627e:	b019      	add	sp, #100	@ 0x64
 8006280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006286:	2b01      	cmp	r3, #1
 8006288:	f77f ae37 	ble.w	8005efa <_dtoa_r+0x7b2>
 800628c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800628e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006290:	2001      	movs	r0, #1
 8006292:	e655      	b.n	8005f40 <_dtoa_r+0x7f8>
 8006294:	9b00      	ldr	r3, [sp, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	f77f aed6 	ble.w	8006048 <_dtoa_r+0x900>
 800629c:	4656      	mov	r6, sl
 800629e:	4621      	mov	r1, r4
 80062a0:	4648      	mov	r0, r9
 80062a2:	f7ff f9c9 	bl	8005638 <quorem>
 80062a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80062aa:	f806 8b01 	strb.w	r8, [r6], #1
 80062ae:	9b00      	ldr	r3, [sp, #0]
 80062b0:	eba6 020a 	sub.w	r2, r6, sl
 80062b4:	4293      	cmp	r3, r2
 80062b6:	ddb3      	ble.n	8006220 <_dtoa_r+0xad8>
 80062b8:	4649      	mov	r1, r9
 80062ba:	2300      	movs	r3, #0
 80062bc:	220a      	movs	r2, #10
 80062be:	4658      	mov	r0, fp
 80062c0:	f000 f968 	bl	8006594 <__multadd>
 80062c4:	4681      	mov	r9, r0
 80062c6:	e7ea      	b.n	800629e <_dtoa_r+0xb56>
 80062c8:	08008f05 	.word	0x08008f05
 80062cc:	08008e89 	.word	0x08008e89

080062d0 <_free_r>:
 80062d0:	b538      	push	{r3, r4, r5, lr}
 80062d2:	4605      	mov	r5, r0
 80062d4:	2900      	cmp	r1, #0
 80062d6:	d041      	beq.n	800635c <_free_r+0x8c>
 80062d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062dc:	1f0c      	subs	r4, r1, #4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	bfb8      	it	lt
 80062e2:	18e4      	addlt	r4, r4, r3
 80062e4:	f000 f8e8 	bl	80064b8 <__malloc_lock>
 80062e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006360 <_free_r+0x90>)
 80062ea:	6813      	ldr	r3, [r2, #0]
 80062ec:	b933      	cbnz	r3, 80062fc <_free_r+0x2c>
 80062ee:	6063      	str	r3, [r4, #4]
 80062f0:	6014      	str	r4, [r2, #0]
 80062f2:	4628      	mov	r0, r5
 80062f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062f8:	f000 b8e4 	b.w	80064c4 <__malloc_unlock>
 80062fc:	42a3      	cmp	r3, r4
 80062fe:	d908      	bls.n	8006312 <_free_r+0x42>
 8006300:	6820      	ldr	r0, [r4, #0]
 8006302:	1821      	adds	r1, r4, r0
 8006304:	428b      	cmp	r3, r1
 8006306:	bf01      	itttt	eq
 8006308:	6819      	ldreq	r1, [r3, #0]
 800630a:	685b      	ldreq	r3, [r3, #4]
 800630c:	1809      	addeq	r1, r1, r0
 800630e:	6021      	streq	r1, [r4, #0]
 8006310:	e7ed      	b.n	80062ee <_free_r+0x1e>
 8006312:	461a      	mov	r2, r3
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	b10b      	cbz	r3, 800631c <_free_r+0x4c>
 8006318:	42a3      	cmp	r3, r4
 800631a:	d9fa      	bls.n	8006312 <_free_r+0x42>
 800631c:	6811      	ldr	r1, [r2, #0]
 800631e:	1850      	adds	r0, r2, r1
 8006320:	42a0      	cmp	r0, r4
 8006322:	d10b      	bne.n	800633c <_free_r+0x6c>
 8006324:	6820      	ldr	r0, [r4, #0]
 8006326:	4401      	add	r1, r0
 8006328:	1850      	adds	r0, r2, r1
 800632a:	4283      	cmp	r3, r0
 800632c:	6011      	str	r1, [r2, #0]
 800632e:	d1e0      	bne.n	80062f2 <_free_r+0x22>
 8006330:	6818      	ldr	r0, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	6053      	str	r3, [r2, #4]
 8006336:	4408      	add	r0, r1
 8006338:	6010      	str	r0, [r2, #0]
 800633a:	e7da      	b.n	80062f2 <_free_r+0x22>
 800633c:	d902      	bls.n	8006344 <_free_r+0x74>
 800633e:	230c      	movs	r3, #12
 8006340:	602b      	str	r3, [r5, #0]
 8006342:	e7d6      	b.n	80062f2 <_free_r+0x22>
 8006344:	6820      	ldr	r0, [r4, #0]
 8006346:	1821      	adds	r1, r4, r0
 8006348:	428b      	cmp	r3, r1
 800634a:	bf04      	itt	eq
 800634c:	6819      	ldreq	r1, [r3, #0]
 800634e:	685b      	ldreq	r3, [r3, #4]
 8006350:	6063      	str	r3, [r4, #4]
 8006352:	bf04      	itt	eq
 8006354:	1809      	addeq	r1, r1, r0
 8006356:	6021      	streq	r1, [r4, #0]
 8006358:	6054      	str	r4, [r2, #4]
 800635a:	e7ca      	b.n	80062f2 <_free_r+0x22>
 800635c:	bd38      	pop	{r3, r4, r5, pc}
 800635e:	bf00      	nop
 8006360:	2000042c 	.word	0x2000042c

08006364 <malloc>:
 8006364:	4b02      	ldr	r3, [pc, #8]	@ (8006370 <malloc+0xc>)
 8006366:	4601      	mov	r1, r0
 8006368:	6818      	ldr	r0, [r3, #0]
 800636a:	f000 b825 	b.w	80063b8 <_malloc_r>
 800636e:	bf00      	nop
 8006370:	20000018 	.word	0x20000018

08006374 <sbrk_aligned>:
 8006374:	b570      	push	{r4, r5, r6, lr}
 8006376:	4e0f      	ldr	r6, [pc, #60]	@ (80063b4 <sbrk_aligned+0x40>)
 8006378:	460c      	mov	r4, r1
 800637a:	6831      	ldr	r1, [r6, #0]
 800637c:	4605      	mov	r5, r0
 800637e:	b911      	cbnz	r1, 8006386 <sbrk_aligned+0x12>
 8006380:	f001 ffe2 	bl	8008348 <_sbrk_r>
 8006384:	6030      	str	r0, [r6, #0]
 8006386:	4621      	mov	r1, r4
 8006388:	4628      	mov	r0, r5
 800638a:	f001 ffdd 	bl	8008348 <_sbrk_r>
 800638e:	1c43      	adds	r3, r0, #1
 8006390:	d103      	bne.n	800639a <sbrk_aligned+0x26>
 8006392:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006396:	4620      	mov	r0, r4
 8006398:	bd70      	pop	{r4, r5, r6, pc}
 800639a:	1cc4      	adds	r4, r0, #3
 800639c:	f024 0403 	bic.w	r4, r4, #3
 80063a0:	42a0      	cmp	r0, r4
 80063a2:	d0f8      	beq.n	8006396 <sbrk_aligned+0x22>
 80063a4:	1a21      	subs	r1, r4, r0
 80063a6:	4628      	mov	r0, r5
 80063a8:	f001 ffce 	bl	8008348 <_sbrk_r>
 80063ac:	3001      	adds	r0, #1
 80063ae:	d1f2      	bne.n	8006396 <sbrk_aligned+0x22>
 80063b0:	e7ef      	b.n	8006392 <sbrk_aligned+0x1e>
 80063b2:	bf00      	nop
 80063b4:	20000428 	.word	0x20000428

080063b8 <_malloc_r>:
 80063b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063bc:	1ccd      	adds	r5, r1, #3
 80063be:	f025 0503 	bic.w	r5, r5, #3
 80063c2:	3508      	adds	r5, #8
 80063c4:	2d0c      	cmp	r5, #12
 80063c6:	bf38      	it	cc
 80063c8:	250c      	movcc	r5, #12
 80063ca:	2d00      	cmp	r5, #0
 80063cc:	4606      	mov	r6, r0
 80063ce:	db01      	blt.n	80063d4 <_malloc_r+0x1c>
 80063d0:	42a9      	cmp	r1, r5
 80063d2:	d904      	bls.n	80063de <_malloc_r+0x26>
 80063d4:	230c      	movs	r3, #12
 80063d6:	6033      	str	r3, [r6, #0]
 80063d8:	2000      	movs	r0, #0
 80063da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064b4 <_malloc_r+0xfc>
 80063e2:	f000 f869 	bl	80064b8 <__malloc_lock>
 80063e6:	f8d8 3000 	ldr.w	r3, [r8]
 80063ea:	461c      	mov	r4, r3
 80063ec:	bb44      	cbnz	r4, 8006440 <_malloc_r+0x88>
 80063ee:	4629      	mov	r1, r5
 80063f0:	4630      	mov	r0, r6
 80063f2:	f7ff ffbf 	bl	8006374 <sbrk_aligned>
 80063f6:	1c43      	adds	r3, r0, #1
 80063f8:	4604      	mov	r4, r0
 80063fa:	d158      	bne.n	80064ae <_malloc_r+0xf6>
 80063fc:	f8d8 4000 	ldr.w	r4, [r8]
 8006400:	4627      	mov	r7, r4
 8006402:	2f00      	cmp	r7, #0
 8006404:	d143      	bne.n	800648e <_malloc_r+0xd6>
 8006406:	2c00      	cmp	r4, #0
 8006408:	d04b      	beq.n	80064a2 <_malloc_r+0xea>
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	4639      	mov	r1, r7
 800640e:	4630      	mov	r0, r6
 8006410:	eb04 0903 	add.w	r9, r4, r3
 8006414:	f001 ff98 	bl	8008348 <_sbrk_r>
 8006418:	4581      	cmp	r9, r0
 800641a:	d142      	bne.n	80064a2 <_malloc_r+0xea>
 800641c:	6821      	ldr	r1, [r4, #0]
 800641e:	1a6d      	subs	r5, r5, r1
 8006420:	4629      	mov	r1, r5
 8006422:	4630      	mov	r0, r6
 8006424:	f7ff ffa6 	bl	8006374 <sbrk_aligned>
 8006428:	3001      	adds	r0, #1
 800642a:	d03a      	beq.n	80064a2 <_malloc_r+0xea>
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	442b      	add	r3, r5
 8006430:	6023      	str	r3, [r4, #0]
 8006432:	f8d8 3000 	ldr.w	r3, [r8]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	bb62      	cbnz	r2, 8006494 <_malloc_r+0xdc>
 800643a:	f8c8 7000 	str.w	r7, [r8]
 800643e:	e00f      	b.n	8006460 <_malloc_r+0xa8>
 8006440:	6822      	ldr	r2, [r4, #0]
 8006442:	1b52      	subs	r2, r2, r5
 8006444:	d420      	bmi.n	8006488 <_malloc_r+0xd0>
 8006446:	2a0b      	cmp	r2, #11
 8006448:	d917      	bls.n	800647a <_malloc_r+0xc2>
 800644a:	1961      	adds	r1, r4, r5
 800644c:	42a3      	cmp	r3, r4
 800644e:	6025      	str	r5, [r4, #0]
 8006450:	bf18      	it	ne
 8006452:	6059      	strne	r1, [r3, #4]
 8006454:	6863      	ldr	r3, [r4, #4]
 8006456:	bf08      	it	eq
 8006458:	f8c8 1000 	streq.w	r1, [r8]
 800645c:	5162      	str	r2, [r4, r5]
 800645e:	604b      	str	r3, [r1, #4]
 8006460:	4630      	mov	r0, r6
 8006462:	f000 f82f 	bl	80064c4 <__malloc_unlock>
 8006466:	f104 000b 	add.w	r0, r4, #11
 800646a:	1d23      	adds	r3, r4, #4
 800646c:	f020 0007 	bic.w	r0, r0, #7
 8006470:	1ac2      	subs	r2, r0, r3
 8006472:	bf1c      	itt	ne
 8006474:	1a1b      	subne	r3, r3, r0
 8006476:	50a3      	strne	r3, [r4, r2]
 8006478:	e7af      	b.n	80063da <_malloc_r+0x22>
 800647a:	6862      	ldr	r2, [r4, #4]
 800647c:	42a3      	cmp	r3, r4
 800647e:	bf0c      	ite	eq
 8006480:	f8c8 2000 	streq.w	r2, [r8]
 8006484:	605a      	strne	r2, [r3, #4]
 8006486:	e7eb      	b.n	8006460 <_malloc_r+0xa8>
 8006488:	4623      	mov	r3, r4
 800648a:	6864      	ldr	r4, [r4, #4]
 800648c:	e7ae      	b.n	80063ec <_malloc_r+0x34>
 800648e:	463c      	mov	r4, r7
 8006490:	687f      	ldr	r7, [r7, #4]
 8006492:	e7b6      	b.n	8006402 <_malloc_r+0x4a>
 8006494:	461a      	mov	r2, r3
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	42a3      	cmp	r3, r4
 800649a:	d1fb      	bne.n	8006494 <_malloc_r+0xdc>
 800649c:	2300      	movs	r3, #0
 800649e:	6053      	str	r3, [r2, #4]
 80064a0:	e7de      	b.n	8006460 <_malloc_r+0xa8>
 80064a2:	230c      	movs	r3, #12
 80064a4:	6033      	str	r3, [r6, #0]
 80064a6:	4630      	mov	r0, r6
 80064a8:	f000 f80c 	bl	80064c4 <__malloc_unlock>
 80064ac:	e794      	b.n	80063d8 <_malloc_r+0x20>
 80064ae:	6005      	str	r5, [r0, #0]
 80064b0:	e7d6      	b.n	8006460 <_malloc_r+0xa8>
 80064b2:	bf00      	nop
 80064b4:	2000042c 	.word	0x2000042c

080064b8 <__malloc_lock>:
 80064b8:	4801      	ldr	r0, [pc, #4]	@ (80064c0 <__malloc_lock+0x8>)
 80064ba:	f7ff b8b4 	b.w	8005626 <__retarget_lock_acquire_recursive>
 80064be:	bf00      	nop
 80064c0:	20000424 	.word	0x20000424

080064c4 <__malloc_unlock>:
 80064c4:	4801      	ldr	r0, [pc, #4]	@ (80064cc <__malloc_unlock+0x8>)
 80064c6:	f7ff b8af 	b.w	8005628 <__retarget_lock_release_recursive>
 80064ca:	bf00      	nop
 80064cc:	20000424 	.word	0x20000424

080064d0 <_Balloc>:
 80064d0:	b570      	push	{r4, r5, r6, lr}
 80064d2:	69c6      	ldr	r6, [r0, #28]
 80064d4:	4604      	mov	r4, r0
 80064d6:	460d      	mov	r5, r1
 80064d8:	b976      	cbnz	r6, 80064f8 <_Balloc+0x28>
 80064da:	2010      	movs	r0, #16
 80064dc:	f7ff ff42 	bl	8006364 <malloc>
 80064e0:	4602      	mov	r2, r0
 80064e2:	61e0      	str	r0, [r4, #28]
 80064e4:	b920      	cbnz	r0, 80064f0 <_Balloc+0x20>
 80064e6:	4b18      	ldr	r3, [pc, #96]	@ (8006548 <_Balloc+0x78>)
 80064e8:	4818      	ldr	r0, [pc, #96]	@ (800654c <_Balloc+0x7c>)
 80064ea:	216b      	movs	r1, #107	@ 0x6b
 80064ec:	f001 ff54 	bl	8008398 <__assert_func>
 80064f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064f4:	6006      	str	r6, [r0, #0]
 80064f6:	60c6      	str	r6, [r0, #12]
 80064f8:	69e6      	ldr	r6, [r4, #28]
 80064fa:	68f3      	ldr	r3, [r6, #12]
 80064fc:	b183      	cbz	r3, 8006520 <_Balloc+0x50>
 80064fe:	69e3      	ldr	r3, [r4, #28]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006506:	b9b8      	cbnz	r0, 8006538 <_Balloc+0x68>
 8006508:	2101      	movs	r1, #1
 800650a:	fa01 f605 	lsl.w	r6, r1, r5
 800650e:	1d72      	adds	r2, r6, #5
 8006510:	0092      	lsls	r2, r2, #2
 8006512:	4620      	mov	r0, r4
 8006514:	f001 ff5e 	bl	80083d4 <_calloc_r>
 8006518:	b160      	cbz	r0, 8006534 <_Balloc+0x64>
 800651a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800651e:	e00e      	b.n	800653e <_Balloc+0x6e>
 8006520:	2221      	movs	r2, #33	@ 0x21
 8006522:	2104      	movs	r1, #4
 8006524:	4620      	mov	r0, r4
 8006526:	f001 ff55 	bl	80083d4 <_calloc_r>
 800652a:	69e3      	ldr	r3, [r4, #28]
 800652c:	60f0      	str	r0, [r6, #12]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1e4      	bne.n	80064fe <_Balloc+0x2e>
 8006534:	2000      	movs	r0, #0
 8006536:	bd70      	pop	{r4, r5, r6, pc}
 8006538:	6802      	ldr	r2, [r0, #0]
 800653a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800653e:	2300      	movs	r3, #0
 8006540:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006544:	e7f7      	b.n	8006536 <_Balloc+0x66>
 8006546:	bf00      	nop
 8006548:	08008e96 	.word	0x08008e96
 800654c:	08008f16 	.word	0x08008f16

08006550 <_Bfree>:
 8006550:	b570      	push	{r4, r5, r6, lr}
 8006552:	69c6      	ldr	r6, [r0, #28]
 8006554:	4605      	mov	r5, r0
 8006556:	460c      	mov	r4, r1
 8006558:	b976      	cbnz	r6, 8006578 <_Bfree+0x28>
 800655a:	2010      	movs	r0, #16
 800655c:	f7ff ff02 	bl	8006364 <malloc>
 8006560:	4602      	mov	r2, r0
 8006562:	61e8      	str	r0, [r5, #28]
 8006564:	b920      	cbnz	r0, 8006570 <_Bfree+0x20>
 8006566:	4b09      	ldr	r3, [pc, #36]	@ (800658c <_Bfree+0x3c>)
 8006568:	4809      	ldr	r0, [pc, #36]	@ (8006590 <_Bfree+0x40>)
 800656a:	218f      	movs	r1, #143	@ 0x8f
 800656c:	f001 ff14 	bl	8008398 <__assert_func>
 8006570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006574:	6006      	str	r6, [r0, #0]
 8006576:	60c6      	str	r6, [r0, #12]
 8006578:	b13c      	cbz	r4, 800658a <_Bfree+0x3a>
 800657a:	69eb      	ldr	r3, [r5, #28]
 800657c:	6862      	ldr	r2, [r4, #4]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006584:	6021      	str	r1, [r4, #0]
 8006586:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800658a:	bd70      	pop	{r4, r5, r6, pc}
 800658c:	08008e96 	.word	0x08008e96
 8006590:	08008f16 	.word	0x08008f16

08006594 <__multadd>:
 8006594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006598:	690d      	ldr	r5, [r1, #16]
 800659a:	4607      	mov	r7, r0
 800659c:	460c      	mov	r4, r1
 800659e:	461e      	mov	r6, r3
 80065a0:	f101 0c14 	add.w	ip, r1, #20
 80065a4:	2000      	movs	r0, #0
 80065a6:	f8dc 3000 	ldr.w	r3, [ip]
 80065aa:	b299      	uxth	r1, r3
 80065ac:	fb02 6101 	mla	r1, r2, r1, r6
 80065b0:	0c1e      	lsrs	r6, r3, #16
 80065b2:	0c0b      	lsrs	r3, r1, #16
 80065b4:	fb02 3306 	mla	r3, r2, r6, r3
 80065b8:	b289      	uxth	r1, r1
 80065ba:	3001      	adds	r0, #1
 80065bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80065c0:	4285      	cmp	r5, r0
 80065c2:	f84c 1b04 	str.w	r1, [ip], #4
 80065c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80065ca:	dcec      	bgt.n	80065a6 <__multadd+0x12>
 80065cc:	b30e      	cbz	r6, 8006612 <__multadd+0x7e>
 80065ce:	68a3      	ldr	r3, [r4, #8]
 80065d0:	42ab      	cmp	r3, r5
 80065d2:	dc19      	bgt.n	8006608 <__multadd+0x74>
 80065d4:	6861      	ldr	r1, [r4, #4]
 80065d6:	4638      	mov	r0, r7
 80065d8:	3101      	adds	r1, #1
 80065da:	f7ff ff79 	bl	80064d0 <_Balloc>
 80065de:	4680      	mov	r8, r0
 80065e0:	b928      	cbnz	r0, 80065ee <__multadd+0x5a>
 80065e2:	4602      	mov	r2, r0
 80065e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006618 <__multadd+0x84>)
 80065e6:	480d      	ldr	r0, [pc, #52]	@ (800661c <__multadd+0x88>)
 80065e8:	21ba      	movs	r1, #186	@ 0xba
 80065ea:	f001 fed5 	bl	8008398 <__assert_func>
 80065ee:	6922      	ldr	r2, [r4, #16]
 80065f0:	3202      	adds	r2, #2
 80065f2:	f104 010c 	add.w	r1, r4, #12
 80065f6:	0092      	lsls	r2, r2, #2
 80065f8:	300c      	adds	r0, #12
 80065fa:	f001 feb5 	bl	8008368 <memcpy>
 80065fe:	4621      	mov	r1, r4
 8006600:	4638      	mov	r0, r7
 8006602:	f7ff ffa5 	bl	8006550 <_Bfree>
 8006606:	4644      	mov	r4, r8
 8006608:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800660c:	3501      	adds	r5, #1
 800660e:	615e      	str	r6, [r3, #20]
 8006610:	6125      	str	r5, [r4, #16]
 8006612:	4620      	mov	r0, r4
 8006614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006618:	08008f05 	.word	0x08008f05
 800661c:	08008f16 	.word	0x08008f16

08006620 <__s2b>:
 8006620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006624:	460c      	mov	r4, r1
 8006626:	4615      	mov	r5, r2
 8006628:	461f      	mov	r7, r3
 800662a:	2209      	movs	r2, #9
 800662c:	3308      	adds	r3, #8
 800662e:	4606      	mov	r6, r0
 8006630:	fb93 f3f2 	sdiv	r3, r3, r2
 8006634:	2100      	movs	r1, #0
 8006636:	2201      	movs	r2, #1
 8006638:	429a      	cmp	r2, r3
 800663a:	db09      	blt.n	8006650 <__s2b+0x30>
 800663c:	4630      	mov	r0, r6
 800663e:	f7ff ff47 	bl	80064d0 <_Balloc>
 8006642:	b940      	cbnz	r0, 8006656 <__s2b+0x36>
 8006644:	4602      	mov	r2, r0
 8006646:	4b19      	ldr	r3, [pc, #100]	@ (80066ac <__s2b+0x8c>)
 8006648:	4819      	ldr	r0, [pc, #100]	@ (80066b0 <__s2b+0x90>)
 800664a:	21d3      	movs	r1, #211	@ 0xd3
 800664c:	f001 fea4 	bl	8008398 <__assert_func>
 8006650:	0052      	lsls	r2, r2, #1
 8006652:	3101      	adds	r1, #1
 8006654:	e7f0      	b.n	8006638 <__s2b+0x18>
 8006656:	9b08      	ldr	r3, [sp, #32]
 8006658:	6143      	str	r3, [r0, #20]
 800665a:	2d09      	cmp	r5, #9
 800665c:	f04f 0301 	mov.w	r3, #1
 8006660:	6103      	str	r3, [r0, #16]
 8006662:	dd16      	ble.n	8006692 <__s2b+0x72>
 8006664:	f104 0909 	add.w	r9, r4, #9
 8006668:	46c8      	mov	r8, r9
 800666a:	442c      	add	r4, r5
 800666c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006670:	4601      	mov	r1, r0
 8006672:	3b30      	subs	r3, #48	@ 0x30
 8006674:	220a      	movs	r2, #10
 8006676:	4630      	mov	r0, r6
 8006678:	f7ff ff8c 	bl	8006594 <__multadd>
 800667c:	45a0      	cmp	r8, r4
 800667e:	d1f5      	bne.n	800666c <__s2b+0x4c>
 8006680:	f1a5 0408 	sub.w	r4, r5, #8
 8006684:	444c      	add	r4, r9
 8006686:	1b2d      	subs	r5, r5, r4
 8006688:	1963      	adds	r3, r4, r5
 800668a:	42bb      	cmp	r3, r7
 800668c:	db04      	blt.n	8006698 <__s2b+0x78>
 800668e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006692:	340a      	adds	r4, #10
 8006694:	2509      	movs	r5, #9
 8006696:	e7f6      	b.n	8006686 <__s2b+0x66>
 8006698:	f814 3b01 	ldrb.w	r3, [r4], #1
 800669c:	4601      	mov	r1, r0
 800669e:	3b30      	subs	r3, #48	@ 0x30
 80066a0:	220a      	movs	r2, #10
 80066a2:	4630      	mov	r0, r6
 80066a4:	f7ff ff76 	bl	8006594 <__multadd>
 80066a8:	e7ee      	b.n	8006688 <__s2b+0x68>
 80066aa:	bf00      	nop
 80066ac:	08008f05 	.word	0x08008f05
 80066b0:	08008f16 	.word	0x08008f16

080066b4 <__hi0bits>:
 80066b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80066b8:	4603      	mov	r3, r0
 80066ba:	bf36      	itet	cc
 80066bc:	0403      	lslcc	r3, r0, #16
 80066be:	2000      	movcs	r0, #0
 80066c0:	2010      	movcc	r0, #16
 80066c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066c6:	bf3c      	itt	cc
 80066c8:	021b      	lslcc	r3, r3, #8
 80066ca:	3008      	addcc	r0, #8
 80066cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066d0:	bf3c      	itt	cc
 80066d2:	011b      	lslcc	r3, r3, #4
 80066d4:	3004      	addcc	r0, #4
 80066d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066da:	bf3c      	itt	cc
 80066dc:	009b      	lslcc	r3, r3, #2
 80066de:	3002      	addcc	r0, #2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	db05      	blt.n	80066f0 <__hi0bits+0x3c>
 80066e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80066e8:	f100 0001 	add.w	r0, r0, #1
 80066ec:	bf08      	it	eq
 80066ee:	2020      	moveq	r0, #32
 80066f0:	4770      	bx	lr

080066f2 <__lo0bits>:
 80066f2:	6803      	ldr	r3, [r0, #0]
 80066f4:	4602      	mov	r2, r0
 80066f6:	f013 0007 	ands.w	r0, r3, #7
 80066fa:	d00b      	beq.n	8006714 <__lo0bits+0x22>
 80066fc:	07d9      	lsls	r1, r3, #31
 80066fe:	d421      	bmi.n	8006744 <__lo0bits+0x52>
 8006700:	0798      	lsls	r0, r3, #30
 8006702:	bf49      	itett	mi
 8006704:	085b      	lsrmi	r3, r3, #1
 8006706:	089b      	lsrpl	r3, r3, #2
 8006708:	2001      	movmi	r0, #1
 800670a:	6013      	strmi	r3, [r2, #0]
 800670c:	bf5c      	itt	pl
 800670e:	6013      	strpl	r3, [r2, #0]
 8006710:	2002      	movpl	r0, #2
 8006712:	4770      	bx	lr
 8006714:	b299      	uxth	r1, r3
 8006716:	b909      	cbnz	r1, 800671c <__lo0bits+0x2a>
 8006718:	0c1b      	lsrs	r3, r3, #16
 800671a:	2010      	movs	r0, #16
 800671c:	b2d9      	uxtb	r1, r3
 800671e:	b909      	cbnz	r1, 8006724 <__lo0bits+0x32>
 8006720:	3008      	adds	r0, #8
 8006722:	0a1b      	lsrs	r3, r3, #8
 8006724:	0719      	lsls	r1, r3, #28
 8006726:	bf04      	itt	eq
 8006728:	091b      	lsreq	r3, r3, #4
 800672a:	3004      	addeq	r0, #4
 800672c:	0799      	lsls	r1, r3, #30
 800672e:	bf04      	itt	eq
 8006730:	089b      	lsreq	r3, r3, #2
 8006732:	3002      	addeq	r0, #2
 8006734:	07d9      	lsls	r1, r3, #31
 8006736:	d403      	bmi.n	8006740 <__lo0bits+0x4e>
 8006738:	085b      	lsrs	r3, r3, #1
 800673a:	f100 0001 	add.w	r0, r0, #1
 800673e:	d003      	beq.n	8006748 <__lo0bits+0x56>
 8006740:	6013      	str	r3, [r2, #0]
 8006742:	4770      	bx	lr
 8006744:	2000      	movs	r0, #0
 8006746:	4770      	bx	lr
 8006748:	2020      	movs	r0, #32
 800674a:	4770      	bx	lr

0800674c <__i2b>:
 800674c:	b510      	push	{r4, lr}
 800674e:	460c      	mov	r4, r1
 8006750:	2101      	movs	r1, #1
 8006752:	f7ff febd 	bl	80064d0 <_Balloc>
 8006756:	4602      	mov	r2, r0
 8006758:	b928      	cbnz	r0, 8006766 <__i2b+0x1a>
 800675a:	4b05      	ldr	r3, [pc, #20]	@ (8006770 <__i2b+0x24>)
 800675c:	4805      	ldr	r0, [pc, #20]	@ (8006774 <__i2b+0x28>)
 800675e:	f240 1145 	movw	r1, #325	@ 0x145
 8006762:	f001 fe19 	bl	8008398 <__assert_func>
 8006766:	2301      	movs	r3, #1
 8006768:	6144      	str	r4, [r0, #20]
 800676a:	6103      	str	r3, [r0, #16]
 800676c:	bd10      	pop	{r4, pc}
 800676e:	bf00      	nop
 8006770:	08008f05 	.word	0x08008f05
 8006774:	08008f16 	.word	0x08008f16

08006778 <__multiply>:
 8006778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800677c:	4614      	mov	r4, r2
 800677e:	690a      	ldr	r2, [r1, #16]
 8006780:	6923      	ldr	r3, [r4, #16]
 8006782:	429a      	cmp	r2, r3
 8006784:	bfa8      	it	ge
 8006786:	4623      	movge	r3, r4
 8006788:	460f      	mov	r7, r1
 800678a:	bfa4      	itt	ge
 800678c:	460c      	movge	r4, r1
 800678e:	461f      	movge	r7, r3
 8006790:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006794:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006798:	68a3      	ldr	r3, [r4, #8]
 800679a:	6861      	ldr	r1, [r4, #4]
 800679c:	eb0a 0609 	add.w	r6, sl, r9
 80067a0:	42b3      	cmp	r3, r6
 80067a2:	b085      	sub	sp, #20
 80067a4:	bfb8      	it	lt
 80067a6:	3101      	addlt	r1, #1
 80067a8:	f7ff fe92 	bl	80064d0 <_Balloc>
 80067ac:	b930      	cbnz	r0, 80067bc <__multiply+0x44>
 80067ae:	4602      	mov	r2, r0
 80067b0:	4b44      	ldr	r3, [pc, #272]	@ (80068c4 <__multiply+0x14c>)
 80067b2:	4845      	ldr	r0, [pc, #276]	@ (80068c8 <__multiply+0x150>)
 80067b4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80067b8:	f001 fdee 	bl	8008398 <__assert_func>
 80067bc:	f100 0514 	add.w	r5, r0, #20
 80067c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80067c4:	462b      	mov	r3, r5
 80067c6:	2200      	movs	r2, #0
 80067c8:	4543      	cmp	r3, r8
 80067ca:	d321      	bcc.n	8006810 <__multiply+0x98>
 80067cc:	f107 0114 	add.w	r1, r7, #20
 80067d0:	f104 0214 	add.w	r2, r4, #20
 80067d4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80067d8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80067dc:	9302      	str	r3, [sp, #8]
 80067de:	1b13      	subs	r3, r2, r4
 80067e0:	3b15      	subs	r3, #21
 80067e2:	f023 0303 	bic.w	r3, r3, #3
 80067e6:	3304      	adds	r3, #4
 80067e8:	f104 0715 	add.w	r7, r4, #21
 80067ec:	42ba      	cmp	r2, r7
 80067ee:	bf38      	it	cc
 80067f0:	2304      	movcc	r3, #4
 80067f2:	9301      	str	r3, [sp, #4]
 80067f4:	9b02      	ldr	r3, [sp, #8]
 80067f6:	9103      	str	r1, [sp, #12]
 80067f8:	428b      	cmp	r3, r1
 80067fa:	d80c      	bhi.n	8006816 <__multiply+0x9e>
 80067fc:	2e00      	cmp	r6, #0
 80067fe:	dd03      	ble.n	8006808 <__multiply+0x90>
 8006800:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006804:	2b00      	cmp	r3, #0
 8006806:	d05b      	beq.n	80068c0 <__multiply+0x148>
 8006808:	6106      	str	r6, [r0, #16]
 800680a:	b005      	add	sp, #20
 800680c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006810:	f843 2b04 	str.w	r2, [r3], #4
 8006814:	e7d8      	b.n	80067c8 <__multiply+0x50>
 8006816:	f8b1 a000 	ldrh.w	sl, [r1]
 800681a:	f1ba 0f00 	cmp.w	sl, #0
 800681e:	d024      	beq.n	800686a <__multiply+0xf2>
 8006820:	f104 0e14 	add.w	lr, r4, #20
 8006824:	46a9      	mov	r9, r5
 8006826:	f04f 0c00 	mov.w	ip, #0
 800682a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800682e:	f8d9 3000 	ldr.w	r3, [r9]
 8006832:	fa1f fb87 	uxth.w	fp, r7
 8006836:	b29b      	uxth	r3, r3
 8006838:	fb0a 330b 	mla	r3, sl, fp, r3
 800683c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006840:	f8d9 7000 	ldr.w	r7, [r9]
 8006844:	4463      	add	r3, ip
 8006846:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800684a:	fb0a c70b 	mla	r7, sl, fp, ip
 800684e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006852:	b29b      	uxth	r3, r3
 8006854:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006858:	4572      	cmp	r2, lr
 800685a:	f849 3b04 	str.w	r3, [r9], #4
 800685e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006862:	d8e2      	bhi.n	800682a <__multiply+0xb2>
 8006864:	9b01      	ldr	r3, [sp, #4]
 8006866:	f845 c003 	str.w	ip, [r5, r3]
 800686a:	9b03      	ldr	r3, [sp, #12]
 800686c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006870:	3104      	adds	r1, #4
 8006872:	f1b9 0f00 	cmp.w	r9, #0
 8006876:	d021      	beq.n	80068bc <__multiply+0x144>
 8006878:	682b      	ldr	r3, [r5, #0]
 800687a:	f104 0c14 	add.w	ip, r4, #20
 800687e:	46ae      	mov	lr, r5
 8006880:	f04f 0a00 	mov.w	sl, #0
 8006884:	f8bc b000 	ldrh.w	fp, [ip]
 8006888:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800688c:	fb09 770b 	mla	r7, r9, fp, r7
 8006890:	4457      	add	r7, sl
 8006892:	b29b      	uxth	r3, r3
 8006894:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006898:	f84e 3b04 	str.w	r3, [lr], #4
 800689c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80068a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068a4:	f8be 3000 	ldrh.w	r3, [lr]
 80068a8:	fb09 330a 	mla	r3, r9, sl, r3
 80068ac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80068b0:	4562      	cmp	r2, ip
 80068b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068b6:	d8e5      	bhi.n	8006884 <__multiply+0x10c>
 80068b8:	9f01      	ldr	r7, [sp, #4]
 80068ba:	51eb      	str	r3, [r5, r7]
 80068bc:	3504      	adds	r5, #4
 80068be:	e799      	b.n	80067f4 <__multiply+0x7c>
 80068c0:	3e01      	subs	r6, #1
 80068c2:	e79b      	b.n	80067fc <__multiply+0x84>
 80068c4:	08008f05 	.word	0x08008f05
 80068c8:	08008f16 	.word	0x08008f16

080068cc <__pow5mult>:
 80068cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068d0:	4615      	mov	r5, r2
 80068d2:	f012 0203 	ands.w	r2, r2, #3
 80068d6:	4607      	mov	r7, r0
 80068d8:	460e      	mov	r6, r1
 80068da:	d007      	beq.n	80068ec <__pow5mult+0x20>
 80068dc:	4c25      	ldr	r4, [pc, #148]	@ (8006974 <__pow5mult+0xa8>)
 80068de:	3a01      	subs	r2, #1
 80068e0:	2300      	movs	r3, #0
 80068e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068e6:	f7ff fe55 	bl	8006594 <__multadd>
 80068ea:	4606      	mov	r6, r0
 80068ec:	10ad      	asrs	r5, r5, #2
 80068ee:	d03d      	beq.n	800696c <__pow5mult+0xa0>
 80068f0:	69fc      	ldr	r4, [r7, #28]
 80068f2:	b97c      	cbnz	r4, 8006914 <__pow5mult+0x48>
 80068f4:	2010      	movs	r0, #16
 80068f6:	f7ff fd35 	bl	8006364 <malloc>
 80068fa:	4602      	mov	r2, r0
 80068fc:	61f8      	str	r0, [r7, #28]
 80068fe:	b928      	cbnz	r0, 800690c <__pow5mult+0x40>
 8006900:	4b1d      	ldr	r3, [pc, #116]	@ (8006978 <__pow5mult+0xac>)
 8006902:	481e      	ldr	r0, [pc, #120]	@ (800697c <__pow5mult+0xb0>)
 8006904:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006908:	f001 fd46 	bl	8008398 <__assert_func>
 800690c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006910:	6004      	str	r4, [r0, #0]
 8006912:	60c4      	str	r4, [r0, #12]
 8006914:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006918:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800691c:	b94c      	cbnz	r4, 8006932 <__pow5mult+0x66>
 800691e:	f240 2171 	movw	r1, #625	@ 0x271
 8006922:	4638      	mov	r0, r7
 8006924:	f7ff ff12 	bl	800674c <__i2b>
 8006928:	2300      	movs	r3, #0
 800692a:	f8c8 0008 	str.w	r0, [r8, #8]
 800692e:	4604      	mov	r4, r0
 8006930:	6003      	str	r3, [r0, #0]
 8006932:	f04f 0900 	mov.w	r9, #0
 8006936:	07eb      	lsls	r3, r5, #31
 8006938:	d50a      	bpl.n	8006950 <__pow5mult+0x84>
 800693a:	4631      	mov	r1, r6
 800693c:	4622      	mov	r2, r4
 800693e:	4638      	mov	r0, r7
 8006940:	f7ff ff1a 	bl	8006778 <__multiply>
 8006944:	4631      	mov	r1, r6
 8006946:	4680      	mov	r8, r0
 8006948:	4638      	mov	r0, r7
 800694a:	f7ff fe01 	bl	8006550 <_Bfree>
 800694e:	4646      	mov	r6, r8
 8006950:	106d      	asrs	r5, r5, #1
 8006952:	d00b      	beq.n	800696c <__pow5mult+0xa0>
 8006954:	6820      	ldr	r0, [r4, #0]
 8006956:	b938      	cbnz	r0, 8006968 <__pow5mult+0x9c>
 8006958:	4622      	mov	r2, r4
 800695a:	4621      	mov	r1, r4
 800695c:	4638      	mov	r0, r7
 800695e:	f7ff ff0b 	bl	8006778 <__multiply>
 8006962:	6020      	str	r0, [r4, #0]
 8006964:	f8c0 9000 	str.w	r9, [r0]
 8006968:	4604      	mov	r4, r0
 800696a:	e7e4      	b.n	8006936 <__pow5mult+0x6a>
 800696c:	4630      	mov	r0, r6
 800696e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006972:	bf00      	nop
 8006974:	08008f70 	.word	0x08008f70
 8006978:	08008e96 	.word	0x08008e96
 800697c:	08008f16 	.word	0x08008f16

08006980 <__lshift>:
 8006980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006984:	460c      	mov	r4, r1
 8006986:	6849      	ldr	r1, [r1, #4]
 8006988:	6923      	ldr	r3, [r4, #16]
 800698a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800698e:	68a3      	ldr	r3, [r4, #8]
 8006990:	4607      	mov	r7, r0
 8006992:	4691      	mov	r9, r2
 8006994:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006998:	f108 0601 	add.w	r6, r8, #1
 800699c:	42b3      	cmp	r3, r6
 800699e:	db0b      	blt.n	80069b8 <__lshift+0x38>
 80069a0:	4638      	mov	r0, r7
 80069a2:	f7ff fd95 	bl	80064d0 <_Balloc>
 80069a6:	4605      	mov	r5, r0
 80069a8:	b948      	cbnz	r0, 80069be <__lshift+0x3e>
 80069aa:	4602      	mov	r2, r0
 80069ac:	4b28      	ldr	r3, [pc, #160]	@ (8006a50 <__lshift+0xd0>)
 80069ae:	4829      	ldr	r0, [pc, #164]	@ (8006a54 <__lshift+0xd4>)
 80069b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80069b4:	f001 fcf0 	bl	8008398 <__assert_func>
 80069b8:	3101      	adds	r1, #1
 80069ba:	005b      	lsls	r3, r3, #1
 80069bc:	e7ee      	b.n	800699c <__lshift+0x1c>
 80069be:	2300      	movs	r3, #0
 80069c0:	f100 0114 	add.w	r1, r0, #20
 80069c4:	f100 0210 	add.w	r2, r0, #16
 80069c8:	4618      	mov	r0, r3
 80069ca:	4553      	cmp	r3, sl
 80069cc:	db33      	blt.n	8006a36 <__lshift+0xb6>
 80069ce:	6920      	ldr	r0, [r4, #16]
 80069d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069d4:	f104 0314 	add.w	r3, r4, #20
 80069d8:	f019 091f 	ands.w	r9, r9, #31
 80069dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80069e4:	d02b      	beq.n	8006a3e <__lshift+0xbe>
 80069e6:	f1c9 0e20 	rsb	lr, r9, #32
 80069ea:	468a      	mov	sl, r1
 80069ec:	2200      	movs	r2, #0
 80069ee:	6818      	ldr	r0, [r3, #0]
 80069f0:	fa00 f009 	lsl.w	r0, r0, r9
 80069f4:	4310      	orrs	r0, r2
 80069f6:	f84a 0b04 	str.w	r0, [sl], #4
 80069fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80069fe:	459c      	cmp	ip, r3
 8006a00:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a04:	d8f3      	bhi.n	80069ee <__lshift+0x6e>
 8006a06:	ebac 0304 	sub.w	r3, ip, r4
 8006a0a:	3b15      	subs	r3, #21
 8006a0c:	f023 0303 	bic.w	r3, r3, #3
 8006a10:	3304      	adds	r3, #4
 8006a12:	f104 0015 	add.w	r0, r4, #21
 8006a16:	4584      	cmp	ip, r0
 8006a18:	bf38      	it	cc
 8006a1a:	2304      	movcc	r3, #4
 8006a1c:	50ca      	str	r2, [r1, r3]
 8006a1e:	b10a      	cbz	r2, 8006a24 <__lshift+0xa4>
 8006a20:	f108 0602 	add.w	r6, r8, #2
 8006a24:	3e01      	subs	r6, #1
 8006a26:	4638      	mov	r0, r7
 8006a28:	612e      	str	r6, [r5, #16]
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	f7ff fd90 	bl	8006550 <_Bfree>
 8006a30:	4628      	mov	r0, r5
 8006a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a36:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	e7c5      	b.n	80069ca <__lshift+0x4a>
 8006a3e:	3904      	subs	r1, #4
 8006a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a44:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a48:	459c      	cmp	ip, r3
 8006a4a:	d8f9      	bhi.n	8006a40 <__lshift+0xc0>
 8006a4c:	e7ea      	b.n	8006a24 <__lshift+0xa4>
 8006a4e:	bf00      	nop
 8006a50:	08008f05 	.word	0x08008f05
 8006a54:	08008f16 	.word	0x08008f16

08006a58 <__mcmp>:
 8006a58:	690a      	ldr	r2, [r1, #16]
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	6900      	ldr	r0, [r0, #16]
 8006a5e:	1a80      	subs	r0, r0, r2
 8006a60:	b530      	push	{r4, r5, lr}
 8006a62:	d10e      	bne.n	8006a82 <__mcmp+0x2a>
 8006a64:	3314      	adds	r3, #20
 8006a66:	3114      	adds	r1, #20
 8006a68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a78:	4295      	cmp	r5, r2
 8006a7a:	d003      	beq.n	8006a84 <__mcmp+0x2c>
 8006a7c:	d205      	bcs.n	8006a8a <__mcmp+0x32>
 8006a7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a82:	bd30      	pop	{r4, r5, pc}
 8006a84:	42a3      	cmp	r3, r4
 8006a86:	d3f3      	bcc.n	8006a70 <__mcmp+0x18>
 8006a88:	e7fb      	b.n	8006a82 <__mcmp+0x2a>
 8006a8a:	2001      	movs	r0, #1
 8006a8c:	e7f9      	b.n	8006a82 <__mcmp+0x2a>
	...

08006a90 <__mdiff>:
 8006a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a94:	4689      	mov	r9, r1
 8006a96:	4606      	mov	r6, r0
 8006a98:	4611      	mov	r1, r2
 8006a9a:	4648      	mov	r0, r9
 8006a9c:	4614      	mov	r4, r2
 8006a9e:	f7ff ffdb 	bl	8006a58 <__mcmp>
 8006aa2:	1e05      	subs	r5, r0, #0
 8006aa4:	d112      	bne.n	8006acc <__mdiff+0x3c>
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	f7ff fd11 	bl	80064d0 <_Balloc>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	b928      	cbnz	r0, 8006abe <__mdiff+0x2e>
 8006ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8006bb0 <__mdiff+0x120>)
 8006ab4:	f240 2137 	movw	r1, #567	@ 0x237
 8006ab8:	483e      	ldr	r0, [pc, #248]	@ (8006bb4 <__mdiff+0x124>)
 8006aba:	f001 fc6d 	bl	8008398 <__assert_func>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	b003      	add	sp, #12
 8006ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006acc:	bfbc      	itt	lt
 8006ace:	464b      	movlt	r3, r9
 8006ad0:	46a1      	movlt	r9, r4
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006ad8:	bfba      	itte	lt
 8006ada:	461c      	movlt	r4, r3
 8006adc:	2501      	movlt	r5, #1
 8006ade:	2500      	movge	r5, #0
 8006ae0:	f7ff fcf6 	bl	80064d0 <_Balloc>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	b918      	cbnz	r0, 8006af0 <__mdiff+0x60>
 8006ae8:	4b31      	ldr	r3, [pc, #196]	@ (8006bb0 <__mdiff+0x120>)
 8006aea:	f240 2145 	movw	r1, #581	@ 0x245
 8006aee:	e7e3      	b.n	8006ab8 <__mdiff+0x28>
 8006af0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006af4:	6926      	ldr	r6, [r4, #16]
 8006af6:	60c5      	str	r5, [r0, #12]
 8006af8:	f109 0310 	add.w	r3, r9, #16
 8006afc:	f109 0514 	add.w	r5, r9, #20
 8006b00:	f104 0e14 	add.w	lr, r4, #20
 8006b04:	f100 0b14 	add.w	fp, r0, #20
 8006b08:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006b0c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006b10:	9301      	str	r3, [sp, #4]
 8006b12:	46d9      	mov	r9, fp
 8006b14:	f04f 0c00 	mov.w	ip, #0
 8006b18:	9b01      	ldr	r3, [sp, #4]
 8006b1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006b1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006b22:	9301      	str	r3, [sp, #4]
 8006b24:	fa1f f38a 	uxth.w	r3, sl
 8006b28:	4619      	mov	r1, r3
 8006b2a:	b283      	uxth	r3, r0
 8006b2c:	1acb      	subs	r3, r1, r3
 8006b2e:	0c00      	lsrs	r0, r0, #16
 8006b30:	4463      	add	r3, ip
 8006b32:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006b36:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006b40:	4576      	cmp	r6, lr
 8006b42:	f849 3b04 	str.w	r3, [r9], #4
 8006b46:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b4a:	d8e5      	bhi.n	8006b18 <__mdiff+0x88>
 8006b4c:	1b33      	subs	r3, r6, r4
 8006b4e:	3b15      	subs	r3, #21
 8006b50:	f023 0303 	bic.w	r3, r3, #3
 8006b54:	3415      	adds	r4, #21
 8006b56:	3304      	adds	r3, #4
 8006b58:	42a6      	cmp	r6, r4
 8006b5a:	bf38      	it	cc
 8006b5c:	2304      	movcc	r3, #4
 8006b5e:	441d      	add	r5, r3
 8006b60:	445b      	add	r3, fp
 8006b62:	461e      	mov	r6, r3
 8006b64:	462c      	mov	r4, r5
 8006b66:	4544      	cmp	r4, r8
 8006b68:	d30e      	bcc.n	8006b88 <__mdiff+0xf8>
 8006b6a:	f108 0103 	add.w	r1, r8, #3
 8006b6e:	1b49      	subs	r1, r1, r5
 8006b70:	f021 0103 	bic.w	r1, r1, #3
 8006b74:	3d03      	subs	r5, #3
 8006b76:	45a8      	cmp	r8, r5
 8006b78:	bf38      	it	cc
 8006b7a:	2100      	movcc	r1, #0
 8006b7c:	440b      	add	r3, r1
 8006b7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b82:	b191      	cbz	r1, 8006baa <__mdiff+0x11a>
 8006b84:	6117      	str	r7, [r2, #16]
 8006b86:	e79d      	b.n	8006ac4 <__mdiff+0x34>
 8006b88:	f854 1b04 	ldr.w	r1, [r4], #4
 8006b8c:	46e6      	mov	lr, ip
 8006b8e:	0c08      	lsrs	r0, r1, #16
 8006b90:	fa1c fc81 	uxtah	ip, ip, r1
 8006b94:	4471      	add	r1, lr
 8006b96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006b9a:	b289      	uxth	r1, r1
 8006b9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ba0:	f846 1b04 	str.w	r1, [r6], #4
 8006ba4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ba8:	e7dd      	b.n	8006b66 <__mdiff+0xd6>
 8006baa:	3f01      	subs	r7, #1
 8006bac:	e7e7      	b.n	8006b7e <__mdiff+0xee>
 8006bae:	bf00      	nop
 8006bb0:	08008f05 	.word	0x08008f05
 8006bb4:	08008f16 	.word	0x08008f16

08006bb8 <__ulp>:
 8006bb8:	b082      	sub	sp, #8
 8006bba:	ed8d 0b00 	vstr	d0, [sp]
 8006bbe:	9a01      	ldr	r2, [sp, #4]
 8006bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8006c00 <__ulp+0x48>)
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	dc08      	bgt.n	8006bde <__ulp+0x26>
 8006bcc:	425b      	negs	r3, r3
 8006bce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006bd2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006bd6:	da04      	bge.n	8006be2 <__ulp+0x2a>
 8006bd8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006bdc:	4113      	asrs	r3, r2
 8006bde:	2200      	movs	r2, #0
 8006be0:	e008      	b.n	8006bf4 <__ulp+0x3c>
 8006be2:	f1a2 0314 	sub.w	r3, r2, #20
 8006be6:	2b1e      	cmp	r3, #30
 8006be8:	bfda      	itte	le
 8006bea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006bee:	40da      	lsrle	r2, r3
 8006bf0:	2201      	movgt	r2, #1
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	4610      	mov	r0, r2
 8006bf8:	ec41 0b10 	vmov	d0, r0, r1
 8006bfc:	b002      	add	sp, #8
 8006bfe:	4770      	bx	lr
 8006c00:	7ff00000 	.word	0x7ff00000

08006c04 <__b2d>:
 8006c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c08:	6906      	ldr	r6, [r0, #16]
 8006c0a:	f100 0814 	add.w	r8, r0, #20
 8006c0e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006c12:	1f37      	subs	r7, r6, #4
 8006c14:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006c18:	4610      	mov	r0, r2
 8006c1a:	f7ff fd4b 	bl	80066b4 <__hi0bits>
 8006c1e:	f1c0 0320 	rsb	r3, r0, #32
 8006c22:	280a      	cmp	r0, #10
 8006c24:	600b      	str	r3, [r1, #0]
 8006c26:	491b      	ldr	r1, [pc, #108]	@ (8006c94 <__b2d+0x90>)
 8006c28:	dc15      	bgt.n	8006c56 <__b2d+0x52>
 8006c2a:	f1c0 0c0b 	rsb	ip, r0, #11
 8006c2e:	fa22 f30c 	lsr.w	r3, r2, ip
 8006c32:	45b8      	cmp	r8, r7
 8006c34:	ea43 0501 	orr.w	r5, r3, r1
 8006c38:	bf34      	ite	cc
 8006c3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006c3e:	2300      	movcs	r3, #0
 8006c40:	3015      	adds	r0, #21
 8006c42:	fa02 f000 	lsl.w	r0, r2, r0
 8006c46:	fa23 f30c 	lsr.w	r3, r3, ip
 8006c4a:	4303      	orrs	r3, r0
 8006c4c:	461c      	mov	r4, r3
 8006c4e:	ec45 4b10 	vmov	d0, r4, r5
 8006c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c56:	45b8      	cmp	r8, r7
 8006c58:	bf3a      	itte	cc
 8006c5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006c5e:	f1a6 0708 	subcc.w	r7, r6, #8
 8006c62:	2300      	movcs	r3, #0
 8006c64:	380b      	subs	r0, #11
 8006c66:	d012      	beq.n	8006c8e <__b2d+0x8a>
 8006c68:	f1c0 0120 	rsb	r1, r0, #32
 8006c6c:	fa23 f401 	lsr.w	r4, r3, r1
 8006c70:	4082      	lsls	r2, r0
 8006c72:	4322      	orrs	r2, r4
 8006c74:	4547      	cmp	r7, r8
 8006c76:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006c7a:	bf8c      	ite	hi
 8006c7c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006c80:	2200      	movls	r2, #0
 8006c82:	4083      	lsls	r3, r0
 8006c84:	40ca      	lsrs	r2, r1
 8006c86:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	e7de      	b.n	8006c4c <__b2d+0x48>
 8006c8e:	ea42 0501 	orr.w	r5, r2, r1
 8006c92:	e7db      	b.n	8006c4c <__b2d+0x48>
 8006c94:	3ff00000 	.word	0x3ff00000

08006c98 <__d2b>:
 8006c98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c9c:	460f      	mov	r7, r1
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	ec59 8b10 	vmov	r8, r9, d0
 8006ca4:	4616      	mov	r6, r2
 8006ca6:	f7ff fc13 	bl	80064d0 <_Balloc>
 8006caa:	4604      	mov	r4, r0
 8006cac:	b930      	cbnz	r0, 8006cbc <__d2b+0x24>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	4b23      	ldr	r3, [pc, #140]	@ (8006d40 <__d2b+0xa8>)
 8006cb2:	4824      	ldr	r0, [pc, #144]	@ (8006d44 <__d2b+0xac>)
 8006cb4:	f240 310f 	movw	r1, #783	@ 0x30f
 8006cb8:	f001 fb6e 	bl	8008398 <__assert_func>
 8006cbc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006cc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006cc4:	b10d      	cbz	r5, 8006cca <__d2b+0x32>
 8006cc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cca:	9301      	str	r3, [sp, #4]
 8006ccc:	f1b8 0300 	subs.w	r3, r8, #0
 8006cd0:	d023      	beq.n	8006d1a <__d2b+0x82>
 8006cd2:	4668      	mov	r0, sp
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	f7ff fd0c 	bl	80066f2 <__lo0bits>
 8006cda:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006cde:	b1d0      	cbz	r0, 8006d16 <__d2b+0x7e>
 8006ce0:	f1c0 0320 	rsb	r3, r0, #32
 8006ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce8:	430b      	orrs	r3, r1
 8006cea:	40c2      	lsrs	r2, r0
 8006cec:	6163      	str	r3, [r4, #20]
 8006cee:	9201      	str	r2, [sp, #4]
 8006cf0:	9b01      	ldr	r3, [sp, #4]
 8006cf2:	61a3      	str	r3, [r4, #24]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	bf0c      	ite	eq
 8006cf8:	2201      	moveq	r2, #1
 8006cfa:	2202      	movne	r2, #2
 8006cfc:	6122      	str	r2, [r4, #16]
 8006cfe:	b1a5      	cbz	r5, 8006d2a <__d2b+0x92>
 8006d00:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006d04:	4405      	add	r5, r0
 8006d06:	603d      	str	r5, [r7, #0]
 8006d08:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006d0c:	6030      	str	r0, [r6, #0]
 8006d0e:	4620      	mov	r0, r4
 8006d10:	b003      	add	sp, #12
 8006d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d16:	6161      	str	r1, [r4, #20]
 8006d18:	e7ea      	b.n	8006cf0 <__d2b+0x58>
 8006d1a:	a801      	add	r0, sp, #4
 8006d1c:	f7ff fce9 	bl	80066f2 <__lo0bits>
 8006d20:	9b01      	ldr	r3, [sp, #4]
 8006d22:	6163      	str	r3, [r4, #20]
 8006d24:	3020      	adds	r0, #32
 8006d26:	2201      	movs	r2, #1
 8006d28:	e7e8      	b.n	8006cfc <__d2b+0x64>
 8006d2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006d2e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006d32:	6038      	str	r0, [r7, #0]
 8006d34:	6918      	ldr	r0, [r3, #16]
 8006d36:	f7ff fcbd 	bl	80066b4 <__hi0bits>
 8006d3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006d3e:	e7e5      	b.n	8006d0c <__d2b+0x74>
 8006d40:	08008f05 	.word	0x08008f05
 8006d44:	08008f16 	.word	0x08008f16

08006d48 <__ratio>:
 8006d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4c:	b085      	sub	sp, #20
 8006d4e:	e9cd 1000 	strd	r1, r0, [sp]
 8006d52:	a902      	add	r1, sp, #8
 8006d54:	f7ff ff56 	bl	8006c04 <__b2d>
 8006d58:	9800      	ldr	r0, [sp, #0]
 8006d5a:	a903      	add	r1, sp, #12
 8006d5c:	ec55 4b10 	vmov	r4, r5, d0
 8006d60:	f7ff ff50 	bl	8006c04 <__b2d>
 8006d64:	9b01      	ldr	r3, [sp, #4]
 8006d66:	6919      	ldr	r1, [r3, #16]
 8006d68:	9b00      	ldr	r3, [sp, #0]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	1ac9      	subs	r1, r1, r3
 8006d6e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006d72:	1a9b      	subs	r3, r3, r2
 8006d74:	ec5b ab10 	vmov	sl, fp, d0
 8006d78:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	bfce      	itee	gt
 8006d80:	462a      	movgt	r2, r5
 8006d82:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006d86:	465a      	movle	r2, fp
 8006d88:	462f      	mov	r7, r5
 8006d8a:	46d9      	mov	r9, fp
 8006d8c:	bfcc      	ite	gt
 8006d8e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006d92:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006d96:	464b      	mov	r3, r9
 8006d98:	4652      	mov	r2, sl
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	4639      	mov	r1, r7
 8006d9e:	f7f9 fd5d 	bl	800085c <__aeabi_ddiv>
 8006da2:	ec41 0b10 	vmov	d0, r0, r1
 8006da6:	b005      	add	sp, #20
 8006da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006dac <__copybits>:
 8006dac:	3901      	subs	r1, #1
 8006dae:	b570      	push	{r4, r5, r6, lr}
 8006db0:	1149      	asrs	r1, r1, #5
 8006db2:	6914      	ldr	r4, [r2, #16]
 8006db4:	3101      	adds	r1, #1
 8006db6:	f102 0314 	add.w	r3, r2, #20
 8006dba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006dbe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006dc2:	1f05      	subs	r5, r0, #4
 8006dc4:	42a3      	cmp	r3, r4
 8006dc6:	d30c      	bcc.n	8006de2 <__copybits+0x36>
 8006dc8:	1aa3      	subs	r3, r4, r2
 8006dca:	3b11      	subs	r3, #17
 8006dcc:	f023 0303 	bic.w	r3, r3, #3
 8006dd0:	3211      	adds	r2, #17
 8006dd2:	42a2      	cmp	r2, r4
 8006dd4:	bf88      	it	hi
 8006dd6:	2300      	movhi	r3, #0
 8006dd8:	4418      	add	r0, r3
 8006dda:	2300      	movs	r3, #0
 8006ddc:	4288      	cmp	r0, r1
 8006dde:	d305      	bcc.n	8006dec <__copybits+0x40>
 8006de0:	bd70      	pop	{r4, r5, r6, pc}
 8006de2:	f853 6b04 	ldr.w	r6, [r3], #4
 8006de6:	f845 6f04 	str.w	r6, [r5, #4]!
 8006dea:	e7eb      	b.n	8006dc4 <__copybits+0x18>
 8006dec:	f840 3b04 	str.w	r3, [r0], #4
 8006df0:	e7f4      	b.n	8006ddc <__copybits+0x30>

08006df2 <__any_on>:
 8006df2:	f100 0214 	add.w	r2, r0, #20
 8006df6:	6900      	ldr	r0, [r0, #16]
 8006df8:	114b      	asrs	r3, r1, #5
 8006dfa:	4298      	cmp	r0, r3
 8006dfc:	b510      	push	{r4, lr}
 8006dfe:	db11      	blt.n	8006e24 <__any_on+0x32>
 8006e00:	dd0a      	ble.n	8006e18 <__any_on+0x26>
 8006e02:	f011 011f 	ands.w	r1, r1, #31
 8006e06:	d007      	beq.n	8006e18 <__any_on+0x26>
 8006e08:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006e0c:	fa24 f001 	lsr.w	r0, r4, r1
 8006e10:	fa00 f101 	lsl.w	r1, r0, r1
 8006e14:	428c      	cmp	r4, r1
 8006e16:	d10b      	bne.n	8006e30 <__any_on+0x3e>
 8006e18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d803      	bhi.n	8006e28 <__any_on+0x36>
 8006e20:	2000      	movs	r0, #0
 8006e22:	bd10      	pop	{r4, pc}
 8006e24:	4603      	mov	r3, r0
 8006e26:	e7f7      	b.n	8006e18 <__any_on+0x26>
 8006e28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e2c:	2900      	cmp	r1, #0
 8006e2e:	d0f5      	beq.n	8006e1c <__any_on+0x2a>
 8006e30:	2001      	movs	r0, #1
 8006e32:	e7f6      	b.n	8006e22 <__any_on+0x30>

08006e34 <sulp>:
 8006e34:	b570      	push	{r4, r5, r6, lr}
 8006e36:	4604      	mov	r4, r0
 8006e38:	460d      	mov	r5, r1
 8006e3a:	ec45 4b10 	vmov	d0, r4, r5
 8006e3e:	4616      	mov	r6, r2
 8006e40:	f7ff feba 	bl	8006bb8 <__ulp>
 8006e44:	ec51 0b10 	vmov	r0, r1, d0
 8006e48:	b17e      	cbz	r6, 8006e6a <sulp+0x36>
 8006e4a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006e4e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	dd09      	ble.n	8006e6a <sulp+0x36>
 8006e56:	051b      	lsls	r3, r3, #20
 8006e58:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006e5c:	2400      	movs	r4, #0
 8006e5e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006e62:	4622      	mov	r2, r4
 8006e64:	462b      	mov	r3, r5
 8006e66:	f7f9 fbcf 	bl	8000608 <__aeabi_dmul>
 8006e6a:	ec41 0b10 	vmov	d0, r0, r1
 8006e6e:	bd70      	pop	{r4, r5, r6, pc}

08006e70 <_strtod_l>:
 8006e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e74:	b09f      	sub	sp, #124	@ 0x7c
 8006e76:	460c      	mov	r4, r1
 8006e78:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	921a      	str	r2, [sp, #104]	@ 0x68
 8006e7e:	9005      	str	r0, [sp, #20]
 8006e80:	f04f 0a00 	mov.w	sl, #0
 8006e84:	f04f 0b00 	mov.w	fp, #0
 8006e88:	460a      	mov	r2, r1
 8006e8a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e8c:	7811      	ldrb	r1, [r2, #0]
 8006e8e:	292b      	cmp	r1, #43	@ 0x2b
 8006e90:	d04a      	beq.n	8006f28 <_strtod_l+0xb8>
 8006e92:	d838      	bhi.n	8006f06 <_strtod_l+0x96>
 8006e94:	290d      	cmp	r1, #13
 8006e96:	d832      	bhi.n	8006efe <_strtod_l+0x8e>
 8006e98:	2908      	cmp	r1, #8
 8006e9a:	d832      	bhi.n	8006f02 <_strtod_l+0x92>
 8006e9c:	2900      	cmp	r1, #0
 8006e9e:	d03b      	beq.n	8006f18 <_strtod_l+0xa8>
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006ea4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006ea6:	782a      	ldrb	r2, [r5, #0]
 8006ea8:	2a30      	cmp	r2, #48	@ 0x30
 8006eaa:	f040 80b3 	bne.w	8007014 <_strtod_l+0x1a4>
 8006eae:	786a      	ldrb	r2, [r5, #1]
 8006eb0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006eb4:	2a58      	cmp	r2, #88	@ 0x58
 8006eb6:	d16e      	bne.n	8006f96 <_strtod_l+0x126>
 8006eb8:	9302      	str	r3, [sp, #8]
 8006eba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ebc:	9301      	str	r3, [sp, #4]
 8006ebe:	ab1a      	add	r3, sp, #104	@ 0x68
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	4a8e      	ldr	r2, [pc, #568]	@ (80070fc <_strtod_l+0x28c>)
 8006ec4:	9805      	ldr	r0, [sp, #20]
 8006ec6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006ec8:	a919      	add	r1, sp, #100	@ 0x64
 8006eca:	f001 faff 	bl	80084cc <__gethex>
 8006ece:	f010 060f 	ands.w	r6, r0, #15
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	d005      	beq.n	8006ee2 <_strtod_l+0x72>
 8006ed6:	2e06      	cmp	r6, #6
 8006ed8:	d128      	bne.n	8006f2c <_strtod_l+0xbc>
 8006eda:	3501      	adds	r5, #1
 8006edc:	2300      	movs	r3, #0
 8006ede:	9519      	str	r5, [sp, #100]	@ 0x64
 8006ee0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ee2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f040 858e 	bne.w	8007a06 <_strtod_l+0xb96>
 8006eea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006eec:	b1cb      	cbz	r3, 8006f22 <_strtod_l+0xb2>
 8006eee:	4652      	mov	r2, sl
 8006ef0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006ef4:	ec43 2b10 	vmov	d0, r2, r3
 8006ef8:	b01f      	add	sp, #124	@ 0x7c
 8006efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006efe:	2920      	cmp	r1, #32
 8006f00:	d1ce      	bne.n	8006ea0 <_strtod_l+0x30>
 8006f02:	3201      	adds	r2, #1
 8006f04:	e7c1      	b.n	8006e8a <_strtod_l+0x1a>
 8006f06:	292d      	cmp	r1, #45	@ 0x2d
 8006f08:	d1ca      	bne.n	8006ea0 <_strtod_l+0x30>
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006f0e:	1c51      	adds	r1, r2, #1
 8006f10:	9119      	str	r1, [sp, #100]	@ 0x64
 8006f12:	7852      	ldrb	r2, [r2, #1]
 8006f14:	2a00      	cmp	r2, #0
 8006f16:	d1c5      	bne.n	8006ea4 <_strtod_l+0x34>
 8006f18:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006f1a:	9419      	str	r4, [sp, #100]	@ 0x64
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f040 8570 	bne.w	8007a02 <_strtod_l+0xb92>
 8006f22:	4652      	mov	r2, sl
 8006f24:	465b      	mov	r3, fp
 8006f26:	e7e5      	b.n	8006ef4 <_strtod_l+0x84>
 8006f28:	2100      	movs	r1, #0
 8006f2a:	e7ef      	b.n	8006f0c <_strtod_l+0x9c>
 8006f2c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006f2e:	b13a      	cbz	r2, 8006f40 <_strtod_l+0xd0>
 8006f30:	2135      	movs	r1, #53	@ 0x35
 8006f32:	a81c      	add	r0, sp, #112	@ 0x70
 8006f34:	f7ff ff3a 	bl	8006dac <__copybits>
 8006f38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f3a:	9805      	ldr	r0, [sp, #20]
 8006f3c:	f7ff fb08 	bl	8006550 <_Bfree>
 8006f40:	3e01      	subs	r6, #1
 8006f42:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006f44:	2e04      	cmp	r6, #4
 8006f46:	d806      	bhi.n	8006f56 <_strtod_l+0xe6>
 8006f48:	e8df f006 	tbb	[pc, r6]
 8006f4c:	201d0314 	.word	0x201d0314
 8006f50:	14          	.byte	0x14
 8006f51:	00          	.byte	0x00
 8006f52:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006f56:	05e1      	lsls	r1, r4, #23
 8006f58:	bf48      	it	mi
 8006f5a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006f5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f62:	0d1b      	lsrs	r3, r3, #20
 8006f64:	051b      	lsls	r3, r3, #20
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1bb      	bne.n	8006ee2 <_strtod_l+0x72>
 8006f6a:	f7fe fb31 	bl	80055d0 <__errno>
 8006f6e:	2322      	movs	r3, #34	@ 0x22
 8006f70:	6003      	str	r3, [r0, #0]
 8006f72:	e7b6      	b.n	8006ee2 <_strtod_l+0x72>
 8006f74:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006f78:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006f7c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f80:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006f84:	e7e7      	b.n	8006f56 <_strtod_l+0xe6>
 8006f86:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007104 <_strtod_l+0x294>
 8006f8a:	e7e4      	b.n	8006f56 <_strtod_l+0xe6>
 8006f8c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006f90:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006f94:	e7df      	b.n	8006f56 <_strtod_l+0xe6>
 8006f96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f98:	1c5a      	adds	r2, r3, #1
 8006f9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f9c:	785b      	ldrb	r3, [r3, #1]
 8006f9e:	2b30      	cmp	r3, #48	@ 0x30
 8006fa0:	d0f9      	beq.n	8006f96 <_strtod_l+0x126>
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d09d      	beq.n	8006ee2 <_strtod_l+0x72>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006faa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006fac:	930c      	str	r3, [sp, #48]	@ 0x30
 8006fae:	2300      	movs	r3, #0
 8006fb0:	9308      	str	r3, [sp, #32]
 8006fb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fb4:	461f      	mov	r7, r3
 8006fb6:	220a      	movs	r2, #10
 8006fb8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006fba:	7805      	ldrb	r5, [r0, #0]
 8006fbc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006fc0:	b2d9      	uxtb	r1, r3
 8006fc2:	2909      	cmp	r1, #9
 8006fc4:	d928      	bls.n	8007018 <_strtod_l+0x1a8>
 8006fc6:	494e      	ldr	r1, [pc, #312]	@ (8007100 <_strtod_l+0x290>)
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f001 f9ab 	bl	8008324 <strncmp>
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	d032      	beq.n	8007038 <_strtod_l+0x1c8>
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	462a      	mov	r2, r5
 8006fd6:	4681      	mov	r9, r0
 8006fd8:	463d      	mov	r5, r7
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2a65      	cmp	r2, #101	@ 0x65
 8006fde:	d001      	beq.n	8006fe4 <_strtod_l+0x174>
 8006fe0:	2a45      	cmp	r2, #69	@ 0x45
 8006fe2:	d114      	bne.n	800700e <_strtod_l+0x19e>
 8006fe4:	b91d      	cbnz	r5, 8006fee <_strtod_l+0x17e>
 8006fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fe8:	4302      	orrs	r2, r0
 8006fea:	d095      	beq.n	8006f18 <_strtod_l+0xa8>
 8006fec:	2500      	movs	r5, #0
 8006fee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006ff0:	1c62      	adds	r2, r4, #1
 8006ff2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ff4:	7862      	ldrb	r2, [r4, #1]
 8006ff6:	2a2b      	cmp	r2, #43	@ 0x2b
 8006ff8:	d077      	beq.n	80070ea <_strtod_l+0x27a>
 8006ffa:	2a2d      	cmp	r2, #45	@ 0x2d
 8006ffc:	d07b      	beq.n	80070f6 <_strtod_l+0x286>
 8006ffe:	f04f 0c00 	mov.w	ip, #0
 8007002:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007006:	2909      	cmp	r1, #9
 8007008:	f240 8082 	bls.w	8007110 <_strtod_l+0x2a0>
 800700c:	9419      	str	r4, [sp, #100]	@ 0x64
 800700e:	f04f 0800 	mov.w	r8, #0
 8007012:	e0a2      	b.n	800715a <_strtod_l+0x2ea>
 8007014:	2300      	movs	r3, #0
 8007016:	e7c7      	b.n	8006fa8 <_strtod_l+0x138>
 8007018:	2f08      	cmp	r7, #8
 800701a:	bfd5      	itete	le
 800701c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800701e:	9908      	ldrgt	r1, [sp, #32]
 8007020:	fb02 3301 	mlale	r3, r2, r1, r3
 8007024:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007028:	f100 0001 	add.w	r0, r0, #1
 800702c:	bfd4      	ite	le
 800702e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007030:	9308      	strgt	r3, [sp, #32]
 8007032:	3701      	adds	r7, #1
 8007034:	9019      	str	r0, [sp, #100]	@ 0x64
 8007036:	e7bf      	b.n	8006fb8 <_strtod_l+0x148>
 8007038:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	9219      	str	r2, [sp, #100]	@ 0x64
 800703e:	785a      	ldrb	r2, [r3, #1]
 8007040:	b37f      	cbz	r7, 80070a2 <_strtod_l+0x232>
 8007042:	4681      	mov	r9, r0
 8007044:	463d      	mov	r5, r7
 8007046:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800704a:	2b09      	cmp	r3, #9
 800704c:	d912      	bls.n	8007074 <_strtod_l+0x204>
 800704e:	2301      	movs	r3, #1
 8007050:	e7c4      	b.n	8006fdc <_strtod_l+0x16c>
 8007052:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007054:	1c5a      	adds	r2, r3, #1
 8007056:	9219      	str	r2, [sp, #100]	@ 0x64
 8007058:	785a      	ldrb	r2, [r3, #1]
 800705a:	3001      	adds	r0, #1
 800705c:	2a30      	cmp	r2, #48	@ 0x30
 800705e:	d0f8      	beq.n	8007052 <_strtod_l+0x1e2>
 8007060:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007064:	2b08      	cmp	r3, #8
 8007066:	f200 84d3 	bhi.w	8007a10 <_strtod_l+0xba0>
 800706a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800706c:	930c      	str	r3, [sp, #48]	@ 0x30
 800706e:	4681      	mov	r9, r0
 8007070:	2000      	movs	r0, #0
 8007072:	4605      	mov	r5, r0
 8007074:	3a30      	subs	r2, #48	@ 0x30
 8007076:	f100 0301 	add.w	r3, r0, #1
 800707a:	d02a      	beq.n	80070d2 <_strtod_l+0x262>
 800707c:	4499      	add	r9, r3
 800707e:	eb00 0c05 	add.w	ip, r0, r5
 8007082:	462b      	mov	r3, r5
 8007084:	210a      	movs	r1, #10
 8007086:	4563      	cmp	r3, ip
 8007088:	d10d      	bne.n	80070a6 <_strtod_l+0x236>
 800708a:	1c69      	adds	r1, r5, #1
 800708c:	4401      	add	r1, r0
 800708e:	4428      	add	r0, r5
 8007090:	2808      	cmp	r0, #8
 8007092:	dc16      	bgt.n	80070c2 <_strtod_l+0x252>
 8007094:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007096:	230a      	movs	r3, #10
 8007098:	fb03 2300 	mla	r3, r3, r0, r2
 800709c:	930a      	str	r3, [sp, #40]	@ 0x28
 800709e:	2300      	movs	r3, #0
 80070a0:	e018      	b.n	80070d4 <_strtod_l+0x264>
 80070a2:	4638      	mov	r0, r7
 80070a4:	e7da      	b.n	800705c <_strtod_l+0x1ec>
 80070a6:	2b08      	cmp	r3, #8
 80070a8:	f103 0301 	add.w	r3, r3, #1
 80070ac:	dc03      	bgt.n	80070b6 <_strtod_l+0x246>
 80070ae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80070b0:	434e      	muls	r6, r1
 80070b2:	960a      	str	r6, [sp, #40]	@ 0x28
 80070b4:	e7e7      	b.n	8007086 <_strtod_l+0x216>
 80070b6:	2b10      	cmp	r3, #16
 80070b8:	bfde      	ittt	le
 80070ba:	9e08      	ldrle	r6, [sp, #32]
 80070bc:	434e      	mulle	r6, r1
 80070be:	9608      	strle	r6, [sp, #32]
 80070c0:	e7e1      	b.n	8007086 <_strtod_l+0x216>
 80070c2:	280f      	cmp	r0, #15
 80070c4:	dceb      	bgt.n	800709e <_strtod_l+0x22e>
 80070c6:	9808      	ldr	r0, [sp, #32]
 80070c8:	230a      	movs	r3, #10
 80070ca:	fb03 2300 	mla	r3, r3, r0, r2
 80070ce:	9308      	str	r3, [sp, #32]
 80070d0:	e7e5      	b.n	800709e <_strtod_l+0x22e>
 80070d2:	4629      	mov	r1, r5
 80070d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80070d6:	1c50      	adds	r0, r2, #1
 80070d8:	9019      	str	r0, [sp, #100]	@ 0x64
 80070da:	7852      	ldrb	r2, [r2, #1]
 80070dc:	4618      	mov	r0, r3
 80070de:	460d      	mov	r5, r1
 80070e0:	e7b1      	b.n	8007046 <_strtod_l+0x1d6>
 80070e2:	f04f 0900 	mov.w	r9, #0
 80070e6:	2301      	movs	r3, #1
 80070e8:	e77d      	b.n	8006fe6 <_strtod_l+0x176>
 80070ea:	f04f 0c00 	mov.w	ip, #0
 80070ee:	1ca2      	adds	r2, r4, #2
 80070f0:	9219      	str	r2, [sp, #100]	@ 0x64
 80070f2:	78a2      	ldrb	r2, [r4, #2]
 80070f4:	e785      	b.n	8007002 <_strtod_l+0x192>
 80070f6:	f04f 0c01 	mov.w	ip, #1
 80070fa:	e7f8      	b.n	80070ee <_strtod_l+0x27e>
 80070fc:	08009088 	.word	0x08009088
 8007100:	08009070 	.word	0x08009070
 8007104:	7ff00000 	.word	0x7ff00000
 8007108:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800710a:	1c51      	adds	r1, r2, #1
 800710c:	9119      	str	r1, [sp, #100]	@ 0x64
 800710e:	7852      	ldrb	r2, [r2, #1]
 8007110:	2a30      	cmp	r2, #48	@ 0x30
 8007112:	d0f9      	beq.n	8007108 <_strtod_l+0x298>
 8007114:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007118:	2908      	cmp	r1, #8
 800711a:	f63f af78 	bhi.w	800700e <_strtod_l+0x19e>
 800711e:	3a30      	subs	r2, #48	@ 0x30
 8007120:	920e      	str	r2, [sp, #56]	@ 0x38
 8007122:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007124:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007126:	f04f 080a 	mov.w	r8, #10
 800712a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800712c:	1c56      	adds	r6, r2, #1
 800712e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007130:	7852      	ldrb	r2, [r2, #1]
 8007132:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007136:	f1be 0f09 	cmp.w	lr, #9
 800713a:	d939      	bls.n	80071b0 <_strtod_l+0x340>
 800713c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800713e:	1a76      	subs	r6, r6, r1
 8007140:	2e08      	cmp	r6, #8
 8007142:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007146:	dc03      	bgt.n	8007150 <_strtod_l+0x2e0>
 8007148:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800714a:	4588      	cmp	r8, r1
 800714c:	bfa8      	it	ge
 800714e:	4688      	movge	r8, r1
 8007150:	f1bc 0f00 	cmp.w	ip, #0
 8007154:	d001      	beq.n	800715a <_strtod_l+0x2ea>
 8007156:	f1c8 0800 	rsb	r8, r8, #0
 800715a:	2d00      	cmp	r5, #0
 800715c:	d14e      	bne.n	80071fc <_strtod_l+0x38c>
 800715e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007160:	4308      	orrs	r0, r1
 8007162:	f47f aebe 	bne.w	8006ee2 <_strtod_l+0x72>
 8007166:	2b00      	cmp	r3, #0
 8007168:	f47f aed6 	bne.w	8006f18 <_strtod_l+0xa8>
 800716c:	2a69      	cmp	r2, #105	@ 0x69
 800716e:	d028      	beq.n	80071c2 <_strtod_l+0x352>
 8007170:	dc25      	bgt.n	80071be <_strtod_l+0x34e>
 8007172:	2a49      	cmp	r2, #73	@ 0x49
 8007174:	d025      	beq.n	80071c2 <_strtod_l+0x352>
 8007176:	2a4e      	cmp	r2, #78	@ 0x4e
 8007178:	f47f aece 	bne.w	8006f18 <_strtod_l+0xa8>
 800717c:	499b      	ldr	r1, [pc, #620]	@ (80073ec <_strtod_l+0x57c>)
 800717e:	a819      	add	r0, sp, #100	@ 0x64
 8007180:	f001 fbc6 	bl	8008910 <__match>
 8007184:	2800      	cmp	r0, #0
 8007186:	f43f aec7 	beq.w	8006f18 <_strtod_l+0xa8>
 800718a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	2b28      	cmp	r3, #40	@ 0x28
 8007190:	d12e      	bne.n	80071f0 <_strtod_l+0x380>
 8007192:	4997      	ldr	r1, [pc, #604]	@ (80073f0 <_strtod_l+0x580>)
 8007194:	aa1c      	add	r2, sp, #112	@ 0x70
 8007196:	a819      	add	r0, sp, #100	@ 0x64
 8007198:	f001 fbce 	bl	8008938 <__hexnan>
 800719c:	2805      	cmp	r0, #5
 800719e:	d127      	bne.n	80071f0 <_strtod_l+0x380>
 80071a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80071a2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80071a6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80071aa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80071ae:	e698      	b.n	8006ee2 <_strtod_l+0x72>
 80071b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80071b2:	fb08 2101 	mla	r1, r8, r1, r2
 80071b6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80071ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80071bc:	e7b5      	b.n	800712a <_strtod_l+0x2ba>
 80071be:	2a6e      	cmp	r2, #110	@ 0x6e
 80071c0:	e7da      	b.n	8007178 <_strtod_l+0x308>
 80071c2:	498c      	ldr	r1, [pc, #560]	@ (80073f4 <_strtod_l+0x584>)
 80071c4:	a819      	add	r0, sp, #100	@ 0x64
 80071c6:	f001 fba3 	bl	8008910 <__match>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	f43f aea4 	beq.w	8006f18 <_strtod_l+0xa8>
 80071d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071d2:	4989      	ldr	r1, [pc, #548]	@ (80073f8 <_strtod_l+0x588>)
 80071d4:	3b01      	subs	r3, #1
 80071d6:	a819      	add	r0, sp, #100	@ 0x64
 80071d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80071da:	f001 fb99 	bl	8008910 <__match>
 80071de:	b910      	cbnz	r0, 80071e6 <_strtod_l+0x376>
 80071e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071e2:	3301      	adds	r3, #1
 80071e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80071e6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007408 <_strtod_l+0x598>
 80071ea:	f04f 0a00 	mov.w	sl, #0
 80071ee:	e678      	b.n	8006ee2 <_strtod_l+0x72>
 80071f0:	4882      	ldr	r0, [pc, #520]	@ (80073fc <_strtod_l+0x58c>)
 80071f2:	f001 f8c9 	bl	8008388 <nan>
 80071f6:	ec5b ab10 	vmov	sl, fp, d0
 80071fa:	e672      	b.n	8006ee2 <_strtod_l+0x72>
 80071fc:	eba8 0309 	sub.w	r3, r8, r9
 8007200:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007202:	9309      	str	r3, [sp, #36]	@ 0x24
 8007204:	2f00      	cmp	r7, #0
 8007206:	bf08      	it	eq
 8007208:	462f      	moveq	r7, r5
 800720a:	2d10      	cmp	r5, #16
 800720c:	462c      	mov	r4, r5
 800720e:	bfa8      	it	ge
 8007210:	2410      	movge	r4, #16
 8007212:	f7f9 f97f 	bl	8000514 <__aeabi_ui2d>
 8007216:	2d09      	cmp	r5, #9
 8007218:	4682      	mov	sl, r0
 800721a:	468b      	mov	fp, r1
 800721c:	dc13      	bgt.n	8007246 <_strtod_l+0x3d6>
 800721e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007220:	2b00      	cmp	r3, #0
 8007222:	f43f ae5e 	beq.w	8006ee2 <_strtod_l+0x72>
 8007226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007228:	dd78      	ble.n	800731c <_strtod_l+0x4ac>
 800722a:	2b16      	cmp	r3, #22
 800722c:	dc5f      	bgt.n	80072ee <_strtod_l+0x47e>
 800722e:	4974      	ldr	r1, [pc, #464]	@ (8007400 <_strtod_l+0x590>)
 8007230:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007234:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007238:	4652      	mov	r2, sl
 800723a:	465b      	mov	r3, fp
 800723c:	f7f9 f9e4 	bl	8000608 <__aeabi_dmul>
 8007240:	4682      	mov	sl, r0
 8007242:	468b      	mov	fp, r1
 8007244:	e64d      	b.n	8006ee2 <_strtod_l+0x72>
 8007246:	4b6e      	ldr	r3, [pc, #440]	@ (8007400 <_strtod_l+0x590>)
 8007248:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800724c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007250:	f7f9 f9da 	bl	8000608 <__aeabi_dmul>
 8007254:	4682      	mov	sl, r0
 8007256:	9808      	ldr	r0, [sp, #32]
 8007258:	468b      	mov	fp, r1
 800725a:	f7f9 f95b 	bl	8000514 <__aeabi_ui2d>
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	4650      	mov	r0, sl
 8007264:	4659      	mov	r1, fp
 8007266:	f7f9 f819 	bl	800029c <__adddf3>
 800726a:	2d0f      	cmp	r5, #15
 800726c:	4682      	mov	sl, r0
 800726e:	468b      	mov	fp, r1
 8007270:	ddd5      	ble.n	800721e <_strtod_l+0x3ae>
 8007272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007274:	1b2c      	subs	r4, r5, r4
 8007276:	441c      	add	r4, r3
 8007278:	2c00      	cmp	r4, #0
 800727a:	f340 8096 	ble.w	80073aa <_strtod_l+0x53a>
 800727e:	f014 030f 	ands.w	r3, r4, #15
 8007282:	d00a      	beq.n	800729a <_strtod_l+0x42a>
 8007284:	495e      	ldr	r1, [pc, #376]	@ (8007400 <_strtod_l+0x590>)
 8007286:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800728a:	4652      	mov	r2, sl
 800728c:	465b      	mov	r3, fp
 800728e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007292:	f7f9 f9b9 	bl	8000608 <__aeabi_dmul>
 8007296:	4682      	mov	sl, r0
 8007298:	468b      	mov	fp, r1
 800729a:	f034 040f 	bics.w	r4, r4, #15
 800729e:	d073      	beq.n	8007388 <_strtod_l+0x518>
 80072a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80072a4:	dd48      	ble.n	8007338 <_strtod_l+0x4c8>
 80072a6:	2400      	movs	r4, #0
 80072a8:	46a0      	mov	r8, r4
 80072aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80072ac:	46a1      	mov	r9, r4
 80072ae:	9a05      	ldr	r2, [sp, #20]
 80072b0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007408 <_strtod_l+0x598>
 80072b4:	2322      	movs	r3, #34	@ 0x22
 80072b6:	6013      	str	r3, [r2, #0]
 80072b8:	f04f 0a00 	mov.w	sl, #0
 80072bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f43f ae0f 	beq.w	8006ee2 <_strtod_l+0x72>
 80072c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072c6:	9805      	ldr	r0, [sp, #20]
 80072c8:	f7ff f942 	bl	8006550 <_Bfree>
 80072cc:	9805      	ldr	r0, [sp, #20]
 80072ce:	4649      	mov	r1, r9
 80072d0:	f7ff f93e 	bl	8006550 <_Bfree>
 80072d4:	9805      	ldr	r0, [sp, #20]
 80072d6:	4641      	mov	r1, r8
 80072d8:	f7ff f93a 	bl	8006550 <_Bfree>
 80072dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80072de:	9805      	ldr	r0, [sp, #20]
 80072e0:	f7ff f936 	bl	8006550 <_Bfree>
 80072e4:	9805      	ldr	r0, [sp, #20]
 80072e6:	4621      	mov	r1, r4
 80072e8:	f7ff f932 	bl	8006550 <_Bfree>
 80072ec:	e5f9      	b.n	8006ee2 <_strtod_l+0x72>
 80072ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80072f4:	4293      	cmp	r3, r2
 80072f6:	dbbc      	blt.n	8007272 <_strtod_l+0x402>
 80072f8:	4c41      	ldr	r4, [pc, #260]	@ (8007400 <_strtod_l+0x590>)
 80072fa:	f1c5 050f 	rsb	r5, r5, #15
 80072fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007302:	4652      	mov	r2, sl
 8007304:	465b      	mov	r3, fp
 8007306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800730a:	f7f9 f97d 	bl	8000608 <__aeabi_dmul>
 800730e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007310:	1b5d      	subs	r5, r3, r5
 8007312:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007316:	e9d4 2300 	ldrd	r2, r3, [r4]
 800731a:	e78f      	b.n	800723c <_strtod_l+0x3cc>
 800731c:	3316      	adds	r3, #22
 800731e:	dba8      	blt.n	8007272 <_strtod_l+0x402>
 8007320:	4b37      	ldr	r3, [pc, #220]	@ (8007400 <_strtod_l+0x590>)
 8007322:	eba9 0808 	sub.w	r8, r9, r8
 8007326:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800732a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800732e:	4650      	mov	r0, sl
 8007330:	4659      	mov	r1, fp
 8007332:	f7f9 fa93 	bl	800085c <__aeabi_ddiv>
 8007336:	e783      	b.n	8007240 <_strtod_l+0x3d0>
 8007338:	4b32      	ldr	r3, [pc, #200]	@ (8007404 <_strtod_l+0x594>)
 800733a:	9308      	str	r3, [sp, #32]
 800733c:	2300      	movs	r3, #0
 800733e:	1124      	asrs	r4, r4, #4
 8007340:	4650      	mov	r0, sl
 8007342:	4659      	mov	r1, fp
 8007344:	461e      	mov	r6, r3
 8007346:	2c01      	cmp	r4, #1
 8007348:	dc21      	bgt.n	800738e <_strtod_l+0x51e>
 800734a:	b10b      	cbz	r3, 8007350 <_strtod_l+0x4e0>
 800734c:	4682      	mov	sl, r0
 800734e:	468b      	mov	fp, r1
 8007350:	492c      	ldr	r1, [pc, #176]	@ (8007404 <_strtod_l+0x594>)
 8007352:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007356:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800735a:	4652      	mov	r2, sl
 800735c:	465b      	mov	r3, fp
 800735e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007362:	f7f9 f951 	bl	8000608 <__aeabi_dmul>
 8007366:	4b28      	ldr	r3, [pc, #160]	@ (8007408 <_strtod_l+0x598>)
 8007368:	460a      	mov	r2, r1
 800736a:	400b      	ands	r3, r1
 800736c:	4927      	ldr	r1, [pc, #156]	@ (800740c <_strtod_l+0x59c>)
 800736e:	428b      	cmp	r3, r1
 8007370:	4682      	mov	sl, r0
 8007372:	d898      	bhi.n	80072a6 <_strtod_l+0x436>
 8007374:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007378:	428b      	cmp	r3, r1
 800737a:	bf86      	itte	hi
 800737c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007410 <_strtod_l+0x5a0>
 8007380:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8007384:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007388:	2300      	movs	r3, #0
 800738a:	9308      	str	r3, [sp, #32]
 800738c:	e07a      	b.n	8007484 <_strtod_l+0x614>
 800738e:	07e2      	lsls	r2, r4, #31
 8007390:	d505      	bpl.n	800739e <_strtod_l+0x52e>
 8007392:	9b08      	ldr	r3, [sp, #32]
 8007394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007398:	f7f9 f936 	bl	8000608 <__aeabi_dmul>
 800739c:	2301      	movs	r3, #1
 800739e:	9a08      	ldr	r2, [sp, #32]
 80073a0:	3208      	adds	r2, #8
 80073a2:	3601      	adds	r6, #1
 80073a4:	1064      	asrs	r4, r4, #1
 80073a6:	9208      	str	r2, [sp, #32]
 80073a8:	e7cd      	b.n	8007346 <_strtod_l+0x4d6>
 80073aa:	d0ed      	beq.n	8007388 <_strtod_l+0x518>
 80073ac:	4264      	negs	r4, r4
 80073ae:	f014 020f 	ands.w	r2, r4, #15
 80073b2:	d00a      	beq.n	80073ca <_strtod_l+0x55a>
 80073b4:	4b12      	ldr	r3, [pc, #72]	@ (8007400 <_strtod_l+0x590>)
 80073b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073ba:	4650      	mov	r0, sl
 80073bc:	4659      	mov	r1, fp
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	f7f9 fa4b 	bl	800085c <__aeabi_ddiv>
 80073c6:	4682      	mov	sl, r0
 80073c8:	468b      	mov	fp, r1
 80073ca:	1124      	asrs	r4, r4, #4
 80073cc:	d0dc      	beq.n	8007388 <_strtod_l+0x518>
 80073ce:	2c1f      	cmp	r4, #31
 80073d0:	dd20      	ble.n	8007414 <_strtod_l+0x5a4>
 80073d2:	2400      	movs	r4, #0
 80073d4:	46a0      	mov	r8, r4
 80073d6:	940a      	str	r4, [sp, #40]	@ 0x28
 80073d8:	46a1      	mov	r9, r4
 80073da:	9a05      	ldr	r2, [sp, #20]
 80073dc:	2322      	movs	r3, #34	@ 0x22
 80073de:	f04f 0a00 	mov.w	sl, #0
 80073e2:	f04f 0b00 	mov.w	fp, #0
 80073e6:	6013      	str	r3, [r2, #0]
 80073e8:	e768      	b.n	80072bc <_strtod_l+0x44c>
 80073ea:	bf00      	nop
 80073ec:	08008e5d 	.word	0x08008e5d
 80073f0:	08009074 	.word	0x08009074
 80073f4:	08008e55 	.word	0x08008e55
 80073f8:	08008e8c 	.word	0x08008e8c
 80073fc:	0800921d 	.word	0x0800921d
 8007400:	08008fa8 	.word	0x08008fa8
 8007404:	08008f80 	.word	0x08008f80
 8007408:	7ff00000 	.word	0x7ff00000
 800740c:	7ca00000 	.word	0x7ca00000
 8007410:	7fefffff 	.word	0x7fefffff
 8007414:	f014 0310 	ands.w	r3, r4, #16
 8007418:	bf18      	it	ne
 800741a:	236a      	movne	r3, #106	@ 0x6a
 800741c:	4ea9      	ldr	r6, [pc, #676]	@ (80076c4 <_strtod_l+0x854>)
 800741e:	9308      	str	r3, [sp, #32]
 8007420:	4650      	mov	r0, sl
 8007422:	4659      	mov	r1, fp
 8007424:	2300      	movs	r3, #0
 8007426:	07e2      	lsls	r2, r4, #31
 8007428:	d504      	bpl.n	8007434 <_strtod_l+0x5c4>
 800742a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800742e:	f7f9 f8eb 	bl	8000608 <__aeabi_dmul>
 8007432:	2301      	movs	r3, #1
 8007434:	1064      	asrs	r4, r4, #1
 8007436:	f106 0608 	add.w	r6, r6, #8
 800743a:	d1f4      	bne.n	8007426 <_strtod_l+0x5b6>
 800743c:	b10b      	cbz	r3, 8007442 <_strtod_l+0x5d2>
 800743e:	4682      	mov	sl, r0
 8007440:	468b      	mov	fp, r1
 8007442:	9b08      	ldr	r3, [sp, #32]
 8007444:	b1b3      	cbz	r3, 8007474 <_strtod_l+0x604>
 8007446:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800744a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800744e:	2b00      	cmp	r3, #0
 8007450:	4659      	mov	r1, fp
 8007452:	dd0f      	ble.n	8007474 <_strtod_l+0x604>
 8007454:	2b1f      	cmp	r3, #31
 8007456:	dd55      	ble.n	8007504 <_strtod_l+0x694>
 8007458:	2b34      	cmp	r3, #52	@ 0x34
 800745a:	bfde      	ittt	le
 800745c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007460:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007464:	4093      	lslle	r3, r2
 8007466:	f04f 0a00 	mov.w	sl, #0
 800746a:	bfcc      	ite	gt
 800746c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007470:	ea03 0b01 	andle.w	fp, r3, r1
 8007474:	2200      	movs	r2, #0
 8007476:	2300      	movs	r3, #0
 8007478:	4650      	mov	r0, sl
 800747a:	4659      	mov	r1, fp
 800747c:	f7f9 fb2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007480:	2800      	cmp	r0, #0
 8007482:	d1a6      	bne.n	80073d2 <_strtod_l+0x562>
 8007484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800748a:	9805      	ldr	r0, [sp, #20]
 800748c:	462b      	mov	r3, r5
 800748e:	463a      	mov	r2, r7
 8007490:	f7ff f8c6 	bl	8006620 <__s2b>
 8007494:	900a      	str	r0, [sp, #40]	@ 0x28
 8007496:	2800      	cmp	r0, #0
 8007498:	f43f af05 	beq.w	80072a6 <_strtod_l+0x436>
 800749c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800749e:	2a00      	cmp	r2, #0
 80074a0:	eba9 0308 	sub.w	r3, r9, r8
 80074a4:	bfa8      	it	ge
 80074a6:	2300      	movge	r3, #0
 80074a8:	9312      	str	r3, [sp, #72]	@ 0x48
 80074aa:	2400      	movs	r4, #0
 80074ac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80074b0:	9316      	str	r3, [sp, #88]	@ 0x58
 80074b2:	46a0      	mov	r8, r4
 80074b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074b6:	9805      	ldr	r0, [sp, #20]
 80074b8:	6859      	ldr	r1, [r3, #4]
 80074ba:	f7ff f809 	bl	80064d0 <_Balloc>
 80074be:	4681      	mov	r9, r0
 80074c0:	2800      	cmp	r0, #0
 80074c2:	f43f aef4 	beq.w	80072ae <_strtod_l+0x43e>
 80074c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074c8:	691a      	ldr	r2, [r3, #16]
 80074ca:	3202      	adds	r2, #2
 80074cc:	f103 010c 	add.w	r1, r3, #12
 80074d0:	0092      	lsls	r2, r2, #2
 80074d2:	300c      	adds	r0, #12
 80074d4:	f000 ff48 	bl	8008368 <memcpy>
 80074d8:	ec4b ab10 	vmov	d0, sl, fp
 80074dc:	9805      	ldr	r0, [sp, #20]
 80074de:	aa1c      	add	r2, sp, #112	@ 0x70
 80074e0:	a91b      	add	r1, sp, #108	@ 0x6c
 80074e2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80074e6:	f7ff fbd7 	bl	8006c98 <__d2b>
 80074ea:	901a      	str	r0, [sp, #104]	@ 0x68
 80074ec:	2800      	cmp	r0, #0
 80074ee:	f43f aede 	beq.w	80072ae <_strtod_l+0x43e>
 80074f2:	9805      	ldr	r0, [sp, #20]
 80074f4:	2101      	movs	r1, #1
 80074f6:	f7ff f929 	bl	800674c <__i2b>
 80074fa:	4680      	mov	r8, r0
 80074fc:	b948      	cbnz	r0, 8007512 <_strtod_l+0x6a2>
 80074fe:	f04f 0800 	mov.w	r8, #0
 8007502:	e6d4      	b.n	80072ae <_strtod_l+0x43e>
 8007504:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007508:	fa02 f303 	lsl.w	r3, r2, r3
 800750c:	ea03 0a0a 	and.w	sl, r3, sl
 8007510:	e7b0      	b.n	8007474 <_strtod_l+0x604>
 8007512:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007514:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007516:	2d00      	cmp	r5, #0
 8007518:	bfab      	itete	ge
 800751a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800751c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800751e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007520:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007522:	bfac      	ite	ge
 8007524:	18ef      	addge	r7, r5, r3
 8007526:	1b5e      	sublt	r6, r3, r5
 8007528:	9b08      	ldr	r3, [sp, #32]
 800752a:	1aed      	subs	r5, r5, r3
 800752c:	4415      	add	r5, r2
 800752e:	4b66      	ldr	r3, [pc, #408]	@ (80076c8 <_strtod_l+0x858>)
 8007530:	3d01      	subs	r5, #1
 8007532:	429d      	cmp	r5, r3
 8007534:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007538:	da50      	bge.n	80075dc <_strtod_l+0x76c>
 800753a:	1b5b      	subs	r3, r3, r5
 800753c:	2b1f      	cmp	r3, #31
 800753e:	eba2 0203 	sub.w	r2, r2, r3
 8007542:	f04f 0101 	mov.w	r1, #1
 8007546:	dc3d      	bgt.n	80075c4 <_strtod_l+0x754>
 8007548:	fa01 f303 	lsl.w	r3, r1, r3
 800754c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800754e:	2300      	movs	r3, #0
 8007550:	9310      	str	r3, [sp, #64]	@ 0x40
 8007552:	18bd      	adds	r5, r7, r2
 8007554:	9b08      	ldr	r3, [sp, #32]
 8007556:	42af      	cmp	r7, r5
 8007558:	4416      	add	r6, r2
 800755a:	441e      	add	r6, r3
 800755c:	463b      	mov	r3, r7
 800755e:	bfa8      	it	ge
 8007560:	462b      	movge	r3, r5
 8007562:	42b3      	cmp	r3, r6
 8007564:	bfa8      	it	ge
 8007566:	4633      	movge	r3, r6
 8007568:	2b00      	cmp	r3, #0
 800756a:	bfc2      	ittt	gt
 800756c:	1aed      	subgt	r5, r5, r3
 800756e:	1af6      	subgt	r6, r6, r3
 8007570:	1aff      	subgt	r7, r7, r3
 8007572:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007574:	2b00      	cmp	r3, #0
 8007576:	dd16      	ble.n	80075a6 <_strtod_l+0x736>
 8007578:	4641      	mov	r1, r8
 800757a:	9805      	ldr	r0, [sp, #20]
 800757c:	461a      	mov	r2, r3
 800757e:	f7ff f9a5 	bl	80068cc <__pow5mult>
 8007582:	4680      	mov	r8, r0
 8007584:	2800      	cmp	r0, #0
 8007586:	d0ba      	beq.n	80074fe <_strtod_l+0x68e>
 8007588:	4601      	mov	r1, r0
 800758a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800758c:	9805      	ldr	r0, [sp, #20]
 800758e:	f7ff f8f3 	bl	8006778 <__multiply>
 8007592:	900e      	str	r0, [sp, #56]	@ 0x38
 8007594:	2800      	cmp	r0, #0
 8007596:	f43f ae8a 	beq.w	80072ae <_strtod_l+0x43e>
 800759a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800759c:	9805      	ldr	r0, [sp, #20]
 800759e:	f7fe ffd7 	bl	8006550 <_Bfree>
 80075a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80075a6:	2d00      	cmp	r5, #0
 80075a8:	dc1d      	bgt.n	80075e6 <_strtod_l+0x776>
 80075aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	dd23      	ble.n	80075f8 <_strtod_l+0x788>
 80075b0:	4649      	mov	r1, r9
 80075b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80075b4:	9805      	ldr	r0, [sp, #20]
 80075b6:	f7ff f989 	bl	80068cc <__pow5mult>
 80075ba:	4681      	mov	r9, r0
 80075bc:	b9e0      	cbnz	r0, 80075f8 <_strtod_l+0x788>
 80075be:	f04f 0900 	mov.w	r9, #0
 80075c2:	e674      	b.n	80072ae <_strtod_l+0x43e>
 80075c4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80075c8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80075cc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80075d0:	35e2      	adds	r5, #226	@ 0xe2
 80075d2:	fa01 f305 	lsl.w	r3, r1, r5
 80075d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80075d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80075da:	e7ba      	b.n	8007552 <_strtod_l+0x6e2>
 80075dc:	2300      	movs	r3, #0
 80075de:	9310      	str	r3, [sp, #64]	@ 0x40
 80075e0:	2301      	movs	r3, #1
 80075e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80075e4:	e7b5      	b.n	8007552 <_strtod_l+0x6e2>
 80075e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075e8:	9805      	ldr	r0, [sp, #20]
 80075ea:	462a      	mov	r2, r5
 80075ec:	f7ff f9c8 	bl	8006980 <__lshift>
 80075f0:	901a      	str	r0, [sp, #104]	@ 0x68
 80075f2:	2800      	cmp	r0, #0
 80075f4:	d1d9      	bne.n	80075aa <_strtod_l+0x73a>
 80075f6:	e65a      	b.n	80072ae <_strtod_l+0x43e>
 80075f8:	2e00      	cmp	r6, #0
 80075fa:	dd07      	ble.n	800760c <_strtod_l+0x79c>
 80075fc:	4649      	mov	r1, r9
 80075fe:	9805      	ldr	r0, [sp, #20]
 8007600:	4632      	mov	r2, r6
 8007602:	f7ff f9bd 	bl	8006980 <__lshift>
 8007606:	4681      	mov	r9, r0
 8007608:	2800      	cmp	r0, #0
 800760a:	d0d8      	beq.n	80075be <_strtod_l+0x74e>
 800760c:	2f00      	cmp	r7, #0
 800760e:	dd08      	ble.n	8007622 <_strtod_l+0x7b2>
 8007610:	4641      	mov	r1, r8
 8007612:	9805      	ldr	r0, [sp, #20]
 8007614:	463a      	mov	r2, r7
 8007616:	f7ff f9b3 	bl	8006980 <__lshift>
 800761a:	4680      	mov	r8, r0
 800761c:	2800      	cmp	r0, #0
 800761e:	f43f ae46 	beq.w	80072ae <_strtod_l+0x43e>
 8007622:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007624:	9805      	ldr	r0, [sp, #20]
 8007626:	464a      	mov	r2, r9
 8007628:	f7ff fa32 	bl	8006a90 <__mdiff>
 800762c:	4604      	mov	r4, r0
 800762e:	2800      	cmp	r0, #0
 8007630:	f43f ae3d 	beq.w	80072ae <_strtod_l+0x43e>
 8007634:	68c3      	ldr	r3, [r0, #12]
 8007636:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007638:	2300      	movs	r3, #0
 800763a:	60c3      	str	r3, [r0, #12]
 800763c:	4641      	mov	r1, r8
 800763e:	f7ff fa0b 	bl	8006a58 <__mcmp>
 8007642:	2800      	cmp	r0, #0
 8007644:	da46      	bge.n	80076d4 <_strtod_l+0x864>
 8007646:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007648:	ea53 030a 	orrs.w	r3, r3, sl
 800764c:	d16c      	bne.n	8007728 <_strtod_l+0x8b8>
 800764e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007652:	2b00      	cmp	r3, #0
 8007654:	d168      	bne.n	8007728 <_strtod_l+0x8b8>
 8007656:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800765a:	0d1b      	lsrs	r3, r3, #20
 800765c:	051b      	lsls	r3, r3, #20
 800765e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007662:	d961      	bls.n	8007728 <_strtod_l+0x8b8>
 8007664:	6963      	ldr	r3, [r4, #20]
 8007666:	b913      	cbnz	r3, 800766e <_strtod_l+0x7fe>
 8007668:	6923      	ldr	r3, [r4, #16]
 800766a:	2b01      	cmp	r3, #1
 800766c:	dd5c      	ble.n	8007728 <_strtod_l+0x8b8>
 800766e:	4621      	mov	r1, r4
 8007670:	2201      	movs	r2, #1
 8007672:	9805      	ldr	r0, [sp, #20]
 8007674:	f7ff f984 	bl	8006980 <__lshift>
 8007678:	4641      	mov	r1, r8
 800767a:	4604      	mov	r4, r0
 800767c:	f7ff f9ec 	bl	8006a58 <__mcmp>
 8007680:	2800      	cmp	r0, #0
 8007682:	dd51      	ble.n	8007728 <_strtod_l+0x8b8>
 8007684:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007688:	9a08      	ldr	r2, [sp, #32]
 800768a:	0d1b      	lsrs	r3, r3, #20
 800768c:	051b      	lsls	r3, r3, #20
 800768e:	2a00      	cmp	r2, #0
 8007690:	d06b      	beq.n	800776a <_strtod_l+0x8fa>
 8007692:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007696:	d868      	bhi.n	800776a <_strtod_l+0x8fa>
 8007698:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800769c:	f67f ae9d 	bls.w	80073da <_strtod_l+0x56a>
 80076a0:	4b0a      	ldr	r3, [pc, #40]	@ (80076cc <_strtod_l+0x85c>)
 80076a2:	4650      	mov	r0, sl
 80076a4:	4659      	mov	r1, fp
 80076a6:	2200      	movs	r2, #0
 80076a8:	f7f8 ffae 	bl	8000608 <__aeabi_dmul>
 80076ac:	4b08      	ldr	r3, [pc, #32]	@ (80076d0 <_strtod_l+0x860>)
 80076ae:	400b      	ands	r3, r1
 80076b0:	4682      	mov	sl, r0
 80076b2:	468b      	mov	fp, r1
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f47f ae05 	bne.w	80072c4 <_strtod_l+0x454>
 80076ba:	9a05      	ldr	r2, [sp, #20]
 80076bc:	2322      	movs	r3, #34	@ 0x22
 80076be:	6013      	str	r3, [r2, #0]
 80076c0:	e600      	b.n	80072c4 <_strtod_l+0x454>
 80076c2:	bf00      	nop
 80076c4:	080090a0 	.word	0x080090a0
 80076c8:	fffffc02 	.word	0xfffffc02
 80076cc:	39500000 	.word	0x39500000
 80076d0:	7ff00000 	.word	0x7ff00000
 80076d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80076d8:	d165      	bne.n	80077a6 <_strtod_l+0x936>
 80076da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80076dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80076e0:	b35a      	cbz	r2, 800773a <_strtod_l+0x8ca>
 80076e2:	4a9f      	ldr	r2, [pc, #636]	@ (8007960 <_strtod_l+0xaf0>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d12b      	bne.n	8007740 <_strtod_l+0x8d0>
 80076e8:	9b08      	ldr	r3, [sp, #32]
 80076ea:	4651      	mov	r1, sl
 80076ec:	b303      	cbz	r3, 8007730 <_strtod_l+0x8c0>
 80076ee:	4b9d      	ldr	r3, [pc, #628]	@ (8007964 <_strtod_l+0xaf4>)
 80076f0:	465a      	mov	r2, fp
 80076f2:	4013      	ands	r3, r2
 80076f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80076f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076fc:	d81b      	bhi.n	8007736 <_strtod_l+0x8c6>
 80076fe:	0d1b      	lsrs	r3, r3, #20
 8007700:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007704:	fa02 f303 	lsl.w	r3, r2, r3
 8007708:	4299      	cmp	r1, r3
 800770a:	d119      	bne.n	8007740 <_strtod_l+0x8d0>
 800770c:	4b96      	ldr	r3, [pc, #600]	@ (8007968 <_strtod_l+0xaf8>)
 800770e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007710:	429a      	cmp	r2, r3
 8007712:	d102      	bne.n	800771a <_strtod_l+0x8aa>
 8007714:	3101      	adds	r1, #1
 8007716:	f43f adca 	beq.w	80072ae <_strtod_l+0x43e>
 800771a:	4b92      	ldr	r3, [pc, #584]	@ (8007964 <_strtod_l+0xaf4>)
 800771c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800771e:	401a      	ands	r2, r3
 8007720:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007724:	f04f 0a00 	mov.w	sl, #0
 8007728:	9b08      	ldr	r3, [sp, #32]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1b8      	bne.n	80076a0 <_strtod_l+0x830>
 800772e:	e5c9      	b.n	80072c4 <_strtod_l+0x454>
 8007730:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007734:	e7e8      	b.n	8007708 <_strtod_l+0x898>
 8007736:	4613      	mov	r3, r2
 8007738:	e7e6      	b.n	8007708 <_strtod_l+0x898>
 800773a:	ea53 030a 	orrs.w	r3, r3, sl
 800773e:	d0a1      	beq.n	8007684 <_strtod_l+0x814>
 8007740:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007742:	b1db      	cbz	r3, 800777c <_strtod_l+0x90c>
 8007744:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007746:	4213      	tst	r3, r2
 8007748:	d0ee      	beq.n	8007728 <_strtod_l+0x8b8>
 800774a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800774c:	9a08      	ldr	r2, [sp, #32]
 800774e:	4650      	mov	r0, sl
 8007750:	4659      	mov	r1, fp
 8007752:	b1bb      	cbz	r3, 8007784 <_strtod_l+0x914>
 8007754:	f7ff fb6e 	bl	8006e34 <sulp>
 8007758:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800775c:	ec53 2b10 	vmov	r2, r3, d0
 8007760:	f7f8 fd9c 	bl	800029c <__adddf3>
 8007764:	4682      	mov	sl, r0
 8007766:	468b      	mov	fp, r1
 8007768:	e7de      	b.n	8007728 <_strtod_l+0x8b8>
 800776a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800776e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007772:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007776:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800777a:	e7d5      	b.n	8007728 <_strtod_l+0x8b8>
 800777c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800777e:	ea13 0f0a 	tst.w	r3, sl
 8007782:	e7e1      	b.n	8007748 <_strtod_l+0x8d8>
 8007784:	f7ff fb56 	bl	8006e34 <sulp>
 8007788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800778c:	ec53 2b10 	vmov	r2, r3, d0
 8007790:	f7f8 fd82 	bl	8000298 <__aeabi_dsub>
 8007794:	2200      	movs	r2, #0
 8007796:	2300      	movs	r3, #0
 8007798:	4682      	mov	sl, r0
 800779a:	468b      	mov	fp, r1
 800779c:	f7f9 f99c 	bl	8000ad8 <__aeabi_dcmpeq>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	d0c1      	beq.n	8007728 <_strtod_l+0x8b8>
 80077a4:	e619      	b.n	80073da <_strtod_l+0x56a>
 80077a6:	4641      	mov	r1, r8
 80077a8:	4620      	mov	r0, r4
 80077aa:	f7ff facd 	bl	8006d48 <__ratio>
 80077ae:	ec57 6b10 	vmov	r6, r7, d0
 80077b2:	2200      	movs	r2, #0
 80077b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80077b8:	4630      	mov	r0, r6
 80077ba:	4639      	mov	r1, r7
 80077bc:	f7f9 f9a0 	bl	8000b00 <__aeabi_dcmple>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d06f      	beq.n	80078a4 <_strtod_l+0xa34>
 80077c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d17a      	bne.n	80078c0 <_strtod_l+0xa50>
 80077ca:	f1ba 0f00 	cmp.w	sl, #0
 80077ce:	d158      	bne.n	8007882 <_strtod_l+0xa12>
 80077d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d15a      	bne.n	8007890 <_strtod_l+0xa20>
 80077da:	4b64      	ldr	r3, [pc, #400]	@ (800796c <_strtod_l+0xafc>)
 80077dc:	2200      	movs	r2, #0
 80077de:	4630      	mov	r0, r6
 80077e0:	4639      	mov	r1, r7
 80077e2:	f7f9 f983 	bl	8000aec <__aeabi_dcmplt>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d159      	bne.n	800789e <_strtod_l+0xa2e>
 80077ea:	4630      	mov	r0, r6
 80077ec:	4639      	mov	r1, r7
 80077ee:	4b60      	ldr	r3, [pc, #384]	@ (8007970 <_strtod_l+0xb00>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	f7f8 ff09 	bl	8000608 <__aeabi_dmul>
 80077f6:	4606      	mov	r6, r0
 80077f8:	460f      	mov	r7, r1
 80077fa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80077fe:	9606      	str	r6, [sp, #24]
 8007800:	9307      	str	r3, [sp, #28]
 8007802:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007806:	4d57      	ldr	r5, [pc, #348]	@ (8007964 <_strtod_l+0xaf4>)
 8007808:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800780c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800780e:	401d      	ands	r5, r3
 8007810:	4b58      	ldr	r3, [pc, #352]	@ (8007974 <_strtod_l+0xb04>)
 8007812:	429d      	cmp	r5, r3
 8007814:	f040 80b2 	bne.w	800797c <_strtod_l+0xb0c>
 8007818:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800781a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800781e:	ec4b ab10 	vmov	d0, sl, fp
 8007822:	f7ff f9c9 	bl	8006bb8 <__ulp>
 8007826:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800782a:	ec51 0b10 	vmov	r0, r1, d0
 800782e:	f7f8 feeb 	bl	8000608 <__aeabi_dmul>
 8007832:	4652      	mov	r2, sl
 8007834:	465b      	mov	r3, fp
 8007836:	f7f8 fd31 	bl	800029c <__adddf3>
 800783a:	460b      	mov	r3, r1
 800783c:	4949      	ldr	r1, [pc, #292]	@ (8007964 <_strtod_l+0xaf4>)
 800783e:	4a4e      	ldr	r2, [pc, #312]	@ (8007978 <_strtod_l+0xb08>)
 8007840:	4019      	ands	r1, r3
 8007842:	4291      	cmp	r1, r2
 8007844:	4682      	mov	sl, r0
 8007846:	d942      	bls.n	80078ce <_strtod_l+0xa5e>
 8007848:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800784a:	4b47      	ldr	r3, [pc, #284]	@ (8007968 <_strtod_l+0xaf8>)
 800784c:	429a      	cmp	r2, r3
 800784e:	d103      	bne.n	8007858 <_strtod_l+0x9e8>
 8007850:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007852:	3301      	adds	r3, #1
 8007854:	f43f ad2b 	beq.w	80072ae <_strtod_l+0x43e>
 8007858:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007968 <_strtod_l+0xaf8>
 800785c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007860:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007862:	9805      	ldr	r0, [sp, #20]
 8007864:	f7fe fe74 	bl	8006550 <_Bfree>
 8007868:	9805      	ldr	r0, [sp, #20]
 800786a:	4649      	mov	r1, r9
 800786c:	f7fe fe70 	bl	8006550 <_Bfree>
 8007870:	9805      	ldr	r0, [sp, #20]
 8007872:	4641      	mov	r1, r8
 8007874:	f7fe fe6c 	bl	8006550 <_Bfree>
 8007878:	9805      	ldr	r0, [sp, #20]
 800787a:	4621      	mov	r1, r4
 800787c:	f7fe fe68 	bl	8006550 <_Bfree>
 8007880:	e618      	b.n	80074b4 <_strtod_l+0x644>
 8007882:	f1ba 0f01 	cmp.w	sl, #1
 8007886:	d103      	bne.n	8007890 <_strtod_l+0xa20>
 8007888:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800788a:	2b00      	cmp	r3, #0
 800788c:	f43f ada5 	beq.w	80073da <_strtod_l+0x56a>
 8007890:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007940 <_strtod_l+0xad0>
 8007894:	4f35      	ldr	r7, [pc, #212]	@ (800796c <_strtod_l+0xafc>)
 8007896:	ed8d 7b06 	vstr	d7, [sp, #24]
 800789a:	2600      	movs	r6, #0
 800789c:	e7b1      	b.n	8007802 <_strtod_l+0x992>
 800789e:	4f34      	ldr	r7, [pc, #208]	@ (8007970 <_strtod_l+0xb00>)
 80078a0:	2600      	movs	r6, #0
 80078a2:	e7aa      	b.n	80077fa <_strtod_l+0x98a>
 80078a4:	4b32      	ldr	r3, [pc, #200]	@ (8007970 <_strtod_l+0xb00>)
 80078a6:	4630      	mov	r0, r6
 80078a8:	4639      	mov	r1, r7
 80078aa:	2200      	movs	r2, #0
 80078ac:	f7f8 feac 	bl	8000608 <__aeabi_dmul>
 80078b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078b2:	4606      	mov	r6, r0
 80078b4:	460f      	mov	r7, r1
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d09f      	beq.n	80077fa <_strtod_l+0x98a>
 80078ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80078be:	e7a0      	b.n	8007802 <_strtod_l+0x992>
 80078c0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007948 <_strtod_l+0xad8>
 80078c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80078c8:	ec57 6b17 	vmov	r6, r7, d7
 80078cc:	e799      	b.n	8007802 <_strtod_l+0x992>
 80078ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80078d2:	9b08      	ldr	r3, [sp, #32]
 80078d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1c1      	bne.n	8007860 <_strtod_l+0x9f0>
 80078dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80078e0:	0d1b      	lsrs	r3, r3, #20
 80078e2:	051b      	lsls	r3, r3, #20
 80078e4:	429d      	cmp	r5, r3
 80078e6:	d1bb      	bne.n	8007860 <_strtod_l+0x9f0>
 80078e8:	4630      	mov	r0, r6
 80078ea:	4639      	mov	r1, r7
 80078ec:	f7f9 f9ec 	bl	8000cc8 <__aeabi_d2lz>
 80078f0:	f7f8 fe5c 	bl	80005ac <__aeabi_l2d>
 80078f4:	4602      	mov	r2, r0
 80078f6:	460b      	mov	r3, r1
 80078f8:	4630      	mov	r0, r6
 80078fa:	4639      	mov	r1, r7
 80078fc:	f7f8 fccc 	bl	8000298 <__aeabi_dsub>
 8007900:	460b      	mov	r3, r1
 8007902:	4602      	mov	r2, r0
 8007904:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007908:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800790c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800790e:	ea46 060a 	orr.w	r6, r6, sl
 8007912:	431e      	orrs	r6, r3
 8007914:	d06f      	beq.n	80079f6 <_strtod_l+0xb86>
 8007916:	a30e      	add	r3, pc, #56	@ (adr r3, 8007950 <_strtod_l+0xae0>)
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	f7f9 f8e6 	bl	8000aec <__aeabi_dcmplt>
 8007920:	2800      	cmp	r0, #0
 8007922:	f47f accf 	bne.w	80072c4 <_strtod_l+0x454>
 8007926:	a30c      	add	r3, pc, #48	@ (adr r3, 8007958 <_strtod_l+0xae8>)
 8007928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007930:	f7f9 f8fa 	bl	8000b28 <__aeabi_dcmpgt>
 8007934:	2800      	cmp	r0, #0
 8007936:	d093      	beq.n	8007860 <_strtod_l+0x9f0>
 8007938:	e4c4      	b.n	80072c4 <_strtod_l+0x454>
 800793a:	bf00      	nop
 800793c:	f3af 8000 	nop.w
 8007940:	00000000 	.word	0x00000000
 8007944:	bff00000 	.word	0xbff00000
 8007948:	00000000 	.word	0x00000000
 800794c:	3ff00000 	.word	0x3ff00000
 8007950:	94a03595 	.word	0x94a03595
 8007954:	3fdfffff 	.word	0x3fdfffff
 8007958:	35afe535 	.word	0x35afe535
 800795c:	3fe00000 	.word	0x3fe00000
 8007960:	000fffff 	.word	0x000fffff
 8007964:	7ff00000 	.word	0x7ff00000
 8007968:	7fefffff 	.word	0x7fefffff
 800796c:	3ff00000 	.word	0x3ff00000
 8007970:	3fe00000 	.word	0x3fe00000
 8007974:	7fe00000 	.word	0x7fe00000
 8007978:	7c9fffff 	.word	0x7c9fffff
 800797c:	9b08      	ldr	r3, [sp, #32]
 800797e:	b323      	cbz	r3, 80079ca <_strtod_l+0xb5a>
 8007980:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007984:	d821      	bhi.n	80079ca <_strtod_l+0xb5a>
 8007986:	a328      	add	r3, pc, #160	@ (adr r3, 8007a28 <_strtod_l+0xbb8>)
 8007988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798c:	4630      	mov	r0, r6
 800798e:	4639      	mov	r1, r7
 8007990:	f7f9 f8b6 	bl	8000b00 <__aeabi_dcmple>
 8007994:	b1a0      	cbz	r0, 80079c0 <_strtod_l+0xb50>
 8007996:	4639      	mov	r1, r7
 8007998:	4630      	mov	r0, r6
 800799a:	f7f9 f90d 	bl	8000bb8 <__aeabi_d2uiz>
 800799e:	2801      	cmp	r0, #1
 80079a0:	bf38      	it	cc
 80079a2:	2001      	movcc	r0, #1
 80079a4:	f7f8 fdb6 	bl	8000514 <__aeabi_ui2d>
 80079a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079aa:	4606      	mov	r6, r0
 80079ac:	460f      	mov	r7, r1
 80079ae:	b9fb      	cbnz	r3, 80079f0 <_strtod_l+0xb80>
 80079b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80079b4:	9014      	str	r0, [sp, #80]	@ 0x50
 80079b6:	9315      	str	r3, [sp, #84]	@ 0x54
 80079b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80079bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80079c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80079c2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80079c6:	1b5b      	subs	r3, r3, r5
 80079c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80079ca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80079ce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80079d2:	f7ff f8f1 	bl	8006bb8 <__ulp>
 80079d6:	4650      	mov	r0, sl
 80079d8:	ec53 2b10 	vmov	r2, r3, d0
 80079dc:	4659      	mov	r1, fp
 80079de:	f7f8 fe13 	bl	8000608 <__aeabi_dmul>
 80079e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80079e6:	f7f8 fc59 	bl	800029c <__adddf3>
 80079ea:	4682      	mov	sl, r0
 80079ec:	468b      	mov	fp, r1
 80079ee:	e770      	b.n	80078d2 <_strtod_l+0xa62>
 80079f0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80079f4:	e7e0      	b.n	80079b8 <_strtod_l+0xb48>
 80079f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007a30 <_strtod_l+0xbc0>)
 80079f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fc:	f7f9 f876 	bl	8000aec <__aeabi_dcmplt>
 8007a00:	e798      	b.n	8007934 <_strtod_l+0xac4>
 8007a02:	2300      	movs	r3, #0
 8007a04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a06:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007a08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a0a:	6013      	str	r3, [r2, #0]
 8007a0c:	f7ff ba6d 	b.w	8006eea <_strtod_l+0x7a>
 8007a10:	2a65      	cmp	r2, #101	@ 0x65
 8007a12:	f43f ab66 	beq.w	80070e2 <_strtod_l+0x272>
 8007a16:	2a45      	cmp	r2, #69	@ 0x45
 8007a18:	f43f ab63 	beq.w	80070e2 <_strtod_l+0x272>
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	f7ff bb9e 	b.w	800715e <_strtod_l+0x2ee>
 8007a22:	bf00      	nop
 8007a24:	f3af 8000 	nop.w
 8007a28:	ffc00000 	.word	0xffc00000
 8007a2c:	41dfffff 	.word	0x41dfffff
 8007a30:	94a03595 	.word	0x94a03595
 8007a34:	3fcfffff 	.word	0x3fcfffff

08007a38 <_strtod_r>:
 8007a38:	4b01      	ldr	r3, [pc, #4]	@ (8007a40 <_strtod_r+0x8>)
 8007a3a:	f7ff ba19 	b.w	8006e70 <_strtod_l>
 8007a3e:	bf00      	nop
 8007a40:	20000068 	.word	0x20000068

08007a44 <_strtol_l.constprop.0>:
 8007a44:	2b24      	cmp	r3, #36	@ 0x24
 8007a46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a4a:	4686      	mov	lr, r0
 8007a4c:	4690      	mov	r8, r2
 8007a4e:	d801      	bhi.n	8007a54 <_strtol_l.constprop.0+0x10>
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d106      	bne.n	8007a62 <_strtol_l.constprop.0+0x1e>
 8007a54:	f7fd fdbc 	bl	80055d0 <__errno>
 8007a58:	2316      	movs	r3, #22
 8007a5a:	6003      	str	r3, [r0, #0]
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a62:	4834      	ldr	r0, [pc, #208]	@ (8007b34 <_strtol_l.constprop.0+0xf0>)
 8007a64:	460d      	mov	r5, r1
 8007a66:	462a      	mov	r2, r5
 8007a68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a6c:	5d06      	ldrb	r6, [r0, r4]
 8007a6e:	f016 0608 	ands.w	r6, r6, #8
 8007a72:	d1f8      	bne.n	8007a66 <_strtol_l.constprop.0+0x22>
 8007a74:	2c2d      	cmp	r4, #45	@ 0x2d
 8007a76:	d12d      	bne.n	8007ad4 <_strtol_l.constprop.0+0x90>
 8007a78:	782c      	ldrb	r4, [r5, #0]
 8007a7a:	2601      	movs	r6, #1
 8007a7c:	1c95      	adds	r5, r2, #2
 8007a7e:	f033 0210 	bics.w	r2, r3, #16
 8007a82:	d109      	bne.n	8007a98 <_strtol_l.constprop.0+0x54>
 8007a84:	2c30      	cmp	r4, #48	@ 0x30
 8007a86:	d12a      	bne.n	8007ade <_strtol_l.constprop.0+0x9a>
 8007a88:	782a      	ldrb	r2, [r5, #0]
 8007a8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007a8e:	2a58      	cmp	r2, #88	@ 0x58
 8007a90:	d125      	bne.n	8007ade <_strtol_l.constprop.0+0x9a>
 8007a92:	786c      	ldrb	r4, [r5, #1]
 8007a94:	2310      	movs	r3, #16
 8007a96:	3502      	adds	r5, #2
 8007a98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007a9c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	fbbc f9f3 	udiv	r9, ip, r3
 8007aa6:	4610      	mov	r0, r2
 8007aa8:	fb03 ca19 	mls	sl, r3, r9, ip
 8007aac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007ab0:	2f09      	cmp	r7, #9
 8007ab2:	d81b      	bhi.n	8007aec <_strtol_l.constprop.0+0xa8>
 8007ab4:	463c      	mov	r4, r7
 8007ab6:	42a3      	cmp	r3, r4
 8007ab8:	dd27      	ble.n	8007b0a <_strtol_l.constprop.0+0xc6>
 8007aba:	1c57      	adds	r7, r2, #1
 8007abc:	d007      	beq.n	8007ace <_strtol_l.constprop.0+0x8a>
 8007abe:	4581      	cmp	r9, r0
 8007ac0:	d320      	bcc.n	8007b04 <_strtol_l.constprop.0+0xc0>
 8007ac2:	d101      	bne.n	8007ac8 <_strtol_l.constprop.0+0x84>
 8007ac4:	45a2      	cmp	sl, r4
 8007ac6:	db1d      	blt.n	8007b04 <_strtol_l.constprop.0+0xc0>
 8007ac8:	fb00 4003 	mla	r0, r0, r3, r4
 8007acc:	2201      	movs	r2, #1
 8007ace:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ad2:	e7eb      	b.n	8007aac <_strtol_l.constprop.0+0x68>
 8007ad4:	2c2b      	cmp	r4, #43	@ 0x2b
 8007ad6:	bf04      	itt	eq
 8007ad8:	782c      	ldrbeq	r4, [r5, #0]
 8007ada:	1c95      	addeq	r5, r2, #2
 8007adc:	e7cf      	b.n	8007a7e <_strtol_l.constprop.0+0x3a>
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1da      	bne.n	8007a98 <_strtol_l.constprop.0+0x54>
 8007ae2:	2c30      	cmp	r4, #48	@ 0x30
 8007ae4:	bf0c      	ite	eq
 8007ae6:	2308      	moveq	r3, #8
 8007ae8:	230a      	movne	r3, #10
 8007aea:	e7d5      	b.n	8007a98 <_strtol_l.constprop.0+0x54>
 8007aec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007af0:	2f19      	cmp	r7, #25
 8007af2:	d801      	bhi.n	8007af8 <_strtol_l.constprop.0+0xb4>
 8007af4:	3c37      	subs	r4, #55	@ 0x37
 8007af6:	e7de      	b.n	8007ab6 <_strtol_l.constprop.0+0x72>
 8007af8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007afc:	2f19      	cmp	r7, #25
 8007afe:	d804      	bhi.n	8007b0a <_strtol_l.constprop.0+0xc6>
 8007b00:	3c57      	subs	r4, #87	@ 0x57
 8007b02:	e7d8      	b.n	8007ab6 <_strtol_l.constprop.0+0x72>
 8007b04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b08:	e7e1      	b.n	8007ace <_strtol_l.constprop.0+0x8a>
 8007b0a:	1c53      	adds	r3, r2, #1
 8007b0c:	d108      	bne.n	8007b20 <_strtol_l.constprop.0+0xdc>
 8007b0e:	2322      	movs	r3, #34	@ 0x22
 8007b10:	f8ce 3000 	str.w	r3, [lr]
 8007b14:	4660      	mov	r0, ip
 8007b16:	f1b8 0f00 	cmp.w	r8, #0
 8007b1a:	d0a0      	beq.n	8007a5e <_strtol_l.constprop.0+0x1a>
 8007b1c:	1e69      	subs	r1, r5, #1
 8007b1e:	e006      	b.n	8007b2e <_strtol_l.constprop.0+0xea>
 8007b20:	b106      	cbz	r6, 8007b24 <_strtol_l.constprop.0+0xe0>
 8007b22:	4240      	negs	r0, r0
 8007b24:	f1b8 0f00 	cmp.w	r8, #0
 8007b28:	d099      	beq.n	8007a5e <_strtol_l.constprop.0+0x1a>
 8007b2a:	2a00      	cmp	r2, #0
 8007b2c:	d1f6      	bne.n	8007b1c <_strtol_l.constprop.0+0xd8>
 8007b2e:	f8c8 1000 	str.w	r1, [r8]
 8007b32:	e794      	b.n	8007a5e <_strtol_l.constprop.0+0x1a>
 8007b34:	080090c9 	.word	0x080090c9

08007b38 <_strtol_r>:
 8007b38:	f7ff bf84 	b.w	8007a44 <_strtol_l.constprop.0>

08007b3c <__ssputs_r>:
 8007b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b40:	688e      	ldr	r6, [r1, #8]
 8007b42:	461f      	mov	r7, r3
 8007b44:	42be      	cmp	r6, r7
 8007b46:	680b      	ldr	r3, [r1, #0]
 8007b48:	4682      	mov	sl, r0
 8007b4a:	460c      	mov	r4, r1
 8007b4c:	4690      	mov	r8, r2
 8007b4e:	d82d      	bhi.n	8007bac <__ssputs_r+0x70>
 8007b50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007b58:	d026      	beq.n	8007ba8 <__ssputs_r+0x6c>
 8007b5a:	6965      	ldr	r5, [r4, #20]
 8007b5c:	6909      	ldr	r1, [r1, #16]
 8007b5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b62:	eba3 0901 	sub.w	r9, r3, r1
 8007b66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b6a:	1c7b      	adds	r3, r7, #1
 8007b6c:	444b      	add	r3, r9
 8007b6e:	106d      	asrs	r5, r5, #1
 8007b70:	429d      	cmp	r5, r3
 8007b72:	bf38      	it	cc
 8007b74:	461d      	movcc	r5, r3
 8007b76:	0553      	lsls	r3, r2, #21
 8007b78:	d527      	bpl.n	8007bca <__ssputs_r+0x8e>
 8007b7a:	4629      	mov	r1, r5
 8007b7c:	f7fe fc1c 	bl	80063b8 <_malloc_r>
 8007b80:	4606      	mov	r6, r0
 8007b82:	b360      	cbz	r0, 8007bde <__ssputs_r+0xa2>
 8007b84:	6921      	ldr	r1, [r4, #16]
 8007b86:	464a      	mov	r2, r9
 8007b88:	f000 fbee 	bl	8008368 <memcpy>
 8007b8c:	89a3      	ldrh	r3, [r4, #12]
 8007b8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b96:	81a3      	strh	r3, [r4, #12]
 8007b98:	6126      	str	r6, [r4, #16]
 8007b9a:	6165      	str	r5, [r4, #20]
 8007b9c:	444e      	add	r6, r9
 8007b9e:	eba5 0509 	sub.w	r5, r5, r9
 8007ba2:	6026      	str	r6, [r4, #0]
 8007ba4:	60a5      	str	r5, [r4, #8]
 8007ba6:	463e      	mov	r6, r7
 8007ba8:	42be      	cmp	r6, r7
 8007baa:	d900      	bls.n	8007bae <__ssputs_r+0x72>
 8007bac:	463e      	mov	r6, r7
 8007bae:	6820      	ldr	r0, [r4, #0]
 8007bb0:	4632      	mov	r2, r6
 8007bb2:	4641      	mov	r1, r8
 8007bb4:	f000 fb9c 	bl	80082f0 <memmove>
 8007bb8:	68a3      	ldr	r3, [r4, #8]
 8007bba:	1b9b      	subs	r3, r3, r6
 8007bbc:	60a3      	str	r3, [r4, #8]
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	4433      	add	r3, r6
 8007bc2:	6023      	str	r3, [r4, #0]
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bca:	462a      	mov	r2, r5
 8007bcc:	f000 ff61 	bl	8008a92 <_realloc_r>
 8007bd0:	4606      	mov	r6, r0
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d1e0      	bne.n	8007b98 <__ssputs_r+0x5c>
 8007bd6:	6921      	ldr	r1, [r4, #16]
 8007bd8:	4650      	mov	r0, sl
 8007bda:	f7fe fb79 	bl	80062d0 <_free_r>
 8007bde:	230c      	movs	r3, #12
 8007be0:	f8ca 3000 	str.w	r3, [sl]
 8007be4:	89a3      	ldrh	r3, [r4, #12]
 8007be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bea:	81a3      	strh	r3, [r4, #12]
 8007bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007bf0:	e7e9      	b.n	8007bc6 <__ssputs_r+0x8a>
	...

08007bf4 <_svfiprintf_r>:
 8007bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf8:	4698      	mov	r8, r3
 8007bfa:	898b      	ldrh	r3, [r1, #12]
 8007bfc:	061b      	lsls	r3, r3, #24
 8007bfe:	b09d      	sub	sp, #116	@ 0x74
 8007c00:	4607      	mov	r7, r0
 8007c02:	460d      	mov	r5, r1
 8007c04:	4614      	mov	r4, r2
 8007c06:	d510      	bpl.n	8007c2a <_svfiprintf_r+0x36>
 8007c08:	690b      	ldr	r3, [r1, #16]
 8007c0a:	b973      	cbnz	r3, 8007c2a <_svfiprintf_r+0x36>
 8007c0c:	2140      	movs	r1, #64	@ 0x40
 8007c0e:	f7fe fbd3 	bl	80063b8 <_malloc_r>
 8007c12:	6028      	str	r0, [r5, #0]
 8007c14:	6128      	str	r0, [r5, #16]
 8007c16:	b930      	cbnz	r0, 8007c26 <_svfiprintf_r+0x32>
 8007c18:	230c      	movs	r3, #12
 8007c1a:	603b      	str	r3, [r7, #0]
 8007c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c20:	b01d      	add	sp, #116	@ 0x74
 8007c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c26:	2340      	movs	r3, #64	@ 0x40
 8007c28:	616b      	str	r3, [r5, #20]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c2e:	2320      	movs	r3, #32
 8007c30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c34:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c38:	2330      	movs	r3, #48	@ 0x30
 8007c3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007dd8 <_svfiprintf_r+0x1e4>
 8007c3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c42:	f04f 0901 	mov.w	r9, #1
 8007c46:	4623      	mov	r3, r4
 8007c48:	469a      	mov	sl, r3
 8007c4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c4e:	b10a      	cbz	r2, 8007c54 <_svfiprintf_r+0x60>
 8007c50:	2a25      	cmp	r2, #37	@ 0x25
 8007c52:	d1f9      	bne.n	8007c48 <_svfiprintf_r+0x54>
 8007c54:	ebba 0b04 	subs.w	fp, sl, r4
 8007c58:	d00b      	beq.n	8007c72 <_svfiprintf_r+0x7e>
 8007c5a:	465b      	mov	r3, fp
 8007c5c:	4622      	mov	r2, r4
 8007c5e:	4629      	mov	r1, r5
 8007c60:	4638      	mov	r0, r7
 8007c62:	f7ff ff6b 	bl	8007b3c <__ssputs_r>
 8007c66:	3001      	adds	r0, #1
 8007c68:	f000 80a7 	beq.w	8007dba <_svfiprintf_r+0x1c6>
 8007c6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c6e:	445a      	add	r2, fp
 8007c70:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c72:	f89a 3000 	ldrb.w	r3, [sl]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f000 809f 	beq.w	8007dba <_svfiprintf_r+0x1c6>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c86:	f10a 0a01 	add.w	sl, sl, #1
 8007c8a:	9304      	str	r3, [sp, #16]
 8007c8c:	9307      	str	r3, [sp, #28]
 8007c8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c92:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c94:	4654      	mov	r4, sl
 8007c96:	2205      	movs	r2, #5
 8007c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c9c:	484e      	ldr	r0, [pc, #312]	@ (8007dd8 <_svfiprintf_r+0x1e4>)
 8007c9e:	f7f8 fa9f 	bl	80001e0 <memchr>
 8007ca2:	9a04      	ldr	r2, [sp, #16]
 8007ca4:	b9d8      	cbnz	r0, 8007cde <_svfiprintf_r+0xea>
 8007ca6:	06d0      	lsls	r0, r2, #27
 8007ca8:	bf44      	itt	mi
 8007caa:	2320      	movmi	r3, #32
 8007cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cb0:	0711      	lsls	r1, r2, #28
 8007cb2:	bf44      	itt	mi
 8007cb4:	232b      	movmi	r3, #43	@ 0x2b
 8007cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cba:	f89a 3000 	ldrb.w	r3, [sl]
 8007cbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cc0:	d015      	beq.n	8007cee <_svfiprintf_r+0xfa>
 8007cc2:	9a07      	ldr	r2, [sp, #28]
 8007cc4:	4654      	mov	r4, sl
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	f04f 0c0a 	mov.w	ip, #10
 8007ccc:	4621      	mov	r1, r4
 8007cce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cd2:	3b30      	subs	r3, #48	@ 0x30
 8007cd4:	2b09      	cmp	r3, #9
 8007cd6:	d94b      	bls.n	8007d70 <_svfiprintf_r+0x17c>
 8007cd8:	b1b0      	cbz	r0, 8007d08 <_svfiprintf_r+0x114>
 8007cda:	9207      	str	r2, [sp, #28]
 8007cdc:	e014      	b.n	8007d08 <_svfiprintf_r+0x114>
 8007cde:	eba0 0308 	sub.w	r3, r0, r8
 8007ce2:	fa09 f303 	lsl.w	r3, r9, r3
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	9304      	str	r3, [sp, #16]
 8007cea:	46a2      	mov	sl, r4
 8007cec:	e7d2      	b.n	8007c94 <_svfiprintf_r+0xa0>
 8007cee:	9b03      	ldr	r3, [sp, #12]
 8007cf0:	1d19      	adds	r1, r3, #4
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	9103      	str	r1, [sp, #12]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	bfbb      	ittet	lt
 8007cfa:	425b      	neglt	r3, r3
 8007cfc:	f042 0202 	orrlt.w	r2, r2, #2
 8007d00:	9307      	strge	r3, [sp, #28]
 8007d02:	9307      	strlt	r3, [sp, #28]
 8007d04:	bfb8      	it	lt
 8007d06:	9204      	strlt	r2, [sp, #16]
 8007d08:	7823      	ldrb	r3, [r4, #0]
 8007d0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d0c:	d10a      	bne.n	8007d24 <_svfiprintf_r+0x130>
 8007d0e:	7863      	ldrb	r3, [r4, #1]
 8007d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d12:	d132      	bne.n	8007d7a <_svfiprintf_r+0x186>
 8007d14:	9b03      	ldr	r3, [sp, #12]
 8007d16:	1d1a      	adds	r2, r3, #4
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	9203      	str	r2, [sp, #12]
 8007d1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d20:	3402      	adds	r4, #2
 8007d22:	9305      	str	r3, [sp, #20]
 8007d24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007de8 <_svfiprintf_r+0x1f4>
 8007d28:	7821      	ldrb	r1, [r4, #0]
 8007d2a:	2203      	movs	r2, #3
 8007d2c:	4650      	mov	r0, sl
 8007d2e:	f7f8 fa57 	bl	80001e0 <memchr>
 8007d32:	b138      	cbz	r0, 8007d44 <_svfiprintf_r+0x150>
 8007d34:	9b04      	ldr	r3, [sp, #16]
 8007d36:	eba0 000a 	sub.w	r0, r0, sl
 8007d3a:	2240      	movs	r2, #64	@ 0x40
 8007d3c:	4082      	lsls	r2, r0
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	3401      	adds	r4, #1
 8007d42:	9304      	str	r3, [sp, #16]
 8007d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d48:	4824      	ldr	r0, [pc, #144]	@ (8007ddc <_svfiprintf_r+0x1e8>)
 8007d4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d4e:	2206      	movs	r2, #6
 8007d50:	f7f8 fa46 	bl	80001e0 <memchr>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	d036      	beq.n	8007dc6 <_svfiprintf_r+0x1d2>
 8007d58:	4b21      	ldr	r3, [pc, #132]	@ (8007de0 <_svfiprintf_r+0x1ec>)
 8007d5a:	bb1b      	cbnz	r3, 8007da4 <_svfiprintf_r+0x1b0>
 8007d5c:	9b03      	ldr	r3, [sp, #12]
 8007d5e:	3307      	adds	r3, #7
 8007d60:	f023 0307 	bic.w	r3, r3, #7
 8007d64:	3308      	adds	r3, #8
 8007d66:	9303      	str	r3, [sp, #12]
 8007d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d6a:	4433      	add	r3, r6
 8007d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d6e:	e76a      	b.n	8007c46 <_svfiprintf_r+0x52>
 8007d70:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d74:	460c      	mov	r4, r1
 8007d76:	2001      	movs	r0, #1
 8007d78:	e7a8      	b.n	8007ccc <_svfiprintf_r+0xd8>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	3401      	adds	r4, #1
 8007d7e:	9305      	str	r3, [sp, #20]
 8007d80:	4619      	mov	r1, r3
 8007d82:	f04f 0c0a 	mov.w	ip, #10
 8007d86:	4620      	mov	r0, r4
 8007d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d8c:	3a30      	subs	r2, #48	@ 0x30
 8007d8e:	2a09      	cmp	r2, #9
 8007d90:	d903      	bls.n	8007d9a <_svfiprintf_r+0x1a6>
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d0c6      	beq.n	8007d24 <_svfiprintf_r+0x130>
 8007d96:	9105      	str	r1, [sp, #20]
 8007d98:	e7c4      	b.n	8007d24 <_svfiprintf_r+0x130>
 8007d9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d9e:	4604      	mov	r4, r0
 8007da0:	2301      	movs	r3, #1
 8007da2:	e7f0      	b.n	8007d86 <_svfiprintf_r+0x192>
 8007da4:	ab03      	add	r3, sp, #12
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	462a      	mov	r2, r5
 8007daa:	4b0e      	ldr	r3, [pc, #56]	@ (8007de4 <_svfiprintf_r+0x1f0>)
 8007dac:	a904      	add	r1, sp, #16
 8007dae:	4638      	mov	r0, r7
 8007db0:	f7fc fcb8 	bl	8004724 <_printf_float>
 8007db4:	1c42      	adds	r2, r0, #1
 8007db6:	4606      	mov	r6, r0
 8007db8:	d1d6      	bne.n	8007d68 <_svfiprintf_r+0x174>
 8007dba:	89ab      	ldrh	r3, [r5, #12]
 8007dbc:	065b      	lsls	r3, r3, #25
 8007dbe:	f53f af2d 	bmi.w	8007c1c <_svfiprintf_r+0x28>
 8007dc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007dc4:	e72c      	b.n	8007c20 <_svfiprintf_r+0x2c>
 8007dc6:	ab03      	add	r3, sp, #12
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	462a      	mov	r2, r5
 8007dcc:	4b05      	ldr	r3, [pc, #20]	@ (8007de4 <_svfiprintf_r+0x1f0>)
 8007dce:	a904      	add	r1, sp, #16
 8007dd0:	4638      	mov	r0, r7
 8007dd2:	f7fc ff3f 	bl	8004c54 <_printf_i>
 8007dd6:	e7ed      	b.n	8007db4 <_svfiprintf_r+0x1c0>
 8007dd8:	080091c9 	.word	0x080091c9
 8007ddc:	080091d3 	.word	0x080091d3
 8007de0:	08004725 	.word	0x08004725
 8007de4:	08007b3d 	.word	0x08007b3d
 8007de8:	080091cf 	.word	0x080091cf

08007dec <__sfputc_r>:
 8007dec:	6893      	ldr	r3, [r2, #8]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	b410      	push	{r4}
 8007df4:	6093      	str	r3, [r2, #8]
 8007df6:	da08      	bge.n	8007e0a <__sfputc_r+0x1e>
 8007df8:	6994      	ldr	r4, [r2, #24]
 8007dfa:	42a3      	cmp	r3, r4
 8007dfc:	db01      	blt.n	8007e02 <__sfputc_r+0x16>
 8007dfe:	290a      	cmp	r1, #10
 8007e00:	d103      	bne.n	8007e0a <__sfputc_r+0x1e>
 8007e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e06:	f000 b9df 	b.w	80081c8 <__swbuf_r>
 8007e0a:	6813      	ldr	r3, [r2, #0]
 8007e0c:	1c58      	adds	r0, r3, #1
 8007e0e:	6010      	str	r0, [r2, #0]
 8007e10:	7019      	strb	r1, [r3, #0]
 8007e12:	4608      	mov	r0, r1
 8007e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <__sfputs_r>:
 8007e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1c:	4606      	mov	r6, r0
 8007e1e:	460f      	mov	r7, r1
 8007e20:	4614      	mov	r4, r2
 8007e22:	18d5      	adds	r5, r2, r3
 8007e24:	42ac      	cmp	r4, r5
 8007e26:	d101      	bne.n	8007e2c <__sfputs_r+0x12>
 8007e28:	2000      	movs	r0, #0
 8007e2a:	e007      	b.n	8007e3c <__sfputs_r+0x22>
 8007e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e30:	463a      	mov	r2, r7
 8007e32:	4630      	mov	r0, r6
 8007e34:	f7ff ffda 	bl	8007dec <__sfputc_r>
 8007e38:	1c43      	adds	r3, r0, #1
 8007e3a:	d1f3      	bne.n	8007e24 <__sfputs_r+0xa>
 8007e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e40 <_vfiprintf_r>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	460d      	mov	r5, r1
 8007e46:	b09d      	sub	sp, #116	@ 0x74
 8007e48:	4614      	mov	r4, r2
 8007e4a:	4698      	mov	r8, r3
 8007e4c:	4606      	mov	r6, r0
 8007e4e:	b118      	cbz	r0, 8007e58 <_vfiprintf_r+0x18>
 8007e50:	6a03      	ldr	r3, [r0, #32]
 8007e52:	b90b      	cbnz	r3, 8007e58 <_vfiprintf_r+0x18>
 8007e54:	f7fd fabe 	bl	80053d4 <__sinit>
 8007e58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e5a:	07d9      	lsls	r1, r3, #31
 8007e5c:	d405      	bmi.n	8007e6a <_vfiprintf_r+0x2a>
 8007e5e:	89ab      	ldrh	r3, [r5, #12]
 8007e60:	059a      	lsls	r2, r3, #22
 8007e62:	d402      	bmi.n	8007e6a <_vfiprintf_r+0x2a>
 8007e64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e66:	f7fd fbde 	bl	8005626 <__retarget_lock_acquire_recursive>
 8007e6a:	89ab      	ldrh	r3, [r5, #12]
 8007e6c:	071b      	lsls	r3, r3, #28
 8007e6e:	d501      	bpl.n	8007e74 <_vfiprintf_r+0x34>
 8007e70:	692b      	ldr	r3, [r5, #16]
 8007e72:	b99b      	cbnz	r3, 8007e9c <_vfiprintf_r+0x5c>
 8007e74:	4629      	mov	r1, r5
 8007e76:	4630      	mov	r0, r6
 8007e78:	f000 f9e4 	bl	8008244 <__swsetup_r>
 8007e7c:	b170      	cbz	r0, 8007e9c <_vfiprintf_r+0x5c>
 8007e7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e80:	07dc      	lsls	r4, r3, #31
 8007e82:	d504      	bpl.n	8007e8e <_vfiprintf_r+0x4e>
 8007e84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e88:	b01d      	add	sp, #116	@ 0x74
 8007e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8e:	89ab      	ldrh	r3, [r5, #12]
 8007e90:	0598      	lsls	r0, r3, #22
 8007e92:	d4f7      	bmi.n	8007e84 <_vfiprintf_r+0x44>
 8007e94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e96:	f7fd fbc7 	bl	8005628 <__retarget_lock_release_recursive>
 8007e9a:	e7f3      	b.n	8007e84 <_vfiprintf_r+0x44>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ea0:	2320      	movs	r3, #32
 8007ea2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ea6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007eaa:	2330      	movs	r3, #48	@ 0x30
 8007eac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800805c <_vfiprintf_r+0x21c>
 8007eb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007eb4:	f04f 0901 	mov.w	r9, #1
 8007eb8:	4623      	mov	r3, r4
 8007eba:	469a      	mov	sl, r3
 8007ebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ec0:	b10a      	cbz	r2, 8007ec6 <_vfiprintf_r+0x86>
 8007ec2:	2a25      	cmp	r2, #37	@ 0x25
 8007ec4:	d1f9      	bne.n	8007eba <_vfiprintf_r+0x7a>
 8007ec6:	ebba 0b04 	subs.w	fp, sl, r4
 8007eca:	d00b      	beq.n	8007ee4 <_vfiprintf_r+0xa4>
 8007ecc:	465b      	mov	r3, fp
 8007ece:	4622      	mov	r2, r4
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f7ff ffa1 	bl	8007e1a <__sfputs_r>
 8007ed8:	3001      	adds	r0, #1
 8007eda:	f000 80a7 	beq.w	800802c <_vfiprintf_r+0x1ec>
 8007ede:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ee0:	445a      	add	r2, fp
 8007ee2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 809f 	beq.w	800802c <_vfiprintf_r+0x1ec>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ef8:	f10a 0a01 	add.w	sl, sl, #1
 8007efc:	9304      	str	r3, [sp, #16]
 8007efe:	9307      	str	r3, [sp, #28]
 8007f00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f04:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f06:	4654      	mov	r4, sl
 8007f08:	2205      	movs	r2, #5
 8007f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f0e:	4853      	ldr	r0, [pc, #332]	@ (800805c <_vfiprintf_r+0x21c>)
 8007f10:	f7f8 f966 	bl	80001e0 <memchr>
 8007f14:	9a04      	ldr	r2, [sp, #16]
 8007f16:	b9d8      	cbnz	r0, 8007f50 <_vfiprintf_r+0x110>
 8007f18:	06d1      	lsls	r1, r2, #27
 8007f1a:	bf44      	itt	mi
 8007f1c:	2320      	movmi	r3, #32
 8007f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f22:	0713      	lsls	r3, r2, #28
 8007f24:	bf44      	itt	mi
 8007f26:	232b      	movmi	r3, #43	@ 0x2b
 8007f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f30:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f32:	d015      	beq.n	8007f60 <_vfiprintf_r+0x120>
 8007f34:	9a07      	ldr	r2, [sp, #28]
 8007f36:	4654      	mov	r4, sl
 8007f38:	2000      	movs	r0, #0
 8007f3a:	f04f 0c0a 	mov.w	ip, #10
 8007f3e:	4621      	mov	r1, r4
 8007f40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f44:	3b30      	subs	r3, #48	@ 0x30
 8007f46:	2b09      	cmp	r3, #9
 8007f48:	d94b      	bls.n	8007fe2 <_vfiprintf_r+0x1a2>
 8007f4a:	b1b0      	cbz	r0, 8007f7a <_vfiprintf_r+0x13a>
 8007f4c:	9207      	str	r2, [sp, #28]
 8007f4e:	e014      	b.n	8007f7a <_vfiprintf_r+0x13a>
 8007f50:	eba0 0308 	sub.w	r3, r0, r8
 8007f54:	fa09 f303 	lsl.w	r3, r9, r3
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	9304      	str	r3, [sp, #16]
 8007f5c:	46a2      	mov	sl, r4
 8007f5e:	e7d2      	b.n	8007f06 <_vfiprintf_r+0xc6>
 8007f60:	9b03      	ldr	r3, [sp, #12]
 8007f62:	1d19      	adds	r1, r3, #4
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	9103      	str	r1, [sp, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	bfbb      	ittet	lt
 8007f6c:	425b      	neglt	r3, r3
 8007f6e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f72:	9307      	strge	r3, [sp, #28]
 8007f74:	9307      	strlt	r3, [sp, #28]
 8007f76:	bfb8      	it	lt
 8007f78:	9204      	strlt	r2, [sp, #16]
 8007f7a:	7823      	ldrb	r3, [r4, #0]
 8007f7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f7e:	d10a      	bne.n	8007f96 <_vfiprintf_r+0x156>
 8007f80:	7863      	ldrb	r3, [r4, #1]
 8007f82:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f84:	d132      	bne.n	8007fec <_vfiprintf_r+0x1ac>
 8007f86:	9b03      	ldr	r3, [sp, #12]
 8007f88:	1d1a      	adds	r2, r3, #4
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	9203      	str	r2, [sp, #12]
 8007f8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f92:	3402      	adds	r4, #2
 8007f94:	9305      	str	r3, [sp, #20]
 8007f96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800806c <_vfiprintf_r+0x22c>
 8007f9a:	7821      	ldrb	r1, [r4, #0]
 8007f9c:	2203      	movs	r2, #3
 8007f9e:	4650      	mov	r0, sl
 8007fa0:	f7f8 f91e 	bl	80001e0 <memchr>
 8007fa4:	b138      	cbz	r0, 8007fb6 <_vfiprintf_r+0x176>
 8007fa6:	9b04      	ldr	r3, [sp, #16]
 8007fa8:	eba0 000a 	sub.w	r0, r0, sl
 8007fac:	2240      	movs	r2, #64	@ 0x40
 8007fae:	4082      	lsls	r2, r0
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	3401      	adds	r4, #1
 8007fb4:	9304      	str	r3, [sp, #16]
 8007fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fba:	4829      	ldr	r0, [pc, #164]	@ (8008060 <_vfiprintf_r+0x220>)
 8007fbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fc0:	2206      	movs	r2, #6
 8007fc2:	f7f8 f90d 	bl	80001e0 <memchr>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	d03f      	beq.n	800804a <_vfiprintf_r+0x20a>
 8007fca:	4b26      	ldr	r3, [pc, #152]	@ (8008064 <_vfiprintf_r+0x224>)
 8007fcc:	bb1b      	cbnz	r3, 8008016 <_vfiprintf_r+0x1d6>
 8007fce:	9b03      	ldr	r3, [sp, #12]
 8007fd0:	3307      	adds	r3, #7
 8007fd2:	f023 0307 	bic.w	r3, r3, #7
 8007fd6:	3308      	adds	r3, #8
 8007fd8:	9303      	str	r3, [sp, #12]
 8007fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fdc:	443b      	add	r3, r7
 8007fde:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fe0:	e76a      	b.n	8007eb8 <_vfiprintf_r+0x78>
 8007fe2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	2001      	movs	r0, #1
 8007fea:	e7a8      	b.n	8007f3e <_vfiprintf_r+0xfe>
 8007fec:	2300      	movs	r3, #0
 8007fee:	3401      	adds	r4, #1
 8007ff0:	9305      	str	r3, [sp, #20]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	f04f 0c0a 	mov.w	ip, #10
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ffe:	3a30      	subs	r2, #48	@ 0x30
 8008000:	2a09      	cmp	r2, #9
 8008002:	d903      	bls.n	800800c <_vfiprintf_r+0x1cc>
 8008004:	2b00      	cmp	r3, #0
 8008006:	d0c6      	beq.n	8007f96 <_vfiprintf_r+0x156>
 8008008:	9105      	str	r1, [sp, #20]
 800800a:	e7c4      	b.n	8007f96 <_vfiprintf_r+0x156>
 800800c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008010:	4604      	mov	r4, r0
 8008012:	2301      	movs	r3, #1
 8008014:	e7f0      	b.n	8007ff8 <_vfiprintf_r+0x1b8>
 8008016:	ab03      	add	r3, sp, #12
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	462a      	mov	r2, r5
 800801c:	4b12      	ldr	r3, [pc, #72]	@ (8008068 <_vfiprintf_r+0x228>)
 800801e:	a904      	add	r1, sp, #16
 8008020:	4630      	mov	r0, r6
 8008022:	f7fc fb7f 	bl	8004724 <_printf_float>
 8008026:	4607      	mov	r7, r0
 8008028:	1c78      	adds	r0, r7, #1
 800802a:	d1d6      	bne.n	8007fda <_vfiprintf_r+0x19a>
 800802c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800802e:	07d9      	lsls	r1, r3, #31
 8008030:	d405      	bmi.n	800803e <_vfiprintf_r+0x1fe>
 8008032:	89ab      	ldrh	r3, [r5, #12]
 8008034:	059a      	lsls	r2, r3, #22
 8008036:	d402      	bmi.n	800803e <_vfiprintf_r+0x1fe>
 8008038:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800803a:	f7fd faf5 	bl	8005628 <__retarget_lock_release_recursive>
 800803e:	89ab      	ldrh	r3, [r5, #12]
 8008040:	065b      	lsls	r3, r3, #25
 8008042:	f53f af1f 	bmi.w	8007e84 <_vfiprintf_r+0x44>
 8008046:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008048:	e71e      	b.n	8007e88 <_vfiprintf_r+0x48>
 800804a:	ab03      	add	r3, sp, #12
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	462a      	mov	r2, r5
 8008050:	4b05      	ldr	r3, [pc, #20]	@ (8008068 <_vfiprintf_r+0x228>)
 8008052:	a904      	add	r1, sp, #16
 8008054:	4630      	mov	r0, r6
 8008056:	f7fc fdfd 	bl	8004c54 <_printf_i>
 800805a:	e7e4      	b.n	8008026 <_vfiprintf_r+0x1e6>
 800805c:	080091c9 	.word	0x080091c9
 8008060:	080091d3 	.word	0x080091d3
 8008064:	08004725 	.word	0x08004725
 8008068:	08007e1b 	.word	0x08007e1b
 800806c:	080091cf 	.word	0x080091cf

08008070 <__sflush_r>:
 8008070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008078:	0716      	lsls	r6, r2, #28
 800807a:	4605      	mov	r5, r0
 800807c:	460c      	mov	r4, r1
 800807e:	d454      	bmi.n	800812a <__sflush_r+0xba>
 8008080:	684b      	ldr	r3, [r1, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	dc02      	bgt.n	800808c <__sflush_r+0x1c>
 8008086:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008088:	2b00      	cmp	r3, #0
 800808a:	dd48      	ble.n	800811e <__sflush_r+0xae>
 800808c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800808e:	2e00      	cmp	r6, #0
 8008090:	d045      	beq.n	800811e <__sflush_r+0xae>
 8008092:	2300      	movs	r3, #0
 8008094:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008098:	682f      	ldr	r7, [r5, #0]
 800809a:	6a21      	ldr	r1, [r4, #32]
 800809c:	602b      	str	r3, [r5, #0]
 800809e:	d030      	beq.n	8008102 <__sflush_r+0x92>
 80080a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80080a2:	89a3      	ldrh	r3, [r4, #12]
 80080a4:	0759      	lsls	r1, r3, #29
 80080a6:	d505      	bpl.n	80080b4 <__sflush_r+0x44>
 80080a8:	6863      	ldr	r3, [r4, #4]
 80080aa:	1ad2      	subs	r2, r2, r3
 80080ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80080ae:	b10b      	cbz	r3, 80080b4 <__sflush_r+0x44>
 80080b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80080b2:	1ad2      	subs	r2, r2, r3
 80080b4:	2300      	movs	r3, #0
 80080b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80080b8:	6a21      	ldr	r1, [r4, #32]
 80080ba:	4628      	mov	r0, r5
 80080bc:	47b0      	blx	r6
 80080be:	1c43      	adds	r3, r0, #1
 80080c0:	89a3      	ldrh	r3, [r4, #12]
 80080c2:	d106      	bne.n	80080d2 <__sflush_r+0x62>
 80080c4:	6829      	ldr	r1, [r5, #0]
 80080c6:	291d      	cmp	r1, #29
 80080c8:	d82b      	bhi.n	8008122 <__sflush_r+0xb2>
 80080ca:	4a2a      	ldr	r2, [pc, #168]	@ (8008174 <__sflush_r+0x104>)
 80080cc:	410a      	asrs	r2, r1
 80080ce:	07d6      	lsls	r6, r2, #31
 80080d0:	d427      	bmi.n	8008122 <__sflush_r+0xb2>
 80080d2:	2200      	movs	r2, #0
 80080d4:	6062      	str	r2, [r4, #4]
 80080d6:	04d9      	lsls	r1, r3, #19
 80080d8:	6922      	ldr	r2, [r4, #16]
 80080da:	6022      	str	r2, [r4, #0]
 80080dc:	d504      	bpl.n	80080e8 <__sflush_r+0x78>
 80080de:	1c42      	adds	r2, r0, #1
 80080e0:	d101      	bne.n	80080e6 <__sflush_r+0x76>
 80080e2:	682b      	ldr	r3, [r5, #0]
 80080e4:	b903      	cbnz	r3, 80080e8 <__sflush_r+0x78>
 80080e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80080e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080ea:	602f      	str	r7, [r5, #0]
 80080ec:	b1b9      	cbz	r1, 800811e <__sflush_r+0xae>
 80080ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080f2:	4299      	cmp	r1, r3
 80080f4:	d002      	beq.n	80080fc <__sflush_r+0x8c>
 80080f6:	4628      	mov	r0, r5
 80080f8:	f7fe f8ea 	bl	80062d0 <_free_r>
 80080fc:	2300      	movs	r3, #0
 80080fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8008100:	e00d      	b.n	800811e <__sflush_r+0xae>
 8008102:	2301      	movs	r3, #1
 8008104:	4628      	mov	r0, r5
 8008106:	47b0      	blx	r6
 8008108:	4602      	mov	r2, r0
 800810a:	1c50      	adds	r0, r2, #1
 800810c:	d1c9      	bne.n	80080a2 <__sflush_r+0x32>
 800810e:	682b      	ldr	r3, [r5, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d0c6      	beq.n	80080a2 <__sflush_r+0x32>
 8008114:	2b1d      	cmp	r3, #29
 8008116:	d001      	beq.n	800811c <__sflush_r+0xac>
 8008118:	2b16      	cmp	r3, #22
 800811a:	d11e      	bne.n	800815a <__sflush_r+0xea>
 800811c:	602f      	str	r7, [r5, #0]
 800811e:	2000      	movs	r0, #0
 8008120:	e022      	b.n	8008168 <__sflush_r+0xf8>
 8008122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008126:	b21b      	sxth	r3, r3
 8008128:	e01b      	b.n	8008162 <__sflush_r+0xf2>
 800812a:	690f      	ldr	r7, [r1, #16]
 800812c:	2f00      	cmp	r7, #0
 800812e:	d0f6      	beq.n	800811e <__sflush_r+0xae>
 8008130:	0793      	lsls	r3, r2, #30
 8008132:	680e      	ldr	r6, [r1, #0]
 8008134:	bf08      	it	eq
 8008136:	694b      	ldreq	r3, [r1, #20]
 8008138:	600f      	str	r7, [r1, #0]
 800813a:	bf18      	it	ne
 800813c:	2300      	movne	r3, #0
 800813e:	eba6 0807 	sub.w	r8, r6, r7
 8008142:	608b      	str	r3, [r1, #8]
 8008144:	f1b8 0f00 	cmp.w	r8, #0
 8008148:	dde9      	ble.n	800811e <__sflush_r+0xae>
 800814a:	6a21      	ldr	r1, [r4, #32]
 800814c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800814e:	4643      	mov	r3, r8
 8008150:	463a      	mov	r2, r7
 8008152:	4628      	mov	r0, r5
 8008154:	47b0      	blx	r6
 8008156:	2800      	cmp	r0, #0
 8008158:	dc08      	bgt.n	800816c <__sflush_r+0xfc>
 800815a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800815e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008162:	81a3      	strh	r3, [r4, #12]
 8008164:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800816c:	4407      	add	r7, r0
 800816e:	eba8 0800 	sub.w	r8, r8, r0
 8008172:	e7e7      	b.n	8008144 <__sflush_r+0xd4>
 8008174:	dfbffffe 	.word	0xdfbffffe

08008178 <_fflush_r>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	690b      	ldr	r3, [r1, #16]
 800817c:	4605      	mov	r5, r0
 800817e:	460c      	mov	r4, r1
 8008180:	b913      	cbnz	r3, 8008188 <_fflush_r+0x10>
 8008182:	2500      	movs	r5, #0
 8008184:	4628      	mov	r0, r5
 8008186:	bd38      	pop	{r3, r4, r5, pc}
 8008188:	b118      	cbz	r0, 8008192 <_fflush_r+0x1a>
 800818a:	6a03      	ldr	r3, [r0, #32]
 800818c:	b90b      	cbnz	r3, 8008192 <_fflush_r+0x1a>
 800818e:	f7fd f921 	bl	80053d4 <__sinit>
 8008192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d0f3      	beq.n	8008182 <_fflush_r+0xa>
 800819a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800819c:	07d0      	lsls	r0, r2, #31
 800819e:	d404      	bmi.n	80081aa <_fflush_r+0x32>
 80081a0:	0599      	lsls	r1, r3, #22
 80081a2:	d402      	bmi.n	80081aa <_fflush_r+0x32>
 80081a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081a6:	f7fd fa3e 	bl	8005626 <__retarget_lock_acquire_recursive>
 80081aa:	4628      	mov	r0, r5
 80081ac:	4621      	mov	r1, r4
 80081ae:	f7ff ff5f 	bl	8008070 <__sflush_r>
 80081b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081b4:	07da      	lsls	r2, r3, #31
 80081b6:	4605      	mov	r5, r0
 80081b8:	d4e4      	bmi.n	8008184 <_fflush_r+0xc>
 80081ba:	89a3      	ldrh	r3, [r4, #12]
 80081bc:	059b      	lsls	r3, r3, #22
 80081be:	d4e1      	bmi.n	8008184 <_fflush_r+0xc>
 80081c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081c2:	f7fd fa31 	bl	8005628 <__retarget_lock_release_recursive>
 80081c6:	e7dd      	b.n	8008184 <_fflush_r+0xc>

080081c8 <__swbuf_r>:
 80081c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ca:	460e      	mov	r6, r1
 80081cc:	4614      	mov	r4, r2
 80081ce:	4605      	mov	r5, r0
 80081d0:	b118      	cbz	r0, 80081da <__swbuf_r+0x12>
 80081d2:	6a03      	ldr	r3, [r0, #32]
 80081d4:	b90b      	cbnz	r3, 80081da <__swbuf_r+0x12>
 80081d6:	f7fd f8fd 	bl	80053d4 <__sinit>
 80081da:	69a3      	ldr	r3, [r4, #24]
 80081dc:	60a3      	str	r3, [r4, #8]
 80081de:	89a3      	ldrh	r3, [r4, #12]
 80081e0:	071a      	lsls	r2, r3, #28
 80081e2:	d501      	bpl.n	80081e8 <__swbuf_r+0x20>
 80081e4:	6923      	ldr	r3, [r4, #16]
 80081e6:	b943      	cbnz	r3, 80081fa <__swbuf_r+0x32>
 80081e8:	4621      	mov	r1, r4
 80081ea:	4628      	mov	r0, r5
 80081ec:	f000 f82a 	bl	8008244 <__swsetup_r>
 80081f0:	b118      	cbz	r0, 80081fa <__swbuf_r+0x32>
 80081f2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80081f6:	4638      	mov	r0, r7
 80081f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	6922      	ldr	r2, [r4, #16]
 80081fe:	1a98      	subs	r0, r3, r2
 8008200:	6963      	ldr	r3, [r4, #20]
 8008202:	b2f6      	uxtb	r6, r6
 8008204:	4283      	cmp	r3, r0
 8008206:	4637      	mov	r7, r6
 8008208:	dc05      	bgt.n	8008216 <__swbuf_r+0x4e>
 800820a:	4621      	mov	r1, r4
 800820c:	4628      	mov	r0, r5
 800820e:	f7ff ffb3 	bl	8008178 <_fflush_r>
 8008212:	2800      	cmp	r0, #0
 8008214:	d1ed      	bne.n	80081f2 <__swbuf_r+0x2a>
 8008216:	68a3      	ldr	r3, [r4, #8]
 8008218:	3b01      	subs	r3, #1
 800821a:	60a3      	str	r3, [r4, #8]
 800821c:	6823      	ldr	r3, [r4, #0]
 800821e:	1c5a      	adds	r2, r3, #1
 8008220:	6022      	str	r2, [r4, #0]
 8008222:	701e      	strb	r6, [r3, #0]
 8008224:	6962      	ldr	r2, [r4, #20]
 8008226:	1c43      	adds	r3, r0, #1
 8008228:	429a      	cmp	r2, r3
 800822a:	d004      	beq.n	8008236 <__swbuf_r+0x6e>
 800822c:	89a3      	ldrh	r3, [r4, #12]
 800822e:	07db      	lsls	r3, r3, #31
 8008230:	d5e1      	bpl.n	80081f6 <__swbuf_r+0x2e>
 8008232:	2e0a      	cmp	r6, #10
 8008234:	d1df      	bne.n	80081f6 <__swbuf_r+0x2e>
 8008236:	4621      	mov	r1, r4
 8008238:	4628      	mov	r0, r5
 800823a:	f7ff ff9d 	bl	8008178 <_fflush_r>
 800823e:	2800      	cmp	r0, #0
 8008240:	d0d9      	beq.n	80081f6 <__swbuf_r+0x2e>
 8008242:	e7d6      	b.n	80081f2 <__swbuf_r+0x2a>

08008244 <__swsetup_r>:
 8008244:	b538      	push	{r3, r4, r5, lr}
 8008246:	4b29      	ldr	r3, [pc, #164]	@ (80082ec <__swsetup_r+0xa8>)
 8008248:	4605      	mov	r5, r0
 800824a:	6818      	ldr	r0, [r3, #0]
 800824c:	460c      	mov	r4, r1
 800824e:	b118      	cbz	r0, 8008258 <__swsetup_r+0x14>
 8008250:	6a03      	ldr	r3, [r0, #32]
 8008252:	b90b      	cbnz	r3, 8008258 <__swsetup_r+0x14>
 8008254:	f7fd f8be 	bl	80053d4 <__sinit>
 8008258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800825c:	0719      	lsls	r1, r3, #28
 800825e:	d422      	bmi.n	80082a6 <__swsetup_r+0x62>
 8008260:	06da      	lsls	r2, r3, #27
 8008262:	d407      	bmi.n	8008274 <__swsetup_r+0x30>
 8008264:	2209      	movs	r2, #9
 8008266:	602a      	str	r2, [r5, #0]
 8008268:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800826c:	81a3      	strh	r3, [r4, #12]
 800826e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008272:	e033      	b.n	80082dc <__swsetup_r+0x98>
 8008274:	0758      	lsls	r0, r3, #29
 8008276:	d512      	bpl.n	800829e <__swsetup_r+0x5a>
 8008278:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800827a:	b141      	cbz	r1, 800828e <__swsetup_r+0x4a>
 800827c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008280:	4299      	cmp	r1, r3
 8008282:	d002      	beq.n	800828a <__swsetup_r+0x46>
 8008284:	4628      	mov	r0, r5
 8008286:	f7fe f823 	bl	80062d0 <_free_r>
 800828a:	2300      	movs	r3, #0
 800828c:	6363      	str	r3, [r4, #52]	@ 0x34
 800828e:	89a3      	ldrh	r3, [r4, #12]
 8008290:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008294:	81a3      	strh	r3, [r4, #12]
 8008296:	2300      	movs	r3, #0
 8008298:	6063      	str	r3, [r4, #4]
 800829a:	6923      	ldr	r3, [r4, #16]
 800829c:	6023      	str	r3, [r4, #0]
 800829e:	89a3      	ldrh	r3, [r4, #12]
 80082a0:	f043 0308 	orr.w	r3, r3, #8
 80082a4:	81a3      	strh	r3, [r4, #12]
 80082a6:	6923      	ldr	r3, [r4, #16]
 80082a8:	b94b      	cbnz	r3, 80082be <__swsetup_r+0x7a>
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80082b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082b4:	d003      	beq.n	80082be <__swsetup_r+0x7a>
 80082b6:	4621      	mov	r1, r4
 80082b8:	4628      	mov	r0, r5
 80082ba:	f000 fc5d 	bl	8008b78 <__smakebuf_r>
 80082be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082c2:	f013 0201 	ands.w	r2, r3, #1
 80082c6:	d00a      	beq.n	80082de <__swsetup_r+0x9a>
 80082c8:	2200      	movs	r2, #0
 80082ca:	60a2      	str	r2, [r4, #8]
 80082cc:	6962      	ldr	r2, [r4, #20]
 80082ce:	4252      	negs	r2, r2
 80082d0:	61a2      	str	r2, [r4, #24]
 80082d2:	6922      	ldr	r2, [r4, #16]
 80082d4:	b942      	cbnz	r2, 80082e8 <__swsetup_r+0xa4>
 80082d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80082da:	d1c5      	bne.n	8008268 <__swsetup_r+0x24>
 80082dc:	bd38      	pop	{r3, r4, r5, pc}
 80082de:	0799      	lsls	r1, r3, #30
 80082e0:	bf58      	it	pl
 80082e2:	6962      	ldrpl	r2, [r4, #20]
 80082e4:	60a2      	str	r2, [r4, #8]
 80082e6:	e7f4      	b.n	80082d2 <__swsetup_r+0x8e>
 80082e8:	2000      	movs	r0, #0
 80082ea:	e7f7      	b.n	80082dc <__swsetup_r+0x98>
 80082ec:	20000018 	.word	0x20000018

080082f0 <memmove>:
 80082f0:	4288      	cmp	r0, r1
 80082f2:	b510      	push	{r4, lr}
 80082f4:	eb01 0402 	add.w	r4, r1, r2
 80082f8:	d902      	bls.n	8008300 <memmove+0x10>
 80082fa:	4284      	cmp	r4, r0
 80082fc:	4623      	mov	r3, r4
 80082fe:	d807      	bhi.n	8008310 <memmove+0x20>
 8008300:	1e43      	subs	r3, r0, #1
 8008302:	42a1      	cmp	r1, r4
 8008304:	d008      	beq.n	8008318 <memmove+0x28>
 8008306:	f811 2b01 	ldrb.w	r2, [r1], #1
 800830a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800830e:	e7f8      	b.n	8008302 <memmove+0x12>
 8008310:	4402      	add	r2, r0
 8008312:	4601      	mov	r1, r0
 8008314:	428a      	cmp	r2, r1
 8008316:	d100      	bne.n	800831a <memmove+0x2a>
 8008318:	bd10      	pop	{r4, pc}
 800831a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800831e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008322:	e7f7      	b.n	8008314 <memmove+0x24>

08008324 <strncmp>:
 8008324:	b510      	push	{r4, lr}
 8008326:	b16a      	cbz	r2, 8008344 <strncmp+0x20>
 8008328:	3901      	subs	r1, #1
 800832a:	1884      	adds	r4, r0, r2
 800832c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008330:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008334:	429a      	cmp	r2, r3
 8008336:	d103      	bne.n	8008340 <strncmp+0x1c>
 8008338:	42a0      	cmp	r0, r4
 800833a:	d001      	beq.n	8008340 <strncmp+0x1c>
 800833c:	2a00      	cmp	r2, #0
 800833e:	d1f5      	bne.n	800832c <strncmp+0x8>
 8008340:	1ad0      	subs	r0, r2, r3
 8008342:	bd10      	pop	{r4, pc}
 8008344:	4610      	mov	r0, r2
 8008346:	e7fc      	b.n	8008342 <strncmp+0x1e>

08008348 <_sbrk_r>:
 8008348:	b538      	push	{r3, r4, r5, lr}
 800834a:	4d06      	ldr	r5, [pc, #24]	@ (8008364 <_sbrk_r+0x1c>)
 800834c:	2300      	movs	r3, #0
 800834e:	4604      	mov	r4, r0
 8008350:	4608      	mov	r0, r1
 8008352:	602b      	str	r3, [r5, #0]
 8008354:	f7f9 fc86 	bl	8001c64 <_sbrk>
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	d102      	bne.n	8008362 <_sbrk_r+0x1a>
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	b103      	cbz	r3, 8008362 <_sbrk_r+0x1a>
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	bd38      	pop	{r3, r4, r5, pc}
 8008364:	20000420 	.word	0x20000420

08008368 <memcpy>:
 8008368:	440a      	add	r2, r1
 800836a:	4291      	cmp	r1, r2
 800836c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008370:	d100      	bne.n	8008374 <memcpy+0xc>
 8008372:	4770      	bx	lr
 8008374:	b510      	push	{r4, lr}
 8008376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800837a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800837e:	4291      	cmp	r1, r2
 8008380:	d1f9      	bne.n	8008376 <memcpy+0xe>
 8008382:	bd10      	pop	{r4, pc}
 8008384:	0000      	movs	r0, r0
	...

08008388 <nan>:
 8008388:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008390 <nan+0x8>
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	00000000 	.word	0x00000000
 8008394:	7ff80000 	.word	0x7ff80000

08008398 <__assert_func>:
 8008398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800839a:	4614      	mov	r4, r2
 800839c:	461a      	mov	r2, r3
 800839e:	4b09      	ldr	r3, [pc, #36]	@ (80083c4 <__assert_func+0x2c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4605      	mov	r5, r0
 80083a4:	68d8      	ldr	r0, [r3, #12]
 80083a6:	b954      	cbnz	r4, 80083be <__assert_func+0x26>
 80083a8:	4b07      	ldr	r3, [pc, #28]	@ (80083c8 <__assert_func+0x30>)
 80083aa:	461c      	mov	r4, r3
 80083ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083b0:	9100      	str	r1, [sp, #0]
 80083b2:	462b      	mov	r3, r5
 80083b4:	4905      	ldr	r1, [pc, #20]	@ (80083cc <__assert_func+0x34>)
 80083b6:	f000 fba7 	bl	8008b08 <fiprintf>
 80083ba:	f000 fc3b 	bl	8008c34 <abort>
 80083be:	4b04      	ldr	r3, [pc, #16]	@ (80083d0 <__assert_func+0x38>)
 80083c0:	e7f4      	b.n	80083ac <__assert_func+0x14>
 80083c2:	bf00      	nop
 80083c4:	20000018 	.word	0x20000018
 80083c8:	0800921d 	.word	0x0800921d
 80083cc:	080091ef 	.word	0x080091ef
 80083d0:	080091e2 	.word	0x080091e2

080083d4 <_calloc_r>:
 80083d4:	b570      	push	{r4, r5, r6, lr}
 80083d6:	fba1 5402 	umull	r5, r4, r1, r2
 80083da:	b93c      	cbnz	r4, 80083ec <_calloc_r+0x18>
 80083dc:	4629      	mov	r1, r5
 80083de:	f7fd ffeb 	bl	80063b8 <_malloc_r>
 80083e2:	4606      	mov	r6, r0
 80083e4:	b928      	cbnz	r0, 80083f2 <_calloc_r+0x1e>
 80083e6:	2600      	movs	r6, #0
 80083e8:	4630      	mov	r0, r6
 80083ea:	bd70      	pop	{r4, r5, r6, pc}
 80083ec:	220c      	movs	r2, #12
 80083ee:	6002      	str	r2, [r0, #0]
 80083f0:	e7f9      	b.n	80083e6 <_calloc_r+0x12>
 80083f2:	462a      	mov	r2, r5
 80083f4:	4621      	mov	r1, r4
 80083f6:	f7fd f898 	bl	800552a <memset>
 80083fa:	e7f5      	b.n	80083e8 <_calloc_r+0x14>

080083fc <rshift>:
 80083fc:	6903      	ldr	r3, [r0, #16]
 80083fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008402:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008406:	ea4f 1261 	mov.w	r2, r1, asr #5
 800840a:	f100 0414 	add.w	r4, r0, #20
 800840e:	dd45      	ble.n	800849c <rshift+0xa0>
 8008410:	f011 011f 	ands.w	r1, r1, #31
 8008414:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008418:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800841c:	d10c      	bne.n	8008438 <rshift+0x3c>
 800841e:	f100 0710 	add.w	r7, r0, #16
 8008422:	4629      	mov	r1, r5
 8008424:	42b1      	cmp	r1, r6
 8008426:	d334      	bcc.n	8008492 <rshift+0x96>
 8008428:	1a9b      	subs	r3, r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	1eea      	subs	r2, r5, #3
 800842e:	4296      	cmp	r6, r2
 8008430:	bf38      	it	cc
 8008432:	2300      	movcc	r3, #0
 8008434:	4423      	add	r3, r4
 8008436:	e015      	b.n	8008464 <rshift+0x68>
 8008438:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800843c:	f1c1 0820 	rsb	r8, r1, #32
 8008440:	40cf      	lsrs	r7, r1
 8008442:	f105 0e04 	add.w	lr, r5, #4
 8008446:	46a1      	mov	r9, r4
 8008448:	4576      	cmp	r6, lr
 800844a:	46f4      	mov	ip, lr
 800844c:	d815      	bhi.n	800847a <rshift+0x7e>
 800844e:	1a9a      	subs	r2, r3, r2
 8008450:	0092      	lsls	r2, r2, #2
 8008452:	3a04      	subs	r2, #4
 8008454:	3501      	adds	r5, #1
 8008456:	42ae      	cmp	r6, r5
 8008458:	bf38      	it	cc
 800845a:	2200      	movcc	r2, #0
 800845c:	18a3      	adds	r3, r4, r2
 800845e:	50a7      	str	r7, [r4, r2]
 8008460:	b107      	cbz	r7, 8008464 <rshift+0x68>
 8008462:	3304      	adds	r3, #4
 8008464:	1b1a      	subs	r2, r3, r4
 8008466:	42a3      	cmp	r3, r4
 8008468:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800846c:	bf08      	it	eq
 800846e:	2300      	moveq	r3, #0
 8008470:	6102      	str	r2, [r0, #16]
 8008472:	bf08      	it	eq
 8008474:	6143      	streq	r3, [r0, #20]
 8008476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800847a:	f8dc c000 	ldr.w	ip, [ip]
 800847e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008482:	ea4c 0707 	orr.w	r7, ip, r7
 8008486:	f849 7b04 	str.w	r7, [r9], #4
 800848a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800848e:	40cf      	lsrs	r7, r1
 8008490:	e7da      	b.n	8008448 <rshift+0x4c>
 8008492:	f851 cb04 	ldr.w	ip, [r1], #4
 8008496:	f847 cf04 	str.w	ip, [r7, #4]!
 800849a:	e7c3      	b.n	8008424 <rshift+0x28>
 800849c:	4623      	mov	r3, r4
 800849e:	e7e1      	b.n	8008464 <rshift+0x68>

080084a0 <__hexdig_fun>:
 80084a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80084a4:	2b09      	cmp	r3, #9
 80084a6:	d802      	bhi.n	80084ae <__hexdig_fun+0xe>
 80084a8:	3820      	subs	r0, #32
 80084aa:	b2c0      	uxtb	r0, r0
 80084ac:	4770      	bx	lr
 80084ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80084b2:	2b05      	cmp	r3, #5
 80084b4:	d801      	bhi.n	80084ba <__hexdig_fun+0x1a>
 80084b6:	3847      	subs	r0, #71	@ 0x47
 80084b8:	e7f7      	b.n	80084aa <__hexdig_fun+0xa>
 80084ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80084be:	2b05      	cmp	r3, #5
 80084c0:	d801      	bhi.n	80084c6 <__hexdig_fun+0x26>
 80084c2:	3827      	subs	r0, #39	@ 0x27
 80084c4:	e7f1      	b.n	80084aa <__hexdig_fun+0xa>
 80084c6:	2000      	movs	r0, #0
 80084c8:	4770      	bx	lr
	...

080084cc <__gethex>:
 80084cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d0:	b085      	sub	sp, #20
 80084d2:	468a      	mov	sl, r1
 80084d4:	9302      	str	r3, [sp, #8]
 80084d6:	680b      	ldr	r3, [r1, #0]
 80084d8:	9001      	str	r0, [sp, #4]
 80084da:	4690      	mov	r8, r2
 80084dc:	1c9c      	adds	r4, r3, #2
 80084de:	46a1      	mov	r9, r4
 80084e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80084e4:	2830      	cmp	r0, #48	@ 0x30
 80084e6:	d0fa      	beq.n	80084de <__gethex+0x12>
 80084e8:	eba9 0303 	sub.w	r3, r9, r3
 80084ec:	f1a3 0b02 	sub.w	fp, r3, #2
 80084f0:	f7ff ffd6 	bl	80084a0 <__hexdig_fun>
 80084f4:	4605      	mov	r5, r0
 80084f6:	2800      	cmp	r0, #0
 80084f8:	d168      	bne.n	80085cc <__gethex+0x100>
 80084fa:	49a0      	ldr	r1, [pc, #640]	@ (800877c <__gethex+0x2b0>)
 80084fc:	2201      	movs	r2, #1
 80084fe:	4648      	mov	r0, r9
 8008500:	f7ff ff10 	bl	8008324 <strncmp>
 8008504:	4607      	mov	r7, r0
 8008506:	2800      	cmp	r0, #0
 8008508:	d167      	bne.n	80085da <__gethex+0x10e>
 800850a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800850e:	4626      	mov	r6, r4
 8008510:	f7ff ffc6 	bl	80084a0 <__hexdig_fun>
 8008514:	2800      	cmp	r0, #0
 8008516:	d062      	beq.n	80085de <__gethex+0x112>
 8008518:	4623      	mov	r3, r4
 800851a:	7818      	ldrb	r0, [r3, #0]
 800851c:	2830      	cmp	r0, #48	@ 0x30
 800851e:	4699      	mov	r9, r3
 8008520:	f103 0301 	add.w	r3, r3, #1
 8008524:	d0f9      	beq.n	800851a <__gethex+0x4e>
 8008526:	f7ff ffbb 	bl	80084a0 <__hexdig_fun>
 800852a:	fab0 f580 	clz	r5, r0
 800852e:	096d      	lsrs	r5, r5, #5
 8008530:	f04f 0b01 	mov.w	fp, #1
 8008534:	464a      	mov	r2, r9
 8008536:	4616      	mov	r6, r2
 8008538:	3201      	adds	r2, #1
 800853a:	7830      	ldrb	r0, [r6, #0]
 800853c:	f7ff ffb0 	bl	80084a0 <__hexdig_fun>
 8008540:	2800      	cmp	r0, #0
 8008542:	d1f8      	bne.n	8008536 <__gethex+0x6a>
 8008544:	498d      	ldr	r1, [pc, #564]	@ (800877c <__gethex+0x2b0>)
 8008546:	2201      	movs	r2, #1
 8008548:	4630      	mov	r0, r6
 800854a:	f7ff feeb 	bl	8008324 <strncmp>
 800854e:	2800      	cmp	r0, #0
 8008550:	d13f      	bne.n	80085d2 <__gethex+0x106>
 8008552:	b944      	cbnz	r4, 8008566 <__gethex+0x9a>
 8008554:	1c74      	adds	r4, r6, #1
 8008556:	4622      	mov	r2, r4
 8008558:	4616      	mov	r6, r2
 800855a:	3201      	adds	r2, #1
 800855c:	7830      	ldrb	r0, [r6, #0]
 800855e:	f7ff ff9f 	bl	80084a0 <__hexdig_fun>
 8008562:	2800      	cmp	r0, #0
 8008564:	d1f8      	bne.n	8008558 <__gethex+0x8c>
 8008566:	1ba4      	subs	r4, r4, r6
 8008568:	00a7      	lsls	r7, r4, #2
 800856a:	7833      	ldrb	r3, [r6, #0]
 800856c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008570:	2b50      	cmp	r3, #80	@ 0x50
 8008572:	d13e      	bne.n	80085f2 <__gethex+0x126>
 8008574:	7873      	ldrb	r3, [r6, #1]
 8008576:	2b2b      	cmp	r3, #43	@ 0x2b
 8008578:	d033      	beq.n	80085e2 <__gethex+0x116>
 800857a:	2b2d      	cmp	r3, #45	@ 0x2d
 800857c:	d034      	beq.n	80085e8 <__gethex+0x11c>
 800857e:	1c71      	adds	r1, r6, #1
 8008580:	2400      	movs	r4, #0
 8008582:	7808      	ldrb	r0, [r1, #0]
 8008584:	f7ff ff8c 	bl	80084a0 <__hexdig_fun>
 8008588:	1e43      	subs	r3, r0, #1
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b18      	cmp	r3, #24
 800858e:	d830      	bhi.n	80085f2 <__gethex+0x126>
 8008590:	f1a0 0210 	sub.w	r2, r0, #16
 8008594:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008598:	f7ff ff82 	bl	80084a0 <__hexdig_fun>
 800859c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80085a0:	fa5f fc8c 	uxtb.w	ip, ip
 80085a4:	f1bc 0f18 	cmp.w	ip, #24
 80085a8:	f04f 030a 	mov.w	r3, #10
 80085ac:	d91e      	bls.n	80085ec <__gethex+0x120>
 80085ae:	b104      	cbz	r4, 80085b2 <__gethex+0xe6>
 80085b0:	4252      	negs	r2, r2
 80085b2:	4417      	add	r7, r2
 80085b4:	f8ca 1000 	str.w	r1, [sl]
 80085b8:	b1ed      	cbz	r5, 80085f6 <__gethex+0x12a>
 80085ba:	f1bb 0f00 	cmp.w	fp, #0
 80085be:	bf0c      	ite	eq
 80085c0:	2506      	moveq	r5, #6
 80085c2:	2500      	movne	r5, #0
 80085c4:	4628      	mov	r0, r5
 80085c6:	b005      	add	sp, #20
 80085c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085cc:	2500      	movs	r5, #0
 80085ce:	462c      	mov	r4, r5
 80085d0:	e7b0      	b.n	8008534 <__gethex+0x68>
 80085d2:	2c00      	cmp	r4, #0
 80085d4:	d1c7      	bne.n	8008566 <__gethex+0x9a>
 80085d6:	4627      	mov	r7, r4
 80085d8:	e7c7      	b.n	800856a <__gethex+0x9e>
 80085da:	464e      	mov	r6, r9
 80085dc:	462f      	mov	r7, r5
 80085de:	2501      	movs	r5, #1
 80085e0:	e7c3      	b.n	800856a <__gethex+0x9e>
 80085e2:	2400      	movs	r4, #0
 80085e4:	1cb1      	adds	r1, r6, #2
 80085e6:	e7cc      	b.n	8008582 <__gethex+0xb6>
 80085e8:	2401      	movs	r4, #1
 80085ea:	e7fb      	b.n	80085e4 <__gethex+0x118>
 80085ec:	fb03 0002 	mla	r0, r3, r2, r0
 80085f0:	e7ce      	b.n	8008590 <__gethex+0xc4>
 80085f2:	4631      	mov	r1, r6
 80085f4:	e7de      	b.n	80085b4 <__gethex+0xe8>
 80085f6:	eba6 0309 	sub.w	r3, r6, r9
 80085fa:	3b01      	subs	r3, #1
 80085fc:	4629      	mov	r1, r5
 80085fe:	2b07      	cmp	r3, #7
 8008600:	dc0a      	bgt.n	8008618 <__gethex+0x14c>
 8008602:	9801      	ldr	r0, [sp, #4]
 8008604:	f7fd ff64 	bl	80064d0 <_Balloc>
 8008608:	4604      	mov	r4, r0
 800860a:	b940      	cbnz	r0, 800861e <__gethex+0x152>
 800860c:	4b5c      	ldr	r3, [pc, #368]	@ (8008780 <__gethex+0x2b4>)
 800860e:	4602      	mov	r2, r0
 8008610:	21e4      	movs	r1, #228	@ 0xe4
 8008612:	485c      	ldr	r0, [pc, #368]	@ (8008784 <__gethex+0x2b8>)
 8008614:	f7ff fec0 	bl	8008398 <__assert_func>
 8008618:	3101      	adds	r1, #1
 800861a:	105b      	asrs	r3, r3, #1
 800861c:	e7ef      	b.n	80085fe <__gethex+0x132>
 800861e:	f100 0a14 	add.w	sl, r0, #20
 8008622:	2300      	movs	r3, #0
 8008624:	4655      	mov	r5, sl
 8008626:	469b      	mov	fp, r3
 8008628:	45b1      	cmp	r9, r6
 800862a:	d337      	bcc.n	800869c <__gethex+0x1d0>
 800862c:	f845 bb04 	str.w	fp, [r5], #4
 8008630:	eba5 050a 	sub.w	r5, r5, sl
 8008634:	10ad      	asrs	r5, r5, #2
 8008636:	6125      	str	r5, [r4, #16]
 8008638:	4658      	mov	r0, fp
 800863a:	f7fe f83b 	bl	80066b4 <__hi0bits>
 800863e:	016d      	lsls	r5, r5, #5
 8008640:	f8d8 6000 	ldr.w	r6, [r8]
 8008644:	1a2d      	subs	r5, r5, r0
 8008646:	42b5      	cmp	r5, r6
 8008648:	dd54      	ble.n	80086f4 <__gethex+0x228>
 800864a:	1bad      	subs	r5, r5, r6
 800864c:	4629      	mov	r1, r5
 800864e:	4620      	mov	r0, r4
 8008650:	f7fe fbcf 	bl	8006df2 <__any_on>
 8008654:	4681      	mov	r9, r0
 8008656:	b178      	cbz	r0, 8008678 <__gethex+0x1ac>
 8008658:	1e6b      	subs	r3, r5, #1
 800865a:	1159      	asrs	r1, r3, #5
 800865c:	f003 021f 	and.w	r2, r3, #31
 8008660:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008664:	f04f 0901 	mov.w	r9, #1
 8008668:	fa09 f202 	lsl.w	r2, r9, r2
 800866c:	420a      	tst	r2, r1
 800866e:	d003      	beq.n	8008678 <__gethex+0x1ac>
 8008670:	454b      	cmp	r3, r9
 8008672:	dc36      	bgt.n	80086e2 <__gethex+0x216>
 8008674:	f04f 0902 	mov.w	r9, #2
 8008678:	4629      	mov	r1, r5
 800867a:	4620      	mov	r0, r4
 800867c:	f7ff febe 	bl	80083fc <rshift>
 8008680:	442f      	add	r7, r5
 8008682:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008686:	42bb      	cmp	r3, r7
 8008688:	da42      	bge.n	8008710 <__gethex+0x244>
 800868a:	9801      	ldr	r0, [sp, #4]
 800868c:	4621      	mov	r1, r4
 800868e:	f7fd ff5f 	bl	8006550 <_Bfree>
 8008692:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008694:	2300      	movs	r3, #0
 8008696:	6013      	str	r3, [r2, #0]
 8008698:	25a3      	movs	r5, #163	@ 0xa3
 800869a:	e793      	b.n	80085c4 <__gethex+0xf8>
 800869c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80086a0:	2a2e      	cmp	r2, #46	@ 0x2e
 80086a2:	d012      	beq.n	80086ca <__gethex+0x1fe>
 80086a4:	2b20      	cmp	r3, #32
 80086a6:	d104      	bne.n	80086b2 <__gethex+0x1e6>
 80086a8:	f845 bb04 	str.w	fp, [r5], #4
 80086ac:	f04f 0b00 	mov.w	fp, #0
 80086b0:	465b      	mov	r3, fp
 80086b2:	7830      	ldrb	r0, [r6, #0]
 80086b4:	9303      	str	r3, [sp, #12]
 80086b6:	f7ff fef3 	bl	80084a0 <__hexdig_fun>
 80086ba:	9b03      	ldr	r3, [sp, #12]
 80086bc:	f000 000f 	and.w	r0, r0, #15
 80086c0:	4098      	lsls	r0, r3
 80086c2:	ea4b 0b00 	orr.w	fp, fp, r0
 80086c6:	3304      	adds	r3, #4
 80086c8:	e7ae      	b.n	8008628 <__gethex+0x15c>
 80086ca:	45b1      	cmp	r9, r6
 80086cc:	d8ea      	bhi.n	80086a4 <__gethex+0x1d8>
 80086ce:	492b      	ldr	r1, [pc, #172]	@ (800877c <__gethex+0x2b0>)
 80086d0:	9303      	str	r3, [sp, #12]
 80086d2:	2201      	movs	r2, #1
 80086d4:	4630      	mov	r0, r6
 80086d6:	f7ff fe25 	bl	8008324 <strncmp>
 80086da:	9b03      	ldr	r3, [sp, #12]
 80086dc:	2800      	cmp	r0, #0
 80086de:	d1e1      	bne.n	80086a4 <__gethex+0x1d8>
 80086e0:	e7a2      	b.n	8008628 <__gethex+0x15c>
 80086e2:	1ea9      	subs	r1, r5, #2
 80086e4:	4620      	mov	r0, r4
 80086e6:	f7fe fb84 	bl	8006df2 <__any_on>
 80086ea:	2800      	cmp	r0, #0
 80086ec:	d0c2      	beq.n	8008674 <__gethex+0x1a8>
 80086ee:	f04f 0903 	mov.w	r9, #3
 80086f2:	e7c1      	b.n	8008678 <__gethex+0x1ac>
 80086f4:	da09      	bge.n	800870a <__gethex+0x23e>
 80086f6:	1b75      	subs	r5, r6, r5
 80086f8:	4621      	mov	r1, r4
 80086fa:	9801      	ldr	r0, [sp, #4]
 80086fc:	462a      	mov	r2, r5
 80086fe:	f7fe f93f 	bl	8006980 <__lshift>
 8008702:	1b7f      	subs	r7, r7, r5
 8008704:	4604      	mov	r4, r0
 8008706:	f100 0a14 	add.w	sl, r0, #20
 800870a:	f04f 0900 	mov.w	r9, #0
 800870e:	e7b8      	b.n	8008682 <__gethex+0x1b6>
 8008710:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008714:	42bd      	cmp	r5, r7
 8008716:	dd6f      	ble.n	80087f8 <__gethex+0x32c>
 8008718:	1bed      	subs	r5, r5, r7
 800871a:	42ae      	cmp	r6, r5
 800871c:	dc34      	bgt.n	8008788 <__gethex+0x2bc>
 800871e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008722:	2b02      	cmp	r3, #2
 8008724:	d022      	beq.n	800876c <__gethex+0x2a0>
 8008726:	2b03      	cmp	r3, #3
 8008728:	d024      	beq.n	8008774 <__gethex+0x2a8>
 800872a:	2b01      	cmp	r3, #1
 800872c:	d115      	bne.n	800875a <__gethex+0x28e>
 800872e:	42ae      	cmp	r6, r5
 8008730:	d113      	bne.n	800875a <__gethex+0x28e>
 8008732:	2e01      	cmp	r6, #1
 8008734:	d10b      	bne.n	800874e <__gethex+0x282>
 8008736:	9a02      	ldr	r2, [sp, #8]
 8008738:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800873c:	6013      	str	r3, [r2, #0]
 800873e:	2301      	movs	r3, #1
 8008740:	6123      	str	r3, [r4, #16]
 8008742:	f8ca 3000 	str.w	r3, [sl]
 8008746:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008748:	2562      	movs	r5, #98	@ 0x62
 800874a:	601c      	str	r4, [r3, #0]
 800874c:	e73a      	b.n	80085c4 <__gethex+0xf8>
 800874e:	1e71      	subs	r1, r6, #1
 8008750:	4620      	mov	r0, r4
 8008752:	f7fe fb4e 	bl	8006df2 <__any_on>
 8008756:	2800      	cmp	r0, #0
 8008758:	d1ed      	bne.n	8008736 <__gethex+0x26a>
 800875a:	9801      	ldr	r0, [sp, #4]
 800875c:	4621      	mov	r1, r4
 800875e:	f7fd fef7 	bl	8006550 <_Bfree>
 8008762:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008764:	2300      	movs	r3, #0
 8008766:	6013      	str	r3, [r2, #0]
 8008768:	2550      	movs	r5, #80	@ 0x50
 800876a:	e72b      	b.n	80085c4 <__gethex+0xf8>
 800876c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1f3      	bne.n	800875a <__gethex+0x28e>
 8008772:	e7e0      	b.n	8008736 <__gethex+0x26a>
 8008774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1dd      	bne.n	8008736 <__gethex+0x26a>
 800877a:	e7ee      	b.n	800875a <__gethex+0x28e>
 800877c:	08009070 	.word	0x08009070
 8008780:	08008f05 	.word	0x08008f05
 8008784:	0800921e 	.word	0x0800921e
 8008788:	1e6f      	subs	r7, r5, #1
 800878a:	f1b9 0f00 	cmp.w	r9, #0
 800878e:	d130      	bne.n	80087f2 <__gethex+0x326>
 8008790:	b127      	cbz	r7, 800879c <__gethex+0x2d0>
 8008792:	4639      	mov	r1, r7
 8008794:	4620      	mov	r0, r4
 8008796:	f7fe fb2c 	bl	8006df2 <__any_on>
 800879a:	4681      	mov	r9, r0
 800879c:	117a      	asrs	r2, r7, #5
 800879e:	2301      	movs	r3, #1
 80087a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80087a4:	f007 071f 	and.w	r7, r7, #31
 80087a8:	40bb      	lsls	r3, r7
 80087aa:	4213      	tst	r3, r2
 80087ac:	4629      	mov	r1, r5
 80087ae:	4620      	mov	r0, r4
 80087b0:	bf18      	it	ne
 80087b2:	f049 0902 	orrne.w	r9, r9, #2
 80087b6:	f7ff fe21 	bl	80083fc <rshift>
 80087ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80087be:	1b76      	subs	r6, r6, r5
 80087c0:	2502      	movs	r5, #2
 80087c2:	f1b9 0f00 	cmp.w	r9, #0
 80087c6:	d047      	beq.n	8008858 <__gethex+0x38c>
 80087c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d015      	beq.n	80087fc <__gethex+0x330>
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	d017      	beq.n	8008804 <__gethex+0x338>
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d109      	bne.n	80087ec <__gethex+0x320>
 80087d8:	f019 0f02 	tst.w	r9, #2
 80087dc:	d006      	beq.n	80087ec <__gethex+0x320>
 80087de:	f8da 3000 	ldr.w	r3, [sl]
 80087e2:	ea49 0903 	orr.w	r9, r9, r3
 80087e6:	f019 0f01 	tst.w	r9, #1
 80087ea:	d10e      	bne.n	800880a <__gethex+0x33e>
 80087ec:	f045 0510 	orr.w	r5, r5, #16
 80087f0:	e032      	b.n	8008858 <__gethex+0x38c>
 80087f2:	f04f 0901 	mov.w	r9, #1
 80087f6:	e7d1      	b.n	800879c <__gethex+0x2d0>
 80087f8:	2501      	movs	r5, #1
 80087fa:	e7e2      	b.n	80087c2 <__gethex+0x2f6>
 80087fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087fe:	f1c3 0301 	rsb	r3, r3, #1
 8008802:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008804:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008806:	2b00      	cmp	r3, #0
 8008808:	d0f0      	beq.n	80087ec <__gethex+0x320>
 800880a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800880e:	f104 0314 	add.w	r3, r4, #20
 8008812:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008816:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800881a:	f04f 0c00 	mov.w	ip, #0
 800881e:	4618      	mov	r0, r3
 8008820:	f853 2b04 	ldr.w	r2, [r3], #4
 8008824:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8008828:	d01b      	beq.n	8008862 <__gethex+0x396>
 800882a:	3201      	adds	r2, #1
 800882c:	6002      	str	r2, [r0, #0]
 800882e:	2d02      	cmp	r5, #2
 8008830:	f104 0314 	add.w	r3, r4, #20
 8008834:	d13c      	bne.n	80088b0 <__gethex+0x3e4>
 8008836:	f8d8 2000 	ldr.w	r2, [r8]
 800883a:	3a01      	subs	r2, #1
 800883c:	42b2      	cmp	r2, r6
 800883e:	d109      	bne.n	8008854 <__gethex+0x388>
 8008840:	1171      	asrs	r1, r6, #5
 8008842:	2201      	movs	r2, #1
 8008844:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008848:	f006 061f 	and.w	r6, r6, #31
 800884c:	fa02 f606 	lsl.w	r6, r2, r6
 8008850:	421e      	tst	r6, r3
 8008852:	d13a      	bne.n	80088ca <__gethex+0x3fe>
 8008854:	f045 0520 	orr.w	r5, r5, #32
 8008858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800885a:	601c      	str	r4, [r3, #0]
 800885c:	9b02      	ldr	r3, [sp, #8]
 800885e:	601f      	str	r7, [r3, #0]
 8008860:	e6b0      	b.n	80085c4 <__gethex+0xf8>
 8008862:	4299      	cmp	r1, r3
 8008864:	f843 cc04 	str.w	ip, [r3, #-4]
 8008868:	d8d9      	bhi.n	800881e <__gethex+0x352>
 800886a:	68a3      	ldr	r3, [r4, #8]
 800886c:	459b      	cmp	fp, r3
 800886e:	db17      	blt.n	80088a0 <__gethex+0x3d4>
 8008870:	6861      	ldr	r1, [r4, #4]
 8008872:	9801      	ldr	r0, [sp, #4]
 8008874:	3101      	adds	r1, #1
 8008876:	f7fd fe2b 	bl	80064d0 <_Balloc>
 800887a:	4681      	mov	r9, r0
 800887c:	b918      	cbnz	r0, 8008886 <__gethex+0x3ba>
 800887e:	4b1a      	ldr	r3, [pc, #104]	@ (80088e8 <__gethex+0x41c>)
 8008880:	4602      	mov	r2, r0
 8008882:	2184      	movs	r1, #132	@ 0x84
 8008884:	e6c5      	b.n	8008612 <__gethex+0x146>
 8008886:	6922      	ldr	r2, [r4, #16]
 8008888:	3202      	adds	r2, #2
 800888a:	f104 010c 	add.w	r1, r4, #12
 800888e:	0092      	lsls	r2, r2, #2
 8008890:	300c      	adds	r0, #12
 8008892:	f7ff fd69 	bl	8008368 <memcpy>
 8008896:	4621      	mov	r1, r4
 8008898:	9801      	ldr	r0, [sp, #4]
 800889a:	f7fd fe59 	bl	8006550 <_Bfree>
 800889e:	464c      	mov	r4, r9
 80088a0:	6923      	ldr	r3, [r4, #16]
 80088a2:	1c5a      	adds	r2, r3, #1
 80088a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80088a8:	6122      	str	r2, [r4, #16]
 80088aa:	2201      	movs	r2, #1
 80088ac:	615a      	str	r2, [r3, #20]
 80088ae:	e7be      	b.n	800882e <__gethex+0x362>
 80088b0:	6922      	ldr	r2, [r4, #16]
 80088b2:	455a      	cmp	r2, fp
 80088b4:	dd0b      	ble.n	80088ce <__gethex+0x402>
 80088b6:	2101      	movs	r1, #1
 80088b8:	4620      	mov	r0, r4
 80088ba:	f7ff fd9f 	bl	80083fc <rshift>
 80088be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80088c2:	3701      	adds	r7, #1
 80088c4:	42bb      	cmp	r3, r7
 80088c6:	f6ff aee0 	blt.w	800868a <__gethex+0x1be>
 80088ca:	2501      	movs	r5, #1
 80088cc:	e7c2      	b.n	8008854 <__gethex+0x388>
 80088ce:	f016 061f 	ands.w	r6, r6, #31
 80088d2:	d0fa      	beq.n	80088ca <__gethex+0x3fe>
 80088d4:	4453      	add	r3, sl
 80088d6:	f1c6 0620 	rsb	r6, r6, #32
 80088da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80088de:	f7fd fee9 	bl	80066b4 <__hi0bits>
 80088e2:	42b0      	cmp	r0, r6
 80088e4:	dbe7      	blt.n	80088b6 <__gethex+0x3ea>
 80088e6:	e7f0      	b.n	80088ca <__gethex+0x3fe>
 80088e8:	08008f05 	.word	0x08008f05

080088ec <L_shift>:
 80088ec:	f1c2 0208 	rsb	r2, r2, #8
 80088f0:	0092      	lsls	r2, r2, #2
 80088f2:	b570      	push	{r4, r5, r6, lr}
 80088f4:	f1c2 0620 	rsb	r6, r2, #32
 80088f8:	6843      	ldr	r3, [r0, #4]
 80088fa:	6804      	ldr	r4, [r0, #0]
 80088fc:	fa03 f506 	lsl.w	r5, r3, r6
 8008900:	432c      	orrs	r4, r5
 8008902:	40d3      	lsrs	r3, r2
 8008904:	6004      	str	r4, [r0, #0]
 8008906:	f840 3f04 	str.w	r3, [r0, #4]!
 800890a:	4288      	cmp	r0, r1
 800890c:	d3f4      	bcc.n	80088f8 <L_shift+0xc>
 800890e:	bd70      	pop	{r4, r5, r6, pc}

08008910 <__match>:
 8008910:	b530      	push	{r4, r5, lr}
 8008912:	6803      	ldr	r3, [r0, #0]
 8008914:	3301      	adds	r3, #1
 8008916:	f811 4b01 	ldrb.w	r4, [r1], #1
 800891a:	b914      	cbnz	r4, 8008922 <__match+0x12>
 800891c:	6003      	str	r3, [r0, #0]
 800891e:	2001      	movs	r0, #1
 8008920:	bd30      	pop	{r4, r5, pc}
 8008922:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008926:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800892a:	2d19      	cmp	r5, #25
 800892c:	bf98      	it	ls
 800892e:	3220      	addls	r2, #32
 8008930:	42a2      	cmp	r2, r4
 8008932:	d0f0      	beq.n	8008916 <__match+0x6>
 8008934:	2000      	movs	r0, #0
 8008936:	e7f3      	b.n	8008920 <__match+0x10>

08008938 <__hexnan>:
 8008938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893c:	680b      	ldr	r3, [r1, #0]
 800893e:	6801      	ldr	r1, [r0, #0]
 8008940:	115e      	asrs	r6, r3, #5
 8008942:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008946:	f013 031f 	ands.w	r3, r3, #31
 800894a:	b087      	sub	sp, #28
 800894c:	bf18      	it	ne
 800894e:	3604      	addne	r6, #4
 8008950:	2500      	movs	r5, #0
 8008952:	1f37      	subs	r7, r6, #4
 8008954:	4682      	mov	sl, r0
 8008956:	4690      	mov	r8, r2
 8008958:	9301      	str	r3, [sp, #4]
 800895a:	f846 5c04 	str.w	r5, [r6, #-4]
 800895e:	46b9      	mov	r9, r7
 8008960:	463c      	mov	r4, r7
 8008962:	9502      	str	r5, [sp, #8]
 8008964:	46ab      	mov	fp, r5
 8008966:	784a      	ldrb	r2, [r1, #1]
 8008968:	1c4b      	adds	r3, r1, #1
 800896a:	9303      	str	r3, [sp, #12]
 800896c:	b342      	cbz	r2, 80089c0 <__hexnan+0x88>
 800896e:	4610      	mov	r0, r2
 8008970:	9105      	str	r1, [sp, #20]
 8008972:	9204      	str	r2, [sp, #16]
 8008974:	f7ff fd94 	bl	80084a0 <__hexdig_fun>
 8008978:	2800      	cmp	r0, #0
 800897a:	d151      	bne.n	8008a20 <__hexnan+0xe8>
 800897c:	9a04      	ldr	r2, [sp, #16]
 800897e:	9905      	ldr	r1, [sp, #20]
 8008980:	2a20      	cmp	r2, #32
 8008982:	d818      	bhi.n	80089b6 <__hexnan+0x7e>
 8008984:	9b02      	ldr	r3, [sp, #8]
 8008986:	459b      	cmp	fp, r3
 8008988:	dd13      	ble.n	80089b2 <__hexnan+0x7a>
 800898a:	454c      	cmp	r4, r9
 800898c:	d206      	bcs.n	800899c <__hexnan+0x64>
 800898e:	2d07      	cmp	r5, #7
 8008990:	dc04      	bgt.n	800899c <__hexnan+0x64>
 8008992:	462a      	mov	r2, r5
 8008994:	4649      	mov	r1, r9
 8008996:	4620      	mov	r0, r4
 8008998:	f7ff ffa8 	bl	80088ec <L_shift>
 800899c:	4544      	cmp	r4, r8
 800899e:	d952      	bls.n	8008a46 <__hexnan+0x10e>
 80089a0:	2300      	movs	r3, #0
 80089a2:	f1a4 0904 	sub.w	r9, r4, #4
 80089a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80089aa:	f8cd b008 	str.w	fp, [sp, #8]
 80089ae:	464c      	mov	r4, r9
 80089b0:	461d      	mov	r5, r3
 80089b2:	9903      	ldr	r1, [sp, #12]
 80089b4:	e7d7      	b.n	8008966 <__hexnan+0x2e>
 80089b6:	2a29      	cmp	r2, #41	@ 0x29
 80089b8:	d157      	bne.n	8008a6a <__hexnan+0x132>
 80089ba:	3102      	adds	r1, #2
 80089bc:	f8ca 1000 	str.w	r1, [sl]
 80089c0:	f1bb 0f00 	cmp.w	fp, #0
 80089c4:	d051      	beq.n	8008a6a <__hexnan+0x132>
 80089c6:	454c      	cmp	r4, r9
 80089c8:	d206      	bcs.n	80089d8 <__hexnan+0xa0>
 80089ca:	2d07      	cmp	r5, #7
 80089cc:	dc04      	bgt.n	80089d8 <__hexnan+0xa0>
 80089ce:	462a      	mov	r2, r5
 80089d0:	4649      	mov	r1, r9
 80089d2:	4620      	mov	r0, r4
 80089d4:	f7ff ff8a 	bl	80088ec <L_shift>
 80089d8:	4544      	cmp	r4, r8
 80089da:	d936      	bls.n	8008a4a <__hexnan+0x112>
 80089dc:	f1a8 0204 	sub.w	r2, r8, #4
 80089e0:	4623      	mov	r3, r4
 80089e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80089e6:	f842 1f04 	str.w	r1, [r2, #4]!
 80089ea:	429f      	cmp	r7, r3
 80089ec:	d2f9      	bcs.n	80089e2 <__hexnan+0xaa>
 80089ee:	1b3b      	subs	r3, r7, r4
 80089f0:	f023 0303 	bic.w	r3, r3, #3
 80089f4:	3304      	adds	r3, #4
 80089f6:	3401      	adds	r4, #1
 80089f8:	3e03      	subs	r6, #3
 80089fa:	42b4      	cmp	r4, r6
 80089fc:	bf88      	it	hi
 80089fe:	2304      	movhi	r3, #4
 8008a00:	4443      	add	r3, r8
 8008a02:	2200      	movs	r2, #0
 8008a04:	f843 2b04 	str.w	r2, [r3], #4
 8008a08:	429f      	cmp	r7, r3
 8008a0a:	d2fb      	bcs.n	8008a04 <__hexnan+0xcc>
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	b91b      	cbnz	r3, 8008a18 <__hexnan+0xe0>
 8008a10:	4547      	cmp	r7, r8
 8008a12:	d128      	bne.n	8008a66 <__hexnan+0x12e>
 8008a14:	2301      	movs	r3, #1
 8008a16:	603b      	str	r3, [r7, #0]
 8008a18:	2005      	movs	r0, #5
 8008a1a:	b007      	add	sp, #28
 8008a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a20:	3501      	adds	r5, #1
 8008a22:	2d08      	cmp	r5, #8
 8008a24:	f10b 0b01 	add.w	fp, fp, #1
 8008a28:	dd06      	ble.n	8008a38 <__hexnan+0x100>
 8008a2a:	4544      	cmp	r4, r8
 8008a2c:	d9c1      	bls.n	80089b2 <__hexnan+0x7a>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a34:	2501      	movs	r5, #1
 8008a36:	3c04      	subs	r4, #4
 8008a38:	6822      	ldr	r2, [r4, #0]
 8008a3a:	f000 000f 	and.w	r0, r0, #15
 8008a3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008a42:	6020      	str	r0, [r4, #0]
 8008a44:	e7b5      	b.n	80089b2 <__hexnan+0x7a>
 8008a46:	2508      	movs	r5, #8
 8008a48:	e7b3      	b.n	80089b2 <__hexnan+0x7a>
 8008a4a:	9b01      	ldr	r3, [sp, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d0dd      	beq.n	8008a0c <__hexnan+0xd4>
 8008a50:	f1c3 0320 	rsb	r3, r3, #32
 8008a54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008a58:	40da      	lsrs	r2, r3
 8008a5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008a5e:	4013      	ands	r3, r2
 8008a60:	f846 3c04 	str.w	r3, [r6, #-4]
 8008a64:	e7d2      	b.n	8008a0c <__hexnan+0xd4>
 8008a66:	3f04      	subs	r7, #4
 8008a68:	e7d0      	b.n	8008a0c <__hexnan+0xd4>
 8008a6a:	2004      	movs	r0, #4
 8008a6c:	e7d5      	b.n	8008a1a <__hexnan+0xe2>

08008a6e <__ascii_mbtowc>:
 8008a6e:	b082      	sub	sp, #8
 8008a70:	b901      	cbnz	r1, 8008a74 <__ascii_mbtowc+0x6>
 8008a72:	a901      	add	r1, sp, #4
 8008a74:	b142      	cbz	r2, 8008a88 <__ascii_mbtowc+0x1a>
 8008a76:	b14b      	cbz	r3, 8008a8c <__ascii_mbtowc+0x1e>
 8008a78:	7813      	ldrb	r3, [r2, #0]
 8008a7a:	600b      	str	r3, [r1, #0]
 8008a7c:	7812      	ldrb	r2, [r2, #0]
 8008a7e:	1e10      	subs	r0, r2, #0
 8008a80:	bf18      	it	ne
 8008a82:	2001      	movne	r0, #1
 8008a84:	b002      	add	sp, #8
 8008a86:	4770      	bx	lr
 8008a88:	4610      	mov	r0, r2
 8008a8a:	e7fb      	b.n	8008a84 <__ascii_mbtowc+0x16>
 8008a8c:	f06f 0001 	mvn.w	r0, #1
 8008a90:	e7f8      	b.n	8008a84 <__ascii_mbtowc+0x16>

08008a92 <_realloc_r>:
 8008a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a96:	4680      	mov	r8, r0
 8008a98:	4615      	mov	r5, r2
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	b921      	cbnz	r1, 8008aa8 <_realloc_r+0x16>
 8008a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa2:	4611      	mov	r1, r2
 8008aa4:	f7fd bc88 	b.w	80063b8 <_malloc_r>
 8008aa8:	b92a      	cbnz	r2, 8008ab6 <_realloc_r+0x24>
 8008aaa:	f7fd fc11 	bl	80062d0 <_free_r>
 8008aae:	2400      	movs	r4, #0
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ab6:	f000 f8c4 	bl	8008c42 <_malloc_usable_size_r>
 8008aba:	4285      	cmp	r5, r0
 8008abc:	4606      	mov	r6, r0
 8008abe:	d802      	bhi.n	8008ac6 <_realloc_r+0x34>
 8008ac0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008ac4:	d8f4      	bhi.n	8008ab0 <_realloc_r+0x1e>
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	4640      	mov	r0, r8
 8008aca:	f7fd fc75 	bl	80063b8 <_malloc_r>
 8008ace:	4607      	mov	r7, r0
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d0ec      	beq.n	8008aae <_realloc_r+0x1c>
 8008ad4:	42b5      	cmp	r5, r6
 8008ad6:	462a      	mov	r2, r5
 8008ad8:	4621      	mov	r1, r4
 8008ada:	bf28      	it	cs
 8008adc:	4632      	movcs	r2, r6
 8008ade:	f7ff fc43 	bl	8008368 <memcpy>
 8008ae2:	4621      	mov	r1, r4
 8008ae4:	4640      	mov	r0, r8
 8008ae6:	f7fd fbf3 	bl	80062d0 <_free_r>
 8008aea:	463c      	mov	r4, r7
 8008aec:	e7e0      	b.n	8008ab0 <_realloc_r+0x1e>

08008aee <__ascii_wctomb>:
 8008aee:	4603      	mov	r3, r0
 8008af0:	4608      	mov	r0, r1
 8008af2:	b141      	cbz	r1, 8008b06 <__ascii_wctomb+0x18>
 8008af4:	2aff      	cmp	r2, #255	@ 0xff
 8008af6:	d904      	bls.n	8008b02 <__ascii_wctomb+0x14>
 8008af8:	228a      	movs	r2, #138	@ 0x8a
 8008afa:	601a      	str	r2, [r3, #0]
 8008afc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b00:	4770      	bx	lr
 8008b02:	700a      	strb	r2, [r1, #0]
 8008b04:	2001      	movs	r0, #1
 8008b06:	4770      	bx	lr

08008b08 <fiprintf>:
 8008b08:	b40e      	push	{r1, r2, r3}
 8008b0a:	b503      	push	{r0, r1, lr}
 8008b0c:	4601      	mov	r1, r0
 8008b0e:	ab03      	add	r3, sp, #12
 8008b10:	4805      	ldr	r0, [pc, #20]	@ (8008b28 <fiprintf+0x20>)
 8008b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b16:	6800      	ldr	r0, [r0, #0]
 8008b18:	9301      	str	r3, [sp, #4]
 8008b1a:	f7ff f991 	bl	8007e40 <_vfiprintf_r>
 8008b1e:	b002      	add	sp, #8
 8008b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b24:	b003      	add	sp, #12
 8008b26:	4770      	bx	lr
 8008b28:	20000018 	.word	0x20000018

08008b2c <__swhatbuf_r>:
 8008b2c:	b570      	push	{r4, r5, r6, lr}
 8008b2e:	460c      	mov	r4, r1
 8008b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b34:	2900      	cmp	r1, #0
 8008b36:	b096      	sub	sp, #88	@ 0x58
 8008b38:	4615      	mov	r5, r2
 8008b3a:	461e      	mov	r6, r3
 8008b3c:	da0d      	bge.n	8008b5a <__swhatbuf_r+0x2e>
 8008b3e:	89a3      	ldrh	r3, [r4, #12]
 8008b40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b44:	f04f 0100 	mov.w	r1, #0
 8008b48:	bf14      	ite	ne
 8008b4a:	2340      	movne	r3, #64	@ 0x40
 8008b4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b50:	2000      	movs	r0, #0
 8008b52:	6031      	str	r1, [r6, #0]
 8008b54:	602b      	str	r3, [r5, #0]
 8008b56:	b016      	add	sp, #88	@ 0x58
 8008b58:	bd70      	pop	{r4, r5, r6, pc}
 8008b5a:	466a      	mov	r2, sp
 8008b5c:	f000 f848 	bl	8008bf0 <_fstat_r>
 8008b60:	2800      	cmp	r0, #0
 8008b62:	dbec      	blt.n	8008b3e <__swhatbuf_r+0x12>
 8008b64:	9901      	ldr	r1, [sp, #4]
 8008b66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b6e:	4259      	negs	r1, r3
 8008b70:	4159      	adcs	r1, r3
 8008b72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b76:	e7eb      	b.n	8008b50 <__swhatbuf_r+0x24>

08008b78 <__smakebuf_r>:
 8008b78:	898b      	ldrh	r3, [r1, #12]
 8008b7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b7c:	079d      	lsls	r5, r3, #30
 8008b7e:	4606      	mov	r6, r0
 8008b80:	460c      	mov	r4, r1
 8008b82:	d507      	bpl.n	8008b94 <__smakebuf_r+0x1c>
 8008b84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	6123      	str	r3, [r4, #16]
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	6163      	str	r3, [r4, #20]
 8008b90:	b003      	add	sp, #12
 8008b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b94:	ab01      	add	r3, sp, #4
 8008b96:	466a      	mov	r2, sp
 8008b98:	f7ff ffc8 	bl	8008b2c <__swhatbuf_r>
 8008b9c:	9f00      	ldr	r7, [sp, #0]
 8008b9e:	4605      	mov	r5, r0
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	f7fd fc08 	bl	80063b8 <_malloc_r>
 8008ba8:	b948      	cbnz	r0, 8008bbe <__smakebuf_r+0x46>
 8008baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bae:	059a      	lsls	r2, r3, #22
 8008bb0:	d4ee      	bmi.n	8008b90 <__smakebuf_r+0x18>
 8008bb2:	f023 0303 	bic.w	r3, r3, #3
 8008bb6:	f043 0302 	orr.w	r3, r3, #2
 8008bba:	81a3      	strh	r3, [r4, #12]
 8008bbc:	e7e2      	b.n	8008b84 <__smakebuf_r+0xc>
 8008bbe:	89a3      	ldrh	r3, [r4, #12]
 8008bc0:	6020      	str	r0, [r4, #0]
 8008bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bc6:	81a3      	strh	r3, [r4, #12]
 8008bc8:	9b01      	ldr	r3, [sp, #4]
 8008bca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008bce:	b15b      	cbz	r3, 8008be8 <__smakebuf_r+0x70>
 8008bd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	f000 f81d 	bl	8008c14 <_isatty_r>
 8008bda:	b128      	cbz	r0, 8008be8 <__smakebuf_r+0x70>
 8008bdc:	89a3      	ldrh	r3, [r4, #12]
 8008bde:	f023 0303 	bic.w	r3, r3, #3
 8008be2:	f043 0301 	orr.w	r3, r3, #1
 8008be6:	81a3      	strh	r3, [r4, #12]
 8008be8:	89a3      	ldrh	r3, [r4, #12]
 8008bea:	431d      	orrs	r5, r3
 8008bec:	81a5      	strh	r5, [r4, #12]
 8008bee:	e7cf      	b.n	8008b90 <__smakebuf_r+0x18>

08008bf0 <_fstat_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	4d07      	ldr	r5, [pc, #28]	@ (8008c10 <_fstat_r+0x20>)
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	4608      	mov	r0, r1
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	602b      	str	r3, [r5, #0]
 8008bfe:	f7f9 f809 	bl	8001c14 <_fstat>
 8008c02:	1c43      	adds	r3, r0, #1
 8008c04:	d102      	bne.n	8008c0c <_fstat_r+0x1c>
 8008c06:	682b      	ldr	r3, [r5, #0]
 8008c08:	b103      	cbz	r3, 8008c0c <_fstat_r+0x1c>
 8008c0a:	6023      	str	r3, [r4, #0]
 8008c0c:	bd38      	pop	{r3, r4, r5, pc}
 8008c0e:	bf00      	nop
 8008c10:	20000420 	.word	0x20000420

08008c14 <_isatty_r>:
 8008c14:	b538      	push	{r3, r4, r5, lr}
 8008c16:	4d06      	ldr	r5, [pc, #24]	@ (8008c30 <_isatty_r+0x1c>)
 8008c18:	2300      	movs	r3, #0
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	4608      	mov	r0, r1
 8008c1e:	602b      	str	r3, [r5, #0]
 8008c20:	f7f9 f808 	bl	8001c34 <_isatty>
 8008c24:	1c43      	adds	r3, r0, #1
 8008c26:	d102      	bne.n	8008c2e <_isatty_r+0x1a>
 8008c28:	682b      	ldr	r3, [r5, #0]
 8008c2a:	b103      	cbz	r3, 8008c2e <_isatty_r+0x1a>
 8008c2c:	6023      	str	r3, [r4, #0]
 8008c2e:	bd38      	pop	{r3, r4, r5, pc}
 8008c30:	20000420 	.word	0x20000420

08008c34 <abort>:
 8008c34:	b508      	push	{r3, lr}
 8008c36:	2006      	movs	r0, #6
 8008c38:	f000 f834 	bl	8008ca4 <raise>
 8008c3c:	2001      	movs	r0, #1
 8008c3e:	f7f8 ff99 	bl	8001b74 <_exit>

08008c42 <_malloc_usable_size_r>:
 8008c42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c46:	1f18      	subs	r0, r3, #4
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	bfbc      	itt	lt
 8008c4c:	580b      	ldrlt	r3, [r1, r0]
 8008c4e:	18c0      	addlt	r0, r0, r3
 8008c50:	4770      	bx	lr

08008c52 <_raise_r>:
 8008c52:	291f      	cmp	r1, #31
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	4605      	mov	r5, r0
 8008c58:	460c      	mov	r4, r1
 8008c5a:	d904      	bls.n	8008c66 <_raise_r+0x14>
 8008c5c:	2316      	movs	r3, #22
 8008c5e:	6003      	str	r3, [r0, #0]
 8008c60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c64:	bd38      	pop	{r3, r4, r5, pc}
 8008c66:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008c68:	b112      	cbz	r2, 8008c70 <_raise_r+0x1e>
 8008c6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c6e:	b94b      	cbnz	r3, 8008c84 <_raise_r+0x32>
 8008c70:	4628      	mov	r0, r5
 8008c72:	f000 f831 	bl	8008cd8 <_getpid_r>
 8008c76:	4622      	mov	r2, r4
 8008c78:	4601      	mov	r1, r0
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c80:	f000 b818 	b.w	8008cb4 <_kill_r>
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d00a      	beq.n	8008c9e <_raise_r+0x4c>
 8008c88:	1c59      	adds	r1, r3, #1
 8008c8a:	d103      	bne.n	8008c94 <_raise_r+0x42>
 8008c8c:	2316      	movs	r3, #22
 8008c8e:	6003      	str	r3, [r0, #0]
 8008c90:	2001      	movs	r0, #1
 8008c92:	e7e7      	b.n	8008c64 <_raise_r+0x12>
 8008c94:	2100      	movs	r1, #0
 8008c96:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	4798      	blx	r3
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	e7e0      	b.n	8008c64 <_raise_r+0x12>
	...

08008ca4 <raise>:
 8008ca4:	4b02      	ldr	r3, [pc, #8]	@ (8008cb0 <raise+0xc>)
 8008ca6:	4601      	mov	r1, r0
 8008ca8:	6818      	ldr	r0, [r3, #0]
 8008caa:	f7ff bfd2 	b.w	8008c52 <_raise_r>
 8008cae:	bf00      	nop
 8008cb0:	20000018 	.word	0x20000018

08008cb4 <_kill_r>:
 8008cb4:	b538      	push	{r3, r4, r5, lr}
 8008cb6:	4d07      	ldr	r5, [pc, #28]	@ (8008cd4 <_kill_r+0x20>)
 8008cb8:	2300      	movs	r3, #0
 8008cba:	4604      	mov	r4, r0
 8008cbc:	4608      	mov	r0, r1
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	602b      	str	r3, [r5, #0]
 8008cc2:	f7f8 ff47 	bl	8001b54 <_kill>
 8008cc6:	1c43      	adds	r3, r0, #1
 8008cc8:	d102      	bne.n	8008cd0 <_kill_r+0x1c>
 8008cca:	682b      	ldr	r3, [r5, #0]
 8008ccc:	b103      	cbz	r3, 8008cd0 <_kill_r+0x1c>
 8008cce:	6023      	str	r3, [r4, #0]
 8008cd0:	bd38      	pop	{r3, r4, r5, pc}
 8008cd2:	bf00      	nop
 8008cd4:	20000420 	.word	0x20000420

08008cd8 <_getpid_r>:
 8008cd8:	f7f8 bf34 	b.w	8001b44 <_getpid>

08008cdc <_init>:
 8008cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cde:	bf00      	nop
 8008ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ce2:	bc08      	pop	{r3}
 8008ce4:	469e      	mov	lr, r3
 8008ce6:	4770      	bx	lr

08008ce8 <_fini>:
 8008ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cea:	bf00      	nop
 8008cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cee:	bc08      	pop	{r3}
 8008cf0:	469e      	mov	lr, r3
 8008cf2:	4770      	bx	lr
