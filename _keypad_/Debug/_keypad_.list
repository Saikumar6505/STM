
_keypad_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b90  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08001d30  08001d30  00002d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001db4  08001db4  0000306c  2**0
                  CONTENTS
  4 .ARM          00000008  08001db4  08001db4  00002db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001dbc  08001dbc  0000306c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dbc  08001dbc  00002dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001dc0  08001dc0  00002dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08001dc4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000006c  08001e30  0000306c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08001e30  000031dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000363c  00000000  00000000  0000309c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f3c  00000000  00000000  000066d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000450  00000000  00000000  00007618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000310  00000000  00000000  00007a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015bf8  00000000  00000000  00007d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004a26  00000000  00000000  0001d970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008495f  00000000  00000000  00022396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a6cf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001704  00000000  00000000  000a6d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000a843c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001d18 	.word	0x08001d18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08001d18 	.word	0x08001d18

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000288:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800028c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000290:	f003 0301 	and.w	r3, r3, #1
 8000294:	2b00      	cmp	r3, #0
 8000296:	d013      	beq.n	80002c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000298:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800029c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80002a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d00b      	beq.n	80002c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002a8:	e000      	b.n	80002ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80002aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002ac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d0f9      	beq.n	80002aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002b6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	b2d2      	uxtb	r2, r2
 80002be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002c0:	687b      	ldr	r3, [r7, #4]
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
	...

080002d0 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
    /* MCU Configuration--------------------------------------------------------*/
    HAL_Init();
 80002d6:	f000 fa5f 	bl	8000798 <HAL_Init>
    SystemClock_Config();
 80002da:	f000 f8eb 	bl	80004b4 <SystemClock_Config>
    MX_GPIO_Init();
 80002de:	f000 f8f1 	bl	80004c4 <MX_GPIO_Init>

    /* Initialize SWV output */
    printf("Keypad Scanner Initialized\n");
 80002e2:	4812      	ldr	r0, [pc, #72]	@ (800032c <main+0x5c>)
 80002e4:	f000 feb4 	bl	8001050 <puts>

    /* Infinite loop */
    while (1)
    {
        scan_keypad();
 80002e8:	f000 f846 	bl	8000378 <scan_keypad>

        if (pressed_row != 0xFF && pressed_col != 0xFF)
 80002ec:	4b10      	ldr	r3, [pc, #64]	@ (8000330 <main+0x60>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2bff      	cmp	r3, #255	@ 0xff
 80002f2:	d013      	beq.n	800031c <main+0x4c>
 80002f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000334 <main+0x64>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2bff      	cmp	r3, #255	@ 0xff
 80002fa:	d00f      	beq.n	800031c <main+0x4c>
        {
            char key_value = get_key_value(pressed_row, pressed_col);
 80002fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000330 <main+0x60>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	4a0c      	ldr	r2, [pc, #48]	@ (8000334 <main+0x64>)
 8000302:	7812      	ldrb	r2, [r2, #0]
 8000304:	4611      	mov	r1, r2
 8000306:	4618      	mov	r0, r3
 8000308:	f000 f8b4 	bl	8000474 <get_key_value>
 800030c:	4603      	mov	r3, r0
 800030e:	71fb      	strb	r3, [r7, #7]
            printf("Key Pressed: %c\n", key_value);
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	4619      	mov	r1, r3
 8000314:	4808      	ldr	r0, [pc, #32]	@ (8000338 <main+0x68>)
 8000316:	f000 fe33 	bl	8000f80 <iprintf>
        {
 800031a:	e002      	b.n	8000322 <main+0x52>
        }
        else
        {
            printf("No key is pressed\n");
 800031c:	4807      	ldr	r0, [pc, #28]	@ (800033c <main+0x6c>)
 800031e:	f000 fe97 	bl	8001050 <puts>
        }

        HAL_Delay(500); // Delay for debouncing and readability
 8000322:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000326:	f000 faa9 	bl	800087c <HAL_Delay>
        scan_keypad();
 800032a:	e7dd      	b.n	80002e8 <main+0x18>
 800032c:	08001d30 	.word	0x08001d30
 8000330:	20000000 	.word	0x20000000
 8000334:	20000001 	.word	0x20000001
 8000338:	08001d4c 	.word	0x08001d4c
 800033c:	08001d60 	.word	0x08001d60

08000340 <_write>:
    }
}

int _write(int file, char *ptr, int len)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b086      	sub	sp, #24
 8000344:	af00      	add	r7, sp, #0
 8000346:	60f8      	str	r0, [r7, #12]
 8000348:	60b9      	str	r1, [r7, #8]
 800034a:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	e009      	b.n	8000366 <_write+0x26>
    {
        ITM_SendChar(*ptr++);
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	1c5a      	adds	r2, r3, #1
 8000356:	60ba      	str	r2, [r7, #8]
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff90 	bl	8000280 <ITM_SendChar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	3301      	adds	r3, #1
 8000364:	617b      	str	r3, [r7, #20]
 8000366:	697a      	ldr	r2, [r7, #20]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	429a      	cmp	r2, r3
 800036c:	dbf1      	blt.n	8000352 <_write+0x12>
    }
    return len;
 800036e:	687b      	ldr	r3, [r7, #4]
}
 8000370:	4618      	mov	r0, r3
 8000372:	3718      	adds	r7, #24
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <scan_keypad>:

void scan_keypad(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b088      	sub	sp, #32
 800037c:	af00      	add	r7, sp, #0
    // Initialize row pins as output
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]
 8000388:	60da      	str	r2, [r3, #12]
 800038a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3;
 800038c:	230f      	movs	r3, #15
 800038e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000390:	2301      	movs	r3, #1
 8000392:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000398:	2300      	movs	r3, #0
 800039a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	4619      	mov	r1, r3
 80003a0:	482f      	ldr	r0, [pc, #188]	@ (8000460 <scan_keypad+0xe8>)
 80003a2:	f000 fb75 	bl	8000a90 <HAL_GPIO_Init>

    // Set all rows high initially
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_SET);
 80003a6:	2201      	movs	r2, #1
 80003a8:	210f      	movs	r1, #15
 80003aa:	482d      	ldr	r0, [pc, #180]	@ (8000460 <scan_keypad+0xe8>)
 80003ac:	f000 fd0c 	bl	8000dc8 <HAL_GPIO_WritePin>

    // Initialize column pins as input with pull-up resistors enabled
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3;
 80003b0:	230f      	movs	r3, #15
 80003b2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	4619      	mov	r1, r3
 80003c0:	4828      	ldr	r0, [pc, #160]	@ (8000464 <scan_keypad+0xec>)
 80003c2:	f000 fb65 	bl	8000a90 <HAL_GPIO_Init>

    pressed_row = 0xFF; // No key pressed
 80003c6:	4b28      	ldr	r3, [pc, #160]	@ (8000468 <scan_keypad+0xf0>)
 80003c8:	22ff      	movs	r2, #255	@ 0xff
 80003ca:	701a      	strb	r2, [r3, #0]
    pressed_col = 0xFF; // No key pressed
 80003cc:	4b27      	ldr	r3, [pc, #156]	@ (800046c <scan_keypad+0xf4>)
 80003ce:	22ff      	movs	r2, #255	@ 0xff
 80003d0:	701a      	strb	r2, [r3, #0]

    // Scan each row
    for (int row = 0; row < 4; row++)
 80003d2:	2300      	movs	r3, #0
 80003d4:	61fb      	str	r3, [r7, #28]
 80003d6:	e034      	b.n	8000442 <scan_keypad+0xca>
    {
        // Set the current row pin to low
        HAL_GPIO_WritePin(GPIOC, (GPIO_PIN_0 << row), GPIO_PIN_RESET);
 80003d8:	2201      	movs	r2, #1
 80003da:	69fb      	ldr	r3, [r7, #28]
 80003dc:	fa02 f303 	lsl.w	r3, r2, r3
 80003e0:	b29b      	uxth	r3, r3
 80003e2:	2200      	movs	r2, #0
 80003e4:	4619      	mov	r1, r3
 80003e6:	481e      	ldr	r0, [pc, #120]	@ (8000460 <scan_keypad+0xe8>)
 80003e8:	f000 fcee 	bl	8000dc8 <HAL_GPIO_WritePin>

        // Check each column
        for (int col = 0; col < 3; col++)
 80003ec:	2300      	movs	r3, #0
 80003ee:	61bb      	str	r3, [r7, #24]
 80003f0:	e017      	b.n	8000422 <scan_keypad+0xaa>
        {
            if (HAL_GPIO_ReadPin(GPIOA, (GPIO_PIN_0 << col)) == GPIO_PIN_RESET)
 80003f2:	2201      	movs	r2, #1
 80003f4:	69bb      	ldr	r3, [r7, #24]
 80003f6:	fa02 f303 	lsl.w	r3, r2, r3
 80003fa:	b29b      	uxth	r3, r3
 80003fc:	4619      	mov	r1, r3
 80003fe:	4819      	ldr	r0, [pc, #100]	@ (8000464 <scan_keypad+0xec>)
 8000400:	f000 fcca 	bl	8000d98 <HAL_GPIO_ReadPin>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d108      	bne.n	800041c <scan_keypad+0xa4>
            {
                // Key is pressed in this row and column
                pressed_row = row;
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	b2da      	uxtb	r2, r3
 800040e:	4b16      	ldr	r3, [pc, #88]	@ (8000468 <scan_keypad+0xf0>)
 8000410:	701a      	strb	r2, [r3, #0]
                pressed_col = col;
 8000412:	69bb      	ldr	r3, [r7, #24]
 8000414:	b2da      	uxtb	r2, r3
 8000416:	4b15      	ldr	r3, [pc, #84]	@ (800046c <scan_keypad+0xf4>)
 8000418:	701a      	strb	r2, [r3, #0]
 800041a:	e01e      	b.n	800045a <scan_keypad+0xe2>
        for (int col = 0; col < 3; col++)
 800041c:	69bb      	ldr	r3, [r7, #24]
 800041e:	3301      	adds	r3, #1
 8000420:	61bb      	str	r3, [r7, #24]
 8000422:	69bb      	ldr	r3, [r7, #24]
 8000424:	2b02      	cmp	r3, #2
 8000426:	dde4      	ble.n	80003f2 <scan_keypad+0x7a>
                return; // Exit as soon as a pressed key is found
            }
        }

        // Restore the row pin to high
        HAL_GPIO_WritePin(GPIOC, (GPIO_PIN_0 << row), GPIO_PIN_SET);
 8000428:	2201      	movs	r2, #1
 800042a:	69fb      	ldr	r3, [r7, #28]
 800042c:	fa02 f303 	lsl.w	r3, r2, r3
 8000430:	b29b      	uxth	r3, r3
 8000432:	2201      	movs	r2, #1
 8000434:	4619      	mov	r1, r3
 8000436:	480a      	ldr	r0, [pc, #40]	@ (8000460 <scan_keypad+0xe8>)
 8000438:	f000 fcc6 	bl	8000dc8 <HAL_GPIO_WritePin>
    for (int row = 0; row < 4; row++)
 800043c:	69fb      	ldr	r3, [r7, #28]
 800043e:	3301      	adds	r3, #1
 8000440:	61fb      	str	r3, [r7, #28]
 8000442:	69fb      	ldr	r3, [r7, #28]
 8000444:	2b03      	cmp	r3, #3
 8000446:	ddc7      	ble.n	80003d8 <scan_keypad+0x60>
    }

    // If no key is pressed
    pressed_row = 0xFF; // No key pressed
 8000448:	4b07      	ldr	r3, [pc, #28]	@ (8000468 <scan_keypad+0xf0>)
 800044a:	22ff      	movs	r2, #255	@ 0xff
 800044c:	701a      	strb	r2, [r3, #0]
    pressed_col = 0xFF; // No key pressed
 800044e:	4b07      	ldr	r3, [pc, #28]	@ (800046c <scan_keypad+0xf4>)
 8000450:	22ff      	movs	r2, #255	@ 0xff
 8000452:	701a      	strb	r2, [r3, #0]
    printf("No key is pressed\n");
 8000454:	4806      	ldr	r0, [pc, #24]	@ (8000470 <scan_keypad+0xf8>)
 8000456:	f000 fdfb 	bl	8001050 <puts>
}
 800045a:	3720      	adds	r7, #32
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40020800 	.word	0x40020800
 8000464:	40020000 	.word	0x40020000
 8000468:	20000000 	.word	0x20000000
 800046c:	20000001 	.word	0x20000001
 8000470:	08001d60 	.word	0x08001d60

08000474 <get_key_value>:

char get_key_value(uint8_t row, uint8_t col)
{
 8000474:	b480      	push	{r7}
 8000476:	b087      	sub	sp, #28
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	460a      	mov	r2, r1
 800047e:	71fb      	strb	r3, [r7, #7]
 8000480:	4613      	mov	r3, r2
 8000482:	71bb      	strb	r3, [r7, #6]
    // Define key values in a 4x4 matrix
    char keys[4][3] = {
 8000484:	4a0a      	ldr	r2, [pc, #40]	@ (80004b0 <get_key_value+0x3c>)
 8000486:	f107 030c 	add.w	r3, r7, #12
 800048a:	ca07      	ldmia	r2, {r0, r1, r2}
 800048c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        {'7', '8', '9'},
        {'*', '0', '#'}
    };

    // Return the key value based on row and column
    return keys[row][col];
 8000490:	79fa      	ldrb	r2, [r7, #7]
 8000492:	79b9      	ldrb	r1, [r7, #6]
 8000494:	4613      	mov	r3, r2
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	4413      	add	r3, r2
 800049a:	3318      	adds	r3, #24
 800049c:	443b      	add	r3, r7
 800049e:	440b      	add	r3, r1
 80004a0:	3b0c      	subs	r3, #12
 80004a2:	781b      	ldrb	r3, [r3, #0]
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	371c      	adds	r7, #28
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr
 80004b0:	08001d74 	.word	0x08001d74

080004b4 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
    // Configuration code for system clock (automatically generated by STM32CubeMX)
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
	...

080004c4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	60bb      	str	r3, [r7, #8]
 80004de:	4b1e      	ldr	r3, [pc, #120]	@ (8000558 <MX_GPIO_Init+0x94>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	4a1d      	ldr	r2, [pc, #116]	@ (8000558 <MX_GPIO_Init+0x94>)
 80004e4:	f043 0304 	orr.w	r3, r3, #4
 80004e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000558 <MX_GPIO_Init+0x94>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ee:	f003 0304 	and.w	r3, r3, #4
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
 80004fa:	4b17      	ldr	r3, [pc, #92]	@ (8000558 <MX_GPIO_Init+0x94>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fe:	4a16      	ldr	r2, [pc, #88]	@ (8000558 <MX_GPIO_Init+0x94>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6313      	str	r3, [r2, #48]	@ 0x30
 8000506:	4b14      	ldr	r3, [pc, #80]	@ (8000558 <MX_GPIO_Init+0x94>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

    /* Configure GPIO pins : PC0 PC1 PC2 PC3 (Rows) */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3;
 8000512:	230f      	movs	r3, #15
 8000514:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000516:	2301      	movs	r3, #1
 8000518:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	2300      	movs	r3, #0
 8000520:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	4619      	mov	r1, r3
 8000528:	480c      	ldr	r0, [pc, #48]	@ (800055c <MX_GPIO_Init+0x98>)
 800052a:	f000 fab1 	bl	8000a90 <HAL_GPIO_Init>

    /* Configure GPIO pins : PA0 PA1 PA2 PA3 (Columns) */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3;
 800052e:	230f      	movs	r3, #15
 8000530:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000532:	2300      	movs	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000536:	2301      	movs	r3, #1
 8000538:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053a:	f107 030c 	add.w	r3, r7, #12
 800053e:	4619      	mov	r1, r3
 8000540:	4807      	ldr	r0, [pc, #28]	@ (8000560 <MX_GPIO_Init+0x9c>)
 8000542:	f000 faa5 	bl	8000a90 <HAL_GPIO_Init>

    /* Set all rows high initially */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	210f      	movs	r1, #15
 800054a:	4804      	ldr	r0, [pc, #16]	@ (800055c <MX_GPIO_Init+0x98>)
 800054c:	f000 fc3c 	bl	8000dc8 <HAL_GPIO_WritePin>
}
 8000550:	bf00      	nop
 8000552:	3720      	adds	r7, #32
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40023800 	.word	0x40023800
 800055c:	40020800 	.word	0x40020800
 8000560:	40020000 	.word	0x40020000

08000564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b10      	ldr	r3, [pc, #64]	@ (80005b0 <HAL_MspInit+0x4c>)
 8000570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000572:	4a0f      	ldr	r2, [pc, #60]	@ (80005b0 <HAL_MspInit+0x4c>)
 8000574:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000578:	6453      	str	r3, [r2, #68]	@ 0x44
 800057a:	4b0d      	ldr	r3, [pc, #52]	@ (80005b0 <HAL_MspInit+0x4c>)
 800057c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800057e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <HAL_MspInit+0x4c>)
 800058c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058e:	4a08      	ldr	r2, [pc, #32]	@ (80005b0 <HAL_MspInit+0x4c>)
 8000590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000594:	6413      	str	r3, [r2, #64]	@ 0x40
 8000596:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <HAL_MspInit+0x4c>)
 8000598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005a2:	2007      	movs	r0, #7
 80005a4:	f000 fa40 	bl	8000a28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40023800 	.word	0x40023800

080005b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <NMI_Handler+0x4>

080005bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <HardFault_Handler+0x4>

080005c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <MemManage_Handler+0x4>

080005cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <BusFault_Handler+0x4>

080005d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <UsageFault_Handler+0x4>

080005dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800060a:	f000 f917 	bl	800083c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}

08000612 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b086      	sub	sp, #24
 8000616:	af00      	add	r7, sp, #0
 8000618:	60f8      	str	r0, [r7, #12]
 800061a:	60b9      	str	r1, [r7, #8]
 800061c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	e00a      	b.n	800063a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000624:	f3af 8000 	nop.w
 8000628:	4601      	mov	r1, r0
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	1c5a      	adds	r2, r3, #1
 800062e:	60ba      	str	r2, [r7, #8]
 8000630:	b2ca      	uxtb	r2, r1
 8000632:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	3301      	adds	r3, #1
 8000638:	617b      	str	r3, [r7, #20]
 800063a:	697a      	ldr	r2, [r7, #20]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	429a      	cmp	r2, r3
 8000640:	dbf0      	blt.n	8000624 <_read+0x12>
  }

  return len;
 8000642:	687b      	ldr	r3, [r7, #4]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <_close>:
  }
  return len;
}

int _close(int file)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000654:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000674:	605a      	str	r2, [r3, #4]
  return 0;
 8000676:	2300      	movs	r3, #0
}
 8000678:	4618      	mov	r0, r3
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <_isatty>:

int _isatty(int file)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800068c:	2301      	movs	r3, #1
}
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800069a:	b480      	push	{r7}
 800069c:	b085      	sub	sp, #20
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006a6:	2300      	movs	r3, #0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006bc:	4a14      	ldr	r2, [pc, #80]	@ (8000710 <_sbrk+0x5c>)
 80006be:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <_sbrk+0x60>)
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006c8:	4b13      	ldr	r3, [pc, #76]	@ (8000718 <_sbrk+0x64>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d102      	bne.n	80006d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006d0:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <_sbrk+0x64>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	@ (800071c <_sbrk+0x68>)
 80006d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006d6:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <_sbrk+0x64>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	693a      	ldr	r2, [r7, #16]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d207      	bcs.n	80006f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006e4:	f000 fde2 	bl	80012ac <__errno>
 80006e8:	4603      	mov	r3, r0
 80006ea:	220c      	movs	r2, #12
 80006ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006f2:	e009      	b.n	8000708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006f4:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <_sbrk+0x64>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006fa:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <_sbrk+0x64>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	4a05      	ldr	r2, [pc, #20]	@ (8000718 <_sbrk+0x64>)
 8000704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000706:	68fb      	ldr	r3, [r7, #12]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20020000 	.word	0x20020000
 8000714:	00000400 	.word	0x00000400
 8000718:	20000088 	.word	0x20000088
 800071c:	200001e0 	.word	0x200001e0

08000720 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000724:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <SystemInit+0x20>)
 8000726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800072a:	4a05      	ldr	r2, [pc, #20]	@ (8000740 <SystemInit+0x20>)
 800072c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000730:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000744:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800077c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000748:	f7ff ffea 	bl	8000720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800074c:	480c      	ldr	r0, [pc, #48]	@ (8000780 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800074e:	490d      	ldr	r1, [pc, #52]	@ (8000784 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000750:	4a0d      	ldr	r2, [pc, #52]	@ (8000788 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000754:	e002      	b.n	800075c <LoopCopyDataInit>

08000756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075a:	3304      	adds	r3, #4

0800075c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800075c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000760:	d3f9      	bcc.n	8000756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000762:	4a0a      	ldr	r2, [pc, #40]	@ (800078c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000764:	4c0a      	ldr	r4, [pc, #40]	@ (8000790 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000768:	e001      	b.n	800076e <LoopFillZerobss>

0800076a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800076c:	3204      	adds	r2, #4

0800076e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000770:	d3fb      	bcc.n	800076a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000772:	f000 fda1 	bl	80012b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000776:	f7ff fdab 	bl	80002d0 <main>
  bx  lr    
 800077a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800077c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000784:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000788:	08001dc4 	.word	0x08001dc4
  ldr r2, =_sbss
 800078c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000790:	200001dc 	.word	0x200001dc

08000794 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000794:	e7fe      	b.n	8000794 <ADC_IRQHandler>
	...

08000798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800079c:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <HAL_Init+0x40>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0d      	ldr	r2, [pc, #52]	@ (80007d8 <HAL_Init+0x40>)
 80007a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007a8:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <HAL_Init+0x40>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <HAL_Init+0x40>)
 80007ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b4:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <HAL_Init+0x40>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a07      	ldr	r2, [pc, #28]	@ (80007d8 <HAL_Init+0x40>)
 80007ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c0:	2003      	movs	r0, #3
 80007c2:	f000 f931 	bl	8000a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007c6:	2000      	movs	r0, #0
 80007c8:	f000 f808 	bl	80007dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007cc:	f7ff feca 	bl	8000564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023c00 	.word	0x40023c00

080007dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e4:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <HAL_InitTick+0x54>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <HAL_InitTick+0x58>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4619      	mov	r1, r3
 80007ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f93b 	bl	8000a76 <HAL_SYSTICK_Config>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
 8000808:	e00e      	b.n	8000828 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b0f      	cmp	r3, #15
 800080e:	d80a      	bhi.n	8000826 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000810:	2200      	movs	r2, #0
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000818:	f000 f911 	bl	8000a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800081c:	4a06      	ldr	r2, [pc, #24]	@ (8000838 <HAL_InitTick+0x5c>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000822:	2300      	movs	r3, #0
 8000824:	e000      	b.n	8000828 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
}
 8000828:	4618      	mov	r0, r3
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000004 	.word	0x20000004
 8000834:	2000000c 	.word	0x2000000c
 8000838:	20000008 	.word	0x20000008

0800083c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <HAL_IncTick+0x20>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <HAL_IncTick+0x24>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4413      	add	r3, r2
 800084c:	4a04      	ldr	r2, [pc, #16]	@ (8000860 <HAL_IncTick+0x24>)
 800084e:	6013      	str	r3, [r2, #0]
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	2000000c 	.word	0x2000000c
 8000860:	2000008c 	.word	0x2000008c

08000864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return uwTick;
 8000868:	4b03      	ldr	r3, [pc, #12]	@ (8000878 <HAL_GetTick+0x14>)
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	4618      	mov	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	2000008c 	.word	0x2000008c

0800087c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000884:	f7ff ffee 	bl	8000864 <HAL_GetTick>
 8000888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000894:	d005      	beq.n	80008a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000896:	4b0a      	ldr	r3, [pc, #40]	@ (80008c0 <HAL_Delay+0x44>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	461a      	mov	r2, r3
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	4413      	add	r3, r2
 80008a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008a2:	bf00      	nop
 80008a4:	f7ff ffde 	bl	8000864 <HAL_GetTick>
 80008a8:	4602      	mov	r2, r0
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d8f7      	bhi.n	80008a4 <HAL_Delay+0x28>
  {
  }
}
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000000c 	.word	0x2000000c

080008c4 <__NVIC_SetPriorityGrouping>:
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <__NVIC_SetPriorityGrouping+0x44>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008e0:	4013      	ands	r3, r2
 80008e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f6:	4a04      	ldr	r2, [pc, #16]	@ (8000908 <__NVIC_SetPriorityGrouping+0x44>)
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	60d3      	str	r3, [r2, #12]
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_GetPriorityGrouping>:
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000910:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <__NVIC_GetPriorityGrouping+0x18>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	0a1b      	lsrs	r3, r3, #8
 8000916:	f003 0307 	and.w	r3, r3, #7
}
 800091a:	4618      	mov	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <__NVIC_SetPriority>:
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	6039      	str	r1, [r7, #0]
 8000932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000938:	2b00      	cmp	r3, #0
 800093a:	db0a      	blt.n	8000952 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	b2da      	uxtb	r2, r3
 8000940:	490c      	ldr	r1, [pc, #48]	@ (8000974 <__NVIC_SetPriority+0x4c>)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	0112      	lsls	r2, r2, #4
 8000948:	b2d2      	uxtb	r2, r2
 800094a:	440b      	add	r3, r1
 800094c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000950:	e00a      	b.n	8000968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4908      	ldr	r1, [pc, #32]	@ (8000978 <__NVIC_SetPriority+0x50>)
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	f003 030f 	and.w	r3, r3, #15
 800095e:	3b04      	subs	r3, #4
 8000960:	0112      	lsls	r2, r2, #4
 8000962:	b2d2      	uxtb	r2, r2
 8000964:	440b      	add	r3, r1
 8000966:	761a      	strb	r2, [r3, #24]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000e100 	.word	0xe000e100
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <NVIC_EncodePriority>:
{
 800097c:	b480      	push	{r7}
 800097e:	b089      	sub	sp, #36	@ 0x24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	f1c3 0307 	rsb	r3, r3, #7
 8000996:	2b04      	cmp	r3, #4
 8000998:	bf28      	it	cs
 800099a:	2304      	movcs	r3, #4
 800099c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3304      	adds	r3, #4
 80009a2:	2b06      	cmp	r3, #6
 80009a4:	d902      	bls.n	80009ac <NVIC_EncodePriority+0x30>
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3b03      	subs	r3, #3
 80009aa:	e000      	b.n	80009ae <NVIC_EncodePriority+0x32>
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43da      	mvns	r2, r3
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	401a      	ands	r2, r3
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	43d9      	mvns	r1, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d4:	4313      	orrs	r3, r2
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3724      	adds	r7, #36	@ 0x24
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <SysTick_Config>:
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009f4:	d301      	bcc.n	80009fa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00f      	b.n	8000a1a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <SysTick_Config+0x40>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a02:	210f      	movs	r1, #15
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a08:	f7ff ff8e 	bl	8000928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a0c:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <SysTick_Config+0x40>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a12:	4b04      	ldr	r3, [pc, #16]	@ (8000a24 <SysTick_Config+0x40>)
 8000a14:	2207      	movs	r2, #7
 8000a16:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	e000e010 	.word	0xe000e010

08000a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff ff47 	bl	80008c4 <__NVIC_SetPriorityGrouping>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b086      	sub	sp, #24
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	4603      	mov	r3, r0
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	607a      	str	r2, [r7, #4]
 8000a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a50:	f7ff ff5c 	bl	800090c <__NVIC_GetPriorityGrouping>
 8000a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	68b9      	ldr	r1, [r7, #8]
 8000a5a:	6978      	ldr	r0, [r7, #20]
 8000a5c:	f7ff ff8e 	bl	800097c <NVIC_EncodePriority>
 8000a60:	4602      	mov	r2, r0
 8000a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff5d 	bl	8000928 <__NVIC_SetPriority>
}
 8000a6e:	bf00      	nop
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ffb0 	bl	80009e4 <SysTick_Config>
 8000a84:	4603      	mov	r3, r0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b089      	sub	sp, #36	@ 0x24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	e159      	b.n	8000d60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000aac:	2201      	movs	r2, #1
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	697a      	ldr	r2, [r7, #20]
 8000abc:	4013      	ands	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	f040 8148 	bne.w	8000d5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f003 0303 	and.w	r3, r3, #3
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d005      	beq.n	8000ae2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d130      	bne.n	8000b44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	2203      	movs	r2, #3
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	4013      	ands	r3, r2
 8000af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	68da      	ldr	r2, [r3, #12]
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b18:	2201      	movs	r2, #1
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	69ba      	ldr	r2, [r7, #24]
 8000b24:	4013      	ands	r3, r2
 8000b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	091b      	lsrs	r3, r3, #4
 8000b2e:	f003 0201 	and.w	r2, r3, #1
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f003 0303 	and.w	r3, r3, #3
 8000b4c:	2b03      	cmp	r3, #3
 8000b4e:	d017      	beq.n	8000b80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	43db      	mvns	r3, r3
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	4013      	ands	r3, r2
 8000b66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	689a      	ldr	r2, [r3, #8]
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d123      	bne.n	8000bd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	08da      	lsrs	r2, r3, #3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3208      	adds	r2, #8
 8000b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	f003 0307 	and.w	r3, r3, #7
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	220f      	movs	r2, #15
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	4013      	ands	r3, r2
 8000bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	691a      	ldr	r2, [r3, #16]
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	08da      	lsrs	r2, r3, #3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3208      	adds	r2, #8
 8000bce:	69b9      	ldr	r1, [r7, #24]
 8000bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	2203      	movs	r2, #3
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	4013      	ands	r3, r2
 8000bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 0203 	and.w	r2, r3, #3
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	f000 80a2 	beq.w	8000d5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b57      	ldr	r3, [pc, #348]	@ (8000d78 <HAL_GPIO_Init+0x2e8>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1e:	4a56      	ldr	r2, [pc, #344]	@ (8000d78 <HAL_GPIO_Init+0x2e8>)
 8000c20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c26:	4b54      	ldr	r3, [pc, #336]	@ (8000d78 <HAL_GPIO_Init+0x2e8>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c32:	4a52      	ldr	r2, [pc, #328]	@ (8000d7c <HAL_GPIO_Init+0x2ec>)
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	089b      	lsrs	r3, r3, #2
 8000c38:	3302      	adds	r3, #2
 8000c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	220f      	movs	r2, #15
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	4013      	ands	r3, r2
 8000c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a49      	ldr	r2, [pc, #292]	@ (8000d80 <HAL_GPIO_Init+0x2f0>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d019      	beq.n	8000c92 <HAL_GPIO_Init+0x202>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a48      	ldr	r2, [pc, #288]	@ (8000d84 <HAL_GPIO_Init+0x2f4>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d013      	beq.n	8000c8e <HAL_GPIO_Init+0x1fe>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a47      	ldr	r2, [pc, #284]	@ (8000d88 <HAL_GPIO_Init+0x2f8>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d00d      	beq.n	8000c8a <HAL_GPIO_Init+0x1fa>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a46      	ldr	r2, [pc, #280]	@ (8000d8c <HAL_GPIO_Init+0x2fc>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d007      	beq.n	8000c86 <HAL_GPIO_Init+0x1f6>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a45      	ldr	r2, [pc, #276]	@ (8000d90 <HAL_GPIO_Init+0x300>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d101      	bne.n	8000c82 <HAL_GPIO_Init+0x1f2>
 8000c7e:	2304      	movs	r3, #4
 8000c80:	e008      	b.n	8000c94 <HAL_GPIO_Init+0x204>
 8000c82:	2307      	movs	r3, #7
 8000c84:	e006      	b.n	8000c94 <HAL_GPIO_Init+0x204>
 8000c86:	2303      	movs	r3, #3
 8000c88:	e004      	b.n	8000c94 <HAL_GPIO_Init+0x204>
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	e002      	b.n	8000c94 <HAL_GPIO_Init+0x204>
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e000      	b.n	8000c94 <HAL_GPIO_Init+0x204>
 8000c92:	2300      	movs	r3, #0
 8000c94:	69fa      	ldr	r2, [r7, #28]
 8000c96:	f002 0203 	and.w	r2, r2, #3
 8000c9a:	0092      	lsls	r2, r2, #2
 8000c9c:	4093      	lsls	r3, r2
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ca4:	4935      	ldr	r1, [pc, #212]	@ (8000d7c <HAL_GPIO_Init+0x2ec>)
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	089b      	lsrs	r3, r3, #2
 8000caa:	3302      	adds	r3, #2
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cb2:	4b38      	ldr	r3, [pc, #224]	@ (8000d94 <HAL_GPIO_Init+0x304>)
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d003      	beq.n	8000cd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000cd6:	4a2f      	ldr	r2, [pc, #188]	@ (8000d94 <HAL_GPIO_Init+0x304>)
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cdc:	4b2d      	ldr	r3, [pc, #180]	@ (8000d94 <HAL_GPIO_Init+0x304>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d003      	beq.n	8000d00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d00:	4a24      	ldr	r2, [pc, #144]	@ (8000d94 <HAL_GPIO_Init+0x304>)
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d06:	4b23      	ldr	r3, [pc, #140]	@ (8000d94 <HAL_GPIO_Init+0x304>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8000d94 <HAL_GPIO_Init+0x304>)
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d30:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <HAL_GPIO_Init+0x304>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d54:	4a0f      	ldr	r2, [pc, #60]	@ (8000d94 <HAL_GPIO_Init+0x304>)
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	2b0f      	cmp	r3, #15
 8000d64:	f67f aea2 	bls.w	8000aac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	3724      	adds	r7, #36	@ 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40013800 	.word	0x40013800
 8000d80:	40020000 	.word	0x40020000
 8000d84:	40020400 	.word	0x40020400
 8000d88:	40020800 	.word	0x40020800
 8000d8c:	40020c00 	.word	0x40020c00
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40013c00 	.word	0x40013c00

08000d98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	691a      	ldr	r2, [r3, #16]
 8000da8:	887b      	ldrh	r3, [r7, #2]
 8000daa:	4013      	ands	r3, r2
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d002      	beq.n	8000db6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000db0:	2301      	movs	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
 8000db4:	e001      	b.n	8000dba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	807b      	strh	r3, [r7, #2]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dd8:	787b      	ldrb	r3, [r7, #1]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dde:	887a      	ldrh	r2, [r7, #2]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000de4:	e003      	b.n	8000dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000de6:	887b      	ldrh	r3, [r7, #2]
 8000de8:	041a      	lsls	r2, r3, #16
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	619a      	str	r2, [r3, #24]
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
	...

08000dfc <std>:
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	b510      	push	{r4, lr}
 8000e00:	4604      	mov	r4, r0
 8000e02:	e9c0 3300 	strd	r3, r3, [r0]
 8000e06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e0a:	6083      	str	r3, [r0, #8]
 8000e0c:	8181      	strh	r1, [r0, #12]
 8000e0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000e10:	81c2      	strh	r2, [r0, #14]
 8000e12:	6183      	str	r3, [r0, #24]
 8000e14:	4619      	mov	r1, r3
 8000e16:	2208      	movs	r2, #8
 8000e18:	305c      	adds	r0, #92	@ 0x5c
 8000e1a:	f000 f9f9 	bl	8001210 <memset>
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e54 <std+0x58>)
 8000e20:	6263      	str	r3, [r4, #36]	@ 0x24
 8000e22:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <std+0x5c>)
 8000e24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000e26:	4b0d      	ldr	r3, [pc, #52]	@ (8000e5c <std+0x60>)
 8000e28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <std+0x64>)
 8000e2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e64 <std+0x68>)
 8000e30:	6224      	str	r4, [r4, #32]
 8000e32:	429c      	cmp	r4, r3
 8000e34:	d006      	beq.n	8000e44 <std+0x48>
 8000e36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000e3a:	4294      	cmp	r4, r2
 8000e3c:	d002      	beq.n	8000e44 <std+0x48>
 8000e3e:	33d0      	adds	r3, #208	@ 0xd0
 8000e40:	429c      	cmp	r4, r3
 8000e42:	d105      	bne.n	8000e50 <std+0x54>
 8000e44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e4c:	f000 ba58 	b.w	8001300 <__retarget_lock_init_recursive>
 8000e50:	bd10      	pop	{r4, pc}
 8000e52:	bf00      	nop
 8000e54:	08001061 	.word	0x08001061
 8000e58:	08001083 	.word	0x08001083
 8000e5c:	080010bb 	.word	0x080010bb
 8000e60:	080010df 	.word	0x080010df
 8000e64:	20000090 	.word	0x20000090

08000e68 <stdio_exit_handler>:
 8000e68:	4a02      	ldr	r2, [pc, #8]	@ (8000e74 <stdio_exit_handler+0xc>)
 8000e6a:	4903      	ldr	r1, [pc, #12]	@ (8000e78 <stdio_exit_handler+0x10>)
 8000e6c:	4803      	ldr	r0, [pc, #12]	@ (8000e7c <stdio_exit_handler+0x14>)
 8000e6e:	f000 b869 	b.w	8000f44 <_fwalk_sglue>
 8000e72:	bf00      	nop
 8000e74:	20000010 	.word	0x20000010
 8000e78:	08001ba1 	.word	0x08001ba1
 8000e7c:	20000020 	.word	0x20000020

08000e80 <cleanup_stdio>:
 8000e80:	6841      	ldr	r1, [r0, #4]
 8000e82:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb4 <cleanup_stdio+0x34>)
 8000e84:	4299      	cmp	r1, r3
 8000e86:	b510      	push	{r4, lr}
 8000e88:	4604      	mov	r4, r0
 8000e8a:	d001      	beq.n	8000e90 <cleanup_stdio+0x10>
 8000e8c:	f000 fe88 	bl	8001ba0 <_fflush_r>
 8000e90:	68a1      	ldr	r1, [r4, #8]
 8000e92:	4b09      	ldr	r3, [pc, #36]	@ (8000eb8 <cleanup_stdio+0x38>)
 8000e94:	4299      	cmp	r1, r3
 8000e96:	d002      	beq.n	8000e9e <cleanup_stdio+0x1e>
 8000e98:	4620      	mov	r0, r4
 8000e9a:	f000 fe81 	bl	8001ba0 <_fflush_r>
 8000e9e:	68e1      	ldr	r1, [r4, #12]
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <cleanup_stdio+0x3c>)
 8000ea2:	4299      	cmp	r1, r3
 8000ea4:	d004      	beq.n	8000eb0 <cleanup_stdio+0x30>
 8000ea6:	4620      	mov	r0, r4
 8000ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000eac:	f000 be78 	b.w	8001ba0 <_fflush_r>
 8000eb0:	bd10      	pop	{r4, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000090 	.word	0x20000090
 8000eb8:	200000f8 	.word	0x200000f8
 8000ebc:	20000160 	.word	0x20000160

08000ec0 <global_stdio_init.part.0>:
 8000ec0:	b510      	push	{r4, lr}
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <global_stdio_init.part.0+0x30>)
 8000ec4:	4c0b      	ldr	r4, [pc, #44]	@ (8000ef4 <global_stdio_init.part.0+0x34>)
 8000ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ef8 <global_stdio_init.part.0+0x38>)
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	4620      	mov	r0, r4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2104      	movs	r1, #4
 8000ed0:	f7ff ff94 	bl	8000dfc <std>
 8000ed4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2109      	movs	r1, #9
 8000edc:	f7ff ff8e 	bl	8000dfc <std>
 8000ee0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000eea:	2112      	movs	r1, #18
 8000eec:	f7ff bf86 	b.w	8000dfc <std>
 8000ef0:	200001c8 	.word	0x200001c8
 8000ef4:	20000090 	.word	0x20000090
 8000ef8:	08000e69 	.word	0x08000e69

08000efc <__sfp_lock_acquire>:
 8000efc:	4801      	ldr	r0, [pc, #4]	@ (8000f04 <__sfp_lock_acquire+0x8>)
 8000efe:	f000 ba00 	b.w	8001302 <__retarget_lock_acquire_recursive>
 8000f02:	bf00      	nop
 8000f04:	200001d1 	.word	0x200001d1

08000f08 <__sfp_lock_release>:
 8000f08:	4801      	ldr	r0, [pc, #4]	@ (8000f10 <__sfp_lock_release+0x8>)
 8000f0a:	f000 b9fb 	b.w	8001304 <__retarget_lock_release_recursive>
 8000f0e:	bf00      	nop
 8000f10:	200001d1 	.word	0x200001d1

08000f14 <__sinit>:
 8000f14:	b510      	push	{r4, lr}
 8000f16:	4604      	mov	r4, r0
 8000f18:	f7ff fff0 	bl	8000efc <__sfp_lock_acquire>
 8000f1c:	6a23      	ldr	r3, [r4, #32]
 8000f1e:	b11b      	cbz	r3, 8000f28 <__sinit+0x14>
 8000f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f24:	f7ff bff0 	b.w	8000f08 <__sfp_lock_release>
 8000f28:	4b04      	ldr	r3, [pc, #16]	@ (8000f3c <__sinit+0x28>)
 8000f2a:	6223      	str	r3, [r4, #32]
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <__sinit+0x2c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1f5      	bne.n	8000f20 <__sinit+0xc>
 8000f34:	f7ff ffc4 	bl	8000ec0 <global_stdio_init.part.0>
 8000f38:	e7f2      	b.n	8000f20 <__sinit+0xc>
 8000f3a:	bf00      	nop
 8000f3c:	08000e81 	.word	0x08000e81
 8000f40:	200001c8 	.word	0x200001c8

08000f44 <_fwalk_sglue>:
 8000f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f48:	4607      	mov	r7, r0
 8000f4a:	4688      	mov	r8, r1
 8000f4c:	4614      	mov	r4, r2
 8000f4e:	2600      	movs	r6, #0
 8000f50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000f54:	f1b9 0901 	subs.w	r9, r9, #1
 8000f58:	d505      	bpl.n	8000f66 <_fwalk_sglue+0x22>
 8000f5a:	6824      	ldr	r4, [r4, #0]
 8000f5c:	2c00      	cmp	r4, #0
 8000f5e:	d1f7      	bne.n	8000f50 <_fwalk_sglue+0xc>
 8000f60:	4630      	mov	r0, r6
 8000f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f66:	89ab      	ldrh	r3, [r5, #12]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d907      	bls.n	8000f7c <_fwalk_sglue+0x38>
 8000f6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f70:	3301      	adds	r3, #1
 8000f72:	d003      	beq.n	8000f7c <_fwalk_sglue+0x38>
 8000f74:	4629      	mov	r1, r5
 8000f76:	4638      	mov	r0, r7
 8000f78:	47c0      	blx	r8
 8000f7a:	4306      	orrs	r6, r0
 8000f7c:	3568      	adds	r5, #104	@ 0x68
 8000f7e:	e7e9      	b.n	8000f54 <_fwalk_sglue+0x10>

08000f80 <iprintf>:
 8000f80:	b40f      	push	{r0, r1, r2, r3}
 8000f82:	b507      	push	{r0, r1, r2, lr}
 8000f84:	4906      	ldr	r1, [pc, #24]	@ (8000fa0 <iprintf+0x20>)
 8000f86:	ab04      	add	r3, sp, #16
 8000f88:	6808      	ldr	r0, [r1, #0]
 8000f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8000f8e:	6881      	ldr	r1, [r0, #8]
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	f000 fadb 	bl	800154c <_vfiprintf_r>
 8000f96:	b003      	add	sp, #12
 8000f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8000f9c:	b004      	add	sp, #16
 8000f9e:	4770      	bx	lr
 8000fa0:	2000001c 	.word	0x2000001c

08000fa4 <_puts_r>:
 8000fa4:	6a03      	ldr	r3, [r0, #32]
 8000fa6:	b570      	push	{r4, r5, r6, lr}
 8000fa8:	6884      	ldr	r4, [r0, #8]
 8000faa:	4605      	mov	r5, r0
 8000fac:	460e      	mov	r6, r1
 8000fae:	b90b      	cbnz	r3, 8000fb4 <_puts_r+0x10>
 8000fb0:	f7ff ffb0 	bl	8000f14 <__sinit>
 8000fb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000fb6:	07db      	lsls	r3, r3, #31
 8000fb8:	d405      	bmi.n	8000fc6 <_puts_r+0x22>
 8000fba:	89a3      	ldrh	r3, [r4, #12]
 8000fbc:	0598      	lsls	r0, r3, #22
 8000fbe:	d402      	bmi.n	8000fc6 <_puts_r+0x22>
 8000fc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000fc2:	f000 f99e 	bl	8001302 <__retarget_lock_acquire_recursive>
 8000fc6:	89a3      	ldrh	r3, [r4, #12]
 8000fc8:	0719      	lsls	r1, r3, #28
 8000fca:	d502      	bpl.n	8000fd2 <_puts_r+0x2e>
 8000fcc:	6923      	ldr	r3, [r4, #16]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d135      	bne.n	800103e <_puts_r+0x9a>
 8000fd2:	4621      	mov	r1, r4
 8000fd4:	4628      	mov	r0, r5
 8000fd6:	f000 f8c5 	bl	8001164 <__swsetup_r>
 8000fda:	b380      	cbz	r0, 800103e <_puts_r+0x9a>
 8000fdc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000fe0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000fe2:	07da      	lsls	r2, r3, #31
 8000fe4:	d405      	bmi.n	8000ff2 <_puts_r+0x4e>
 8000fe6:	89a3      	ldrh	r3, [r4, #12]
 8000fe8:	059b      	lsls	r3, r3, #22
 8000fea:	d402      	bmi.n	8000ff2 <_puts_r+0x4e>
 8000fec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000fee:	f000 f989 	bl	8001304 <__retarget_lock_release_recursive>
 8000ff2:	4628      	mov	r0, r5
 8000ff4:	bd70      	pop	{r4, r5, r6, pc}
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	da04      	bge.n	8001004 <_puts_r+0x60>
 8000ffa:	69a2      	ldr	r2, [r4, #24]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dc17      	bgt.n	8001030 <_puts_r+0x8c>
 8001000:	290a      	cmp	r1, #10
 8001002:	d015      	beq.n	8001030 <_puts_r+0x8c>
 8001004:	6823      	ldr	r3, [r4, #0]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	6022      	str	r2, [r4, #0]
 800100a:	7019      	strb	r1, [r3, #0]
 800100c:	68a3      	ldr	r3, [r4, #8]
 800100e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001012:	3b01      	subs	r3, #1
 8001014:	60a3      	str	r3, [r4, #8]
 8001016:	2900      	cmp	r1, #0
 8001018:	d1ed      	bne.n	8000ff6 <_puts_r+0x52>
 800101a:	2b00      	cmp	r3, #0
 800101c:	da11      	bge.n	8001042 <_puts_r+0x9e>
 800101e:	4622      	mov	r2, r4
 8001020:	210a      	movs	r1, #10
 8001022:	4628      	mov	r0, r5
 8001024:	f000 f85f 	bl	80010e6 <__swbuf_r>
 8001028:	3001      	adds	r0, #1
 800102a:	d0d7      	beq.n	8000fdc <_puts_r+0x38>
 800102c:	250a      	movs	r5, #10
 800102e:	e7d7      	b.n	8000fe0 <_puts_r+0x3c>
 8001030:	4622      	mov	r2, r4
 8001032:	4628      	mov	r0, r5
 8001034:	f000 f857 	bl	80010e6 <__swbuf_r>
 8001038:	3001      	adds	r0, #1
 800103a:	d1e7      	bne.n	800100c <_puts_r+0x68>
 800103c:	e7ce      	b.n	8000fdc <_puts_r+0x38>
 800103e:	3e01      	subs	r6, #1
 8001040:	e7e4      	b.n	800100c <_puts_r+0x68>
 8001042:	6823      	ldr	r3, [r4, #0]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	6022      	str	r2, [r4, #0]
 8001048:	220a      	movs	r2, #10
 800104a:	701a      	strb	r2, [r3, #0]
 800104c:	e7ee      	b.n	800102c <_puts_r+0x88>
	...

08001050 <puts>:
 8001050:	4b02      	ldr	r3, [pc, #8]	@ (800105c <puts+0xc>)
 8001052:	4601      	mov	r1, r0
 8001054:	6818      	ldr	r0, [r3, #0]
 8001056:	f7ff bfa5 	b.w	8000fa4 <_puts_r>
 800105a:	bf00      	nop
 800105c:	2000001c 	.word	0x2000001c

08001060 <__sread>:
 8001060:	b510      	push	{r4, lr}
 8001062:	460c      	mov	r4, r1
 8001064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001068:	f000 f8fc 	bl	8001264 <_read_r>
 800106c:	2800      	cmp	r0, #0
 800106e:	bfab      	itete	ge
 8001070:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001072:	89a3      	ldrhlt	r3, [r4, #12]
 8001074:	181b      	addge	r3, r3, r0
 8001076:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800107a:	bfac      	ite	ge
 800107c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800107e:	81a3      	strhlt	r3, [r4, #12]
 8001080:	bd10      	pop	{r4, pc}

08001082 <__swrite>:
 8001082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001086:	461f      	mov	r7, r3
 8001088:	898b      	ldrh	r3, [r1, #12]
 800108a:	05db      	lsls	r3, r3, #23
 800108c:	4605      	mov	r5, r0
 800108e:	460c      	mov	r4, r1
 8001090:	4616      	mov	r6, r2
 8001092:	d505      	bpl.n	80010a0 <__swrite+0x1e>
 8001094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001098:	2302      	movs	r3, #2
 800109a:	2200      	movs	r2, #0
 800109c:	f000 f8d0 	bl	8001240 <_lseek_r>
 80010a0:	89a3      	ldrh	r3, [r4, #12]
 80010a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010aa:	81a3      	strh	r3, [r4, #12]
 80010ac:	4632      	mov	r2, r6
 80010ae:	463b      	mov	r3, r7
 80010b0:	4628      	mov	r0, r5
 80010b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010b6:	f000 b8e7 	b.w	8001288 <_write_r>

080010ba <__sseek>:
 80010ba:	b510      	push	{r4, lr}
 80010bc:	460c      	mov	r4, r1
 80010be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010c2:	f000 f8bd 	bl	8001240 <_lseek_r>
 80010c6:	1c43      	adds	r3, r0, #1
 80010c8:	89a3      	ldrh	r3, [r4, #12]
 80010ca:	bf15      	itete	ne
 80010cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80010ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80010d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80010d6:	81a3      	strheq	r3, [r4, #12]
 80010d8:	bf18      	it	ne
 80010da:	81a3      	strhne	r3, [r4, #12]
 80010dc:	bd10      	pop	{r4, pc}

080010de <__sclose>:
 80010de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010e2:	f000 b89d 	b.w	8001220 <_close_r>

080010e6 <__swbuf_r>:
 80010e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010e8:	460e      	mov	r6, r1
 80010ea:	4614      	mov	r4, r2
 80010ec:	4605      	mov	r5, r0
 80010ee:	b118      	cbz	r0, 80010f8 <__swbuf_r+0x12>
 80010f0:	6a03      	ldr	r3, [r0, #32]
 80010f2:	b90b      	cbnz	r3, 80010f8 <__swbuf_r+0x12>
 80010f4:	f7ff ff0e 	bl	8000f14 <__sinit>
 80010f8:	69a3      	ldr	r3, [r4, #24]
 80010fa:	60a3      	str	r3, [r4, #8]
 80010fc:	89a3      	ldrh	r3, [r4, #12]
 80010fe:	071a      	lsls	r2, r3, #28
 8001100:	d501      	bpl.n	8001106 <__swbuf_r+0x20>
 8001102:	6923      	ldr	r3, [r4, #16]
 8001104:	b943      	cbnz	r3, 8001118 <__swbuf_r+0x32>
 8001106:	4621      	mov	r1, r4
 8001108:	4628      	mov	r0, r5
 800110a:	f000 f82b 	bl	8001164 <__swsetup_r>
 800110e:	b118      	cbz	r0, 8001118 <__swbuf_r+0x32>
 8001110:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001114:	4638      	mov	r0, r7
 8001116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001118:	6823      	ldr	r3, [r4, #0]
 800111a:	6922      	ldr	r2, [r4, #16]
 800111c:	1a98      	subs	r0, r3, r2
 800111e:	6963      	ldr	r3, [r4, #20]
 8001120:	b2f6      	uxtb	r6, r6
 8001122:	4283      	cmp	r3, r0
 8001124:	4637      	mov	r7, r6
 8001126:	dc05      	bgt.n	8001134 <__swbuf_r+0x4e>
 8001128:	4621      	mov	r1, r4
 800112a:	4628      	mov	r0, r5
 800112c:	f000 fd38 	bl	8001ba0 <_fflush_r>
 8001130:	2800      	cmp	r0, #0
 8001132:	d1ed      	bne.n	8001110 <__swbuf_r+0x2a>
 8001134:	68a3      	ldr	r3, [r4, #8]
 8001136:	3b01      	subs	r3, #1
 8001138:	60a3      	str	r3, [r4, #8]
 800113a:	6823      	ldr	r3, [r4, #0]
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	6022      	str	r2, [r4, #0]
 8001140:	701e      	strb	r6, [r3, #0]
 8001142:	6962      	ldr	r2, [r4, #20]
 8001144:	1c43      	adds	r3, r0, #1
 8001146:	429a      	cmp	r2, r3
 8001148:	d004      	beq.n	8001154 <__swbuf_r+0x6e>
 800114a:	89a3      	ldrh	r3, [r4, #12]
 800114c:	07db      	lsls	r3, r3, #31
 800114e:	d5e1      	bpl.n	8001114 <__swbuf_r+0x2e>
 8001150:	2e0a      	cmp	r6, #10
 8001152:	d1df      	bne.n	8001114 <__swbuf_r+0x2e>
 8001154:	4621      	mov	r1, r4
 8001156:	4628      	mov	r0, r5
 8001158:	f000 fd22 	bl	8001ba0 <_fflush_r>
 800115c:	2800      	cmp	r0, #0
 800115e:	d0d9      	beq.n	8001114 <__swbuf_r+0x2e>
 8001160:	e7d6      	b.n	8001110 <__swbuf_r+0x2a>
	...

08001164 <__swsetup_r>:
 8001164:	b538      	push	{r3, r4, r5, lr}
 8001166:	4b29      	ldr	r3, [pc, #164]	@ (800120c <__swsetup_r+0xa8>)
 8001168:	4605      	mov	r5, r0
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	460c      	mov	r4, r1
 800116e:	b118      	cbz	r0, 8001178 <__swsetup_r+0x14>
 8001170:	6a03      	ldr	r3, [r0, #32]
 8001172:	b90b      	cbnz	r3, 8001178 <__swsetup_r+0x14>
 8001174:	f7ff fece 	bl	8000f14 <__sinit>
 8001178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800117c:	0719      	lsls	r1, r3, #28
 800117e:	d422      	bmi.n	80011c6 <__swsetup_r+0x62>
 8001180:	06da      	lsls	r2, r3, #27
 8001182:	d407      	bmi.n	8001194 <__swsetup_r+0x30>
 8001184:	2209      	movs	r2, #9
 8001186:	602a      	str	r2, [r5, #0]
 8001188:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800118c:	81a3      	strh	r3, [r4, #12]
 800118e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001192:	e033      	b.n	80011fc <__swsetup_r+0x98>
 8001194:	0758      	lsls	r0, r3, #29
 8001196:	d512      	bpl.n	80011be <__swsetup_r+0x5a>
 8001198:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800119a:	b141      	cbz	r1, 80011ae <__swsetup_r+0x4a>
 800119c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80011a0:	4299      	cmp	r1, r3
 80011a2:	d002      	beq.n	80011aa <__swsetup_r+0x46>
 80011a4:	4628      	mov	r0, r5
 80011a6:	f000 f8af 	bl	8001308 <_free_r>
 80011aa:	2300      	movs	r3, #0
 80011ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80011ae:	89a3      	ldrh	r3, [r4, #12]
 80011b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80011b4:	81a3      	strh	r3, [r4, #12]
 80011b6:	2300      	movs	r3, #0
 80011b8:	6063      	str	r3, [r4, #4]
 80011ba:	6923      	ldr	r3, [r4, #16]
 80011bc:	6023      	str	r3, [r4, #0]
 80011be:	89a3      	ldrh	r3, [r4, #12]
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	81a3      	strh	r3, [r4, #12]
 80011c6:	6923      	ldr	r3, [r4, #16]
 80011c8:	b94b      	cbnz	r3, 80011de <__swsetup_r+0x7a>
 80011ca:	89a3      	ldrh	r3, [r4, #12]
 80011cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80011d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011d4:	d003      	beq.n	80011de <__swsetup_r+0x7a>
 80011d6:	4621      	mov	r1, r4
 80011d8:	4628      	mov	r0, r5
 80011da:	f000 fd2f 	bl	8001c3c <__smakebuf_r>
 80011de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011e2:	f013 0201 	ands.w	r2, r3, #1
 80011e6:	d00a      	beq.n	80011fe <__swsetup_r+0x9a>
 80011e8:	2200      	movs	r2, #0
 80011ea:	60a2      	str	r2, [r4, #8]
 80011ec:	6962      	ldr	r2, [r4, #20]
 80011ee:	4252      	negs	r2, r2
 80011f0:	61a2      	str	r2, [r4, #24]
 80011f2:	6922      	ldr	r2, [r4, #16]
 80011f4:	b942      	cbnz	r2, 8001208 <__swsetup_r+0xa4>
 80011f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80011fa:	d1c5      	bne.n	8001188 <__swsetup_r+0x24>
 80011fc:	bd38      	pop	{r3, r4, r5, pc}
 80011fe:	0799      	lsls	r1, r3, #30
 8001200:	bf58      	it	pl
 8001202:	6962      	ldrpl	r2, [r4, #20]
 8001204:	60a2      	str	r2, [r4, #8]
 8001206:	e7f4      	b.n	80011f2 <__swsetup_r+0x8e>
 8001208:	2000      	movs	r0, #0
 800120a:	e7f7      	b.n	80011fc <__swsetup_r+0x98>
 800120c:	2000001c 	.word	0x2000001c

08001210 <memset>:
 8001210:	4402      	add	r2, r0
 8001212:	4603      	mov	r3, r0
 8001214:	4293      	cmp	r3, r2
 8001216:	d100      	bne.n	800121a <memset+0xa>
 8001218:	4770      	bx	lr
 800121a:	f803 1b01 	strb.w	r1, [r3], #1
 800121e:	e7f9      	b.n	8001214 <memset+0x4>

08001220 <_close_r>:
 8001220:	b538      	push	{r3, r4, r5, lr}
 8001222:	4d06      	ldr	r5, [pc, #24]	@ (800123c <_close_r+0x1c>)
 8001224:	2300      	movs	r3, #0
 8001226:	4604      	mov	r4, r0
 8001228:	4608      	mov	r0, r1
 800122a:	602b      	str	r3, [r5, #0]
 800122c:	f7ff fa0e 	bl	800064c <_close>
 8001230:	1c43      	adds	r3, r0, #1
 8001232:	d102      	bne.n	800123a <_close_r+0x1a>
 8001234:	682b      	ldr	r3, [r5, #0]
 8001236:	b103      	cbz	r3, 800123a <_close_r+0x1a>
 8001238:	6023      	str	r3, [r4, #0]
 800123a:	bd38      	pop	{r3, r4, r5, pc}
 800123c:	200001cc 	.word	0x200001cc

08001240 <_lseek_r>:
 8001240:	b538      	push	{r3, r4, r5, lr}
 8001242:	4d07      	ldr	r5, [pc, #28]	@ (8001260 <_lseek_r+0x20>)
 8001244:	4604      	mov	r4, r0
 8001246:	4608      	mov	r0, r1
 8001248:	4611      	mov	r1, r2
 800124a:	2200      	movs	r2, #0
 800124c:	602a      	str	r2, [r5, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	f7ff fa23 	bl	800069a <_lseek>
 8001254:	1c43      	adds	r3, r0, #1
 8001256:	d102      	bne.n	800125e <_lseek_r+0x1e>
 8001258:	682b      	ldr	r3, [r5, #0]
 800125a:	b103      	cbz	r3, 800125e <_lseek_r+0x1e>
 800125c:	6023      	str	r3, [r4, #0]
 800125e:	bd38      	pop	{r3, r4, r5, pc}
 8001260:	200001cc 	.word	0x200001cc

08001264 <_read_r>:
 8001264:	b538      	push	{r3, r4, r5, lr}
 8001266:	4d07      	ldr	r5, [pc, #28]	@ (8001284 <_read_r+0x20>)
 8001268:	4604      	mov	r4, r0
 800126a:	4608      	mov	r0, r1
 800126c:	4611      	mov	r1, r2
 800126e:	2200      	movs	r2, #0
 8001270:	602a      	str	r2, [r5, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	f7ff f9cd 	bl	8000612 <_read>
 8001278:	1c43      	adds	r3, r0, #1
 800127a:	d102      	bne.n	8001282 <_read_r+0x1e>
 800127c:	682b      	ldr	r3, [r5, #0]
 800127e:	b103      	cbz	r3, 8001282 <_read_r+0x1e>
 8001280:	6023      	str	r3, [r4, #0]
 8001282:	bd38      	pop	{r3, r4, r5, pc}
 8001284:	200001cc 	.word	0x200001cc

08001288 <_write_r>:
 8001288:	b538      	push	{r3, r4, r5, lr}
 800128a:	4d07      	ldr	r5, [pc, #28]	@ (80012a8 <_write_r+0x20>)
 800128c:	4604      	mov	r4, r0
 800128e:	4608      	mov	r0, r1
 8001290:	4611      	mov	r1, r2
 8001292:	2200      	movs	r2, #0
 8001294:	602a      	str	r2, [r5, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	f7ff f852 	bl	8000340 <_write>
 800129c:	1c43      	adds	r3, r0, #1
 800129e:	d102      	bne.n	80012a6 <_write_r+0x1e>
 80012a0:	682b      	ldr	r3, [r5, #0]
 80012a2:	b103      	cbz	r3, 80012a6 <_write_r+0x1e>
 80012a4:	6023      	str	r3, [r4, #0]
 80012a6:	bd38      	pop	{r3, r4, r5, pc}
 80012a8:	200001cc 	.word	0x200001cc

080012ac <__errno>:
 80012ac:	4b01      	ldr	r3, [pc, #4]	@ (80012b4 <__errno+0x8>)
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	2000001c 	.word	0x2000001c

080012b8 <__libc_init_array>:
 80012b8:	b570      	push	{r4, r5, r6, lr}
 80012ba:	4d0d      	ldr	r5, [pc, #52]	@ (80012f0 <__libc_init_array+0x38>)
 80012bc:	4c0d      	ldr	r4, [pc, #52]	@ (80012f4 <__libc_init_array+0x3c>)
 80012be:	1b64      	subs	r4, r4, r5
 80012c0:	10a4      	asrs	r4, r4, #2
 80012c2:	2600      	movs	r6, #0
 80012c4:	42a6      	cmp	r6, r4
 80012c6:	d109      	bne.n	80012dc <__libc_init_array+0x24>
 80012c8:	4d0b      	ldr	r5, [pc, #44]	@ (80012f8 <__libc_init_array+0x40>)
 80012ca:	4c0c      	ldr	r4, [pc, #48]	@ (80012fc <__libc_init_array+0x44>)
 80012cc:	f000 fd24 	bl	8001d18 <_init>
 80012d0:	1b64      	subs	r4, r4, r5
 80012d2:	10a4      	asrs	r4, r4, #2
 80012d4:	2600      	movs	r6, #0
 80012d6:	42a6      	cmp	r6, r4
 80012d8:	d105      	bne.n	80012e6 <__libc_init_array+0x2e>
 80012da:	bd70      	pop	{r4, r5, r6, pc}
 80012dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80012e0:	4798      	blx	r3
 80012e2:	3601      	adds	r6, #1
 80012e4:	e7ee      	b.n	80012c4 <__libc_init_array+0xc>
 80012e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80012ea:	4798      	blx	r3
 80012ec:	3601      	adds	r6, #1
 80012ee:	e7f2      	b.n	80012d6 <__libc_init_array+0x1e>
 80012f0:	08001dbc 	.word	0x08001dbc
 80012f4:	08001dbc 	.word	0x08001dbc
 80012f8:	08001dbc 	.word	0x08001dbc
 80012fc:	08001dc0 	.word	0x08001dc0

08001300 <__retarget_lock_init_recursive>:
 8001300:	4770      	bx	lr

08001302 <__retarget_lock_acquire_recursive>:
 8001302:	4770      	bx	lr

08001304 <__retarget_lock_release_recursive>:
 8001304:	4770      	bx	lr
	...

08001308 <_free_r>:
 8001308:	b538      	push	{r3, r4, r5, lr}
 800130a:	4605      	mov	r5, r0
 800130c:	2900      	cmp	r1, #0
 800130e:	d041      	beq.n	8001394 <_free_r+0x8c>
 8001310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001314:	1f0c      	subs	r4, r1, #4
 8001316:	2b00      	cmp	r3, #0
 8001318:	bfb8      	it	lt
 800131a:	18e4      	addlt	r4, r4, r3
 800131c:	f000 f8e0 	bl	80014e0 <__malloc_lock>
 8001320:	4a1d      	ldr	r2, [pc, #116]	@ (8001398 <_free_r+0x90>)
 8001322:	6813      	ldr	r3, [r2, #0]
 8001324:	b933      	cbnz	r3, 8001334 <_free_r+0x2c>
 8001326:	6063      	str	r3, [r4, #4]
 8001328:	6014      	str	r4, [r2, #0]
 800132a:	4628      	mov	r0, r5
 800132c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001330:	f000 b8dc 	b.w	80014ec <__malloc_unlock>
 8001334:	42a3      	cmp	r3, r4
 8001336:	d908      	bls.n	800134a <_free_r+0x42>
 8001338:	6820      	ldr	r0, [r4, #0]
 800133a:	1821      	adds	r1, r4, r0
 800133c:	428b      	cmp	r3, r1
 800133e:	bf01      	itttt	eq
 8001340:	6819      	ldreq	r1, [r3, #0]
 8001342:	685b      	ldreq	r3, [r3, #4]
 8001344:	1809      	addeq	r1, r1, r0
 8001346:	6021      	streq	r1, [r4, #0]
 8001348:	e7ed      	b.n	8001326 <_free_r+0x1e>
 800134a:	461a      	mov	r2, r3
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	b10b      	cbz	r3, 8001354 <_free_r+0x4c>
 8001350:	42a3      	cmp	r3, r4
 8001352:	d9fa      	bls.n	800134a <_free_r+0x42>
 8001354:	6811      	ldr	r1, [r2, #0]
 8001356:	1850      	adds	r0, r2, r1
 8001358:	42a0      	cmp	r0, r4
 800135a:	d10b      	bne.n	8001374 <_free_r+0x6c>
 800135c:	6820      	ldr	r0, [r4, #0]
 800135e:	4401      	add	r1, r0
 8001360:	1850      	adds	r0, r2, r1
 8001362:	4283      	cmp	r3, r0
 8001364:	6011      	str	r1, [r2, #0]
 8001366:	d1e0      	bne.n	800132a <_free_r+0x22>
 8001368:	6818      	ldr	r0, [r3, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	6053      	str	r3, [r2, #4]
 800136e:	4408      	add	r0, r1
 8001370:	6010      	str	r0, [r2, #0]
 8001372:	e7da      	b.n	800132a <_free_r+0x22>
 8001374:	d902      	bls.n	800137c <_free_r+0x74>
 8001376:	230c      	movs	r3, #12
 8001378:	602b      	str	r3, [r5, #0]
 800137a:	e7d6      	b.n	800132a <_free_r+0x22>
 800137c:	6820      	ldr	r0, [r4, #0]
 800137e:	1821      	adds	r1, r4, r0
 8001380:	428b      	cmp	r3, r1
 8001382:	bf04      	itt	eq
 8001384:	6819      	ldreq	r1, [r3, #0]
 8001386:	685b      	ldreq	r3, [r3, #4]
 8001388:	6063      	str	r3, [r4, #4]
 800138a:	bf04      	itt	eq
 800138c:	1809      	addeq	r1, r1, r0
 800138e:	6021      	streq	r1, [r4, #0]
 8001390:	6054      	str	r4, [r2, #4]
 8001392:	e7ca      	b.n	800132a <_free_r+0x22>
 8001394:	bd38      	pop	{r3, r4, r5, pc}
 8001396:	bf00      	nop
 8001398:	200001d8 	.word	0x200001d8

0800139c <sbrk_aligned>:
 800139c:	b570      	push	{r4, r5, r6, lr}
 800139e:	4e0f      	ldr	r6, [pc, #60]	@ (80013dc <sbrk_aligned+0x40>)
 80013a0:	460c      	mov	r4, r1
 80013a2:	6831      	ldr	r1, [r6, #0]
 80013a4:	4605      	mov	r5, r0
 80013a6:	b911      	cbnz	r1, 80013ae <sbrk_aligned+0x12>
 80013a8:	f000 fca6 	bl	8001cf8 <_sbrk_r>
 80013ac:	6030      	str	r0, [r6, #0]
 80013ae:	4621      	mov	r1, r4
 80013b0:	4628      	mov	r0, r5
 80013b2:	f000 fca1 	bl	8001cf8 <_sbrk_r>
 80013b6:	1c43      	adds	r3, r0, #1
 80013b8:	d103      	bne.n	80013c2 <sbrk_aligned+0x26>
 80013ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80013be:	4620      	mov	r0, r4
 80013c0:	bd70      	pop	{r4, r5, r6, pc}
 80013c2:	1cc4      	adds	r4, r0, #3
 80013c4:	f024 0403 	bic.w	r4, r4, #3
 80013c8:	42a0      	cmp	r0, r4
 80013ca:	d0f8      	beq.n	80013be <sbrk_aligned+0x22>
 80013cc:	1a21      	subs	r1, r4, r0
 80013ce:	4628      	mov	r0, r5
 80013d0:	f000 fc92 	bl	8001cf8 <_sbrk_r>
 80013d4:	3001      	adds	r0, #1
 80013d6:	d1f2      	bne.n	80013be <sbrk_aligned+0x22>
 80013d8:	e7ef      	b.n	80013ba <sbrk_aligned+0x1e>
 80013da:	bf00      	nop
 80013dc:	200001d4 	.word	0x200001d4

080013e0 <_malloc_r>:
 80013e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013e4:	1ccd      	adds	r5, r1, #3
 80013e6:	f025 0503 	bic.w	r5, r5, #3
 80013ea:	3508      	adds	r5, #8
 80013ec:	2d0c      	cmp	r5, #12
 80013ee:	bf38      	it	cc
 80013f0:	250c      	movcc	r5, #12
 80013f2:	2d00      	cmp	r5, #0
 80013f4:	4606      	mov	r6, r0
 80013f6:	db01      	blt.n	80013fc <_malloc_r+0x1c>
 80013f8:	42a9      	cmp	r1, r5
 80013fa:	d904      	bls.n	8001406 <_malloc_r+0x26>
 80013fc:	230c      	movs	r3, #12
 80013fe:	6033      	str	r3, [r6, #0]
 8001400:	2000      	movs	r0, #0
 8001402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001406:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80014dc <_malloc_r+0xfc>
 800140a:	f000 f869 	bl	80014e0 <__malloc_lock>
 800140e:	f8d8 3000 	ldr.w	r3, [r8]
 8001412:	461c      	mov	r4, r3
 8001414:	bb44      	cbnz	r4, 8001468 <_malloc_r+0x88>
 8001416:	4629      	mov	r1, r5
 8001418:	4630      	mov	r0, r6
 800141a:	f7ff ffbf 	bl	800139c <sbrk_aligned>
 800141e:	1c43      	adds	r3, r0, #1
 8001420:	4604      	mov	r4, r0
 8001422:	d158      	bne.n	80014d6 <_malloc_r+0xf6>
 8001424:	f8d8 4000 	ldr.w	r4, [r8]
 8001428:	4627      	mov	r7, r4
 800142a:	2f00      	cmp	r7, #0
 800142c:	d143      	bne.n	80014b6 <_malloc_r+0xd6>
 800142e:	2c00      	cmp	r4, #0
 8001430:	d04b      	beq.n	80014ca <_malloc_r+0xea>
 8001432:	6823      	ldr	r3, [r4, #0]
 8001434:	4639      	mov	r1, r7
 8001436:	4630      	mov	r0, r6
 8001438:	eb04 0903 	add.w	r9, r4, r3
 800143c:	f000 fc5c 	bl	8001cf8 <_sbrk_r>
 8001440:	4581      	cmp	r9, r0
 8001442:	d142      	bne.n	80014ca <_malloc_r+0xea>
 8001444:	6821      	ldr	r1, [r4, #0]
 8001446:	1a6d      	subs	r5, r5, r1
 8001448:	4629      	mov	r1, r5
 800144a:	4630      	mov	r0, r6
 800144c:	f7ff ffa6 	bl	800139c <sbrk_aligned>
 8001450:	3001      	adds	r0, #1
 8001452:	d03a      	beq.n	80014ca <_malloc_r+0xea>
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	442b      	add	r3, r5
 8001458:	6023      	str	r3, [r4, #0]
 800145a:	f8d8 3000 	ldr.w	r3, [r8]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	bb62      	cbnz	r2, 80014bc <_malloc_r+0xdc>
 8001462:	f8c8 7000 	str.w	r7, [r8]
 8001466:	e00f      	b.n	8001488 <_malloc_r+0xa8>
 8001468:	6822      	ldr	r2, [r4, #0]
 800146a:	1b52      	subs	r2, r2, r5
 800146c:	d420      	bmi.n	80014b0 <_malloc_r+0xd0>
 800146e:	2a0b      	cmp	r2, #11
 8001470:	d917      	bls.n	80014a2 <_malloc_r+0xc2>
 8001472:	1961      	adds	r1, r4, r5
 8001474:	42a3      	cmp	r3, r4
 8001476:	6025      	str	r5, [r4, #0]
 8001478:	bf18      	it	ne
 800147a:	6059      	strne	r1, [r3, #4]
 800147c:	6863      	ldr	r3, [r4, #4]
 800147e:	bf08      	it	eq
 8001480:	f8c8 1000 	streq.w	r1, [r8]
 8001484:	5162      	str	r2, [r4, r5]
 8001486:	604b      	str	r3, [r1, #4]
 8001488:	4630      	mov	r0, r6
 800148a:	f000 f82f 	bl	80014ec <__malloc_unlock>
 800148e:	f104 000b 	add.w	r0, r4, #11
 8001492:	1d23      	adds	r3, r4, #4
 8001494:	f020 0007 	bic.w	r0, r0, #7
 8001498:	1ac2      	subs	r2, r0, r3
 800149a:	bf1c      	itt	ne
 800149c:	1a1b      	subne	r3, r3, r0
 800149e:	50a3      	strne	r3, [r4, r2]
 80014a0:	e7af      	b.n	8001402 <_malloc_r+0x22>
 80014a2:	6862      	ldr	r2, [r4, #4]
 80014a4:	42a3      	cmp	r3, r4
 80014a6:	bf0c      	ite	eq
 80014a8:	f8c8 2000 	streq.w	r2, [r8]
 80014ac:	605a      	strne	r2, [r3, #4]
 80014ae:	e7eb      	b.n	8001488 <_malloc_r+0xa8>
 80014b0:	4623      	mov	r3, r4
 80014b2:	6864      	ldr	r4, [r4, #4]
 80014b4:	e7ae      	b.n	8001414 <_malloc_r+0x34>
 80014b6:	463c      	mov	r4, r7
 80014b8:	687f      	ldr	r7, [r7, #4]
 80014ba:	e7b6      	b.n	800142a <_malloc_r+0x4a>
 80014bc:	461a      	mov	r2, r3
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	42a3      	cmp	r3, r4
 80014c2:	d1fb      	bne.n	80014bc <_malloc_r+0xdc>
 80014c4:	2300      	movs	r3, #0
 80014c6:	6053      	str	r3, [r2, #4]
 80014c8:	e7de      	b.n	8001488 <_malloc_r+0xa8>
 80014ca:	230c      	movs	r3, #12
 80014cc:	6033      	str	r3, [r6, #0]
 80014ce:	4630      	mov	r0, r6
 80014d0:	f000 f80c 	bl	80014ec <__malloc_unlock>
 80014d4:	e794      	b.n	8001400 <_malloc_r+0x20>
 80014d6:	6005      	str	r5, [r0, #0]
 80014d8:	e7d6      	b.n	8001488 <_malloc_r+0xa8>
 80014da:	bf00      	nop
 80014dc:	200001d8 	.word	0x200001d8

080014e0 <__malloc_lock>:
 80014e0:	4801      	ldr	r0, [pc, #4]	@ (80014e8 <__malloc_lock+0x8>)
 80014e2:	f7ff bf0e 	b.w	8001302 <__retarget_lock_acquire_recursive>
 80014e6:	bf00      	nop
 80014e8:	200001d0 	.word	0x200001d0

080014ec <__malloc_unlock>:
 80014ec:	4801      	ldr	r0, [pc, #4]	@ (80014f4 <__malloc_unlock+0x8>)
 80014ee:	f7ff bf09 	b.w	8001304 <__retarget_lock_release_recursive>
 80014f2:	bf00      	nop
 80014f4:	200001d0 	.word	0x200001d0

080014f8 <__sfputc_r>:
 80014f8:	6893      	ldr	r3, [r2, #8]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	b410      	push	{r4}
 8001500:	6093      	str	r3, [r2, #8]
 8001502:	da08      	bge.n	8001516 <__sfputc_r+0x1e>
 8001504:	6994      	ldr	r4, [r2, #24]
 8001506:	42a3      	cmp	r3, r4
 8001508:	db01      	blt.n	800150e <__sfputc_r+0x16>
 800150a:	290a      	cmp	r1, #10
 800150c:	d103      	bne.n	8001516 <__sfputc_r+0x1e>
 800150e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001512:	f7ff bde8 	b.w	80010e6 <__swbuf_r>
 8001516:	6813      	ldr	r3, [r2, #0]
 8001518:	1c58      	adds	r0, r3, #1
 800151a:	6010      	str	r0, [r2, #0]
 800151c:	7019      	strb	r1, [r3, #0]
 800151e:	4608      	mov	r0, r1
 8001520:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001524:	4770      	bx	lr

08001526 <__sfputs_r>:
 8001526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001528:	4606      	mov	r6, r0
 800152a:	460f      	mov	r7, r1
 800152c:	4614      	mov	r4, r2
 800152e:	18d5      	adds	r5, r2, r3
 8001530:	42ac      	cmp	r4, r5
 8001532:	d101      	bne.n	8001538 <__sfputs_r+0x12>
 8001534:	2000      	movs	r0, #0
 8001536:	e007      	b.n	8001548 <__sfputs_r+0x22>
 8001538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800153c:	463a      	mov	r2, r7
 800153e:	4630      	mov	r0, r6
 8001540:	f7ff ffda 	bl	80014f8 <__sfputc_r>
 8001544:	1c43      	adds	r3, r0, #1
 8001546:	d1f3      	bne.n	8001530 <__sfputs_r+0xa>
 8001548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800154c <_vfiprintf_r>:
 800154c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001550:	460d      	mov	r5, r1
 8001552:	b09d      	sub	sp, #116	@ 0x74
 8001554:	4614      	mov	r4, r2
 8001556:	4698      	mov	r8, r3
 8001558:	4606      	mov	r6, r0
 800155a:	b118      	cbz	r0, 8001564 <_vfiprintf_r+0x18>
 800155c:	6a03      	ldr	r3, [r0, #32]
 800155e:	b90b      	cbnz	r3, 8001564 <_vfiprintf_r+0x18>
 8001560:	f7ff fcd8 	bl	8000f14 <__sinit>
 8001564:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001566:	07d9      	lsls	r1, r3, #31
 8001568:	d405      	bmi.n	8001576 <_vfiprintf_r+0x2a>
 800156a:	89ab      	ldrh	r3, [r5, #12]
 800156c:	059a      	lsls	r2, r3, #22
 800156e:	d402      	bmi.n	8001576 <_vfiprintf_r+0x2a>
 8001570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001572:	f7ff fec6 	bl	8001302 <__retarget_lock_acquire_recursive>
 8001576:	89ab      	ldrh	r3, [r5, #12]
 8001578:	071b      	lsls	r3, r3, #28
 800157a:	d501      	bpl.n	8001580 <_vfiprintf_r+0x34>
 800157c:	692b      	ldr	r3, [r5, #16]
 800157e:	b99b      	cbnz	r3, 80015a8 <_vfiprintf_r+0x5c>
 8001580:	4629      	mov	r1, r5
 8001582:	4630      	mov	r0, r6
 8001584:	f7ff fdee 	bl	8001164 <__swsetup_r>
 8001588:	b170      	cbz	r0, 80015a8 <_vfiprintf_r+0x5c>
 800158a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800158c:	07dc      	lsls	r4, r3, #31
 800158e:	d504      	bpl.n	800159a <_vfiprintf_r+0x4e>
 8001590:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001594:	b01d      	add	sp, #116	@ 0x74
 8001596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800159a:	89ab      	ldrh	r3, [r5, #12]
 800159c:	0598      	lsls	r0, r3, #22
 800159e:	d4f7      	bmi.n	8001590 <_vfiprintf_r+0x44>
 80015a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80015a2:	f7ff feaf 	bl	8001304 <__retarget_lock_release_recursive>
 80015a6:	e7f3      	b.n	8001590 <_vfiprintf_r+0x44>
 80015a8:	2300      	movs	r3, #0
 80015aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80015ac:	2320      	movs	r3, #32
 80015ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80015b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80015b6:	2330      	movs	r3, #48	@ 0x30
 80015b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001768 <_vfiprintf_r+0x21c>
 80015bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80015c0:	f04f 0901 	mov.w	r9, #1
 80015c4:	4623      	mov	r3, r4
 80015c6:	469a      	mov	sl, r3
 80015c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80015cc:	b10a      	cbz	r2, 80015d2 <_vfiprintf_r+0x86>
 80015ce:	2a25      	cmp	r2, #37	@ 0x25
 80015d0:	d1f9      	bne.n	80015c6 <_vfiprintf_r+0x7a>
 80015d2:	ebba 0b04 	subs.w	fp, sl, r4
 80015d6:	d00b      	beq.n	80015f0 <_vfiprintf_r+0xa4>
 80015d8:	465b      	mov	r3, fp
 80015da:	4622      	mov	r2, r4
 80015dc:	4629      	mov	r1, r5
 80015de:	4630      	mov	r0, r6
 80015e0:	f7ff ffa1 	bl	8001526 <__sfputs_r>
 80015e4:	3001      	adds	r0, #1
 80015e6:	f000 80a7 	beq.w	8001738 <_vfiprintf_r+0x1ec>
 80015ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80015ec:	445a      	add	r2, fp
 80015ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80015f0:	f89a 3000 	ldrb.w	r3, [sl]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 809f 	beq.w	8001738 <_vfiprintf_r+0x1ec>
 80015fa:	2300      	movs	r3, #0
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001600:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001604:	f10a 0a01 	add.w	sl, sl, #1
 8001608:	9304      	str	r3, [sp, #16]
 800160a:	9307      	str	r3, [sp, #28]
 800160c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001610:	931a      	str	r3, [sp, #104]	@ 0x68
 8001612:	4654      	mov	r4, sl
 8001614:	2205      	movs	r2, #5
 8001616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800161a:	4853      	ldr	r0, [pc, #332]	@ (8001768 <_vfiprintf_r+0x21c>)
 800161c:	f7fe fde0 	bl	80001e0 <memchr>
 8001620:	9a04      	ldr	r2, [sp, #16]
 8001622:	b9d8      	cbnz	r0, 800165c <_vfiprintf_r+0x110>
 8001624:	06d1      	lsls	r1, r2, #27
 8001626:	bf44      	itt	mi
 8001628:	2320      	movmi	r3, #32
 800162a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800162e:	0713      	lsls	r3, r2, #28
 8001630:	bf44      	itt	mi
 8001632:	232b      	movmi	r3, #43	@ 0x2b
 8001634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001638:	f89a 3000 	ldrb.w	r3, [sl]
 800163c:	2b2a      	cmp	r3, #42	@ 0x2a
 800163e:	d015      	beq.n	800166c <_vfiprintf_r+0x120>
 8001640:	9a07      	ldr	r2, [sp, #28]
 8001642:	4654      	mov	r4, sl
 8001644:	2000      	movs	r0, #0
 8001646:	f04f 0c0a 	mov.w	ip, #10
 800164a:	4621      	mov	r1, r4
 800164c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001650:	3b30      	subs	r3, #48	@ 0x30
 8001652:	2b09      	cmp	r3, #9
 8001654:	d94b      	bls.n	80016ee <_vfiprintf_r+0x1a2>
 8001656:	b1b0      	cbz	r0, 8001686 <_vfiprintf_r+0x13a>
 8001658:	9207      	str	r2, [sp, #28]
 800165a:	e014      	b.n	8001686 <_vfiprintf_r+0x13a>
 800165c:	eba0 0308 	sub.w	r3, r0, r8
 8001660:	fa09 f303 	lsl.w	r3, r9, r3
 8001664:	4313      	orrs	r3, r2
 8001666:	9304      	str	r3, [sp, #16]
 8001668:	46a2      	mov	sl, r4
 800166a:	e7d2      	b.n	8001612 <_vfiprintf_r+0xc6>
 800166c:	9b03      	ldr	r3, [sp, #12]
 800166e:	1d19      	adds	r1, r3, #4
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	9103      	str	r1, [sp, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	bfbb      	ittet	lt
 8001678:	425b      	neglt	r3, r3
 800167a:	f042 0202 	orrlt.w	r2, r2, #2
 800167e:	9307      	strge	r3, [sp, #28]
 8001680:	9307      	strlt	r3, [sp, #28]
 8001682:	bfb8      	it	lt
 8001684:	9204      	strlt	r2, [sp, #16]
 8001686:	7823      	ldrb	r3, [r4, #0]
 8001688:	2b2e      	cmp	r3, #46	@ 0x2e
 800168a:	d10a      	bne.n	80016a2 <_vfiprintf_r+0x156>
 800168c:	7863      	ldrb	r3, [r4, #1]
 800168e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001690:	d132      	bne.n	80016f8 <_vfiprintf_r+0x1ac>
 8001692:	9b03      	ldr	r3, [sp, #12]
 8001694:	1d1a      	adds	r2, r3, #4
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	9203      	str	r2, [sp, #12]
 800169a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800169e:	3402      	adds	r4, #2
 80016a0:	9305      	str	r3, [sp, #20]
 80016a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001778 <_vfiprintf_r+0x22c>
 80016a6:	7821      	ldrb	r1, [r4, #0]
 80016a8:	2203      	movs	r2, #3
 80016aa:	4650      	mov	r0, sl
 80016ac:	f7fe fd98 	bl	80001e0 <memchr>
 80016b0:	b138      	cbz	r0, 80016c2 <_vfiprintf_r+0x176>
 80016b2:	9b04      	ldr	r3, [sp, #16]
 80016b4:	eba0 000a 	sub.w	r0, r0, sl
 80016b8:	2240      	movs	r2, #64	@ 0x40
 80016ba:	4082      	lsls	r2, r0
 80016bc:	4313      	orrs	r3, r2
 80016be:	3401      	adds	r4, #1
 80016c0:	9304      	str	r3, [sp, #16]
 80016c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016c6:	4829      	ldr	r0, [pc, #164]	@ (800176c <_vfiprintf_r+0x220>)
 80016c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80016cc:	2206      	movs	r2, #6
 80016ce:	f7fe fd87 	bl	80001e0 <memchr>
 80016d2:	2800      	cmp	r0, #0
 80016d4:	d03f      	beq.n	8001756 <_vfiprintf_r+0x20a>
 80016d6:	4b26      	ldr	r3, [pc, #152]	@ (8001770 <_vfiprintf_r+0x224>)
 80016d8:	bb1b      	cbnz	r3, 8001722 <_vfiprintf_r+0x1d6>
 80016da:	9b03      	ldr	r3, [sp, #12]
 80016dc:	3307      	adds	r3, #7
 80016de:	f023 0307 	bic.w	r3, r3, #7
 80016e2:	3308      	adds	r3, #8
 80016e4:	9303      	str	r3, [sp, #12]
 80016e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80016e8:	443b      	add	r3, r7
 80016ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80016ec:	e76a      	b.n	80015c4 <_vfiprintf_r+0x78>
 80016ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80016f2:	460c      	mov	r4, r1
 80016f4:	2001      	movs	r0, #1
 80016f6:	e7a8      	b.n	800164a <_vfiprintf_r+0xfe>
 80016f8:	2300      	movs	r3, #0
 80016fa:	3401      	adds	r4, #1
 80016fc:	9305      	str	r3, [sp, #20]
 80016fe:	4619      	mov	r1, r3
 8001700:	f04f 0c0a 	mov.w	ip, #10
 8001704:	4620      	mov	r0, r4
 8001706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800170a:	3a30      	subs	r2, #48	@ 0x30
 800170c:	2a09      	cmp	r2, #9
 800170e:	d903      	bls.n	8001718 <_vfiprintf_r+0x1cc>
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0c6      	beq.n	80016a2 <_vfiprintf_r+0x156>
 8001714:	9105      	str	r1, [sp, #20]
 8001716:	e7c4      	b.n	80016a2 <_vfiprintf_r+0x156>
 8001718:	fb0c 2101 	mla	r1, ip, r1, r2
 800171c:	4604      	mov	r4, r0
 800171e:	2301      	movs	r3, #1
 8001720:	e7f0      	b.n	8001704 <_vfiprintf_r+0x1b8>
 8001722:	ab03      	add	r3, sp, #12
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	462a      	mov	r2, r5
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <_vfiprintf_r+0x228>)
 800172a:	a904      	add	r1, sp, #16
 800172c:	4630      	mov	r0, r6
 800172e:	f3af 8000 	nop.w
 8001732:	4607      	mov	r7, r0
 8001734:	1c78      	adds	r0, r7, #1
 8001736:	d1d6      	bne.n	80016e6 <_vfiprintf_r+0x19a>
 8001738:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800173a:	07d9      	lsls	r1, r3, #31
 800173c:	d405      	bmi.n	800174a <_vfiprintf_r+0x1fe>
 800173e:	89ab      	ldrh	r3, [r5, #12]
 8001740:	059a      	lsls	r2, r3, #22
 8001742:	d402      	bmi.n	800174a <_vfiprintf_r+0x1fe>
 8001744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001746:	f7ff fddd 	bl	8001304 <__retarget_lock_release_recursive>
 800174a:	89ab      	ldrh	r3, [r5, #12]
 800174c:	065b      	lsls	r3, r3, #25
 800174e:	f53f af1f 	bmi.w	8001590 <_vfiprintf_r+0x44>
 8001752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001754:	e71e      	b.n	8001594 <_vfiprintf_r+0x48>
 8001756:	ab03      	add	r3, sp, #12
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	462a      	mov	r2, r5
 800175c:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <_vfiprintf_r+0x228>)
 800175e:	a904      	add	r1, sp, #16
 8001760:	4630      	mov	r0, r6
 8001762:	f000 f879 	bl	8001858 <_printf_i>
 8001766:	e7e4      	b.n	8001732 <_vfiprintf_r+0x1e6>
 8001768:	08001d80 	.word	0x08001d80
 800176c:	08001d8a 	.word	0x08001d8a
 8001770:	00000000 	.word	0x00000000
 8001774:	08001527 	.word	0x08001527
 8001778:	08001d86 	.word	0x08001d86

0800177c <_printf_common>:
 800177c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001780:	4616      	mov	r6, r2
 8001782:	4698      	mov	r8, r3
 8001784:	688a      	ldr	r2, [r1, #8]
 8001786:	690b      	ldr	r3, [r1, #16]
 8001788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800178c:	4293      	cmp	r3, r2
 800178e:	bfb8      	it	lt
 8001790:	4613      	movlt	r3, r2
 8001792:	6033      	str	r3, [r6, #0]
 8001794:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001798:	4607      	mov	r7, r0
 800179a:	460c      	mov	r4, r1
 800179c:	b10a      	cbz	r2, 80017a2 <_printf_common+0x26>
 800179e:	3301      	adds	r3, #1
 80017a0:	6033      	str	r3, [r6, #0]
 80017a2:	6823      	ldr	r3, [r4, #0]
 80017a4:	0699      	lsls	r1, r3, #26
 80017a6:	bf42      	ittt	mi
 80017a8:	6833      	ldrmi	r3, [r6, #0]
 80017aa:	3302      	addmi	r3, #2
 80017ac:	6033      	strmi	r3, [r6, #0]
 80017ae:	6825      	ldr	r5, [r4, #0]
 80017b0:	f015 0506 	ands.w	r5, r5, #6
 80017b4:	d106      	bne.n	80017c4 <_printf_common+0x48>
 80017b6:	f104 0a19 	add.w	sl, r4, #25
 80017ba:	68e3      	ldr	r3, [r4, #12]
 80017bc:	6832      	ldr	r2, [r6, #0]
 80017be:	1a9b      	subs	r3, r3, r2
 80017c0:	42ab      	cmp	r3, r5
 80017c2:	dc26      	bgt.n	8001812 <_printf_common+0x96>
 80017c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80017c8:	6822      	ldr	r2, [r4, #0]
 80017ca:	3b00      	subs	r3, #0
 80017cc:	bf18      	it	ne
 80017ce:	2301      	movne	r3, #1
 80017d0:	0692      	lsls	r2, r2, #26
 80017d2:	d42b      	bmi.n	800182c <_printf_common+0xb0>
 80017d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80017d8:	4641      	mov	r1, r8
 80017da:	4638      	mov	r0, r7
 80017dc:	47c8      	blx	r9
 80017de:	3001      	adds	r0, #1
 80017e0:	d01e      	beq.n	8001820 <_printf_common+0xa4>
 80017e2:	6823      	ldr	r3, [r4, #0]
 80017e4:	6922      	ldr	r2, [r4, #16]
 80017e6:	f003 0306 	and.w	r3, r3, #6
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf02      	ittt	eq
 80017ee:	68e5      	ldreq	r5, [r4, #12]
 80017f0:	6833      	ldreq	r3, [r6, #0]
 80017f2:	1aed      	subeq	r5, r5, r3
 80017f4:	68a3      	ldr	r3, [r4, #8]
 80017f6:	bf0c      	ite	eq
 80017f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80017fc:	2500      	movne	r5, #0
 80017fe:	4293      	cmp	r3, r2
 8001800:	bfc4      	itt	gt
 8001802:	1a9b      	subgt	r3, r3, r2
 8001804:	18ed      	addgt	r5, r5, r3
 8001806:	2600      	movs	r6, #0
 8001808:	341a      	adds	r4, #26
 800180a:	42b5      	cmp	r5, r6
 800180c:	d11a      	bne.n	8001844 <_printf_common+0xc8>
 800180e:	2000      	movs	r0, #0
 8001810:	e008      	b.n	8001824 <_printf_common+0xa8>
 8001812:	2301      	movs	r3, #1
 8001814:	4652      	mov	r2, sl
 8001816:	4641      	mov	r1, r8
 8001818:	4638      	mov	r0, r7
 800181a:	47c8      	blx	r9
 800181c:	3001      	adds	r0, #1
 800181e:	d103      	bne.n	8001828 <_printf_common+0xac>
 8001820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001828:	3501      	adds	r5, #1
 800182a:	e7c6      	b.n	80017ba <_printf_common+0x3e>
 800182c:	18e1      	adds	r1, r4, r3
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	2030      	movs	r0, #48	@ 0x30
 8001832:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001836:	4422      	add	r2, r4
 8001838:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800183c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001840:	3302      	adds	r3, #2
 8001842:	e7c7      	b.n	80017d4 <_printf_common+0x58>
 8001844:	2301      	movs	r3, #1
 8001846:	4622      	mov	r2, r4
 8001848:	4641      	mov	r1, r8
 800184a:	4638      	mov	r0, r7
 800184c:	47c8      	blx	r9
 800184e:	3001      	adds	r0, #1
 8001850:	d0e6      	beq.n	8001820 <_printf_common+0xa4>
 8001852:	3601      	adds	r6, #1
 8001854:	e7d9      	b.n	800180a <_printf_common+0x8e>
	...

08001858 <_printf_i>:
 8001858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800185c:	7e0f      	ldrb	r7, [r1, #24]
 800185e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001860:	2f78      	cmp	r7, #120	@ 0x78
 8001862:	4691      	mov	r9, r2
 8001864:	4680      	mov	r8, r0
 8001866:	460c      	mov	r4, r1
 8001868:	469a      	mov	sl, r3
 800186a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800186e:	d807      	bhi.n	8001880 <_printf_i+0x28>
 8001870:	2f62      	cmp	r7, #98	@ 0x62
 8001872:	d80a      	bhi.n	800188a <_printf_i+0x32>
 8001874:	2f00      	cmp	r7, #0
 8001876:	f000 80d2 	beq.w	8001a1e <_printf_i+0x1c6>
 800187a:	2f58      	cmp	r7, #88	@ 0x58
 800187c:	f000 80b9 	beq.w	80019f2 <_printf_i+0x19a>
 8001880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001884:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001888:	e03a      	b.n	8001900 <_printf_i+0xa8>
 800188a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800188e:	2b15      	cmp	r3, #21
 8001890:	d8f6      	bhi.n	8001880 <_printf_i+0x28>
 8001892:	a101      	add	r1, pc, #4	@ (adr r1, 8001898 <_printf_i+0x40>)
 8001894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001898:	080018f1 	.word	0x080018f1
 800189c:	08001905 	.word	0x08001905
 80018a0:	08001881 	.word	0x08001881
 80018a4:	08001881 	.word	0x08001881
 80018a8:	08001881 	.word	0x08001881
 80018ac:	08001881 	.word	0x08001881
 80018b0:	08001905 	.word	0x08001905
 80018b4:	08001881 	.word	0x08001881
 80018b8:	08001881 	.word	0x08001881
 80018bc:	08001881 	.word	0x08001881
 80018c0:	08001881 	.word	0x08001881
 80018c4:	08001a05 	.word	0x08001a05
 80018c8:	0800192f 	.word	0x0800192f
 80018cc:	080019bf 	.word	0x080019bf
 80018d0:	08001881 	.word	0x08001881
 80018d4:	08001881 	.word	0x08001881
 80018d8:	08001a27 	.word	0x08001a27
 80018dc:	08001881 	.word	0x08001881
 80018e0:	0800192f 	.word	0x0800192f
 80018e4:	08001881 	.word	0x08001881
 80018e8:	08001881 	.word	0x08001881
 80018ec:	080019c7 	.word	0x080019c7
 80018f0:	6833      	ldr	r3, [r6, #0]
 80018f2:	1d1a      	adds	r2, r3, #4
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6032      	str	r2, [r6, #0]
 80018f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80018fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001900:	2301      	movs	r3, #1
 8001902:	e09d      	b.n	8001a40 <_printf_i+0x1e8>
 8001904:	6833      	ldr	r3, [r6, #0]
 8001906:	6820      	ldr	r0, [r4, #0]
 8001908:	1d19      	adds	r1, r3, #4
 800190a:	6031      	str	r1, [r6, #0]
 800190c:	0606      	lsls	r6, r0, #24
 800190e:	d501      	bpl.n	8001914 <_printf_i+0xbc>
 8001910:	681d      	ldr	r5, [r3, #0]
 8001912:	e003      	b.n	800191c <_printf_i+0xc4>
 8001914:	0645      	lsls	r5, r0, #25
 8001916:	d5fb      	bpl.n	8001910 <_printf_i+0xb8>
 8001918:	f9b3 5000 	ldrsh.w	r5, [r3]
 800191c:	2d00      	cmp	r5, #0
 800191e:	da03      	bge.n	8001928 <_printf_i+0xd0>
 8001920:	232d      	movs	r3, #45	@ 0x2d
 8001922:	426d      	negs	r5, r5
 8001924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001928:	4859      	ldr	r0, [pc, #356]	@ (8001a90 <_printf_i+0x238>)
 800192a:	230a      	movs	r3, #10
 800192c:	e011      	b.n	8001952 <_printf_i+0xfa>
 800192e:	6821      	ldr	r1, [r4, #0]
 8001930:	6833      	ldr	r3, [r6, #0]
 8001932:	0608      	lsls	r0, r1, #24
 8001934:	f853 5b04 	ldr.w	r5, [r3], #4
 8001938:	d402      	bmi.n	8001940 <_printf_i+0xe8>
 800193a:	0649      	lsls	r1, r1, #25
 800193c:	bf48      	it	mi
 800193e:	b2ad      	uxthmi	r5, r5
 8001940:	2f6f      	cmp	r7, #111	@ 0x6f
 8001942:	4853      	ldr	r0, [pc, #332]	@ (8001a90 <_printf_i+0x238>)
 8001944:	6033      	str	r3, [r6, #0]
 8001946:	bf14      	ite	ne
 8001948:	230a      	movne	r3, #10
 800194a:	2308      	moveq	r3, #8
 800194c:	2100      	movs	r1, #0
 800194e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001952:	6866      	ldr	r6, [r4, #4]
 8001954:	60a6      	str	r6, [r4, #8]
 8001956:	2e00      	cmp	r6, #0
 8001958:	bfa2      	ittt	ge
 800195a:	6821      	ldrge	r1, [r4, #0]
 800195c:	f021 0104 	bicge.w	r1, r1, #4
 8001960:	6021      	strge	r1, [r4, #0]
 8001962:	b90d      	cbnz	r5, 8001968 <_printf_i+0x110>
 8001964:	2e00      	cmp	r6, #0
 8001966:	d04b      	beq.n	8001a00 <_printf_i+0x1a8>
 8001968:	4616      	mov	r6, r2
 800196a:	fbb5 f1f3 	udiv	r1, r5, r3
 800196e:	fb03 5711 	mls	r7, r3, r1, r5
 8001972:	5dc7      	ldrb	r7, [r0, r7]
 8001974:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001978:	462f      	mov	r7, r5
 800197a:	42bb      	cmp	r3, r7
 800197c:	460d      	mov	r5, r1
 800197e:	d9f4      	bls.n	800196a <_printf_i+0x112>
 8001980:	2b08      	cmp	r3, #8
 8001982:	d10b      	bne.n	800199c <_printf_i+0x144>
 8001984:	6823      	ldr	r3, [r4, #0]
 8001986:	07df      	lsls	r7, r3, #31
 8001988:	d508      	bpl.n	800199c <_printf_i+0x144>
 800198a:	6923      	ldr	r3, [r4, #16]
 800198c:	6861      	ldr	r1, [r4, #4]
 800198e:	4299      	cmp	r1, r3
 8001990:	bfde      	ittt	le
 8001992:	2330      	movle	r3, #48	@ 0x30
 8001994:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001998:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800199c:	1b92      	subs	r2, r2, r6
 800199e:	6122      	str	r2, [r4, #16]
 80019a0:	f8cd a000 	str.w	sl, [sp]
 80019a4:	464b      	mov	r3, r9
 80019a6:	aa03      	add	r2, sp, #12
 80019a8:	4621      	mov	r1, r4
 80019aa:	4640      	mov	r0, r8
 80019ac:	f7ff fee6 	bl	800177c <_printf_common>
 80019b0:	3001      	adds	r0, #1
 80019b2:	d14a      	bne.n	8001a4a <_printf_i+0x1f2>
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019b8:	b004      	add	sp, #16
 80019ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019be:	6823      	ldr	r3, [r4, #0]
 80019c0:	f043 0320 	orr.w	r3, r3, #32
 80019c4:	6023      	str	r3, [r4, #0]
 80019c6:	4833      	ldr	r0, [pc, #204]	@ (8001a94 <_printf_i+0x23c>)
 80019c8:	2778      	movs	r7, #120	@ 0x78
 80019ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	6831      	ldr	r1, [r6, #0]
 80019d2:	061f      	lsls	r7, r3, #24
 80019d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80019d8:	d402      	bmi.n	80019e0 <_printf_i+0x188>
 80019da:	065f      	lsls	r7, r3, #25
 80019dc:	bf48      	it	mi
 80019de:	b2ad      	uxthmi	r5, r5
 80019e0:	6031      	str	r1, [r6, #0]
 80019e2:	07d9      	lsls	r1, r3, #31
 80019e4:	bf44      	itt	mi
 80019e6:	f043 0320 	orrmi.w	r3, r3, #32
 80019ea:	6023      	strmi	r3, [r4, #0]
 80019ec:	b11d      	cbz	r5, 80019f6 <_printf_i+0x19e>
 80019ee:	2310      	movs	r3, #16
 80019f0:	e7ac      	b.n	800194c <_printf_i+0xf4>
 80019f2:	4827      	ldr	r0, [pc, #156]	@ (8001a90 <_printf_i+0x238>)
 80019f4:	e7e9      	b.n	80019ca <_printf_i+0x172>
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	f023 0320 	bic.w	r3, r3, #32
 80019fc:	6023      	str	r3, [r4, #0]
 80019fe:	e7f6      	b.n	80019ee <_printf_i+0x196>
 8001a00:	4616      	mov	r6, r2
 8001a02:	e7bd      	b.n	8001980 <_printf_i+0x128>
 8001a04:	6833      	ldr	r3, [r6, #0]
 8001a06:	6825      	ldr	r5, [r4, #0]
 8001a08:	6961      	ldr	r1, [r4, #20]
 8001a0a:	1d18      	adds	r0, r3, #4
 8001a0c:	6030      	str	r0, [r6, #0]
 8001a0e:	062e      	lsls	r6, r5, #24
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	d501      	bpl.n	8001a18 <_printf_i+0x1c0>
 8001a14:	6019      	str	r1, [r3, #0]
 8001a16:	e002      	b.n	8001a1e <_printf_i+0x1c6>
 8001a18:	0668      	lsls	r0, r5, #25
 8001a1a:	d5fb      	bpl.n	8001a14 <_printf_i+0x1bc>
 8001a1c:	8019      	strh	r1, [r3, #0]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	6123      	str	r3, [r4, #16]
 8001a22:	4616      	mov	r6, r2
 8001a24:	e7bc      	b.n	80019a0 <_printf_i+0x148>
 8001a26:	6833      	ldr	r3, [r6, #0]
 8001a28:	1d1a      	adds	r2, r3, #4
 8001a2a:	6032      	str	r2, [r6, #0]
 8001a2c:	681e      	ldr	r6, [r3, #0]
 8001a2e:	6862      	ldr	r2, [r4, #4]
 8001a30:	2100      	movs	r1, #0
 8001a32:	4630      	mov	r0, r6
 8001a34:	f7fe fbd4 	bl	80001e0 <memchr>
 8001a38:	b108      	cbz	r0, 8001a3e <_printf_i+0x1e6>
 8001a3a:	1b80      	subs	r0, r0, r6
 8001a3c:	6060      	str	r0, [r4, #4]
 8001a3e:	6863      	ldr	r3, [r4, #4]
 8001a40:	6123      	str	r3, [r4, #16]
 8001a42:	2300      	movs	r3, #0
 8001a44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001a48:	e7aa      	b.n	80019a0 <_printf_i+0x148>
 8001a4a:	6923      	ldr	r3, [r4, #16]
 8001a4c:	4632      	mov	r2, r6
 8001a4e:	4649      	mov	r1, r9
 8001a50:	4640      	mov	r0, r8
 8001a52:	47d0      	blx	sl
 8001a54:	3001      	adds	r0, #1
 8001a56:	d0ad      	beq.n	80019b4 <_printf_i+0x15c>
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	079b      	lsls	r3, r3, #30
 8001a5c:	d413      	bmi.n	8001a86 <_printf_i+0x22e>
 8001a5e:	68e0      	ldr	r0, [r4, #12]
 8001a60:	9b03      	ldr	r3, [sp, #12]
 8001a62:	4298      	cmp	r0, r3
 8001a64:	bfb8      	it	lt
 8001a66:	4618      	movlt	r0, r3
 8001a68:	e7a6      	b.n	80019b8 <_printf_i+0x160>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	4632      	mov	r2, r6
 8001a6e:	4649      	mov	r1, r9
 8001a70:	4640      	mov	r0, r8
 8001a72:	47d0      	blx	sl
 8001a74:	3001      	adds	r0, #1
 8001a76:	d09d      	beq.n	80019b4 <_printf_i+0x15c>
 8001a78:	3501      	adds	r5, #1
 8001a7a:	68e3      	ldr	r3, [r4, #12]
 8001a7c:	9903      	ldr	r1, [sp, #12]
 8001a7e:	1a5b      	subs	r3, r3, r1
 8001a80:	42ab      	cmp	r3, r5
 8001a82:	dcf2      	bgt.n	8001a6a <_printf_i+0x212>
 8001a84:	e7eb      	b.n	8001a5e <_printf_i+0x206>
 8001a86:	2500      	movs	r5, #0
 8001a88:	f104 0619 	add.w	r6, r4, #25
 8001a8c:	e7f5      	b.n	8001a7a <_printf_i+0x222>
 8001a8e:	bf00      	nop
 8001a90:	08001d91 	.word	0x08001d91
 8001a94:	08001da2 	.word	0x08001da2

08001a98 <__sflush_r>:
 8001a98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aa0:	0716      	lsls	r6, r2, #28
 8001aa2:	4605      	mov	r5, r0
 8001aa4:	460c      	mov	r4, r1
 8001aa6:	d454      	bmi.n	8001b52 <__sflush_r+0xba>
 8001aa8:	684b      	ldr	r3, [r1, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	dc02      	bgt.n	8001ab4 <__sflush_r+0x1c>
 8001aae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	dd48      	ble.n	8001b46 <__sflush_r+0xae>
 8001ab4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001ab6:	2e00      	cmp	r6, #0
 8001ab8:	d045      	beq.n	8001b46 <__sflush_r+0xae>
 8001aba:	2300      	movs	r3, #0
 8001abc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001ac0:	682f      	ldr	r7, [r5, #0]
 8001ac2:	6a21      	ldr	r1, [r4, #32]
 8001ac4:	602b      	str	r3, [r5, #0]
 8001ac6:	d030      	beq.n	8001b2a <__sflush_r+0x92>
 8001ac8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001aca:	89a3      	ldrh	r3, [r4, #12]
 8001acc:	0759      	lsls	r1, r3, #29
 8001ace:	d505      	bpl.n	8001adc <__sflush_r+0x44>
 8001ad0:	6863      	ldr	r3, [r4, #4]
 8001ad2:	1ad2      	subs	r2, r2, r3
 8001ad4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001ad6:	b10b      	cbz	r3, 8001adc <__sflush_r+0x44>
 8001ad8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ada:	1ad2      	subs	r2, r2, r3
 8001adc:	2300      	movs	r3, #0
 8001ade:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001ae0:	6a21      	ldr	r1, [r4, #32]
 8001ae2:	4628      	mov	r0, r5
 8001ae4:	47b0      	blx	r6
 8001ae6:	1c43      	adds	r3, r0, #1
 8001ae8:	89a3      	ldrh	r3, [r4, #12]
 8001aea:	d106      	bne.n	8001afa <__sflush_r+0x62>
 8001aec:	6829      	ldr	r1, [r5, #0]
 8001aee:	291d      	cmp	r1, #29
 8001af0:	d82b      	bhi.n	8001b4a <__sflush_r+0xb2>
 8001af2:	4a2a      	ldr	r2, [pc, #168]	@ (8001b9c <__sflush_r+0x104>)
 8001af4:	410a      	asrs	r2, r1
 8001af6:	07d6      	lsls	r6, r2, #31
 8001af8:	d427      	bmi.n	8001b4a <__sflush_r+0xb2>
 8001afa:	2200      	movs	r2, #0
 8001afc:	6062      	str	r2, [r4, #4]
 8001afe:	04d9      	lsls	r1, r3, #19
 8001b00:	6922      	ldr	r2, [r4, #16]
 8001b02:	6022      	str	r2, [r4, #0]
 8001b04:	d504      	bpl.n	8001b10 <__sflush_r+0x78>
 8001b06:	1c42      	adds	r2, r0, #1
 8001b08:	d101      	bne.n	8001b0e <__sflush_r+0x76>
 8001b0a:	682b      	ldr	r3, [r5, #0]
 8001b0c:	b903      	cbnz	r3, 8001b10 <__sflush_r+0x78>
 8001b0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001b10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001b12:	602f      	str	r7, [r5, #0]
 8001b14:	b1b9      	cbz	r1, 8001b46 <__sflush_r+0xae>
 8001b16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001b1a:	4299      	cmp	r1, r3
 8001b1c:	d002      	beq.n	8001b24 <__sflush_r+0x8c>
 8001b1e:	4628      	mov	r0, r5
 8001b20:	f7ff fbf2 	bl	8001308 <_free_r>
 8001b24:	2300      	movs	r3, #0
 8001b26:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b28:	e00d      	b.n	8001b46 <__sflush_r+0xae>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	4628      	mov	r0, r5
 8001b2e:	47b0      	blx	r6
 8001b30:	4602      	mov	r2, r0
 8001b32:	1c50      	adds	r0, r2, #1
 8001b34:	d1c9      	bne.n	8001aca <__sflush_r+0x32>
 8001b36:	682b      	ldr	r3, [r5, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0c6      	beq.n	8001aca <__sflush_r+0x32>
 8001b3c:	2b1d      	cmp	r3, #29
 8001b3e:	d001      	beq.n	8001b44 <__sflush_r+0xac>
 8001b40:	2b16      	cmp	r3, #22
 8001b42:	d11e      	bne.n	8001b82 <__sflush_r+0xea>
 8001b44:	602f      	str	r7, [r5, #0]
 8001b46:	2000      	movs	r0, #0
 8001b48:	e022      	b.n	8001b90 <__sflush_r+0xf8>
 8001b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	e01b      	b.n	8001b8a <__sflush_r+0xf2>
 8001b52:	690f      	ldr	r7, [r1, #16]
 8001b54:	2f00      	cmp	r7, #0
 8001b56:	d0f6      	beq.n	8001b46 <__sflush_r+0xae>
 8001b58:	0793      	lsls	r3, r2, #30
 8001b5a:	680e      	ldr	r6, [r1, #0]
 8001b5c:	bf08      	it	eq
 8001b5e:	694b      	ldreq	r3, [r1, #20]
 8001b60:	600f      	str	r7, [r1, #0]
 8001b62:	bf18      	it	ne
 8001b64:	2300      	movne	r3, #0
 8001b66:	eba6 0807 	sub.w	r8, r6, r7
 8001b6a:	608b      	str	r3, [r1, #8]
 8001b6c:	f1b8 0f00 	cmp.w	r8, #0
 8001b70:	dde9      	ble.n	8001b46 <__sflush_r+0xae>
 8001b72:	6a21      	ldr	r1, [r4, #32]
 8001b74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001b76:	4643      	mov	r3, r8
 8001b78:	463a      	mov	r2, r7
 8001b7a:	4628      	mov	r0, r5
 8001b7c:	47b0      	blx	r6
 8001b7e:	2800      	cmp	r0, #0
 8001b80:	dc08      	bgt.n	8001b94 <__sflush_r+0xfc>
 8001b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b8a:	81a3      	strh	r3, [r4, #12]
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b94:	4407      	add	r7, r0
 8001b96:	eba8 0800 	sub.w	r8, r8, r0
 8001b9a:	e7e7      	b.n	8001b6c <__sflush_r+0xd4>
 8001b9c:	dfbffffe 	.word	0xdfbffffe

08001ba0 <_fflush_r>:
 8001ba0:	b538      	push	{r3, r4, r5, lr}
 8001ba2:	690b      	ldr	r3, [r1, #16]
 8001ba4:	4605      	mov	r5, r0
 8001ba6:	460c      	mov	r4, r1
 8001ba8:	b913      	cbnz	r3, 8001bb0 <_fflush_r+0x10>
 8001baa:	2500      	movs	r5, #0
 8001bac:	4628      	mov	r0, r5
 8001bae:	bd38      	pop	{r3, r4, r5, pc}
 8001bb0:	b118      	cbz	r0, 8001bba <_fflush_r+0x1a>
 8001bb2:	6a03      	ldr	r3, [r0, #32]
 8001bb4:	b90b      	cbnz	r3, 8001bba <_fflush_r+0x1a>
 8001bb6:	f7ff f9ad 	bl	8000f14 <__sinit>
 8001bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f3      	beq.n	8001baa <_fflush_r+0xa>
 8001bc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001bc4:	07d0      	lsls	r0, r2, #31
 8001bc6:	d404      	bmi.n	8001bd2 <_fflush_r+0x32>
 8001bc8:	0599      	lsls	r1, r3, #22
 8001bca:	d402      	bmi.n	8001bd2 <_fflush_r+0x32>
 8001bcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001bce:	f7ff fb98 	bl	8001302 <__retarget_lock_acquire_recursive>
 8001bd2:	4628      	mov	r0, r5
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	f7ff ff5f 	bl	8001a98 <__sflush_r>
 8001bda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001bdc:	07da      	lsls	r2, r3, #31
 8001bde:	4605      	mov	r5, r0
 8001be0:	d4e4      	bmi.n	8001bac <_fflush_r+0xc>
 8001be2:	89a3      	ldrh	r3, [r4, #12]
 8001be4:	059b      	lsls	r3, r3, #22
 8001be6:	d4e1      	bmi.n	8001bac <_fflush_r+0xc>
 8001be8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001bea:	f7ff fb8b 	bl	8001304 <__retarget_lock_release_recursive>
 8001bee:	e7dd      	b.n	8001bac <_fflush_r+0xc>

08001bf0 <__swhatbuf_r>:
 8001bf0:	b570      	push	{r4, r5, r6, lr}
 8001bf2:	460c      	mov	r4, r1
 8001bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bf8:	2900      	cmp	r1, #0
 8001bfa:	b096      	sub	sp, #88	@ 0x58
 8001bfc:	4615      	mov	r5, r2
 8001bfe:	461e      	mov	r6, r3
 8001c00:	da0d      	bge.n	8001c1e <__swhatbuf_r+0x2e>
 8001c02:	89a3      	ldrh	r3, [r4, #12]
 8001c04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001c08:	f04f 0100 	mov.w	r1, #0
 8001c0c:	bf14      	ite	ne
 8001c0e:	2340      	movne	r3, #64	@ 0x40
 8001c10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001c14:	2000      	movs	r0, #0
 8001c16:	6031      	str	r1, [r6, #0]
 8001c18:	602b      	str	r3, [r5, #0]
 8001c1a:	b016      	add	sp, #88	@ 0x58
 8001c1c:	bd70      	pop	{r4, r5, r6, pc}
 8001c1e:	466a      	mov	r2, sp
 8001c20:	f000 f848 	bl	8001cb4 <_fstat_r>
 8001c24:	2800      	cmp	r0, #0
 8001c26:	dbec      	blt.n	8001c02 <__swhatbuf_r+0x12>
 8001c28:	9901      	ldr	r1, [sp, #4]
 8001c2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001c2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001c32:	4259      	negs	r1, r3
 8001c34:	4159      	adcs	r1, r3
 8001c36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c3a:	e7eb      	b.n	8001c14 <__swhatbuf_r+0x24>

08001c3c <__smakebuf_r>:
 8001c3c:	898b      	ldrh	r3, [r1, #12]
 8001c3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c40:	079d      	lsls	r5, r3, #30
 8001c42:	4606      	mov	r6, r0
 8001c44:	460c      	mov	r4, r1
 8001c46:	d507      	bpl.n	8001c58 <__smakebuf_r+0x1c>
 8001c48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001c4c:	6023      	str	r3, [r4, #0]
 8001c4e:	6123      	str	r3, [r4, #16]
 8001c50:	2301      	movs	r3, #1
 8001c52:	6163      	str	r3, [r4, #20]
 8001c54:	b003      	add	sp, #12
 8001c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c58:	ab01      	add	r3, sp, #4
 8001c5a:	466a      	mov	r2, sp
 8001c5c:	f7ff ffc8 	bl	8001bf0 <__swhatbuf_r>
 8001c60:	9f00      	ldr	r7, [sp, #0]
 8001c62:	4605      	mov	r5, r0
 8001c64:	4639      	mov	r1, r7
 8001c66:	4630      	mov	r0, r6
 8001c68:	f7ff fbba 	bl	80013e0 <_malloc_r>
 8001c6c:	b948      	cbnz	r0, 8001c82 <__smakebuf_r+0x46>
 8001c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c72:	059a      	lsls	r2, r3, #22
 8001c74:	d4ee      	bmi.n	8001c54 <__smakebuf_r+0x18>
 8001c76:	f023 0303 	bic.w	r3, r3, #3
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	81a3      	strh	r3, [r4, #12]
 8001c80:	e7e2      	b.n	8001c48 <__smakebuf_r+0xc>
 8001c82:	89a3      	ldrh	r3, [r4, #12]
 8001c84:	6020      	str	r0, [r4, #0]
 8001c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c8a:	81a3      	strh	r3, [r4, #12]
 8001c8c:	9b01      	ldr	r3, [sp, #4]
 8001c8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001c92:	b15b      	cbz	r3, 8001cac <__smakebuf_r+0x70>
 8001c94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c98:	4630      	mov	r0, r6
 8001c9a:	f000 f81d 	bl	8001cd8 <_isatty_r>
 8001c9e:	b128      	cbz	r0, 8001cac <__smakebuf_r+0x70>
 8001ca0:	89a3      	ldrh	r3, [r4, #12]
 8001ca2:	f023 0303 	bic.w	r3, r3, #3
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	81a3      	strh	r3, [r4, #12]
 8001cac:	89a3      	ldrh	r3, [r4, #12]
 8001cae:	431d      	orrs	r5, r3
 8001cb0:	81a5      	strh	r5, [r4, #12]
 8001cb2:	e7cf      	b.n	8001c54 <__smakebuf_r+0x18>

08001cb4 <_fstat_r>:
 8001cb4:	b538      	push	{r3, r4, r5, lr}
 8001cb6:	4d07      	ldr	r5, [pc, #28]	@ (8001cd4 <_fstat_r+0x20>)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	4604      	mov	r4, r0
 8001cbc:	4608      	mov	r0, r1
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	602b      	str	r3, [r5, #0]
 8001cc2:	f7fe fccf 	bl	8000664 <_fstat>
 8001cc6:	1c43      	adds	r3, r0, #1
 8001cc8:	d102      	bne.n	8001cd0 <_fstat_r+0x1c>
 8001cca:	682b      	ldr	r3, [r5, #0]
 8001ccc:	b103      	cbz	r3, 8001cd0 <_fstat_r+0x1c>
 8001cce:	6023      	str	r3, [r4, #0]
 8001cd0:	bd38      	pop	{r3, r4, r5, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200001cc 	.word	0x200001cc

08001cd8 <_isatty_r>:
 8001cd8:	b538      	push	{r3, r4, r5, lr}
 8001cda:	4d06      	ldr	r5, [pc, #24]	@ (8001cf4 <_isatty_r+0x1c>)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	4604      	mov	r4, r0
 8001ce0:	4608      	mov	r0, r1
 8001ce2:	602b      	str	r3, [r5, #0]
 8001ce4:	f7fe fcce 	bl	8000684 <_isatty>
 8001ce8:	1c43      	adds	r3, r0, #1
 8001cea:	d102      	bne.n	8001cf2 <_isatty_r+0x1a>
 8001cec:	682b      	ldr	r3, [r5, #0]
 8001cee:	b103      	cbz	r3, 8001cf2 <_isatty_r+0x1a>
 8001cf0:	6023      	str	r3, [r4, #0]
 8001cf2:	bd38      	pop	{r3, r4, r5, pc}
 8001cf4:	200001cc 	.word	0x200001cc

08001cf8 <_sbrk_r>:
 8001cf8:	b538      	push	{r3, r4, r5, lr}
 8001cfa:	4d06      	ldr	r5, [pc, #24]	@ (8001d14 <_sbrk_r+0x1c>)
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	4604      	mov	r4, r0
 8001d00:	4608      	mov	r0, r1
 8001d02:	602b      	str	r3, [r5, #0]
 8001d04:	f7fe fcd6 	bl	80006b4 <_sbrk>
 8001d08:	1c43      	adds	r3, r0, #1
 8001d0a:	d102      	bne.n	8001d12 <_sbrk_r+0x1a>
 8001d0c:	682b      	ldr	r3, [r5, #0]
 8001d0e:	b103      	cbz	r3, 8001d12 <_sbrk_r+0x1a>
 8001d10:	6023      	str	r3, [r4, #0]
 8001d12:	bd38      	pop	{r3, r4, r5, pc}
 8001d14:	200001cc 	.word	0x200001cc

08001d18 <_init>:
 8001d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d1a:	bf00      	nop
 8001d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d1e:	bc08      	pop	{r3}
 8001d20:	469e      	mov	lr, r3
 8001d22:	4770      	bx	lr

08001d24 <_fini>:
 8001d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d26:	bf00      	nop
 8001d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d2a:	bc08      	pop	{r3}
 8001d2c:	469e      	mov	lr, r3
 8001d2e:	4770      	bx	lr
