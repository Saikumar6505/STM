
fsmfreertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae9c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0800b040  0800b040  0000c040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b628  0800b628  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b628  0800b628  0000c628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b630  0800b630  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b630  0800b630  0000c630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b634  0800b634  0000c634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b638  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042ec  200001d8  0800b810  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044c4  0800b810  0000d4c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170a2  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032fe  00000000  00000000  000242aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  000275a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001026  00000000  00000000  00028a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197a6  00000000  00000000  00029a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d34  00000000  00000000  00043214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b626  00000000  00000000  00059f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f556e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c18  00000000  00000000  000f55b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000fc1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b024 	.word	0x0800b024

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800b024 	.word	0x0800b024

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4a07      	ldr	r2, [pc, #28]	@ (8001020 <vApplicationGetIdleTaskMemory+0x2c>)
 8001004:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	4a06      	ldr	r2, [pc, #24]	@ (8001024 <vApplicationGetIdleTaskMemory+0x30>)
 800100a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2280      	movs	r2, #128	@ 0x80
 8001010:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	200001f4 	.word	0x200001f4
 8001024:	20000294 	.word	0x20000294

08001028 <lcd_init>:
#include "lcd_i2c.h"

// Adjust these macros to match your LCD address and configuration
#define SLAVE_ADDRESS_LCD 0x4E  // Change according to your LCD module's I2C address

void lcd_init(I2C_HandleTypeDef *hi2c) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    // Wait for LCD to power up
    HAL_Delay(50);
 8001030:	2032      	movs	r0, #50	@ 0x32
 8001032:	f001 f967 	bl	8002304 <HAL_Delay>

    // Initialization sequence
    lcd_send_cmd(hi2c, 0x30);  // Wake up
 8001036:	2130      	movs	r1, #48	@ 0x30
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f874 	bl	8001126 <lcd_send_cmd>
    HAL_Delay(5);
 800103e:	2005      	movs	r0, #5
 8001040:	f001 f960 	bl	8002304 <HAL_Delay>
    lcd_send_cmd(hi2c, 0x30);  // Wake up
 8001044:	2130      	movs	r1, #48	@ 0x30
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 f86d 	bl	8001126 <lcd_send_cmd>
    HAL_Delay(1);
 800104c:	2001      	movs	r0, #1
 800104e:	f001 f959 	bl	8002304 <HAL_Delay>
    lcd_send_cmd(hi2c, 0x30);  // Wake up
 8001052:	2130      	movs	r1, #48	@ 0x30
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 f866 	bl	8001126 <lcd_send_cmd>
    HAL_Delay(10);
 800105a:	200a      	movs	r0, #10
 800105c:	f001 f952 	bl	8002304 <HAL_Delay>

    // 4-bit mode
    lcd_send_cmd(hi2c, 0x20);  // Function set: 4-bit mode
 8001060:	2120      	movs	r1, #32
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f85f 	bl	8001126 <lcd_send_cmd>

    // LCD configuration
    lcd_send_cmd(hi2c, 0x28);  // 2-line, 5x8 dots
 8001068:	2128      	movs	r1, #40	@ 0x28
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f85b 	bl	8001126 <lcd_send_cmd>
    lcd_send_cmd(hi2c, 0x08);  // Display off, cursor off, blink off
 8001070:	2108      	movs	r1, #8
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f857 	bl	8001126 <lcd_send_cmd>
    lcd_send_cmd(hi2c, 0x01);  // Clear display
 8001078:	2101      	movs	r1, #1
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f853 	bl	8001126 <lcd_send_cmd>
    HAL_Delay(2);
 8001080:	2002      	movs	r0, #2
 8001082:	f001 f93f 	bl	8002304 <HAL_Delay>
    lcd_send_cmd(hi2c, 0x06);  // Entry mode set: shift right, cursor right
 8001086:	2106      	movs	r1, #6
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 f84c 	bl	8001126 <lcd_send_cmd>
    lcd_send_cmd(hi2c, 0x0C);  // Display on, cursor off, blink off
 800108e:	210c      	movs	r1, #12
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 f848 	bl	8001126 <lcd_send_cmd>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <lcd_clear>:

void lcd_clear(I2C_HandleTypeDef *hi2c) {
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(hi2c, LCD_CLEARDISPLAY);
 80010a6:	2101      	movs	r1, #1
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 f83c 	bl	8001126 <lcd_send_cmd>
    HAL_Delay(2);  // LCD clear command requires a delay
 80010ae:	2002      	movs	r0, #2
 80010b0:	f001 f928 	bl	8002304 <HAL_Delay>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <lcd_put_cur>:

void lcd_put_cur(I2C_HandleTypeDef *hi2c, uint8_t row, uint8_t col) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
 80010c8:	4613      	mov	r3, r2
 80010ca:	70bb      	strb	r3, [r7, #2]
    uint8_t pos = (row == 0) ? (0x80 | col) : (0xC0 | col);
 80010cc:	78fb      	ldrb	r3, [r7, #3]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d104      	bne.n	80010dc <lcd_put_cur+0x20>
 80010d2:	78bb      	ldrb	r3, [r7, #2]
 80010d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	e003      	b.n	80010e4 <lcd_put_cur+0x28>
 80010dc:	78bb      	ldrb	r3, [r7, #2]
 80010de:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(hi2c, pos);
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	4619      	mov	r1, r3
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f81b 	bl	8001126 <lcd_send_cmd>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <lcd_send_string>:

void lcd_send_string(I2C_HandleTypeDef *hi2c, char *str) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    while (*str) {
 8001102:	e007      	b.n	8001114 <lcd_send_string+0x1c>
        lcd_send_data(hi2c, *str++);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	603a      	str	r2, [r7, #0]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f837 	bl	8001182 <lcd_send_data>
    while (*str) {
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1f3      	bne.n	8001104 <lcd_send_string+0xc>
    }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <lcd_send_cmd>:

void lcd_send_cmd(I2C_HandleTypeDef *hi2c, char cmd) {
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af02      	add	r7, sp, #8
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	460b      	mov	r3, r1
 8001130:	70fb      	strb	r3, [r7, #3]
    char data_u, data_l;
    uint8_t data_t[4];

    data_u = (cmd & 0xf0);
 8001132:	78fb      	ldrb	r3, [r7, #3]
 8001134:	f023 030f 	bic.w	r3, r3, #15
 8001138:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xf0);
 800113a:	78fb      	ldrb	r3, [r7, #3]
 800113c:	011b      	lsls	r3, r3, #4
 800113e:	73bb      	strb	r3, [r7, #14]

    // Send upper nibble
    data_t[0] = data_u | 0x0C;  // en=1, rs=0
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	f043 030c 	orr.w	r3, r3, #12
 8001146:	b2db      	uxtb	r3, r3
 8001148:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08;  // en=0, rs=0
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	b2db      	uxtb	r3, r3
 8001152:	727b      	strb	r3, [r7, #9]
    // Send lower nibble
    data_t[2] = data_l | 0x0C;  // en=1, rs=0
 8001154:	7bbb      	ldrb	r3, [r7, #14]
 8001156:	f043 030c 	orr.w	r3, r3, #12
 800115a:	b2db      	uxtb	r3, r3
 800115c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08;  // en=0, rs=0
 800115e:	7bbb      	ldrb	r3, [r7, #14]
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	b2db      	uxtb	r3, r3
 8001166:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 8001168:	f107 0208 	add.w	r2, r7, #8
 800116c:	2364      	movs	r3, #100	@ 0x64
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2304      	movs	r3, #4
 8001172:	214e      	movs	r1, #78	@ 0x4e
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f001 fcad 	bl	8002ad4 <HAL_I2C_Master_Transmit>
}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <lcd_send_data>:

void lcd_send_data(I2C_HandleTypeDef *hi2c, char data) {
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af02      	add	r7, sp, #8
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	460b      	mov	r3, r1
 800118c:	70fb      	strb	r3, [r7, #3]
    char data_u, data_l;
    uint8_t data_t[4];

    data_u = (data & 0xf0);
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	f023 030f 	bic.w	r3, r3, #15
 8001194:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xf0);
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	011b      	lsls	r3, r3, #4
 800119a:	73bb      	strb	r3, [r7, #14]

    // Send upper nibble
    data_t[0] = data_u | 0x0D;  // en=1, rs=1
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	f043 030d 	orr.w	r3, r3, #13
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  // en=0, rs=1
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	f043 0309 	orr.w	r3, r3, #9
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	727b      	strb	r3, [r7, #9]
    // Send lower nibble
    data_t[2] = data_l | 0x0D;  // en=1, rs=1
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	f043 030d 	orr.w	r3, r3, #13
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  // en=0, rs=1
 80011ba:	7bbb      	ldrb	r3, [r7, #14]
 80011bc:	f043 0309 	orr.w	r3, r3, #9
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(hi2c, SLAVE_ADDRESS_LCD, (uint8_t *) data_t, 4, 100);
 80011c4:	f107 0208 	add.w	r2, r7, #8
 80011c8:	2364      	movs	r3, #100	@ 0x64
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2304      	movs	r3, #4
 80011ce:	214e      	movs	r1, #78	@ 0x4e
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f001 fc7f 	bl	8002ad4 <HAL_I2C_Master_Transmit>
}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b08e      	sub	sp, #56	@ 0x38
 80011e4:	af00      	add	r7, sp, #0
    HAL_Init();
 80011e6:	f001 f84b 	bl	8002280 <HAL_Init>
    SystemClock_Config();
 80011ea:	f000 fbb3 	bl	8001954 <SystemClock_Config>
    MX_GPIO_Init();
 80011ee:	f000 fce9 	bl	8001bc4 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80011f2:	f000 fcbd 	bl	8001b70 <MX_USART2_UART_Init>
    MX_I2C1_Init();
 80011f6:	f000 fc17 	bl	8001a28 <MX_I2C1_Init>
    MX_TIM2_Init();
 80011fa:	f000 fc43 	bl	8001a84 <MX_TIM2_Init>
    MX_USART1_UART_Init();
 80011fe:	f000 fc8d 	bl	8001b1c <MX_USART1_UART_Init>

    WE10_Init();
 8001202:	f000 f9ef 	bl	80015e4 <WE10_Init>
    MQTT_Init();
 8001206:	f000 fae5 	bl	80017d4 <MQTT_Init>
    lcd_init(&hi2c1);
 800120a:	481b      	ldr	r0, [pc, #108]	@ (8001278 <main+0x98>)
 800120c:	f7ff ff0c 	bl	8001028 <lcd_init>
        lcd_clear(&hi2c1);
 8001210:	4819      	ldr	r0, [pc, #100]	@ (8001278 <main+0x98>)
 8001212:	f7ff ff44 	bl	800109e <lcd_clear>
        lcd_put_cur(&hi2c1, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	4817      	ldr	r0, [pc, #92]	@ (8001278 <main+0x98>)
 800121c:	f7ff ff4e 	bl	80010bc <lcd_put_cur>
        lcd_send_string(&hi2c1,"Initializing...");
 8001220:	4916      	ldr	r1, [pc, #88]	@ (800127c <main+0x9c>)
 8001222:	4815      	ldr	r0, [pc, #84]	@ (8001278 <main+0x98>)
 8001224:	f7ff ff68 	bl	80010f8 <lcd_send_string>

    /* Create the thread(s) */
    osThreadDef(mqttTask, mqtt_Task, osPriorityNormal, 0, 128);
 8001228:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <main+0xa0>)
 800122a:	f107 041c 	add.w	r4, r7, #28
 800122e:	461d      	mov	r5, r3
 8001230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001234:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001238:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    mqttTaskHandle = osThreadCreate(osThread(mqttTask), NULL);
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f004 f8c1 	bl	80053ca <osThreadCreate>
 8001248:	4603      	mov	r3, r0
 800124a:	4a0e      	ldr	r2, [pc, #56]	@ (8001284 <main+0xa4>)
 800124c:	6013      	str	r3, [r2, #0]

    osThreadDef(fsmTask, fsm_Task, osPriorityIdle, 0, 128);
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <main+0xa8>)
 8001250:	463c      	mov	r4, r7
 8001252:	461d      	mov	r5, r3
 8001254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001258:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800125c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    fsmTaskHandle = osThreadCreate(osThread(fsmTask), NULL);
 8001260:	463b      	mov	r3, r7
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f004 f8b0 	bl	80053ca <osThreadCreate>
 800126a:	4603      	mov	r3, r0
 800126c:	4a07      	ldr	r2, [pc, #28]	@ (800128c <main+0xac>)
 800126e:	6013      	str	r3, [r2, #0]

    /* Start scheduler */
    osKernelStart();
 8001270:	f004 f8a4 	bl	80053bc <osKernelStart>

    while (1) { }
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <main+0x94>
 8001278:	200004a0 	.word	0x200004a0
 800127c:	0800b040 	.word	0x0800b040
 8001280:	0800b05c 	.word	0x0800b05c
 8001284:	200005cc 	.word	0x200005cc
 8001288:	0800b080 	.word	0x0800b080
 800128c:	200005d0 	.word	0x200005d0

08001290 <fsm_Task>:
}

void fsm_Task(void const * argument) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	 char device_status[] = "ON";
 8001298:	4a21      	ldr	r2, [pc, #132]	@ (8001320 <fsm_Task+0x90>)
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	6812      	ldr	r2, [r2, #0]
 80012a0:	4611      	mov	r1, r2
 80012a2:	8019      	strh	r1, [r3, #0]
 80012a4:	3302      	adds	r3, #2
 80012a6:	0c12      	lsrs	r2, r2, #16
 80012a8:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (state) {
 80012aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001324 <fsm_Task+0x94>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d012      	beq.n	80012d8 <fsm_Task+0x48>
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	dc2f      	bgt.n	8001316 <fsm_Task+0x86>
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <fsm_Task+0x30>
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d004      	beq.n	80012c8 <fsm_Task+0x38>
 80012be:	e02a      	b.n	8001316 <fsm_Task+0x86>
            case STATE_INIT:
                state = STATE_READ_SENSOR;
 80012c0:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <fsm_Task+0x94>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	701a      	strb	r2, [r3, #0]
                break;
 80012c6:	e026      	b.n	8001316 <fsm_Task+0x86>

            case STATE_READ_SENSOR:
                read_sensor_values(&temperature, &humidity);
 80012c8:	4917      	ldr	r1, [pc, #92]	@ (8001328 <fsm_Task+0x98>)
 80012ca:	4818      	ldr	r0, [pc, #96]	@ (800132c <fsm_Task+0x9c>)
 80012cc:	f000 f830 	bl	8001330 <read_sensor_values>

                state = STATE_PUBLISH_MQTT;
 80012d0:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <fsm_Task+0x94>)
 80012d2:	2202      	movs	r2, #2
 80012d4:	701a      	strb	r2, [r3, #0]
                break;
 80012d6:	e01e      	b.n	8001316 <fsm_Task+0x86>

            case STATE_PUBLISH_MQTT:
                mqtt_data_send(temperature, humidity);
 80012d8:	4b14      	ldr	r3, [pc, #80]	@ (800132c <fsm_Task+0x9c>)
 80012da:	edd3 7a00 	vldr	s15, [r3]
 80012de:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <fsm_Task+0x98>)
 80012e0:	ed93 7a00 	vldr	s14, [r3]
 80012e4:	eef0 0a47 	vmov.f32	s1, s14
 80012e8:	eeb0 0a67 	vmov.f32	s0, s15
 80012ec:	f000 f87e 	bl	80013ec <mqtt_data_send>
                lcd_display(temperature, humidity, device_status);
 80012f0:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <fsm_Task+0x9c>)
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <fsm_Task+0x98>)
 80012f8:	ed93 7a00 	vldr	s14, [r3]
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	4618      	mov	r0, r3
 8001302:	eef0 0a47 	vmov.f32	s1, s14
 8001306:	eeb0 0a67 	vmov.f32	s0, s15
 800130a:	f000 f829 	bl	8001360 <lcd_display>
                state = STATE_READ_SENSOR; // Loop back to reading
 800130e:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <fsm_Task+0x94>)
 8001310:	2201      	movs	r2, #1
 8001312:	701a      	strb	r2, [r3, #0]
                break;
 8001314:	bf00      	nop
        }
        osDelay(1000); // Add delay to reduce CPU load
 8001316:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800131a:	f004 f8a2 	bl	8005462 <osDelay>
        switch (state) {
 800131e:	e7c4      	b.n	80012aa <fsm_Task+0x1a>
 8001320:	0800b09c 	.word	0x0800b09c
 8001324:	20000494 	.word	0x20000494
 8001328:	2000049c 	.word	0x2000049c
 800132c:	20000498 	.word	0x20000498

08001330 <read_sensor_values>:
    }
}

void read_sensor_values(float *temp, float *hum) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
    *temp = SHT25_ReadTemperature();
 800133a:	f000 f899 	bl	8001470 <SHT25_ReadTemperature>
 800133e:	eef0 7a40 	vmov.f32	s15, s0
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	edc3 7a00 	vstr	s15, [r3]
    *hum = SHT25_ReadHumidity();
 8001348:	f000 f8f2 	bl	8001530 <SHT25_ReadHumidity>
 800134c:	eef0 7a40 	vmov.f32	s15, s0
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	edc3 7a00 	vstr	s15, [r3]
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <lcd_display>:
void lcd_display(float temp, float hum, char* status) {
 8001360:	b5b0      	push	{r4, r5, r7, lr}
 8001362:	b08a      	sub	sp, #40	@ 0x28
 8001364:	af02      	add	r7, sp, #8
 8001366:	ed87 0a03 	vstr	s0, [r7, #12]
 800136a:	edc7 0a02 	vstr	s1, [r7, #8]
 800136e:	6078      	str	r0, [r7, #4]
    char buffer[16];

    // Display temperature and humidity on first line
    lcd_put_cur(0, 0);
 8001370:	2100      	movs	r1, #0
 8001372:	2000      	movs	r0, #0
 8001374:	f7ff fea2 	bl	80010bc <lcd_put_cur>
    sprintf(buffer, "T: %.2fC H: %.2f%%", temp, hum);
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f7ff f8ed 	bl	8000558 <__aeabi_f2d>
 800137e:	4604      	mov	r4, r0
 8001380:	460d      	mov	r5, r1
 8001382:	68b8      	ldr	r0, [r7, #8]
 8001384:	f7ff f8e8 	bl	8000558 <__aeabi_f2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	f107 0010 	add.w	r0, r7, #16
 8001390:	e9cd 2300 	strd	r2, r3, [sp]
 8001394:	4622      	mov	r2, r4
 8001396:	462b      	mov	r3, r5
 8001398:	490d      	ldr	r1, [pc, #52]	@ (80013d0 <lcd_display+0x70>)
 800139a:	f006 f9b1 	bl	8007700 <siprintf>
    lcd_send_string(buffer);
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fea8 	bl	80010f8 <lcd_send_string>

    // Display device status on second line
    lcd_put_cur(1, 0);
 80013a8:	2100      	movs	r1, #0
 80013aa:	2001      	movs	r0, #1
 80013ac:	f7ff fe86 	bl	80010bc <lcd_put_cur>
    sprintf(buffer, "Status: %s", status);
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4907      	ldr	r1, [pc, #28]	@ (80013d4 <lcd_display+0x74>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f006 f9a1 	bl	8007700 <siprintf>
    lcd_send_string(buffer);
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fe98 	bl	80010f8 <lcd_send_string>
}
 80013c8:	bf00      	nop
 80013ca:	3720      	adds	r7, #32
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bdb0      	pop	{r4, r5, r7, pc}
 80013d0:	0800b0a0 	.word	0x0800b0a0
 80013d4:	0800b0b4 	.word	0x0800b0b4

080013d8 <mqtt_Task>:
void mqtt_Task(void const * argument) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
    while (1) {
        osDelay(1000);
 80013e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013e4:	f004 f83d 	bl	8005462 <osDelay>
 80013e8:	e7fa      	b.n	80013e0 <mqtt_Task+0x8>
	...

080013ec <mqtt_data_send>:
    }
}

void mqtt_data_send(float temp, float hum) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b09c      	sub	sp, #112	@ 0x70
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	ed87 0a01 	vstr	s0, [r7, #4]
 80013f6:	edc7 0a00 	vstr	s1, [r7]
    char buffer[100];

    sprintf(buffer, "CMD+MQTTPUB=base/state/temperature,%.2f C\r\n", temp);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff f8ac 	bl	8000558 <__aeabi_f2d>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	f107 000c 	add.w	r0, r7, #12
 8001408:	4916      	ldr	r1, [pc, #88]	@ (8001464 <mqtt_data_send+0x78>)
 800140a:	f006 f979 	bl	8007700 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	4618      	mov	r0, r3
 8001414:	f7fe ff34 	bl	8000280 <strlen>
 8001418:	4603      	mov	r3, r0
 800141a:	b29a      	uxth	r2, r3
 800141c:	f107 010c 	add.w	r1, r7, #12
 8001420:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001424:	4810      	ldr	r0, [pc, #64]	@ (8001468 <mqtt_data_send+0x7c>)
 8001426:	f003 fb5f 	bl	8004ae8 <HAL_UART_Transmit>

    sprintf(buffer, "CMD+MQTTPUB=base/state/humidity,%.2f %%\r\n", hum);
 800142a:	6838      	ldr	r0, [r7, #0]
 800142c:	f7ff f894 	bl	8000558 <__aeabi_f2d>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	f107 000c 	add.w	r0, r7, #12
 8001438:	490c      	ldr	r1, [pc, #48]	@ (800146c <mqtt_data_send+0x80>)
 800143a:	f006 f961 	bl	8007700 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	4618      	mov	r0, r3
 8001444:	f7fe ff1c 	bl	8000280 <strlen>
 8001448:	4603      	mov	r3, r0
 800144a:	b29a      	uxth	r2, r3
 800144c:	f107 010c 	add.w	r1, r7, #12
 8001450:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001454:	4804      	ldr	r0, [pc, #16]	@ (8001468 <mqtt_data_send+0x7c>)
 8001456:	f003 fb47 	bl	8004ae8 <HAL_UART_Transmit>
}
 800145a:	bf00      	nop
 800145c:	3770      	adds	r7, #112	@ 0x70
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	0800b0c0 	.word	0x0800b0c0
 8001468:	2000053c 	.word	0x2000053c
 800146c:	0800b0ec 	.word	0x0800b0ec

08001470 <SHT25_ReadTemperature>:


float SHT25_ReadTemperature(void) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af02      	add	r7, sp, #8
    uint8_t command = 0xE3;  // Command to read temperature
 8001476:	23e3      	movs	r3, #227	@ 0xe3
 8001478:	717b      	strb	r3, [r7, #5]
    uint8_t data[2];

    HAL_I2C_Master_Transmit(&hi2c1, SHT25_I2C_ADDRESS << 1, &command, 1, HAL_MAX_DELAY);
 800147a:	1d7a      	adds	r2, r7, #5
 800147c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2301      	movs	r3, #1
 8001484:	2180      	movs	r1, #128	@ 0x80
 8001486:	4828      	ldr	r0, [pc, #160]	@ (8001528 <SHT25_ReadTemperature+0xb8>)
 8001488:	f001 fb24 	bl	8002ad4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, SHT25_I2C_ADDRESS << 1, data, 2, HAL_MAX_DELAY);
 800148c:	463a      	mov	r2, r7
 800148e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2302      	movs	r3, #2
 8001496:	2180      	movs	r1, #128	@ 0x80
 8001498:	4823      	ldr	r0, [pc, #140]	@ (8001528 <SHT25_ReadTemperature+0xb8>)
 800149a:	f001 fc19 	bl	8002cd0 <HAL_I2C_Master_Receive>

    uint16_t tempRaw = (data[0] << 8) | data[1];
 800149e:	783b      	ldrb	r3, [r7, #0]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	787b      	ldrb	r3, [r7, #1]
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	4313      	orrs	r3, r2
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	80fb      	strh	r3, [r7, #6]
    tempRaw &= ~0x0003;  // Clear the status bits
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	f023 0303 	bic.w	r3, r3, #3
 80014b4:	80fb      	strh	r3, [r7, #6]
    return -46.85 + (175.72 * (float)tempRaw / 65536.0);
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	ee07 3a90 	vmov	s15, r3
 80014bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014c0:	ee17 0a90 	vmov	r0, s15
 80014c4:	f7ff f848 	bl	8000558 <__aeabi_f2d>
 80014c8:	a313      	add	r3, pc, #76	@ (adr r3, 8001518 <SHT25_ReadTemperature+0xa8>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	f7ff f89b 	bl	8000608 <__aeabi_dmul>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	4b13      	ldr	r3, [pc, #76]	@ (800152c <SHT25_ReadTemperature+0xbc>)
 80014e0:	f7ff f9bc 	bl	800085c <__aeabi_ddiv>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	a30c      	add	r3, pc, #48	@ (adr r3, 8001520 <SHT25_ReadTemperature+0xb0>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7fe fed1 	bl	8000298 <__aeabi_dsub>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff fb7b 	bl	8000bf8 <__aeabi_d2f>
 8001502:	4603      	mov	r3, r0
 8001504:	ee07 3a90 	vmov	s15, r3
}
 8001508:	eeb0 0a67 	vmov.f32	s0, s15
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	f3af 8000 	nop.w
 8001518:	3d70a3d7 	.word	0x3d70a3d7
 800151c:	4065f70a 	.word	0x4065f70a
 8001520:	cccccccd 	.word	0xcccccccd
 8001524:	40476ccc 	.word	0x40476ccc
 8001528:	200004a0 	.word	0x200004a0
 800152c:	40f00000 	.word	0x40f00000

08001530 <SHT25_ReadHumidity>:

float SHT25_ReadHumidity(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af02      	add	r7, sp, #8
    uint8_t command = 0xE5;  // Command to read humidity
 8001536:	23e5      	movs	r3, #229	@ 0xe5
 8001538:	717b      	strb	r3, [r7, #5]
    uint8_t data[2];

    HAL_I2C_Master_Transmit(&hi2c1, SHT25_I2C_ADDRESS << 1, &command, 1, HAL_MAX_DELAY);
 800153a:	1d7a      	adds	r2, r7, #5
 800153c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2301      	movs	r3, #1
 8001544:	2180      	movs	r1, #128	@ 0x80
 8001546:	4823      	ldr	r0, [pc, #140]	@ (80015d4 <SHT25_ReadHumidity+0xa4>)
 8001548:	f001 fac4 	bl	8002ad4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, SHT25_I2C_ADDRESS << 1, data, 2, HAL_MAX_DELAY);
 800154c:	463a      	mov	r2, r7
 800154e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2302      	movs	r3, #2
 8001556:	2180      	movs	r1, #128	@ 0x80
 8001558:	481e      	ldr	r0, [pc, #120]	@ (80015d4 <SHT25_ReadHumidity+0xa4>)
 800155a:	f001 fbb9 	bl	8002cd0 <HAL_I2C_Master_Receive>

    uint16_t humRaw = (data[0] << 8) | data[1];
 800155e:	783b      	ldrb	r3, [r7, #0]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b21a      	sxth	r2, r3
 8001564:	787b      	ldrb	r3, [r7, #1]
 8001566:	b21b      	sxth	r3, r3
 8001568:	4313      	orrs	r3, r2
 800156a:	b21b      	sxth	r3, r3
 800156c:	80fb      	strh	r3, [r7, #6]
    humRaw &= ~0x0003;  // Clear the status bits
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	f023 0303 	bic.w	r3, r3, #3
 8001574:	80fb      	strh	r3, [r7, #6]
    return -6.0 + (125.0 * (float)humRaw / 65536.0);
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001580:	ee17 0a90 	vmov	r0, s15
 8001584:	f7fe ffe8 	bl	8000558 <__aeabi_f2d>
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <SHT25_ReadHumidity+0xa8>)
 800158e:	f7ff f83b 	bl	8000608 <__aeabi_dmul>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <SHT25_ReadHumidity+0xac>)
 80015a0:	f7ff f95c 	bl	800085c <__aeabi_ddiv>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <SHT25_ReadHumidity+0xb0>)
 80015b2:	f7fe fe71 	bl	8000298 <__aeabi_dsub>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f7ff fb1b 	bl	8000bf8 <__aeabi_d2f>
 80015c2:	4603      	mov	r3, r0
 80015c4:	ee07 3a90 	vmov	s15, r3
}
 80015c8:	eeb0 0a67 	vmov.f32	s0, s15
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200004a0 	.word	0x200004a0
 80015d8:	405f4000 	.word	0x405f4000
 80015dc:	40f00000 	.word	0x40f00000
 80015e0:	40180000 	.word	0x40180000

080015e4 <WE10_Init>:

void WE10_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b0a0      	sub	sp, #128	@ 0x80
 80015e8:	af00      	add	r7, sp, #0
	char buffer[128];
	sprintf (&buffer[0], "CMD+RESET\r\n");
 80015ea:	463b      	mov	r3, r7
 80015ec:	4973      	ldr	r1, [pc, #460]	@ (80017bc <WE10_Init+0x1d8>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f006 f886 	bl	8007700 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80015f4:	463b      	mov	r3, r7
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe fe42 	bl	8000280 <strlen>
 80015fc:	4603      	mov	r3, r0
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4639      	mov	r1, r7
 8001602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001606:	486e      	ldr	r0, [pc, #440]	@ (80017c0 <WE10_Init+0x1dc>)
 8001608:	f003 fa6e 	bl	8004ae8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800160c:	463b      	mov	r3, r7
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fe36 	bl	8000280 <strlen>
 8001614:	4603      	mov	r3, r0
 8001616:	b29a      	uxth	r2, r3
 8001618:	4639      	mov	r1, r7
 800161a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800161e:	4869      	ldr	r0, [pc, #420]	@ (80017c4 <WE10_Init+0x1e0>)
 8001620:	f003 fa62 	bl	8004ae8 <HAL_UART_Transmit>

		HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001624:	463b      	mov	r3, r7
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fe2a 	bl	8000280 <strlen>
 800162c:	4603      	mov	r3, r0
 800162e:	b29a      	uxth	r2, r3
 8001630:	4639      	mov	r1, r7
 8001632:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001636:	4862      	ldr	r0, [pc, #392]	@ (80017c0 <WE10_Init+0x1dc>)
 8001638:	f003 fae1 	bl	8004bfe <HAL_UART_Receive>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800163c:	463b      	mov	r3, r7
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe fe1e 	bl	8000280 <strlen>
 8001644:	4603      	mov	r3, r0
 8001646:	b29a      	uxth	r2, r3
 8001648:	4639      	mov	r1, r7
 800164a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800164e:	485d      	ldr	r0, [pc, #372]	@ (80017c4 <WE10_Init+0x1e0>)
 8001650:	f003 fa4a 	bl	8004ae8 <HAL_UART_Transmit>


		/*********  CMD+WIFIMODE=1  **********/
		//memset(&buffer[0],0x00,strlen(buffer));
		sprintf (&buffer[0], "CMD+WIFIMODE=1\r\n");
 8001654:	463b      	mov	r3, r7
 8001656:	495c      	ldr	r1, [pc, #368]	@ (80017c8 <WE10_Init+0x1e4>)
 8001658:	4618      	mov	r0, r3
 800165a:	f006 f851 	bl	8007700 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800165e:	463b      	mov	r3, r7
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe fe0d 	bl	8000280 <strlen>
 8001666:	4603      	mov	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	4639      	mov	r1, r7
 800166c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001670:	4853      	ldr	r0, [pc, #332]	@ (80017c0 <WE10_Init+0x1dc>)
 8001672:	f003 fa39 	bl	8004ae8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001676:	463b      	mov	r3, r7
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe fe01 	bl	8000280 <strlen>
 800167e:	4603      	mov	r3, r0
 8001680:	b29a      	uxth	r2, r3
 8001682:	4639      	mov	r1, r7
 8001684:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001688:	484e      	ldr	r0, [pc, #312]	@ (80017c4 <WE10_Init+0x1e0>)
 800168a:	f003 fa2d 	bl	8004ae8 <HAL_UART_Transmit>

		HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 800168e:	463b      	mov	r3, r7
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe fdf5 	bl	8000280 <strlen>
 8001696:	4603      	mov	r3, r0
 8001698:	b29a      	uxth	r2, r3
 800169a:	4639      	mov	r1, r7
 800169c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016a0:	4847      	ldr	r0, [pc, #284]	@ (80017c0 <WE10_Init+0x1dc>)
 80016a2:	f003 faac 	bl	8004bfe <HAL_UART_Receive>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80016a6:	463b      	mov	r3, r7
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe fde9 	bl	8000280 <strlen>
 80016ae:	4603      	mov	r3, r0
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	4639      	mov	r1, r7
 80016b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016b8:	4842      	ldr	r0, [pc, #264]	@ (80017c4 <WE10_Init+0x1e0>)
 80016ba:	f003 fa15 	bl	8004ae8 <HAL_UART_Transmit>
		HAL_Delay(2000);
 80016be:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80016c2:	f000 fe1f 	bl	8002304 <HAL_Delay>


		/********* CMD+CONTOAP=SSID,PASSWD **********/
		//memset(&buffer[0],0x00,strlen(buffer));
		sprintf (&buffer[0], "CMD+CONTOAP=VIVO,12345678\r\n");
 80016c6:	463b      	mov	r3, r7
 80016c8:	4940      	ldr	r1, [pc, #256]	@ (80017cc <WE10_Init+0x1e8>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f006 f818 	bl	8007700 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 80016d0:	463b      	mov	r3, r7
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe fdd4 	bl	8000280 <strlen>
 80016d8:	4603      	mov	r3, r0
 80016da:	b29a      	uxth	r2, r3
 80016dc:	4639      	mov	r1, r7
 80016de:	f242 7310 	movw	r3, #10000	@ 0x2710
 80016e2:	4837      	ldr	r0, [pc, #220]	@ (80017c0 <WE10_Init+0x1dc>)
 80016e4:	f003 fa00 	bl	8004ae8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 80016e8:	463b      	mov	r3, r7
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe fdc8 	bl	8000280 <strlen>
 80016f0:	4603      	mov	r3, r0
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	4639      	mov	r1, r7
 80016f6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80016fa:	4832      	ldr	r0, [pc, #200]	@ (80017c4 <WE10_Init+0x1e0>)
 80016fc:	f003 f9f4 	bl	8004ae8 <HAL_UART_Transmit>
		//memset(&buffer[0],0x00,strlen(buffer));
		HAL_Delay(2000);
 8001700:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001704:	f000 fdfe 	bl	8002304 <HAL_Delay>
		HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 8001708:	463b      	mov	r3, r7
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe fdb8 	bl	8000280 <strlen>
 8001710:	4603      	mov	r3, r0
 8001712:	b29a      	uxth	r2, r3
 8001714:	4639      	mov	r1, r7
 8001716:	f242 7310 	movw	r3, #10000	@ 0x2710
 800171a:	4829      	ldr	r0, [pc, #164]	@ (80017c0 <WE10_Init+0x1dc>)
 800171c:	f003 fa6f 	bl	8004bfe <HAL_UART_Receive>
		HAL_Delay(500);
 8001720:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001724:	f000 fdee 	bl	8002304 <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 8001728:	463b      	mov	r3, r7
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fda8 	bl	8000280 <strlen>
 8001730:	4603      	mov	r3, r0
 8001732:	b29a      	uxth	r2, r3
 8001734:	4639      	mov	r1, r7
 8001736:	f242 7310 	movw	r3, #10000	@ 0x2710
 800173a:	4822      	ldr	r0, [pc, #136]	@ (80017c4 <WE10_Init+0x1e0>)
 800173c:	f003 f9d4 	bl	8004ae8 <HAL_UART_Transmit>

		/********* CMD?WIFI**********/
		//memset(&buffer[0],0x00,strlen(buffer));
		sprintf (&buffer[0], "CMD?WIFI\r\n");
 8001740:	463b      	mov	r3, r7
 8001742:	4923      	ldr	r1, [pc, #140]	@ (80017d0 <WE10_Init+0x1ec>)
 8001744:	4618      	mov	r0, r3
 8001746:	f005 ffdb 	bl	8007700 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 800174a:	463b      	mov	r3, r7
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fd97 	bl	8000280 <strlen>
 8001752:	4603      	mov	r3, r0
 8001754:	b29a      	uxth	r2, r3
 8001756:	4639      	mov	r1, r7
 8001758:	f242 7310 	movw	r3, #10000	@ 0x2710
 800175c:	4818      	ldr	r0, [pc, #96]	@ (80017c0 <WE10_Init+0x1dc>)
 800175e:	f003 f9c3 	bl	8004ae8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 8001762:	463b      	mov	r3, r7
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fd8b 	bl	8000280 <strlen>
 800176a:	4603      	mov	r3, r0
 800176c:	b29a      	uxth	r2, r3
 800176e:	4639      	mov	r1, r7
 8001770:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001774:	4813      	ldr	r0, [pc, #76]	@ (80017c4 <WE10_Init+0x1e0>)
 8001776:	f003 f9b7 	bl	8004ae8 <HAL_UART_Transmit>
	//	memset(&buffer[0],0x00,strlen(buffer));
	//	HAL_Delay(500);
		HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 800177a:	463b      	mov	r3, r7
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fd7f 	bl	8000280 <strlen>
 8001782:	4603      	mov	r3, r0
 8001784:	b29a      	uxth	r2, r3
 8001786:	4639      	mov	r1, r7
 8001788:	f242 7310 	movw	r3, #10000	@ 0x2710
 800178c:	480c      	ldr	r0, [pc, #48]	@ (80017c0 <WE10_Init+0x1dc>)
 800178e:	f003 fa36 	bl	8004bfe <HAL_UART_Receive>
		HAL_Delay(500);
 8001792:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001796:	f000 fdb5 	bl	8002304 <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 800179a:	463b      	mov	r3, r7
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fd6f 	bl	8000280 <strlen>
 80017a2:	4603      	mov	r3, r0
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	4639      	mov	r1, r7
 80017a8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80017ac:	4805      	ldr	r0, [pc, #20]	@ (80017c4 <WE10_Init+0x1e0>)
 80017ae:	f003 f99b 	bl	8004ae8 <HAL_UART_Transmit>

}
 80017b2:	bf00      	nop
 80017b4:	3780      	adds	r7, #128	@ 0x80
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	0800b118 	.word	0x0800b118
 80017c0:	2000053c 	.word	0x2000053c
 80017c4:	20000584 	.word	0x20000584
 80017c8:	0800b124 	.word	0x0800b124
 80017cc:	0800b138 	.word	0x0800b138
 80017d0:	0800b154 	.word	0x0800b154

080017d4 <MQTT_Init>:
void MQTT_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b0a0      	sub	sp, #128	@ 0x80
 80017d8:	af00      	add	r7, sp, #0
	char buffer[128];
	sprintf (&buffer[0], "CMD+MQTTNETCFG=dev.rightech.io,1883\r\n");
 80017da:	463b      	mov	r3, r7
 80017dc:	4958      	ldr	r1, [pc, #352]	@ (8001940 <MQTT_Init+0x16c>)
 80017de:	4618      	mov	r0, r3
 80017e0:	f005 ff8e 	bl	8007700 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 80017e4:	463b      	mov	r3, r7
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fd4a 	bl	8000280 <strlen>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	4639      	mov	r1, r7
 80017f2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80017f6:	4853      	ldr	r0, [pc, #332]	@ (8001944 <MQTT_Init+0x170>)
 80017f8:	f003 f976 	bl	8004ae8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 80017fc:	463b      	mov	r3, r7
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fd3e 	bl	8000280 <strlen>
 8001804:	4603      	mov	r3, r0
 8001806:	b29a      	uxth	r2, r3
 8001808:	4639      	mov	r1, r7
 800180a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800180e:	484e      	ldr	r0, [pc, #312]	@ (8001948 <MQTT_Init+0x174>)
 8001810:	f003 f96a 	bl	8004ae8 <HAL_UART_Transmit>
		//memset(&buffer[0],0x00,strlen(buffer));
		//HAL_Delay(500);
		HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 10000);
 8001814:	463b      	mov	r3, r7
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fd32 	bl	8000280 <strlen>
 800181c:	4603      	mov	r3, r0
 800181e:	b29a      	uxth	r2, r3
 8001820:	4639      	mov	r1, r7
 8001822:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001826:	4847      	ldr	r0, [pc, #284]	@ (8001944 <MQTT_Init+0x170>)
 8001828:	f003 f9e9 	bl	8004bfe <HAL_UART_Receive>
		HAL_Delay(500);
 800182c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001830:	f000 fd68 	bl	8002304 <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 8001834:	463b      	mov	r3, r7
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fd22 	bl	8000280 <strlen>
 800183c:	4603      	mov	r3, r0
 800183e:	b29a      	uxth	r2, r3
 8001840:	4639      	mov	r1, r7
 8001842:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001846:	4840      	ldr	r0, [pc, #256]	@ (8001948 <MQTT_Init+0x174>)
 8001848:	f003 f94e 	bl	8004ae8 <HAL_UART_Transmit>


		/*********CMD+MQTTCONCFG **********/
		//memset(&buffer[0],0x00,strlen(buffer));
		sprintf (&buffer[0], "CMD+MQTTCONCFG=3,mqtt-saikumarsunny2002-3ruesz,,,,,,,,,\r\n");
 800184c:	463b      	mov	r3, r7
 800184e:	493f      	ldr	r1, [pc, #252]	@ (800194c <MQTT_Init+0x178>)
 8001850:	4618      	mov	r0, r3
 8001852:	f005 ff55 	bl	8007700 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001856:	463b      	mov	r3, r7
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fd11 	bl	8000280 <strlen>
 800185e:	4603      	mov	r3, r0
 8001860:	b29a      	uxth	r2, r3
 8001862:	4639      	mov	r1, r7
 8001864:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001868:	4836      	ldr	r0, [pc, #216]	@ (8001944 <MQTT_Init+0x170>)
 800186a:	f003 f93d 	bl	8004ae8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 800186e:	463b      	mov	r3, r7
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe fd05 	bl	8000280 <strlen>
 8001876:	4603      	mov	r3, r0
 8001878:	b29a      	uxth	r2, r3
 800187a:	4639      	mov	r1, r7
 800187c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001880:	4831      	ldr	r0, [pc, #196]	@ (8001948 <MQTT_Init+0x174>)
 8001882:	f003 f931 	bl	8004ae8 <HAL_UART_Transmit>
		//memset(&buffer[0],0x00,strlen(buffer));
		//HAL_Delay(500);
		HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001886:	463b      	mov	r3, r7
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fcf9 	bl	8000280 <strlen>
 800188e:	4603      	mov	r3, r0
 8001890:	b29a      	uxth	r2, r3
 8001892:	4639      	mov	r1, r7
 8001894:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001898:	482a      	ldr	r0, [pc, #168]	@ (8001944 <MQTT_Init+0x170>)
 800189a:	f003 f9b0 	bl	8004bfe <HAL_UART_Receive>
		HAL_Delay(500);
 800189e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018a2:	f000 fd2f 	bl	8002304 <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80018a6:	463b      	mov	r3, r7
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fce9 	bl	8000280 <strlen>
 80018ae:	4603      	mov	r3, r0
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	4639      	mov	r1, r7
 80018b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018b8:	4823      	ldr	r0, [pc, #140]	@ (8001948 <MQTT_Init+0x174>)
 80018ba:	f003 f915 	bl	8004ae8 <HAL_UART_Transmit>


		/*********CMD+MQTTSTART **********/
		//memset(&buffer[0],0x00,strlen(buffer));
		sprintf (&buffer[0], "CMD+MQTTSTART=1\r\n");
 80018be:	463b      	mov	r3, r7
 80018c0:	4923      	ldr	r1, [pc, #140]	@ (8001950 <MQTT_Init+0x17c>)
 80018c2:	4618      	mov	r0, r3
 80018c4:	f005 ff1c 	bl	8007700 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80018c8:	463b      	mov	r3, r7
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fcd8 	bl	8000280 <strlen>
 80018d0:	4603      	mov	r3, r0
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	4639      	mov	r1, r7
 80018d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018da:	481a      	ldr	r0, [pc, #104]	@ (8001944 <MQTT_Init+0x170>)
 80018dc:	f003 f904 	bl	8004ae8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80018e0:	463b      	mov	r3, r7
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fccc 	bl	8000280 <strlen>
 80018e8:	4603      	mov	r3, r0
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	4639      	mov	r1, r7
 80018ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018f2:	4815      	ldr	r0, [pc, #84]	@ (8001948 <MQTT_Init+0x174>)
 80018f4:	f003 f8f8 	bl	8004ae8 <HAL_UART_Transmit>
	//	memset(&buffer[0],0x00,strlen(buffer));
		HAL_Delay(5000);
 80018f8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80018fc:	f000 fd02 	bl	8002304 <HAL_Delay>
		HAL_UART_Receive(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001900:	463b      	mov	r3, r7
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fcbc 	bl	8000280 <strlen>
 8001908:	4603      	mov	r3, r0
 800190a:	b29a      	uxth	r2, r3
 800190c:	4639      	mov	r1, r7
 800190e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001912:	480c      	ldr	r0, [pc, #48]	@ (8001944 <MQTT_Init+0x170>)
 8001914:	f003 f973 	bl	8004bfe <HAL_UART_Receive>
		HAL_Delay(500);
 8001918:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800191c:	f000 fcf2 	bl	8002304 <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 8001920:	463b      	mov	r3, r7
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fcac 	bl	8000280 <strlen>
 8001928:	4603      	mov	r3, r0
 800192a:	b29a      	uxth	r2, r3
 800192c:	4639      	mov	r1, r7
 800192e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001932:	4805      	ldr	r0, [pc, #20]	@ (8001948 <MQTT_Init+0x174>)
 8001934:	f003 f8d8 	bl	8004ae8 <HAL_UART_Transmit>

}
 8001938:	bf00      	nop
 800193a:	3780      	adds	r7, #128	@ 0x80
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	0800b160 	.word	0x0800b160
 8001944:	2000053c 	.word	0x2000053c
 8001948:	20000584 	.word	0x20000584
 800194c:	0800b188 	.word	0x0800b188
 8001950:	0800b1c4 	.word	0x0800b1c4

08001954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b094      	sub	sp, #80	@ 0x50
 8001958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800195a:	f107 0320 	add.w	r3, r7, #32
 800195e:	2230      	movs	r2, #48	@ 0x30
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f005 ff2f 	bl	80077c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	4b28      	ldr	r3, [pc, #160]	@ (8001a20 <SystemClock_Config+0xcc>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	4a27      	ldr	r2, [pc, #156]	@ (8001a20 <SystemClock_Config+0xcc>)
 8001982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001986:	6413      	str	r3, [r2, #64]	@ 0x40
 8001988:	4b25      	ldr	r3, [pc, #148]	@ (8001a20 <SystemClock_Config+0xcc>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001994:	2300      	movs	r3, #0
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	4b22      	ldr	r3, [pc, #136]	@ (8001a24 <SystemClock_Config+0xd0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a21      	ldr	r2, [pc, #132]	@ (8001a24 <SystemClock_Config+0xd0>)
 800199e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a24 <SystemClock_Config+0xd0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019b0:	2302      	movs	r3, #2
 80019b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019b4:	2301      	movs	r3, #1
 80019b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019b8:	2310      	movs	r3, #16
 80019ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019bc:	2302      	movs	r3, #2
 80019be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019c0:	2300      	movs	r3, #0
 80019c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80019c4:	2310      	movs	r3, #16
 80019c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80019c8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80019cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019ce:	2304      	movs	r3, #4
 80019d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019d2:	2304      	movs	r3, #4
 80019d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d6:	f107 0320 	add.w	r3, r7, #32
 80019da:	4618      	mov	r0, r3
 80019dc:	f001 ff30 	bl	8003840 <HAL_RCC_OscConfig>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80019e6:	f000 f96d 	bl	8001cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ea:	230f      	movs	r3, #15
 80019ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ee:	2302      	movs	r3, #2
 80019f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	2102      	movs	r1, #2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 f992 	bl	8003d30 <HAL_RCC_ClockConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a12:	f000 f957 	bl	8001cc4 <Error_Handler>
  }
}
 8001a16:	bf00      	nop
 8001a18:	3750      	adds	r7, #80	@ 0x50
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40007000 	.word	0x40007000

08001a28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a2e:	4a13      	ldr	r2, [pc, #76]	@ (8001a7c <MX_I2C1_Init+0x54>)
 8001a30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a32:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a34:	4a12      	ldr	r2, [pc, #72]	@ (8001a80 <MX_I2C1_Init+0x58>)
 8001a36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a52:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a58:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a5e:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a64:	4804      	ldr	r0, [pc, #16]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a66:	f000 fef1 	bl	800284c <HAL_I2C_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a70:	f000 f928 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200004a0 	.word	0x200004a0
 8001a7c:	40005400 	.word	0x40005400
 8001a80:	000186a0 	.word	0x000186a0

08001a84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a8a:	f107 0308 	add.w	r3, r7, #8
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a98:	463b      	mov	r3, r7
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b18 <MX_TIM2_Init+0x94>)
 8001aa2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001aa6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <MX_TIM2_Init+0x94>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aae:	4b1a      	ldr	r3, [pc, #104]	@ (8001b18 <MX_TIM2_Init+0x94>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ab4:	4b18      	ldr	r3, [pc, #96]	@ (8001b18 <MX_TIM2_Init+0x94>)
 8001ab6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001aba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001abc:	4b16      	ldr	r3, [pc, #88]	@ (8001b18 <MX_TIM2_Init+0x94>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac2:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <MX_TIM2_Init+0x94>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ac8:	4813      	ldr	r0, [pc, #76]	@ (8001b18 <MX_TIM2_Init+0x94>)
 8001aca:	f002 fb83 	bl	80041d4 <HAL_TIM_Base_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ad4:	f000 f8f6 	bl	8001cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001adc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ade:	f107 0308 	add.w	r3, r7, #8
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480c      	ldr	r0, [pc, #48]	@ (8001b18 <MX_TIM2_Init+0x94>)
 8001ae6:	f002 fd17 	bl	8004518 <HAL_TIM_ConfigClockSource>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001af0:	f000 f8e8 	bl	8001cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af4:	2300      	movs	r3, #0
 8001af6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001afc:	463b      	mov	r3, r7
 8001afe:	4619      	mov	r1, r3
 8001b00:	4805      	ldr	r0, [pc, #20]	@ (8001b18 <MX_TIM2_Init+0x94>)
 8001b02:	f002 ff1f 	bl	8004944 <HAL_TIMEx_MasterConfigSynchronization>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b0c:	f000 f8da 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	200004f4 	.word	0x200004f4

08001b1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b20:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <MX_USART1_UART_Init+0x4c>)
 8001b22:	4a12      	ldr	r2, [pc, #72]	@ (8001b6c <MX_USART1_UART_Init+0x50>)
 8001b24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001b26:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <MX_USART1_UART_Init+0x4c>)
 8001b28:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001b2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b68 <MX_USART1_UART_Init+0x4c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b34:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <MX_USART1_UART_Init+0x4c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b68 <MX_USART1_UART_Init+0x4c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b40:	4b09      	ldr	r3, [pc, #36]	@ (8001b68 <MX_USART1_UART_Init+0x4c>)
 8001b42:	220c      	movs	r2, #12
 8001b44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b46:	4b08      	ldr	r3, [pc, #32]	@ (8001b68 <MX_USART1_UART_Init+0x4c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <MX_USART1_UART_Init+0x4c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b52:	4805      	ldr	r0, [pc, #20]	@ (8001b68 <MX_USART1_UART_Init+0x4c>)
 8001b54:	f002 ff78 	bl	8004a48 <HAL_UART_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b5e:	f000 f8b1 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	2000053c 	.word	0x2000053c
 8001b6c:	40011000 	.word	0x40011000

08001b70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b74:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <MX_USART2_UART_Init+0x4c>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	@ (8001bc0 <MX_USART2_UART_Init+0x50>)
 8001b78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001b7a:	4b10      	ldr	r3, [pc, #64]	@ (8001bbc <MX_USART2_UART_Init+0x4c>)
 8001b7c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001b80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <MX_USART2_UART_Init+0x4c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <MX_USART2_UART_Init+0x4c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <MX_USART2_UART_Init+0x4c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b94:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <MX_USART2_UART_Init+0x4c>)
 8001b96:	220c      	movs	r2, #12
 8001b98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9a:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <MX_USART2_UART_Init+0x4c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <MX_USART2_UART_Init+0x4c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ba6:	4805      	ldr	r0, [pc, #20]	@ (8001bbc <MX_USART2_UART_Init+0x4c>)
 8001ba8:	f002 ff4e 	bl	8004a48 <HAL_UART_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bb2:	f000 f887 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000584 	.word	0x20000584
 8001bc0:	40004400 	.word	0x40004400

08001bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	@ 0x28
 8001bc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
 8001bd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	4b2d      	ldr	r3, [pc, #180]	@ (8001c94 <MX_GPIO_Init+0xd0>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	4a2c      	ldr	r2, [pc, #176]	@ (8001c94 <MX_GPIO_Init+0xd0>)
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bea:	4b2a      	ldr	r3, [pc, #168]	@ (8001c94 <MX_GPIO_Init+0xd0>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b26      	ldr	r3, [pc, #152]	@ (8001c94 <MX_GPIO_Init+0xd0>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	4a25      	ldr	r2, [pc, #148]	@ (8001c94 <MX_GPIO_Init+0xd0>)
 8001c00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c06:	4b23      	ldr	r3, [pc, #140]	@ (8001c94 <MX_GPIO_Init+0xd0>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	4b1f      	ldr	r3, [pc, #124]	@ (8001c94 <MX_GPIO_Init+0xd0>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8001c94 <MX_GPIO_Init+0xd0>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c22:	4b1c      	ldr	r3, [pc, #112]	@ (8001c94 <MX_GPIO_Init+0xd0>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	4b18      	ldr	r3, [pc, #96]	@ (8001c94 <MX_GPIO_Init+0xd0>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	4a17      	ldr	r2, [pc, #92]	@ (8001c94 <MX_GPIO_Init+0xd0>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3e:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <MX_GPIO_Init+0xd0>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2120      	movs	r1, #32
 8001c4e:	4812      	ldr	r0, [pc, #72]	@ (8001c98 <MX_GPIO_Init+0xd4>)
 8001c50:	f000 fde2 	bl	8002818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c5a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4619      	mov	r1, r3
 8001c6a:	480c      	ldr	r0, [pc, #48]	@ (8001c9c <MX_GPIO_Init+0xd8>)
 8001c6c:	f000 fc50 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c70:	2320      	movs	r3, #32
 8001c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	4619      	mov	r1, r3
 8001c86:	4804      	ldr	r0, [pc, #16]	@ (8001c98 <MX_GPIO_Init+0xd4>)
 8001c88:	f000 fc42 	bl	8002510 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c8c:	bf00      	nop
 8001c8e:	3728      	adds	r7, #40	@ 0x28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020000 	.word	0x40020000
 8001c9c:	40020800 	.word	0x40020800

08001ca0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a04      	ldr	r2, [pc, #16]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d101      	bne.n	8001cb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cb2:	f000 fb07 	bl	80022c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40010000 	.word	0x40010000

08001cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc8:	b672      	cpsid	i
}
 8001cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <Error_Handler+0x8>

08001cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	4b12      	ldr	r3, [pc, #72]	@ (8001d24 <HAL_MspInit+0x54>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cde:	4a11      	ldr	r2, [pc, #68]	@ (8001d24 <HAL_MspInit+0x54>)
 8001ce0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d24 <HAL_MspInit+0x54>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <HAL_MspInit+0x54>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001d24 <HAL_MspInit+0x54>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d02:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <HAL_MspInit+0x54>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	210f      	movs	r1, #15
 8001d12:	f06f 0001 	mvn.w	r0, #1
 8001d16:	f000 fbd1 	bl	80024bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800

08001d28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	@ 0x28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a19      	ldr	r2, [pc, #100]	@ (8001dac <HAL_I2C_MspInit+0x84>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d12b      	bne.n	8001da2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	4b18      	ldr	r3, [pc, #96]	@ (8001db0 <HAL_I2C_MspInit+0x88>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	4a17      	ldr	r2, [pc, #92]	@ (8001db0 <HAL_I2C_MspInit+0x88>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5a:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <HAL_I2C_MspInit+0x88>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d66:	23c0      	movs	r3, #192	@ 0xc0
 8001d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d6a:	2312      	movs	r3, #18
 8001d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d72:	2303      	movs	r3, #3
 8001d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d76:	2304      	movs	r3, #4
 8001d78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	4619      	mov	r1, r3
 8001d80:	480c      	ldr	r0, [pc, #48]	@ (8001db4 <HAL_I2C_MspInit+0x8c>)
 8001d82:	f000 fbc5 	bl	8002510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b09      	ldr	r3, [pc, #36]	@ (8001db0 <HAL_I2C_MspInit+0x88>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	4a08      	ldr	r2, [pc, #32]	@ (8001db0 <HAL_I2C_MspInit+0x88>)
 8001d90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d96:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <HAL_I2C_MspInit+0x88>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001da2:	bf00      	nop
 8001da4:	3728      	adds	r7, #40	@ 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40005400 	.word	0x40005400
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020400 	.word	0x40020400

08001db8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dc8:	d115      	bne.n	8001df6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b0c      	ldr	r3, [pc, #48]	@ (8001e00 <HAL_TIM_Base_MspInit+0x48>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	4a0b      	ldr	r2, [pc, #44]	@ (8001e00 <HAL_TIM_Base_MspInit+0x48>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dda:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <HAL_TIM_Base_MspInit+0x48>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2105      	movs	r1, #5
 8001dea:	201c      	movs	r0, #28
 8001dec:	f000 fb66 	bl	80024bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001df0:	201c      	movs	r0, #28
 8001df2:	f000 fb7f 	bl	80024f4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800

08001e04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08c      	sub	sp, #48	@ 0x30
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 031c 	add.w	r3, r7, #28
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a32      	ldr	r2, [pc, #200]	@ (8001eec <HAL_UART_MspInit+0xe8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d12d      	bne.n	8001e82 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	61bb      	str	r3, [r7, #24]
 8001e2a:	4b31      	ldr	r3, [pc, #196]	@ (8001ef0 <HAL_UART_MspInit+0xec>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2e:	4a30      	ldr	r2, [pc, #192]	@ (8001ef0 <HAL_UART_MspInit+0xec>)
 8001e30:	f043 0310 	orr.w	r3, r3, #16
 8001e34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e36:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef0 <HAL_UART_MspInit+0xec>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	61bb      	str	r3, [r7, #24]
 8001e40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef0 <HAL_UART_MspInit+0xec>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	4a29      	ldr	r2, [pc, #164]	@ (8001ef0 <HAL_UART_MspInit+0xec>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e52:	4b27      	ldr	r3, [pc, #156]	@ (8001ef0 <HAL_UART_MspInit+0xec>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e5e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e70:	2307      	movs	r3, #7
 8001e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	4619      	mov	r1, r3
 8001e7a:	481e      	ldr	r0, [pc, #120]	@ (8001ef4 <HAL_UART_MspInit+0xf0>)
 8001e7c:	f000 fb48 	bl	8002510 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e80:	e030      	b.n	8001ee4 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef8 <HAL_UART_MspInit+0xf4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d12b      	bne.n	8001ee4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	4b17      	ldr	r3, [pc, #92]	@ (8001ef0 <HAL_UART_MspInit+0xec>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	4a16      	ldr	r2, [pc, #88]	@ (8001ef0 <HAL_UART_MspInit+0xec>)
 8001e96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ef0 <HAL_UART_MspInit+0xec>)
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	4b10      	ldr	r3, [pc, #64]	@ (8001ef0 <HAL_UART_MspInit+0xec>)
 8001eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb0:	4a0f      	ldr	r2, [pc, #60]	@ (8001ef0 <HAL_UART_MspInit+0xec>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <HAL_UART_MspInit+0xec>)
 8001eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ec4:	230c      	movs	r3, #12
 8001ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ed4:	2307      	movs	r3, #7
 8001ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	4619      	mov	r1, r3
 8001ede:	4805      	ldr	r0, [pc, #20]	@ (8001ef4 <HAL_UART_MspInit+0xf0>)
 8001ee0:	f000 fb16 	bl	8002510 <HAL_GPIO_Init>
}
 8001ee4:	bf00      	nop
 8001ee6:	3730      	adds	r7, #48	@ 0x30
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40011000 	.word	0x40011000
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	40004400 	.word	0x40004400

08001efc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08c      	sub	sp, #48	@ 0x30
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	4b2e      	ldr	r3, [pc, #184]	@ (8001fcc <HAL_InitTick+0xd0>)
 8001f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f14:	4a2d      	ldr	r2, [pc, #180]	@ (8001fcc <HAL_InitTick+0xd0>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fcc <HAL_InitTick+0xd0>)
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f28:	f107 020c 	add.w	r2, r7, #12
 8001f2c:	f107 0310 	add.w	r3, r7, #16
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f002 f91c 	bl	8004170 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f38:	f002 f906 	bl	8004148 <HAL_RCC_GetPCLK2Freq>
 8001f3c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f40:	4a23      	ldr	r2, [pc, #140]	@ (8001fd0 <HAL_InitTick+0xd4>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	0c9b      	lsrs	r3, r3, #18
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f4c:	4b21      	ldr	r3, [pc, #132]	@ (8001fd4 <HAL_InitTick+0xd8>)
 8001f4e:	4a22      	ldr	r2, [pc, #136]	@ (8001fd8 <HAL_InitTick+0xdc>)
 8001f50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f52:	4b20      	ldr	r3, [pc, #128]	@ (8001fd4 <HAL_InitTick+0xd8>)
 8001f54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f58:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8001fd4 <HAL_InitTick+0xd8>)
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f60:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd4 <HAL_InitTick+0xd8>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f66:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd4 <HAL_InitTick+0xd8>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6c:	4b19      	ldr	r3, [pc, #100]	@ (8001fd4 <HAL_InitTick+0xd8>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001f72:	4818      	ldr	r0, [pc, #96]	@ (8001fd4 <HAL_InitTick+0xd8>)
 8001f74:	f002 f92e 	bl	80041d4 <HAL_TIM_Base_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001f7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d11b      	bne.n	8001fbe <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001f86:	4813      	ldr	r0, [pc, #76]	@ (8001fd4 <HAL_InitTick+0xd8>)
 8001f88:	f002 f974 	bl	8004274 <HAL_TIM_Base_Start_IT>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001f92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d111      	bne.n	8001fbe <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f9a:	2019      	movs	r0, #25
 8001f9c:	f000 faaa 	bl	80024f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b0f      	cmp	r3, #15
 8001fa4:	d808      	bhi.n	8001fb8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	2019      	movs	r0, #25
 8001fac:	f000 fa86 	bl	80024bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001fdc <HAL_InitTick+0xe0>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e002      	b.n	8001fbe <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001fbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3730      	adds	r7, #48	@ 0x30
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	431bde83 	.word	0x431bde83
 8001fd4:	200005d4 	.word	0x200005d4
 8001fd8:	40010000 	.word	0x40010000
 8001fdc:	20000004 	.word	0x20000004

08001fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <NMI_Handler+0x4>

08001fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <HardFault_Handler+0x4>

08001ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <MemManage_Handler+0x4>

08001ff8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <BusFault_Handler+0x4>

08002000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <UsageFault_Handler+0x4>

08002008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800201c:	4802      	ldr	r0, [pc, #8]	@ (8002028 <TIM2_IRQHandler+0x10>)
 800201e:	f002 f98b 	bl	8004338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200004f4 	.word	0x200004f4

0800202c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8002036:	4b0f      	ldr	r3, [pc, #60]	@ (8002074 <ITM_SendChar+0x48>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a0e      	ldr	r2, [pc, #56]	@ (8002074 <ITM_SendChar+0x48>)
 800203c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002040:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8002042:	4b0d      	ldr	r3, [pc, #52]	@ (8002078 <ITM_SendChar+0x4c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a0c      	ldr	r2, [pc, #48]	@ (8002078 <ITM_SendChar+0x4c>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800204e:	bf00      	nop
 8002050:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f8      	beq.n	8002050 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800205e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	6013      	str	r3, [r2, #0]
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000edfc 	.word	0xe000edfc
 8002078:	e0000e00 	.word	0xe0000e00

0800207c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return 1;
 8002080:	2301      	movs	r3, #1
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <_kill>:

int _kill(int pid, int sig)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002096:	f005 fc3f 	bl	8007918 <__errno>
 800209a:	4603      	mov	r3, r0
 800209c:	2216      	movs	r2, #22
 800209e:	601a      	str	r2, [r3, #0]
  return -1;
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_exit>:

void _exit (int status)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ffe7 	bl	800208c <_kill>
  while (1) {}    /* Make sure we hang here */
 80020be:	bf00      	nop
 80020c0:	e7fd      	b.n	80020be <_exit+0x12>

080020c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	e00a      	b.n	80020ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020d4:	f3af 8000 	nop.w
 80020d8:	4601      	mov	r1, r0
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	60ba      	str	r2, [r7, #8]
 80020e0:	b2ca      	uxtb	r2, r1
 80020e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	3301      	adds	r3, #1
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	dbf0      	blt.n	80020d4 <_read+0x12>
  }

  return len;
 80020f2:	687b      	ldr	r3, [r7, #4]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	e009      	b.n	8002122 <_write+0x26>
  {
	  //__io_putchar(*ptr++);
	 	 	  	  ITM_SendChar(*ptr++);
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	60ba      	str	r2, [r7, #8]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff ff88 	bl	800202c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3301      	adds	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	429a      	cmp	r2, r3
 8002128:	dbf1      	blt.n	800210e <_write+0x12>
  }
  return len;
 800212a:	687b      	ldr	r3, [r7, #4]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <_close>:

int _close(int file)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800213c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800215c:	605a      	str	r2, [r3, #4]
  return 0;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_isatty>:

int _isatty(int file)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002174:	2301      	movs	r3, #1
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002182:	b480      	push	{r7}
 8002184:	b085      	sub	sp, #20
 8002186:	af00      	add	r7, sp, #0
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a4:	4a14      	ldr	r2, [pc, #80]	@ (80021f8 <_sbrk+0x5c>)
 80021a6:	4b15      	ldr	r3, [pc, #84]	@ (80021fc <_sbrk+0x60>)
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b0:	4b13      	ldr	r3, [pc, #76]	@ (8002200 <_sbrk+0x64>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d102      	bne.n	80021be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b8:	4b11      	ldr	r3, [pc, #68]	@ (8002200 <_sbrk+0x64>)
 80021ba:	4a12      	ldr	r2, [pc, #72]	@ (8002204 <_sbrk+0x68>)
 80021bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021be:	4b10      	ldr	r3, [pc, #64]	@ (8002200 <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d207      	bcs.n	80021dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021cc:	f005 fba4 	bl	8007918 <__errno>
 80021d0:	4603      	mov	r3, r0
 80021d2:	220c      	movs	r2, #12
 80021d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021da:	e009      	b.n	80021f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021dc:	4b08      	ldr	r3, [pc, #32]	@ (8002200 <_sbrk+0x64>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021e2:	4b07      	ldr	r3, [pc, #28]	@ (8002200 <_sbrk+0x64>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	4a05      	ldr	r2, [pc, #20]	@ (8002200 <_sbrk+0x64>)
 80021ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ee:	68fb      	ldr	r3, [r7, #12]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20020000 	.word	0x20020000
 80021fc:	00000400 	.word	0x00000400
 8002200:	2000061c 	.word	0x2000061c
 8002204:	200044c8 	.word	0x200044c8

08002208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800220c:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <SystemInit+0x20>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002212:	4a05      	ldr	r2, [pc, #20]	@ (8002228 <SystemInit+0x20>)
 8002214:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002218:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800222c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002264 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002230:	f7ff ffea 	bl	8002208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002234:	480c      	ldr	r0, [pc, #48]	@ (8002268 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002236:	490d      	ldr	r1, [pc, #52]	@ (800226c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002238:	4a0d      	ldr	r2, [pc, #52]	@ (8002270 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800223a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800223c:	e002      	b.n	8002244 <LoopCopyDataInit>

0800223e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800223e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002242:	3304      	adds	r3, #4

08002244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002248:	d3f9      	bcc.n	800223e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800224a:	4a0a      	ldr	r2, [pc, #40]	@ (8002274 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800224c:	4c0a      	ldr	r4, [pc, #40]	@ (8002278 <LoopFillZerobss+0x22>)
  movs r3, #0
 800224e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002250:	e001      	b.n	8002256 <LoopFillZerobss>

08002252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002254:	3204      	adds	r2, #4

08002256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002258:	d3fb      	bcc.n	8002252 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800225a:	f005 fb63 	bl	8007924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800225e:	f7fe ffbf 	bl	80011e0 <main>
  bx  lr    
 8002262:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002264:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800226c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002270:	0800b638 	.word	0x0800b638
  ldr r2, =_sbss
 8002274:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002278:	200044c4 	.word	0x200044c4

0800227c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800227c:	e7fe      	b.n	800227c <ADC_IRQHandler>
	...

08002280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002284:	4b0e      	ldr	r3, [pc, #56]	@ (80022c0 <HAL_Init+0x40>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0d      	ldr	r2, [pc, #52]	@ (80022c0 <HAL_Init+0x40>)
 800228a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800228e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002290:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <HAL_Init+0x40>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0a      	ldr	r2, [pc, #40]	@ (80022c0 <HAL_Init+0x40>)
 8002296:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800229a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800229c:	4b08      	ldr	r3, [pc, #32]	@ (80022c0 <HAL_Init+0x40>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a07      	ldr	r2, [pc, #28]	@ (80022c0 <HAL_Init+0x40>)
 80022a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a8:	2003      	movs	r0, #3
 80022aa:	f000 f8fc 	bl	80024a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ae:	200f      	movs	r0, #15
 80022b0:	f7ff fe24 	bl	8001efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b4:	f7ff fd0c 	bl	8001cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023c00 	.word	0x40023c00

080022c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c8:	4b06      	ldr	r3, [pc, #24]	@ (80022e4 <HAL_IncTick+0x20>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <HAL_IncTick+0x24>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	4a04      	ldr	r2, [pc, #16]	@ (80022e8 <HAL_IncTick+0x24>)
 80022d6:	6013      	str	r3, [r2, #0]
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000008 	.word	0x20000008
 80022e8:	20000620 	.word	0x20000620

080022ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return uwTick;
 80022f0:	4b03      	ldr	r3, [pc, #12]	@ (8002300 <HAL_GetTick+0x14>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20000620 	.word	0x20000620

08002304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800230c:	f7ff ffee 	bl	80022ec <HAL_GetTick>
 8002310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800231c:	d005      	beq.n	800232a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800231e:	4b0a      	ldr	r3, [pc, #40]	@ (8002348 <HAL_Delay+0x44>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4413      	add	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800232a:	bf00      	nop
 800232c:	f7ff ffde 	bl	80022ec <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	429a      	cmp	r2, r3
 800233a:	d8f7      	bhi.n	800232c <HAL_Delay+0x28>
  {
  }
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000008 	.word	0x20000008

0800234c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800235c:	4b0c      	ldr	r3, [pc, #48]	@ (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002368:	4013      	ands	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002374:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800237c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237e:	4a04      	ldr	r2, [pc, #16]	@ (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	60d3      	str	r3, [r2, #12]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002398:	4b04      	ldr	r3, [pc, #16]	@ (80023ac <__NVIC_GetPriorityGrouping+0x18>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	0a1b      	lsrs	r3, r3, #8
 800239e:	f003 0307 	and.w	r3, r3, #7
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	db0b      	blt.n	80023da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	f003 021f 	and.w	r2, r3, #31
 80023c8:	4907      	ldr	r1, [pc, #28]	@ (80023e8 <__NVIC_EnableIRQ+0x38>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	095b      	lsrs	r3, r3, #5
 80023d0:	2001      	movs	r0, #1
 80023d2:	fa00 f202 	lsl.w	r2, r0, r2
 80023d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000e100 	.word	0xe000e100

080023ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	6039      	str	r1, [r7, #0]
 80023f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	db0a      	blt.n	8002416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	490c      	ldr	r1, [pc, #48]	@ (8002438 <__NVIC_SetPriority+0x4c>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	0112      	lsls	r2, r2, #4
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	440b      	add	r3, r1
 8002410:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002414:	e00a      	b.n	800242c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4908      	ldr	r1, [pc, #32]	@ (800243c <__NVIC_SetPriority+0x50>)
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	3b04      	subs	r3, #4
 8002424:	0112      	lsls	r2, r2, #4
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	440b      	add	r3, r1
 800242a:	761a      	strb	r2, [r3, #24]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000e100 	.word	0xe000e100
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	@ 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f1c3 0307 	rsb	r3, r3, #7
 800245a:	2b04      	cmp	r3, #4
 800245c:	bf28      	it	cs
 800245e:	2304      	movcs	r3, #4
 8002460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3304      	adds	r3, #4
 8002466:	2b06      	cmp	r3, #6
 8002468:	d902      	bls.n	8002470 <NVIC_EncodePriority+0x30>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3b03      	subs	r3, #3
 800246e:	e000      	b.n	8002472 <NVIC_EncodePriority+0x32>
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43da      	mvns	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	401a      	ands	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002488:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	43d9      	mvns	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	4313      	orrs	r3, r2
         );
}
 800249a:	4618      	mov	r0, r3
 800249c:	3724      	adds	r7, #36	@ 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7ff ff4c 	bl	800234c <__NVIC_SetPriorityGrouping>
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024ce:	f7ff ff61 	bl	8002394 <__NVIC_GetPriorityGrouping>
 80024d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	68b9      	ldr	r1, [r7, #8]
 80024d8:	6978      	ldr	r0, [r7, #20]
 80024da:	f7ff ffb1 	bl	8002440 <NVIC_EncodePriority>
 80024de:	4602      	mov	r2, r0
 80024e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e4:	4611      	mov	r1, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff ff80 	bl	80023ec <__NVIC_SetPriority>
}
 80024ec:	bf00      	nop
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff ff54 	bl	80023b0 <__NVIC_EnableIRQ>
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002510:	b480      	push	{r7}
 8002512:	b089      	sub	sp, #36	@ 0x24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	e159      	b.n	80027e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800252c:	2201      	movs	r2, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	429a      	cmp	r2, r3
 8002546:	f040 8148 	bne.w	80027da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b01      	cmp	r3, #1
 8002554:	d005      	beq.n	8002562 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800255e:	2b02      	cmp	r3, #2
 8002560:	d130      	bne.n	80025c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	2203      	movs	r2, #3
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002598:	2201      	movs	r2, #1
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 0201 	and.w	r2, r3, #1
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d017      	beq.n	8002600 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d123      	bne.n	8002654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	08da      	lsrs	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3208      	adds	r2, #8
 8002614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	220f      	movs	r2, #15
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	08da      	lsrs	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3208      	adds	r2, #8
 800264e:	69b9      	ldr	r1, [r7, #24]
 8002650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	2203      	movs	r2, #3
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0203 	and.w	r2, r3, #3
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80a2 	beq.w	80027da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	4b57      	ldr	r3, [pc, #348]	@ (80027f8 <HAL_GPIO_Init+0x2e8>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	4a56      	ldr	r2, [pc, #344]	@ (80027f8 <HAL_GPIO_Init+0x2e8>)
 80026a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026a6:	4b54      	ldr	r3, [pc, #336]	@ (80027f8 <HAL_GPIO_Init+0x2e8>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026b2:	4a52      	ldr	r2, [pc, #328]	@ (80027fc <HAL_GPIO_Init+0x2ec>)
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	3302      	adds	r3, #2
 80026ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	220f      	movs	r2, #15
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a49      	ldr	r2, [pc, #292]	@ (8002800 <HAL_GPIO_Init+0x2f0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d019      	beq.n	8002712 <HAL_GPIO_Init+0x202>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a48      	ldr	r2, [pc, #288]	@ (8002804 <HAL_GPIO_Init+0x2f4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d013      	beq.n	800270e <HAL_GPIO_Init+0x1fe>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a47      	ldr	r2, [pc, #284]	@ (8002808 <HAL_GPIO_Init+0x2f8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00d      	beq.n	800270a <HAL_GPIO_Init+0x1fa>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a46      	ldr	r2, [pc, #280]	@ (800280c <HAL_GPIO_Init+0x2fc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d007      	beq.n	8002706 <HAL_GPIO_Init+0x1f6>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a45      	ldr	r2, [pc, #276]	@ (8002810 <HAL_GPIO_Init+0x300>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_GPIO_Init+0x1f2>
 80026fe:	2304      	movs	r3, #4
 8002700:	e008      	b.n	8002714 <HAL_GPIO_Init+0x204>
 8002702:	2307      	movs	r3, #7
 8002704:	e006      	b.n	8002714 <HAL_GPIO_Init+0x204>
 8002706:	2303      	movs	r3, #3
 8002708:	e004      	b.n	8002714 <HAL_GPIO_Init+0x204>
 800270a:	2302      	movs	r3, #2
 800270c:	e002      	b.n	8002714 <HAL_GPIO_Init+0x204>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_GPIO_Init+0x204>
 8002712:	2300      	movs	r3, #0
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	f002 0203 	and.w	r2, r2, #3
 800271a:	0092      	lsls	r2, r2, #2
 800271c:	4093      	lsls	r3, r2
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002724:	4935      	ldr	r1, [pc, #212]	@ (80027fc <HAL_GPIO_Init+0x2ec>)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	3302      	adds	r3, #2
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002732:	4b38      	ldr	r3, [pc, #224]	@ (8002814 <HAL_GPIO_Init+0x304>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002756:	4a2f      	ldr	r2, [pc, #188]	@ (8002814 <HAL_GPIO_Init+0x304>)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800275c:	4b2d      	ldr	r3, [pc, #180]	@ (8002814 <HAL_GPIO_Init+0x304>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002780:	4a24      	ldr	r2, [pc, #144]	@ (8002814 <HAL_GPIO_Init+0x304>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002786:	4b23      	ldr	r3, [pc, #140]	@ (8002814 <HAL_GPIO_Init+0x304>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002814 <HAL_GPIO_Init+0x304>)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027b0:	4b18      	ldr	r3, [pc, #96]	@ (8002814 <HAL_GPIO_Init+0x304>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027d4:	4a0f      	ldr	r2, [pc, #60]	@ (8002814 <HAL_GPIO_Init+0x304>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3301      	adds	r3, #1
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b0f      	cmp	r3, #15
 80027e4:	f67f aea2 	bls.w	800252c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	3724      	adds	r7, #36	@ 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40013800 	.word	0x40013800
 8002800:	40020000 	.word	0x40020000
 8002804:	40020400 	.word	0x40020400
 8002808:	40020800 	.word	0x40020800
 800280c:	40020c00 	.word	0x40020c00
 8002810:	40021000 	.word	0x40021000
 8002814:	40013c00 	.word	0x40013c00

08002818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	807b      	strh	r3, [r7, #2]
 8002824:	4613      	mov	r3, r2
 8002826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002828:	787b      	ldrb	r3, [r7, #1]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282e:	887a      	ldrh	r2, [r7, #2]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002834:	e003      	b.n	800283e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002836:	887b      	ldrh	r3, [r7, #2]
 8002838:	041a      	lsls	r2, r3, #16
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	619a      	str	r2, [r3, #24]
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e12b      	b.n	8002ab6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d106      	bne.n	8002878 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff fa58 	bl	8001d28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2224      	movs	r2, #36	@ 0x24
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800289e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028b0:	f001 fc36 	bl	8004120 <HAL_RCC_GetPCLK1Freq>
 80028b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4a81      	ldr	r2, [pc, #516]	@ (8002ac0 <HAL_I2C_Init+0x274>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d807      	bhi.n	80028d0 <HAL_I2C_Init+0x84>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4a80      	ldr	r2, [pc, #512]	@ (8002ac4 <HAL_I2C_Init+0x278>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	bf94      	ite	ls
 80028c8:	2301      	movls	r3, #1
 80028ca:	2300      	movhi	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	e006      	b.n	80028de <HAL_I2C_Init+0x92>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4a7d      	ldr	r2, [pc, #500]	@ (8002ac8 <HAL_I2C_Init+0x27c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	bf94      	ite	ls
 80028d8:	2301      	movls	r3, #1
 80028da:	2300      	movhi	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e0e7      	b.n	8002ab6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4a78      	ldr	r2, [pc, #480]	@ (8002acc <HAL_I2C_Init+0x280>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	0c9b      	lsrs	r3, r3, #18
 80028f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	430a      	orrs	r2, r1
 8002904:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4a6a      	ldr	r2, [pc, #424]	@ (8002ac0 <HAL_I2C_Init+0x274>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d802      	bhi.n	8002920 <HAL_I2C_Init+0xd4>
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	3301      	adds	r3, #1
 800291e:	e009      	b.n	8002934 <HAL_I2C_Init+0xe8>
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002926:	fb02 f303 	mul.w	r3, r2, r3
 800292a:	4a69      	ldr	r2, [pc, #420]	@ (8002ad0 <HAL_I2C_Init+0x284>)
 800292c:	fba2 2303 	umull	r2, r3, r2, r3
 8002930:	099b      	lsrs	r3, r3, #6
 8002932:	3301      	adds	r3, #1
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	430b      	orrs	r3, r1
 800293a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002946:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	495c      	ldr	r1, [pc, #368]	@ (8002ac0 <HAL_I2C_Init+0x274>)
 8002950:	428b      	cmp	r3, r1
 8002952:	d819      	bhi.n	8002988 <HAL_I2C_Init+0x13c>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1e59      	subs	r1, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002962:	1c59      	adds	r1, r3, #1
 8002964:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002968:	400b      	ands	r3, r1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_I2C_Init+0x138>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1e59      	subs	r1, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	fbb1 f3f3 	udiv	r3, r1, r3
 800297c:	3301      	adds	r3, #1
 800297e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002982:	e051      	b.n	8002a28 <HAL_I2C_Init+0x1dc>
 8002984:	2304      	movs	r3, #4
 8002986:	e04f      	b.n	8002a28 <HAL_I2C_Init+0x1dc>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d111      	bne.n	80029b4 <HAL_I2C_Init+0x168>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	1e58      	subs	r0, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	440b      	add	r3, r1
 800299e:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a2:	3301      	adds	r3, #1
 80029a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bf0c      	ite	eq
 80029ac:	2301      	moveq	r3, #1
 80029ae:	2300      	movne	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	e012      	b.n	80029da <HAL_I2C_Init+0x18e>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	1e58      	subs	r0, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6859      	ldr	r1, [r3, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	0099      	lsls	r1, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ca:	3301      	adds	r3, #1
 80029cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	bf0c      	ite	eq
 80029d4:	2301      	moveq	r3, #1
 80029d6:	2300      	movne	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_I2C_Init+0x196>
 80029de:	2301      	movs	r3, #1
 80029e0:	e022      	b.n	8002a28 <HAL_I2C_Init+0x1dc>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10e      	bne.n	8002a08 <HAL_I2C_Init+0x1bc>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1e58      	subs	r0, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6859      	ldr	r1, [r3, #4]
 80029f2:	460b      	mov	r3, r1
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	440b      	add	r3, r1
 80029f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fc:	3301      	adds	r3, #1
 80029fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a06:	e00f      	b.n	8002a28 <HAL_I2C_Init+0x1dc>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1e58      	subs	r0, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6859      	ldr	r1, [r3, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	0099      	lsls	r1, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	6809      	ldr	r1, [r1, #0]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69da      	ldr	r2, [r3, #28]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6911      	ldr	r1, [r2, #16]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68d2      	ldr	r2, [r2, #12]
 8002a62:	4311      	orrs	r1, r2
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695a      	ldr	r2, [r3, #20]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	000186a0 	.word	0x000186a0
 8002ac4:	001e847f 	.word	0x001e847f
 8002ac8:	003d08ff 	.word	0x003d08ff
 8002acc:	431bde83 	.word	0x431bde83
 8002ad0:	10624dd3 	.word	0x10624dd3

08002ad4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	817b      	strh	r3, [r7, #10]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ae8:	f7ff fc00 	bl	80022ec <HAL_GetTick>
 8002aec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b20      	cmp	r3, #32
 8002af8:	f040 80e0 	bne.w	8002cbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	2319      	movs	r3, #25
 8002b02:	2201      	movs	r2, #1
 8002b04:	4970      	ldr	r1, [pc, #448]	@ (8002cc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 fc64 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b12:	2302      	movs	r3, #2
 8002b14:	e0d3      	b.n	8002cbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_I2C_Master_Transmit+0x50>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e0cc      	b.n	8002cbe <HAL_I2C_Master_Transmit+0x1ea>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d007      	beq.n	8002b4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0201 	orr.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2221      	movs	r2, #33	@ 0x21
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2210      	movs	r2, #16
 8002b66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	893a      	ldrh	r2, [r7, #8]
 8002b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4a50      	ldr	r2, [pc, #320]	@ (8002ccc <HAL_I2C_Master_Transmit+0x1f8>)
 8002b8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b8c:	8979      	ldrh	r1, [r7, #10]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	6a3a      	ldr	r2, [r7, #32]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 face 	bl	8003134 <I2C_MasterRequestWrite>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e08d      	b.n	8002cbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bb8:	e066      	b.n	8002c88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	6a39      	ldr	r1, [r7, #32]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 fd22 	bl	8003608 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00d      	beq.n	8002be6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d107      	bne.n	8002be2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002be0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e06b      	b.n	8002cbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	781a      	ldrb	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d11b      	bne.n	8002c5c <HAL_I2C_Master_Transmit+0x188>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d017      	beq.n	8002c5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	6a39      	ldr	r1, [r7, #32]
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 fd19 	bl	8003698 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00d      	beq.n	8002c88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d107      	bne.n	8002c84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e01a      	b.n	8002cbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d194      	bne.n	8002bba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	e000      	b.n	8002cbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cbc:	2302      	movs	r3, #2
  }
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	00100002 	.word	0x00100002
 8002ccc:	ffff0000 	.word	0xffff0000

08002cd0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08c      	sub	sp, #48	@ 0x30
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	607a      	str	r2, [r7, #4]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	460b      	mov	r3, r1
 8002cde:	817b      	strh	r3, [r7, #10]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ce4:	f7ff fb02 	bl	80022ec <HAL_GetTick>
 8002ce8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	f040 8217 	bne.w	8003126 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	2319      	movs	r3, #25
 8002cfe:	2201      	movs	r2, #1
 8002d00:	497c      	ldr	r1, [pc, #496]	@ (8002ef4 <HAL_I2C_Master_Receive+0x224>)
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 fb66 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e20a      	b.n	8003128 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_I2C_Master_Receive+0x50>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e203      	b.n	8003128 <HAL_I2C_Master_Receive+0x458>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d007      	beq.n	8002d46 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f042 0201 	orr.w	r2, r2, #1
 8002d44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2222      	movs	r2, #34	@ 0x22
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2210      	movs	r2, #16
 8002d62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	893a      	ldrh	r2, [r7, #8]
 8002d76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4a5c      	ldr	r2, [pc, #368]	@ (8002ef8 <HAL_I2C_Master_Receive+0x228>)
 8002d86:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d88:	8979      	ldrh	r1, [r7, #10]
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 fa52 	bl	8003238 <I2C_MasterRequestRead>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e1c4      	b.n	8003128 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d113      	bne.n	8002dce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002da6:	2300      	movs	r3, #0
 8002da8:	623b      	str	r3, [r7, #32]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	623b      	str	r3, [r7, #32]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	623b      	str	r3, [r7, #32]
 8002dba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	e198      	b.n	8003100 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d11b      	bne.n	8002e0e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002de4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	61fb      	str	r3, [r7, #28]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	e178      	b.n	8003100 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d11b      	bne.n	8002e4e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e36:	2300      	movs	r3, #0
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	e158      	b.n	8003100 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e74:	e144      	b.n	8003100 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	f200 80f1 	bhi.w	8003062 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d123      	bne.n	8002ed0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 fc4b 	bl	8003728 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e145      	b.n	8003128 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691a      	ldr	r2, [r3, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ece:	e117      	b.n	8003100 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d14e      	bne.n	8002f76 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ede:	2200      	movs	r2, #0
 8002ee0:	4906      	ldr	r1, [pc, #24]	@ (8002efc <HAL_I2C_Master_Receive+0x22c>)
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 fa76 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d008      	beq.n	8002f00 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e11a      	b.n	8003128 <HAL_I2C_Master_Receive+0x458>
 8002ef2:	bf00      	nop
 8002ef4:	00100002 	.word	0x00100002
 8002ef8:	ffff0000 	.word	0xffff0000
 8002efc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f74:	e0c4      	b.n	8003100 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	496c      	ldr	r1, [pc, #432]	@ (8003130 <HAL_I2C_Master_Receive+0x460>)
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 fa27 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0cb      	b.n	8003128 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd8:	2200      	movs	r2, #0
 8002fda:	4955      	ldr	r1, [pc, #340]	@ (8003130 <HAL_I2C_Master_Receive+0x460>)
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 f9f9 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e09d      	b.n	8003128 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ffa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300e:	1c5a      	adds	r2, r3, #1
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003060:	e04e      	b.n	8003100 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003064:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 fb5e 	bl	8003728 <I2C_WaitOnRXNEFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e058      	b.n	8003128 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d124      	bne.n	8003100 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d107      	bne.n	80030ce <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030cc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003104:	2b00      	cmp	r3, #0
 8003106:	f47f aeb6 	bne.w	8002e76 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	e000      	b.n	8003128 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003126:	2302      	movs	r3, #2
  }
}
 8003128:	4618      	mov	r0, r3
 800312a:	3728      	adds	r7, #40	@ 0x28
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	00010004 	.word	0x00010004

08003134 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af02      	add	r7, sp, #8
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	460b      	mov	r3, r1
 8003142:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003148:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2b08      	cmp	r3, #8
 800314e:	d006      	beq.n	800315e <I2C_MasterRequestWrite+0x2a>
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d003      	beq.n	800315e <I2C_MasterRequestWrite+0x2a>
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800315c:	d108      	bne.n	8003170 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	e00b      	b.n	8003188 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003174:	2b12      	cmp	r3, #18
 8003176:	d107      	bne.n	8003188 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003186:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 f91d 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00d      	beq.n	80031bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ae:	d103      	bne.n	80031b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e035      	b.n	8003228 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031c4:	d108      	bne.n	80031d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031c6:	897b      	ldrh	r3, [r7, #10]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031d4:	611a      	str	r2, [r3, #16]
 80031d6:	e01b      	b.n	8003210 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031d8:	897b      	ldrh	r3, [r7, #10]
 80031da:	11db      	asrs	r3, r3, #7
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	f003 0306 	and.w	r3, r3, #6
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	f063 030f 	orn	r3, r3, #15
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	490e      	ldr	r1, [pc, #56]	@ (8003230 <I2C_MasterRequestWrite+0xfc>)
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f966 	bl	80034c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e010      	b.n	8003228 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003206:	897b      	ldrh	r3, [r7, #10]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	4907      	ldr	r1, [pc, #28]	@ (8003234 <I2C_MasterRequestWrite+0x100>)
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 f956 	bl	80034c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	00010008 	.word	0x00010008
 8003234:	00010002 	.word	0x00010002

08003238 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	607a      	str	r2, [r7, #4]
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	460b      	mov	r3, r1
 8003246:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800325c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b08      	cmp	r3, #8
 8003262:	d006      	beq.n	8003272 <I2C_MasterRequestRead+0x3a>
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d003      	beq.n	8003272 <I2C_MasterRequestRead+0x3a>
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003270:	d108      	bne.n	8003284 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	e00b      	b.n	800329c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003288:	2b11      	cmp	r3, #17
 800328a:	d107      	bne.n	800329c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800329a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 f893 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00d      	beq.n	80032d0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032c2:	d103      	bne.n	80032cc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e079      	b.n	80033c4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032d8:	d108      	bne.n	80032ec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032da:	897b      	ldrh	r3, [r7, #10]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	611a      	str	r2, [r3, #16]
 80032ea:	e05f      	b.n	80033ac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032ec:	897b      	ldrh	r3, [r7, #10]
 80032ee:	11db      	asrs	r3, r3, #7
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f003 0306 	and.w	r3, r3, #6
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f063 030f 	orn	r3, r3, #15
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	4930      	ldr	r1, [pc, #192]	@ (80033cc <I2C_MasterRequestRead+0x194>)
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f8dc 	bl	80034c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e054      	b.n	80033c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800331a:	897b      	ldrh	r3, [r7, #10]
 800331c:	b2da      	uxtb	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	4929      	ldr	r1, [pc, #164]	@ (80033d0 <I2C_MasterRequestRead+0x198>)
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f8cc 	bl	80034c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e044      	b.n	80033c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800333a:	2300      	movs	r3, #0
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800335e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f831 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00d      	beq.n	8003394 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003382:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003386:	d103      	bne.n	8003390 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800338e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e017      	b.n	80033c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003394:	897b      	ldrh	r3, [r7, #10]
 8003396:	11db      	asrs	r3, r3, #7
 8003398:	b2db      	uxtb	r3, r3
 800339a:	f003 0306 	and.w	r3, r3, #6
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	f063 030e 	orn	r3, r3, #14
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	4907      	ldr	r1, [pc, #28]	@ (80033d0 <I2C_MasterRequestRead+0x198>)
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f888 	bl	80034c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	00010008 	.word	0x00010008
 80033d0:	00010002 	.word	0x00010002

080033d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	4613      	mov	r3, r2
 80033e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033e4:	e048      	b.n	8003478 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033ec:	d044      	beq.n	8003478 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ee:	f7fe ff7d 	bl	80022ec <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d302      	bcc.n	8003404 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d139      	bne.n	8003478 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	0c1b      	lsrs	r3, r3, #16
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b01      	cmp	r3, #1
 800340c:	d10d      	bne.n	800342a <I2C_WaitOnFlagUntilTimeout+0x56>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	43da      	mvns	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	4013      	ands	r3, r2
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf0c      	ite	eq
 8003420:	2301      	moveq	r3, #1
 8003422:	2300      	movne	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	461a      	mov	r2, r3
 8003428:	e00c      	b.n	8003444 <I2C_WaitOnFlagUntilTimeout+0x70>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	43da      	mvns	r2, r3
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	4013      	ands	r3, r2
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	bf0c      	ite	eq
 800343c:	2301      	moveq	r3, #1
 800343e:	2300      	movne	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	461a      	mov	r2, r3
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	429a      	cmp	r2, r3
 8003448:	d116      	bne.n	8003478 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	f043 0220 	orr.w	r2, r3, #32
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e023      	b.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	0c1b      	lsrs	r3, r3, #16
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b01      	cmp	r3, #1
 8003480:	d10d      	bne.n	800349e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	43da      	mvns	r2, r3
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	4013      	ands	r3, r2
 800348e:	b29b      	uxth	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	bf0c      	ite	eq
 8003494:	2301      	moveq	r3, #1
 8003496:	2300      	movne	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	e00c      	b.n	80034b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	43da      	mvns	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4013      	ands	r3, r2
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	bf0c      	ite	eq
 80034b0:	2301      	moveq	r3, #1
 80034b2:	2300      	movne	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d093      	beq.n	80033e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
 80034d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034d6:	e071      	b.n	80035bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034e6:	d123      	bne.n	8003530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003500:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351c:	f043 0204 	orr.w	r2, r3, #4
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e067      	b.n	8003600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003536:	d041      	beq.n	80035bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003538:	f7fe fed8 	bl	80022ec <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	429a      	cmp	r2, r3
 8003546:	d302      	bcc.n	800354e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d136      	bne.n	80035bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	0c1b      	lsrs	r3, r3, #16
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	d10c      	bne.n	8003572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	43da      	mvns	r2, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	4013      	ands	r3, r2
 8003564:	b29b      	uxth	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	bf14      	ite	ne
 800356a:	2301      	movne	r3, #1
 800356c:	2300      	moveq	r3, #0
 800356e:	b2db      	uxtb	r3, r3
 8003570:	e00b      	b.n	800358a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	43da      	mvns	r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	4013      	ands	r3, r2
 800357e:	b29b      	uxth	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf14      	ite	ne
 8003584:	2301      	movne	r3, #1
 8003586:	2300      	moveq	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d016      	beq.n	80035bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	f043 0220 	orr.w	r2, r3, #32
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e021      	b.n	8003600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	0c1b      	lsrs	r3, r3, #16
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d10c      	bne.n	80035e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	43da      	mvns	r2, r3
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	4013      	ands	r3, r2
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf14      	ite	ne
 80035d8:	2301      	movne	r3, #1
 80035da:	2300      	moveq	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	e00b      	b.n	80035f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	43da      	mvns	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4013      	ands	r3, r2
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	bf14      	ite	ne
 80035f2:	2301      	movne	r3, #1
 80035f4:	2300      	moveq	r3, #0
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f47f af6d 	bne.w	80034d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003614:	e034      	b.n	8003680 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f8e3 	bl	80037e2 <I2C_IsAcknowledgeFailed>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e034      	b.n	8003690 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800362c:	d028      	beq.n	8003680 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362e:	f7fe fe5d 	bl	80022ec <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	429a      	cmp	r2, r3
 800363c:	d302      	bcc.n	8003644 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d11d      	bne.n	8003680 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364e:	2b80      	cmp	r3, #128	@ 0x80
 8003650:	d016      	beq.n	8003680 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366c:	f043 0220 	orr.w	r2, r3, #32
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e007      	b.n	8003690 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800368a:	2b80      	cmp	r3, #128	@ 0x80
 800368c:	d1c3      	bne.n	8003616 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036a4:	e034      	b.n	8003710 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 f89b 	bl	80037e2 <I2C_IsAcknowledgeFailed>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e034      	b.n	8003720 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036bc:	d028      	beq.n	8003710 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036be:	f7fe fe15 	bl	80022ec <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d302      	bcc.n	80036d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d11d      	bne.n	8003710 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d016      	beq.n	8003710 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	f043 0220 	orr.w	r2, r3, #32
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e007      	b.n	8003720 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b04      	cmp	r3, #4
 800371c:	d1c3      	bne.n	80036a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003734:	e049      	b.n	80037ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	f003 0310 	and.w	r3, r3, #16
 8003740:	2b10      	cmp	r3, #16
 8003742:	d119      	bne.n	8003778 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f06f 0210 	mvn.w	r2, #16
 800374c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e030      	b.n	80037da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003778:	f7fe fdb8 	bl	80022ec <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	429a      	cmp	r2, r3
 8003786:	d302      	bcc.n	800378e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d11d      	bne.n	80037ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003798:	2b40      	cmp	r3, #64	@ 0x40
 800379a:	d016      	beq.n	80037ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b6:	f043 0220 	orr.w	r2, r3, #32
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e007      	b.n	80037da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d4:	2b40      	cmp	r3, #64	@ 0x40
 80037d6:	d1ae      	bne.n	8003736 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037f8:	d11b      	bne.n	8003832 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003802:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2220      	movs	r2, #32
 800380e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	f043 0204 	orr.w	r2, r3, #4
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e267      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d075      	beq.n	800394a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800385e:	4b88      	ldr	r3, [pc, #544]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b04      	cmp	r3, #4
 8003868:	d00c      	beq.n	8003884 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800386a:	4b85      	ldr	r3, [pc, #532]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003872:	2b08      	cmp	r3, #8
 8003874:	d112      	bne.n	800389c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003876:	4b82      	ldr	r3, [pc, #520]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800387e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003882:	d10b      	bne.n	800389c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003884:	4b7e      	ldr	r3, [pc, #504]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d05b      	beq.n	8003948 <HAL_RCC_OscConfig+0x108>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d157      	bne.n	8003948 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e242      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038a4:	d106      	bne.n	80038b4 <HAL_RCC_OscConfig+0x74>
 80038a6:	4b76      	ldr	r3, [pc, #472]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a75      	ldr	r2, [pc, #468]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	e01d      	b.n	80038f0 <HAL_RCC_OscConfig+0xb0>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x98>
 80038be:	4b70      	ldr	r3, [pc, #448]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a6f      	ldr	r2, [pc, #444]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a6c      	ldr	r2, [pc, #432]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e00b      	b.n	80038f0 <HAL_RCC_OscConfig+0xb0>
 80038d8:	4b69      	ldr	r3, [pc, #420]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a68      	ldr	r2, [pc, #416]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	4b66      	ldr	r3, [pc, #408]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a65      	ldr	r2, [pc, #404]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80038ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d013      	beq.n	8003920 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fe fcf8 	bl	80022ec <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003900:	f7fe fcf4 	bl	80022ec <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b64      	cmp	r3, #100	@ 0x64
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e207      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	4b5b      	ldr	r3, [pc, #364]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0xc0>
 800391e:	e014      	b.n	800394a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fe fce4 	bl	80022ec <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003928:	f7fe fce0 	bl	80022ec <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	@ 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e1f3      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393a:	4b51      	ldr	r3, [pc, #324]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0xe8>
 8003946:	e000      	b.n	800394a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d063      	beq.n	8003a1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003956:	4b4a      	ldr	r3, [pc, #296]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003962:	4b47      	ldr	r3, [pc, #284]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800396a:	2b08      	cmp	r3, #8
 800396c:	d11c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800396e:	4b44      	ldr	r3, [pc, #272]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d116      	bne.n	80039a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397a:	4b41      	ldr	r3, [pc, #260]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <HAL_RCC_OscConfig+0x152>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d001      	beq.n	8003992 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e1c7      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003992:	4b3b      	ldr	r3, [pc, #236]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4937      	ldr	r1, [pc, #220]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a6:	e03a      	b.n	8003a1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d020      	beq.n	80039f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b0:	4b34      	ldr	r3, [pc, #208]	@ (8003a84 <HAL_RCC_OscConfig+0x244>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b6:	f7fe fc99 	bl	80022ec <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039be:	f7fe fc95 	bl	80022ec <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e1a8      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039dc:	4b28      	ldr	r3, [pc, #160]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4925      	ldr	r1, [pc, #148]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	600b      	str	r3, [r1, #0]
 80039f0:	e015      	b.n	8003a1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f2:	4b24      	ldr	r3, [pc, #144]	@ (8003a84 <HAL_RCC_OscConfig+0x244>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fe fc78 	bl	80022ec <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a00:	f7fe fc74 	bl	80022ec <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e187      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a12:	4b1b      	ldr	r3, [pc, #108]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d036      	beq.n	8003a98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d016      	beq.n	8003a60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a32:	4b15      	ldr	r3, [pc, #84]	@ (8003a88 <HAL_RCC_OscConfig+0x248>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a38:	f7fe fc58 	bl	80022ec <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a40:	f7fe fc54 	bl	80022ec <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e167      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a52:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <HAL_RCC_OscConfig+0x240>)
 8003a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x200>
 8003a5e:	e01b      	b.n	8003a98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a60:	4b09      	ldr	r3, [pc, #36]	@ (8003a88 <HAL_RCC_OscConfig+0x248>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a66:	f7fe fc41 	bl	80022ec <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a6c:	e00e      	b.n	8003a8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a6e:	f7fe fc3d 	bl	80022ec <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d907      	bls.n	8003a8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e150      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
 8003a80:	40023800 	.word	0x40023800
 8003a84:	42470000 	.word	0x42470000
 8003a88:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8c:	4b88      	ldr	r3, [pc, #544]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1ea      	bne.n	8003a6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8097 	beq.w	8003bd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aaa:	4b81      	ldr	r3, [pc, #516]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10f      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	4b7d      	ldr	r3, [pc, #500]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	4a7c      	ldr	r2, [pc, #496]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ac6:	4b7a      	ldr	r3, [pc, #488]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad6:	4b77      	ldr	r3, [pc, #476]	@ (8003cb4 <HAL_RCC_OscConfig+0x474>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d118      	bne.n	8003b14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae2:	4b74      	ldr	r3, [pc, #464]	@ (8003cb4 <HAL_RCC_OscConfig+0x474>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a73      	ldr	r2, [pc, #460]	@ (8003cb4 <HAL_RCC_OscConfig+0x474>)
 8003ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aee:	f7fe fbfd 	bl	80022ec <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af6:	f7fe fbf9 	bl	80022ec <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e10c      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b08:	4b6a      	ldr	r3, [pc, #424]	@ (8003cb4 <HAL_RCC_OscConfig+0x474>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d106      	bne.n	8003b2a <HAL_RCC_OscConfig+0x2ea>
 8003b1c:	4b64      	ldr	r3, [pc, #400]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b20:	4a63      	ldr	r2, [pc, #396]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b28:	e01c      	b.n	8003b64 <HAL_RCC_OscConfig+0x324>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b05      	cmp	r3, #5
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x30c>
 8003b32:	4b5f      	ldr	r3, [pc, #380]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b36:	4a5e      	ldr	r2, [pc, #376]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b3e:	4b5c      	ldr	r3, [pc, #368]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b42:	4a5b      	ldr	r2, [pc, #364]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b4a:	e00b      	b.n	8003b64 <HAL_RCC_OscConfig+0x324>
 8003b4c:	4b58      	ldr	r3, [pc, #352]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b50:	4a57      	ldr	r2, [pc, #348]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b58:	4b55      	ldr	r3, [pc, #340]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5c:	4a54      	ldr	r2, [pc, #336]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b5e:	f023 0304 	bic.w	r3, r3, #4
 8003b62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d015      	beq.n	8003b98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6c:	f7fe fbbe 	bl	80022ec <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b74:	f7fe fbba 	bl	80022ec <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e0cb      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8a:	4b49      	ldr	r3, [pc, #292]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0ee      	beq.n	8003b74 <HAL_RCC_OscConfig+0x334>
 8003b96:	e014      	b.n	8003bc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b98:	f7fe fba8 	bl	80022ec <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba0:	f7fe fba4 	bl	80022ec <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e0b5      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1ee      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d105      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc8:	4b39      	ldr	r3, [pc, #228]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bcc:	4a38      	ldr	r2, [pc, #224]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80a1 	beq.w	8003d20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bde:	4b34      	ldr	r3, [pc, #208]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 030c 	and.w	r3, r3, #12
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d05c      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d141      	bne.n	8003c76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf2:	4b31      	ldr	r3, [pc, #196]	@ (8003cb8 <HAL_RCC_OscConfig+0x478>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7fe fb78 	bl	80022ec <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c00:	f7fe fb74 	bl	80022ec <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e087      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c12:	4b27      	ldr	r3, [pc, #156]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69da      	ldr	r2, [r3, #28]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2c:	019b      	lsls	r3, r3, #6
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c34:	085b      	lsrs	r3, r3, #1
 8003c36:	3b01      	subs	r3, #1
 8003c38:	041b      	lsls	r3, r3, #16
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c40:	061b      	lsls	r3, r3, #24
 8003c42:	491b      	ldr	r1, [pc, #108]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c48:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb8 <HAL_RCC_OscConfig+0x478>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4e:	f7fe fb4d 	bl	80022ec <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c56:	f7fe fb49 	bl	80022ec <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e05c      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c68:	4b11      	ldr	r3, [pc, #68]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x416>
 8003c74:	e054      	b.n	8003d20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c76:	4b10      	ldr	r3, [pc, #64]	@ (8003cb8 <HAL_RCC_OscConfig+0x478>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7c:	f7fe fb36 	bl	80022ec <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c84:	f7fe fb32 	bl	80022ec <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e045      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c96:	4b06      	ldr	r3, [pc, #24]	@ (8003cb0 <HAL_RCC_OscConfig+0x470>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x444>
 8003ca2:	e03d      	b.n	8003d20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d107      	bne.n	8003cbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e038      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	40007000 	.word	0x40007000
 8003cb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d2c <HAL_RCC_OscConfig+0x4ec>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d028      	beq.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d121      	bne.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d11a      	bne.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cec:	4013      	ands	r3, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d111      	bne.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d02:	085b      	lsrs	r3, r3, #1
 8003d04:	3b01      	subs	r3, #1
 8003d06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d107      	bne.n	8003d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40023800 	.word	0x40023800

08003d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0cc      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d44:	4b68      	ldr	r3, [pc, #416]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d90c      	bls.n	8003d6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d52:	4b65      	ldr	r3, [pc, #404]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5a:	4b63      	ldr	r3, [pc, #396]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d001      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0b8      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d020      	beq.n	8003dba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d84:	4b59      	ldr	r3, [pc, #356]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4a58      	ldr	r2, [pc, #352]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d9c:	4b53      	ldr	r3, [pc, #332]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	4a52      	ldr	r2, [pc, #328]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003da6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da8:	4b50      	ldr	r3, [pc, #320]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	494d      	ldr	r1, [pc, #308]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d044      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d107      	bne.n	8003dde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dce:	4b47      	ldr	r3, [pc, #284]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d119      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e07f      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d003      	beq.n	8003dee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d107      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dee:	4b3f      	ldr	r3, [pc, #252]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d109      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e06f      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e067      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e0e:	4b37      	ldr	r3, [pc, #220]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f023 0203 	bic.w	r2, r3, #3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	4934      	ldr	r1, [pc, #208]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e20:	f7fe fa64 	bl	80022ec <HAL_GetTick>
 8003e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	e00a      	b.n	8003e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e28:	f7fe fa60 	bl	80022ec <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e04f      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 020c 	and.w	r2, r3, #12
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d1eb      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e50:	4b25      	ldr	r3, [pc, #148]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d20c      	bcs.n	8003e78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5e:	4b22      	ldr	r3, [pc, #136]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e66:	4b20      	ldr	r3, [pc, #128]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d001      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e032      	b.n	8003ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e84:	4b19      	ldr	r3, [pc, #100]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4916      	ldr	r1, [pc, #88]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ea2:	4b12      	ldr	r3, [pc, #72]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	490e      	ldr	r1, [pc, #56]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eb6:	f000 f821 	bl	8003efc <HAL_RCC_GetSysClockFreq>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8003eec <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	091b      	lsrs	r3, r3, #4
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	490a      	ldr	r1, [pc, #40]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec8:	5ccb      	ldrb	r3, [r1, r3]
 8003eca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ece:	4a09      	ldr	r2, [pc, #36]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ed2:	4b09      	ldr	r3, [pc, #36]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe f810 	bl	8001efc <HAL_InitTick>

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40023c00 	.word	0x40023c00
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	0800b1e0 	.word	0x0800b1e0
 8003ef4:	20000000 	.word	0x20000000
 8003ef8:	20000004 	.word	0x20000004

08003efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f00:	b094      	sub	sp, #80	@ 0x50
 8003f02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f14:	4b79      	ldr	r3, [pc, #484]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 030c 	and.w	r3, r3, #12
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d00d      	beq.n	8003f3c <HAL_RCC_GetSysClockFreq+0x40>
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	f200 80e1 	bhi.w	80040e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0x34>
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d003      	beq.n	8003f36 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f2e:	e0db      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f30:	4b73      	ldr	r3, [pc, #460]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f34:	e0db      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f36:	4b73      	ldr	r3, [pc, #460]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f3a:	e0d8      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f3c:	4b6f      	ldr	r3, [pc, #444]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f44:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f46:	4b6d      	ldr	r3, [pc, #436]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d063      	beq.n	800401a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f52:	4b6a      	ldr	r3, [pc, #424]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	099b      	lsrs	r3, r3, #6
 8003f58:	2200      	movs	r2, #0
 8003f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f64:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f66:	2300      	movs	r3, #0
 8003f68:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f6e:	4622      	mov	r2, r4
 8003f70:	462b      	mov	r3, r5
 8003f72:	f04f 0000 	mov.w	r0, #0
 8003f76:	f04f 0100 	mov.w	r1, #0
 8003f7a:	0159      	lsls	r1, r3, #5
 8003f7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f80:	0150      	lsls	r0, r2, #5
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4621      	mov	r1, r4
 8003f88:	1a51      	subs	r1, r2, r1
 8003f8a:	6139      	str	r1, [r7, #16]
 8003f8c:	4629      	mov	r1, r5
 8003f8e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fa0:	4659      	mov	r1, fp
 8003fa2:	018b      	lsls	r3, r1, #6
 8003fa4:	4651      	mov	r1, sl
 8003fa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003faa:	4651      	mov	r1, sl
 8003fac:	018a      	lsls	r2, r1, #6
 8003fae:	4651      	mov	r1, sl
 8003fb0:	ebb2 0801 	subs.w	r8, r2, r1
 8003fb4:	4659      	mov	r1, fp
 8003fb6:	eb63 0901 	sbc.w	r9, r3, r1
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fce:	4690      	mov	r8, r2
 8003fd0:	4699      	mov	r9, r3
 8003fd2:	4623      	mov	r3, r4
 8003fd4:	eb18 0303 	adds.w	r3, r8, r3
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	462b      	mov	r3, r5
 8003fdc:	eb49 0303 	adc.w	r3, r9, r3
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fee:	4629      	mov	r1, r5
 8003ff0:	024b      	lsls	r3, r1, #9
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	024a      	lsls	r2, r1, #9
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4619      	mov	r1, r3
 8004000:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004002:	2200      	movs	r2, #0
 8004004:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004006:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004008:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800400c:	f7fc fe44 	bl	8000c98 <__aeabi_uldivmod>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4613      	mov	r3, r2
 8004016:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004018:	e058      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800401a:	4b38      	ldr	r3, [pc, #224]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	099b      	lsrs	r3, r3, #6
 8004020:	2200      	movs	r2, #0
 8004022:	4618      	mov	r0, r3
 8004024:	4611      	mov	r1, r2
 8004026:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800402a:	623b      	str	r3, [r7, #32]
 800402c:	2300      	movs	r3, #0
 800402e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004030:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004034:	4642      	mov	r2, r8
 8004036:	464b      	mov	r3, r9
 8004038:	f04f 0000 	mov.w	r0, #0
 800403c:	f04f 0100 	mov.w	r1, #0
 8004040:	0159      	lsls	r1, r3, #5
 8004042:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004046:	0150      	lsls	r0, r2, #5
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4641      	mov	r1, r8
 800404e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004052:	4649      	mov	r1, r9
 8004054:	eb63 0b01 	sbc.w	fp, r3, r1
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004064:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004068:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800406c:	ebb2 040a 	subs.w	r4, r2, sl
 8004070:	eb63 050b 	sbc.w	r5, r3, fp
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	00eb      	lsls	r3, r5, #3
 800407e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004082:	00e2      	lsls	r2, r4, #3
 8004084:	4614      	mov	r4, r2
 8004086:	461d      	mov	r5, r3
 8004088:	4643      	mov	r3, r8
 800408a:	18e3      	adds	r3, r4, r3
 800408c:	603b      	str	r3, [r7, #0]
 800408e:	464b      	mov	r3, r9
 8004090:	eb45 0303 	adc.w	r3, r5, r3
 8004094:	607b      	str	r3, [r7, #4]
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040a2:	4629      	mov	r1, r5
 80040a4:	028b      	lsls	r3, r1, #10
 80040a6:	4621      	mov	r1, r4
 80040a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040ac:	4621      	mov	r1, r4
 80040ae:	028a      	lsls	r2, r1, #10
 80040b0:	4610      	mov	r0, r2
 80040b2:	4619      	mov	r1, r3
 80040b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040b6:	2200      	movs	r2, #0
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	61fa      	str	r2, [r7, #28]
 80040bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040c0:	f7fc fdea 	bl	8000c98 <__aeabi_uldivmod>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4613      	mov	r3, r2
 80040ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040cc:	4b0b      	ldr	r3, [pc, #44]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x200>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	0c1b      	lsrs	r3, r3, #16
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	3301      	adds	r3, #1
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80040dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040e6:	e002      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040e8:	4b05      	ldr	r3, [pc, #20]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x204>)
 80040ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3750      	adds	r7, #80	@ 0x50
 80040f4:	46bd      	mov	sp, r7
 80040f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040fa:	bf00      	nop
 80040fc:	40023800 	.word	0x40023800
 8004100:	00f42400 	.word	0x00f42400
 8004104:	007a1200 	.word	0x007a1200

08004108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800410c:	4b03      	ldr	r3, [pc, #12]	@ (800411c <HAL_RCC_GetHCLKFreq+0x14>)
 800410e:	681b      	ldr	r3, [r3, #0]
}
 8004110:	4618      	mov	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20000000 	.word	0x20000000

08004120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004124:	f7ff fff0 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 8004128:	4602      	mov	r2, r0
 800412a:	4b05      	ldr	r3, [pc, #20]	@ (8004140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	0a9b      	lsrs	r3, r3, #10
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	4903      	ldr	r1, [pc, #12]	@ (8004144 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004136:	5ccb      	ldrb	r3, [r1, r3]
 8004138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800413c:	4618      	mov	r0, r3
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40023800 	.word	0x40023800
 8004144:	0800b1f0 	.word	0x0800b1f0

08004148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800414c:	f7ff ffdc 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 8004150:	4602      	mov	r2, r0
 8004152:	4b05      	ldr	r3, [pc, #20]	@ (8004168 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	0b5b      	lsrs	r3, r3, #13
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	4903      	ldr	r1, [pc, #12]	@ (800416c <HAL_RCC_GetPCLK2Freq+0x24>)
 800415e:	5ccb      	ldrb	r3, [r1, r3]
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40023800 	.word	0x40023800
 800416c:	0800b1f0 	.word	0x0800b1f0

08004170 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	220f      	movs	r2, #15
 800417e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004180:	4b12      	ldr	r3, [pc, #72]	@ (80041cc <HAL_RCC_GetClockConfig+0x5c>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 0203 	and.w	r2, r3, #3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800418c:	4b0f      	ldr	r3, [pc, #60]	@ (80041cc <HAL_RCC_GetClockConfig+0x5c>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004198:	4b0c      	ldr	r3, [pc, #48]	@ (80041cc <HAL_RCC_GetClockConfig+0x5c>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80041a4:	4b09      	ldr	r3, [pc, #36]	@ (80041cc <HAL_RCC_GetClockConfig+0x5c>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	08db      	lsrs	r3, r3, #3
 80041aa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80041b2:	4b07      	ldr	r3, [pc, #28]	@ (80041d0 <HAL_RCC_GetClockConfig+0x60>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0207 	and.w	r2, r3, #7
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	601a      	str	r2, [r3, #0]
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40023800 	.word	0x40023800
 80041d0:	40023c00 	.word	0x40023c00

080041d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e041      	b.n	800426a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fd fddc 	bl	8001db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3304      	adds	r3, #4
 8004210:	4619      	mov	r1, r3
 8004212:	4610      	mov	r0, r2
 8004214:	f000 fa70 	bl	80046f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b01      	cmp	r3, #1
 8004286:	d001      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e044      	b.n	8004316 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a1e      	ldr	r2, [pc, #120]	@ (8004324 <HAL_TIM_Base_Start_IT+0xb0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d018      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0x6c>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b6:	d013      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0x6c>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a1a      	ldr	r2, [pc, #104]	@ (8004328 <HAL_TIM_Base_Start_IT+0xb4>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00e      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0x6c>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a19      	ldr	r2, [pc, #100]	@ (800432c <HAL_TIM_Base_Start_IT+0xb8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d009      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0x6c>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a17      	ldr	r2, [pc, #92]	@ (8004330 <HAL_TIM_Base_Start_IT+0xbc>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d004      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0x6c>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a16      	ldr	r2, [pc, #88]	@ (8004334 <HAL_TIM_Base_Start_IT+0xc0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d111      	bne.n	8004304 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b06      	cmp	r3, #6
 80042f0:	d010      	beq.n	8004314 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0201 	orr.w	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004302:	e007      	b.n	8004314 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40010000 	.word	0x40010000
 8004328:	40000400 	.word	0x40000400
 800432c:	40000800 	.word	0x40000800
 8004330:	40000c00 	.word	0x40000c00
 8004334:	40014000 	.word	0x40014000

08004338 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d020      	beq.n	800439c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d01b      	beq.n	800439c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f06f 0202 	mvn.w	r2, #2
 800436c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f999 	bl	80046ba <HAL_TIM_IC_CaptureCallback>
 8004388:	e005      	b.n	8004396 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f98b 	bl	80046a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f99c 	bl	80046ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d020      	beq.n	80043e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d01b      	beq.n	80043e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f06f 0204 	mvn.w	r2, #4
 80043b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2202      	movs	r2, #2
 80043be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f973 	bl	80046ba <HAL_TIM_IC_CaptureCallback>
 80043d4:	e005      	b.n	80043e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f965 	bl	80046a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f976 	bl	80046ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d020      	beq.n	8004434 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d01b      	beq.n	8004434 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f06f 0208 	mvn.w	r2, #8
 8004404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2204      	movs	r2, #4
 800440a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f94d 	bl	80046ba <HAL_TIM_IC_CaptureCallback>
 8004420:	e005      	b.n	800442e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f93f 	bl	80046a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f950 	bl	80046ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f003 0310 	and.w	r3, r3, #16
 800443a:	2b00      	cmp	r3, #0
 800443c:	d020      	beq.n	8004480 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01b      	beq.n	8004480 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0210 	mvn.w	r2, #16
 8004450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2208      	movs	r2, #8
 8004456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f927 	bl	80046ba <HAL_TIM_IC_CaptureCallback>
 800446c:	e005      	b.n	800447a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f919 	bl	80046a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f92a 	bl	80046ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00c      	beq.n	80044a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d007      	beq.n	80044a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0201 	mvn.w	r2, #1
 800449c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fd fbfe 	bl	8001ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00c      	beq.n	80044c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d007      	beq.n	80044c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80044c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fab6 	bl	8004a34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00c      	beq.n	80044ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d007      	beq.n	80044ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f8fb 	bl	80046e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00c      	beq.n	8004510 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d007      	beq.n	8004510 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0220 	mvn.w	r2, #32
 8004508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fa88 	bl	8004a20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004510:	bf00      	nop
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <HAL_TIM_ConfigClockSource+0x1c>
 8004530:	2302      	movs	r3, #2
 8004532:	e0b4      	b.n	800469e <HAL_TIM_ConfigClockSource+0x186>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800455a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800456c:	d03e      	beq.n	80045ec <HAL_TIM_ConfigClockSource+0xd4>
 800456e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004572:	f200 8087 	bhi.w	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 8004576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800457a:	f000 8086 	beq.w	800468a <HAL_TIM_ConfigClockSource+0x172>
 800457e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004582:	d87f      	bhi.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 8004584:	2b70      	cmp	r3, #112	@ 0x70
 8004586:	d01a      	beq.n	80045be <HAL_TIM_ConfigClockSource+0xa6>
 8004588:	2b70      	cmp	r3, #112	@ 0x70
 800458a:	d87b      	bhi.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 800458c:	2b60      	cmp	r3, #96	@ 0x60
 800458e:	d050      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0x11a>
 8004590:	2b60      	cmp	r3, #96	@ 0x60
 8004592:	d877      	bhi.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 8004594:	2b50      	cmp	r3, #80	@ 0x50
 8004596:	d03c      	beq.n	8004612 <HAL_TIM_ConfigClockSource+0xfa>
 8004598:	2b50      	cmp	r3, #80	@ 0x50
 800459a:	d873      	bhi.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 800459c:	2b40      	cmp	r3, #64	@ 0x40
 800459e:	d058      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x13a>
 80045a0:	2b40      	cmp	r3, #64	@ 0x40
 80045a2:	d86f      	bhi.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 80045a4:	2b30      	cmp	r3, #48	@ 0x30
 80045a6:	d064      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0x15a>
 80045a8:	2b30      	cmp	r3, #48	@ 0x30
 80045aa:	d86b      	bhi.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d060      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0x15a>
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d867      	bhi.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d05c      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0x15a>
 80045b8:	2b10      	cmp	r3, #16
 80045ba:	d05a      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0x15a>
 80045bc:	e062      	b.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045ce:	f000 f999 	bl	8004904 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	609a      	str	r2, [r3, #8]
      break;
 80045ea:	e04f      	b.n	800468c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045fc:	f000 f982 	bl	8004904 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800460e:	609a      	str	r2, [r3, #8]
      break;
 8004610:	e03c      	b.n	800468c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800461e:	461a      	mov	r2, r3
 8004620:	f000 f8f6 	bl	8004810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2150      	movs	r1, #80	@ 0x50
 800462a:	4618      	mov	r0, r3
 800462c:	f000 f94f 	bl	80048ce <TIM_ITRx_SetConfig>
      break;
 8004630:	e02c      	b.n	800468c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800463e:	461a      	mov	r2, r3
 8004640:	f000 f915 	bl	800486e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2160      	movs	r1, #96	@ 0x60
 800464a:	4618      	mov	r0, r3
 800464c:	f000 f93f 	bl	80048ce <TIM_ITRx_SetConfig>
      break;
 8004650:	e01c      	b.n	800468c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800465e:	461a      	mov	r2, r3
 8004660:	f000 f8d6 	bl	8004810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2140      	movs	r1, #64	@ 0x40
 800466a:	4618      	mov	r0, r3
 800466c:	f000 f92f 	bl	80048ce <TIM_ITRx_SetConfig>
      break;
 8004670:	e00c      	b.n	800468c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4619      	mov	r1, r3
 800467c:	4610      	mov	r0, r2
 800467e:	f000 f926 	bl	80048ce <TIM_ITRx_SetConfig>
      break;
 8004682:	e003      	b.n	800468c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
      break;
 8004688:	e000      	b.n	800468c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800468a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800469c:	7bfb      	ldrb	r3, [r7, #15]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
	...

080046f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a3a      	ldr	r2, [pc, #232]	@ (80047f4 <TIM_Base_SetConfig+0xfc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d00f      	beq.n	8004730 <TIM_Base_SetConfig+0x38>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004716:	d00b      	beq.n	8004730 <TIM_Base_SetConfig+0x38>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a37      	ldr	r2, [pc, #220]	@ (80047f8 <TIM_Base_SetConfig+0x100>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d007      	beq.n	8004730 <TIM_Base_SetConfig+0x38>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a36      	ldr	r2, [pc, #216]	@ (80047fc <TIM_Base_SetConfig+0x104>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d003      	beq.n	8004730 <TIM_Base_SetConfig+0x38>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a35      	ldr	r2, [pc, #212]	@ (8004800 <TIM_Base_SetConfig+0x108>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d108      	bne.n	8004742 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a2b      	ldr	r2, [pc, #172]	@ (80047f4 <TIM_Base_SetConfig+0xfc>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d01b      	beq.n	8004782 <TIM_Base_SetConfig+0x8a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004750:	d017      	beq.n	8004782 <TIM_Base_SetConfig+0x8a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a28      	ldr	r2, [pc, #160]	@ (80047f8 <TIM_Base_SetConfig+0x100>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d013      	beq.n	8004782 <TIM_Base_SetConfig+0x8a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a27      	ldr	r2, [pc, #156]	@ (80047fc <TIM_Base_SetConfig+0x104>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00f      	beq.n	8004782 <TIM_Base_SetConfig+0x8a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a26      	ldr	r2, [pc, #152]	@ (8004800 <TIM_Base_SetConfig+0x108>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00b      	beq.n	8004782 <TIM_Base_SetConfig+0x8a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a25      	ldr	r2, [pc, #148]	@ (8004804 <TIM_Base_SetConfig+0x10c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d007      	beq.n	8004782 <TIM_Base_SetConfig+0x8a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a24      	ldr	r2, [pc, #144]	@ (8004808 <TIM_Base_SetConfig+0x110>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d003      	beq.n	8004782 <TIM_Base_SetConfig+0x8a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a23      	ldr	r2, [pc, #140]	@ (800480c <TIM_Base_SetConfig+0x114>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d108      	bne.n	8004794 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a0e      	ldr	r2, [pc, #56]	@ (80047f4 <TIM_Base_SetConfig+0xfc>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d103      	bne.n	80047c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d105      	bne.n	80047e6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f023 0201 	bic.w	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	611a      	str	r2, [r3, #16]
  }
}
 80047e6:	bf00      	nop
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	40010000 	.word	0x40010000
 80047f8:	40000400 	.word	0x40000400
 80047fc:	40000800 	.word	0x40000800
 8004800:	40000c00 	.word	0x40000c00
 8004804:	40014000 	.word	0x40014000
 8004808:	40014400 	.word	0x40014400
 800480c:	40014800 	.word	0x40014800

08004810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	f023 0201 	bic.w	r2, r3, #1
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800483a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f023 030a 	bic.w	r3, r3, #10
 800484c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	621a      	str	r2, [r3, #32]
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800486e:	b480      	push	{r7}
 8004870:	b087      	sub	sp, #28
 8004872:	af00      	add	r7, sp, #0
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	f023 0210 	bic.w	r2, r3, #16
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004898:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	031b      	lsls	r3, r3, #12
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	621a      	str	r2, [r3, #32]
}
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b085      	sub	sp, #20
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f043 0307 	orr.w	r3, r3, #7
 80048f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	609a      	str	r2, [r3, #8]
}
 80048f8:	bf00      	nop
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800491e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	021a      	lsls	r2, r3, #8
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	431a      	orrs	r2, r3
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	4313      	orrs	r3, r2
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	609a      	str	r2, [r3, #8]
}
 8004938:	bf00      	nop
 800493a:	371c      	adds	r7, #28
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004958:	2302      	movs	r3, #2
 800495a:	e050      	b.n	80049fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004982:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a1c      	ldr	r2, [pc, #112]	@ (8004a0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d018      	beq.n	80049d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049a8:	d013      	beq.n	80049d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a18      	ldr	r2, [pc, #96]	@ (8004a10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00e      	beq.n	80049d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a16      	ldr	r2, [pc, #88]	@ (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d009      	beq.n	80049d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a15      	ldr	r2, [pc, #84]	@ (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d004      	beq.n	80049d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a13      	ldr	r2, [pc, #76]	@ (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d10c      	bne.n	80049ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	40010000 	.word	0x40010000
 8004a10:	40000400 	.word	0x40000400
 8004a14:	40000800 	.word	0x40000800
 8004a18:	40000c00 	.word	0x40000c00
 8004a1c:	40014000 	.word	0x40014000

08004a20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e042      	b.n	8004ae0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fd f9c8 	bl	8001e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2224      	movs	r2, #36	@ 0x24
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 fa09 	bl	8004ea4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004aa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695a      	ldr	r2, [r3, #20]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ab0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ac0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08a      	sub	sp, #40	@ 0x28
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	4613      	mov	r3, r2
 8004af6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b20      	cmp	r3, #32
 8004b06:	d175      	bne.n	8004bf4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <HAL_UART_Transmit+0x2c>
 8004b0e:	88fb      	ldrh	r3, [r7, #6]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e06e      	b.n	8004bf6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2221      	movs	r2, #33	@ 0x21
 8004b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b26:	f7fd fbe1 	bl	80022ec <HAL_GetTick>
 8004b2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	88fa      	ldrh	r2, [r7, #6]
 8004b30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	88fa      	ldrh	r2, [r7, #6]
 8004b36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b40:	d108      	bne.n	8004b54 <HAL_UART_Transmit+0x6c>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d104      	bne.n	8004b54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	61bb      	str	r3, [r7, #24]
 8004b52:	e003      	b.n	8004b5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b5c:	e02e      	b.n	8004bbc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2200      	movs	r2, #0
 8004b66:	2180      	movs	r1, #128	@ 0x80
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 f8df 	bl	8004d2c <UART_WaitOnFlagUntilTimeout>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e03a      	b.n	8004bf6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10b      	bne.n	8004b9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	3302      	adds	r3, #2
 8004b9a:	61bb      	str	r3, [r7, #24]
 8004b9c:	e007      	b.n	8004bae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	781a      	ldrb	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	3301      	adds	r3, #1
 8004bac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1cb      	bne.n	8004b5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	2140      	movs	r1, #64	@ 0x40
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f8ab 	bl	8004d2c <UART_WaitOnFlagUntilTimeout>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e006      	b.n	8004bf6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	e000      	b.n	8004bf6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004bf4:	2302      	movs	r3, #2
  }
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3720      	adds	r7, #32
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b08a      	sub	sp, #40	@ 0x28
 8004c02:	af02      	add	r7, sp, #8
 8004c04:	60f8      	str	r0, [r7, #12]
 8004c06:	60b9      	str	r1, [r7, #8]
 8004c08:	603b      	str	r3, [r7, #0]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b20      	cmp	r3, #32
 8004c1c:	f040 8081 	bne.w	8004d22 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <HAL_UART_Receive+0x2e>
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e079      	b.n	8004d24 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2222      	movs	r2, #34	@ 0x22
 8004c3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c44:	f7fd fb52 	bl	80022ec <HAL_GetTick>
 8004c48:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	88fa      	ldrh	r2, [r7, #6]
 8004c4e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	88fa      	ldrh	r2, [r7, #6]
 8004c54:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c5e:	d108      	bne.n	8004c72 <HAL_UART_Receive+0x74>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d104      	bne.n	8004c72 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	61bb      	str	r3, [r7, #24]
 8004c70:	e003      	b.n	8004c7a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004c7a:	e047      	b.n	8004d0c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	2200      	movs	r2, #0
 8004c84:	2120      	movs	r1, #32
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 f850 	bl	8004d2c <UART_WaitOnFlagUntilTimeout>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d005      	beq.n	8004c9e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e042      	b.n	8004d24 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10c      	bne.n	8004cbe <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	3302      	adds	r3, #2
 8004cba:	61bb      	str	r3, [r7, #24]
 8004cbc:	e01f      	b.n	8004cfe <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cc6:	d007      	beq.n	8004cd8 <HAL_UART_Receive+0xda>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10a      	bne.n	8004ce6 <HAL_UART_Receive+0xe8>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d106      	bne.n	8004ce6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	701a      	strb	r2, [r3, #0]
 8004ce4:	e008      	b.n	8004cf8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1b2      	bne.n	8004c7c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e000      	b.n	8004d24 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004d22:	2302      	movs	r3, #2
  }
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3720      	adds	r7, #32
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	603b      	str	r3, [r7, #0]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d3c:	e03b      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d44:	d037      	beq.n	8004db6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d46:	f7fd fad1 	bl	80022ec <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	6a3a      	ldr	r2, [r7, #32]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d302      	bcc.n	8004d5c <UART_WaitOnFlagUntilTimeout+0x30>
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e03a      	b.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f003 0304 	and.w	r3, r3, #4
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d023      	beq.n	8004db6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b80      	cmp	r3, #128	@ 0x80
 8004d72:	d020      	beq.n	8004db6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b40      	cmp	r3, #64	@ 0x40
 8004d78:	d01d      	beq.n	8004db6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0308 	and.w	r3, r3, #8
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d116      	bne.n	8004db6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d88:	2300      	movs	r3, #0
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	617b      	str	r3, [r7, #20]
 8004d9c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 f81d 	bl	8004dde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2208      	movs	r2, #8
 8004da8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e00f      	b.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	bf0c      	ite	eq
 8004dc6:	2301      	moveq	r3, #1
 8004dc8:	2300      	movne	r3, #0
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	461a      	mov	r2, r3
 8004dce:	79fb      	ldrb	r3, [r7, #7]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d0b4      	beq.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b095      	sub	sp, #84	@ 0x54
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	330c      	adds	r3, #12
 8004dec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004df0:	e853 3f00 	ldrex	r3, [r3]
 8004df4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	330c      	adds	r3, #12
 8004e04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e06:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1e5      	bne.n	8004de6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3314      	adds	r3, #20
 8004e20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	f023 0301 	bic.w	r3, r3, #1
 8004e30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3314      	adds	r3, #20
 8004e38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e42:	e841 2300 	strex	r3, r2, [r1]
 8004e46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1e5      	bne.n	8004e1a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d119      	bne.n	8004e8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	330c      	adds	r3, #12
 8004e5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	e853 3f00 	ldrex	r3, [r3]
 8004e64:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f023 0310 	bic.w	r3, r3, #16
 8004e6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	330c      	adds	r3, #12
 8004e74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e76:	61ba      	str	r2, [r7, #24]
 8004e78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	6979      	ldr	r1, [r7, #20]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	613b      	str	r3, [r7, #16]
   return(result);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e5      	bne.n	8004e56 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e98:	bf00      	nop
 8004e9a:	3754      	adds	r7, #84	@ 0x54
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea8:	b0c0      	sub	sp, #256	@ 0x100
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec0:	68d9      	ldr	r1, [r3, #12]
 8004ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	ea40 0301 	orr.w	r3, r0, r1
 8004ecc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004efc:	f021 010c 	bic.w	r1, r1, #12
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f0a:	430b      	orrs	r3, r1
 8004f0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1e:	6999      	ldr	r1, [r3, #24]
 8004f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	ea40 0301 	orr.w	r3, r0, r1
 8004f2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	4b8f      	ldr	r3, [pc, #572]	@ (8005170 <UART_SetConfig+0x2cc>)
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d005      	beq.n	8004f44 <UART_SetConfig+0xa0>
 8004f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	4b8d      	ldr	r3, [pc, #564]	@ (8005174 <UART_SetConfig+0x2d0>)
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d104      	bne.n	8004f4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f44:	f7ff f900 	bl	8004148 <HAL_RCC_GetPCLK2Freq>
 8004f48:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f4c:	e003      	b.n	8004f56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f4e:	f7ff f8e7 	bl	8004120 <HAL_RCC_GetPCLK1Freq>
 8004f52:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f60:	f040 810c 	bne.w	800517c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f76:	4622      	mov	r2, r4
 8004f78:	462b      	mov	r3, r5
 8004f7a:	1891      	adds	r1, r2, r2
 8004f7c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f7e:	415b      	adcs	r3, r3
 8004f80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f86:	4621      	mov	r1, r4
 8004f88:	eb12 0801 	adds.w	r8, r2, r1
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	eb43 0901 	adc.w	r9, r3, r1
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fa6:	4690      	mov	r8, r2
 8004fa8:	4699      	mov	r9, r3
 8004faa:	4623      	mov	r3, r4
 8004fac:	eb18 0303 	adds.w	r3, r8, r3
 8004fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004fb4:	462b      	mov	r3, r5
 8004fb6:	eb49 0303 	adc.w	r3, r9, r3
 8004fba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004fca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004fce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	18db      	adds	r3, r3, r3
 8004fd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fd8:	4613      	mov	r3, r2
 8004fda:	eb42 0303 	adc.w	r3, r2, r3
 8004fde:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fe0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004fe4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004fe8:	f7fb fe56 	bl	8000c98 <__aeabi_uldivmod>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4b61      	ldr	r3, [pc, #388]	@ (8005178 <UART_SetConfig+0x2d4>)
 8004ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	011c      	lsls	r4, r3, #4
 8004ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ffe:	2200      	movs	r2, #0
 8005000:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005004:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005008:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800500c:	4642      	mov	r2, r8
 800500e:	464b      	mov	r3, r9
 8005010:	1891      	adds	r1, r2, r2
 8005012:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005014:	415b      	adcs	r3, r3
 8005016:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005018:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800501c:	4641      	mov	r1, r8
 800501e:	eb12 0a01 	adds.w	sl, r2, r1
 8005022:	4649      	mov	r1, r9
 8005024:	eb43 0b01 	adc.w	fp, r3, r1
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005034:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005038:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800503c:	4692      	mov	sl, r2
 800503e:	469b      	mov	fp, r3
 8005040:	4643      	mov	r3, r8
 8005042:	eb1a 0303 	adds.w	r3, sl, r3
 8005046:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800504a:	464b      	mov	r3, r9
 800504c:	eb4b 0303 	adc.w	r3, fp, r3
 8005050:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005060:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005064:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005068:	460b      	mov	r3, r1
 800506a:	18db      	adds	r3, r3, r3
 800506c:	643b      	str	r3, [r7, #64]	@ 0x40
 800506e:	4613      	mov	r3, r2
 8005070:	eb42 0303 	adc.w	r3, r2, r3
 8005074:	647b      	str	r3, [r7, #68]	@ 0x44
 8005076:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800507a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800507e:	f7fb fe0b 	bl	8000c98 <__aeabi_uldivmod>
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	4611      	mov	r1, r2
 8005088:	4b3b      	ldr	r3, [pc, #236]	@ (8005178 <UART_SetConfig+0x2d4>)
 800508a:	fba3 2301 	umull	r2, r3, r3, r1
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	2264      	movs	r2, #100	@ 0x64
 8005092:	fb02 f303 	mul.w	r3, r2, r3
 8005096:	1acb      	subs	r3, r1, r3
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800509e:	4b36      	ldr	r3, [pc, #216]	@ (8005178 <UART_SetConfig+0x2d4>)
 80050a0:	fba3 2302 	umull	r2, r3, r3, r2
 80050a4:	095b      	lsrs	r3, r3, #5
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80050ac:	441c      	add	r4, r3
 80050ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050b2:	2200      	movs	r2, #0
 80050b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80050bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80050c0:	4642      	mov	r2, r8
 80050c2:	464b      	mov	r3, r9
 80050c4:	1891      	adds	r1, r2, r2
 80050c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80050c8:	415b      	adcs	r3, r3
 80050ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80050d0:	4641      	mov	r1, r8
 80050d2:	1851      	adds	r1, r2, r1
 80050d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80050d6:	4649      	mov	r1, r9
 80050d8:	414b      	adcs	r3, r1
 80050da:	637b      	str	r3, [r7, #52]	@ 0x34
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80050e8:	4659      	mov	r1, fp
 80050ea:	00cb      	lsls	r3, r1, #3
 80050ec:	4651      	mov	r1, sl
 80050ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050f2:	4651      	mov	r1, sl
 80050f4:	00ca      	lsls	r2, r1, #3
 80050f6:	4610      	mov	r0, r2
 80050f8:	4619      	mov	r1, r3
 80050fa:	4603      	mov	r3, r0
 80050fc:	4642      	mov	r2, r8
 80050fe:	189b      	adds	r3, r3, r2
 8005100:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005104:	464b      	mov	r3, r9
 8005106:	460a      	mov	r2, r1
 8005108:	eb42 0303 	adc.w	r3, r2, r3
 800510c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800511c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005120:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005124:	460b      	mov	r3, r1
 8005126:	18db      	adds	r3, r3, r3
 8005128:	62bb      	str	r3, [r7, #40]	@ 0x28
 800512a:	4613      	mov	r3, r2
 800512c:	eb42 0303 	adc.w	r3, r2, r3
 8005130:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005132:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005136:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800513a:	f7fb fdad 	bl	8000c98 <__aeabi_uldivmod>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4b0d      	ldr	r3, [pc, #52]	@ (8005178 <UART_SetConfig+0x2d4>)
 8005144:	fba3 1302 	umull	r1, r3, r3, r2
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	2164      	movs	r1, #100	@ 0x64
 800514c:	fb01 f303 	mul.w	r3, r1, r3
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	3332      	adds	r3, #50	@ 0x32
 8005156:	4a08      	ldr	r2, [pc, #32]	@ (8005178 <UART_SetConfig+0x2d4>)
 8005158:	fba2 2303 	umull	r2, r3, r2, r3
 800515c:	095b      	lsrs	r3, r3, #5
 800515e:	f003 0207 	and.w	r2, r3, #7
 8005162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4422      	add	r2, r4
 800516a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800516c:	e106      	b.n	800537c <UART_SetConfig+0x4d8>
 800516e:	bf00      	nop
 8005170:	40011000 	.word	0x40011000
 8005174:	40011400 	.word	0x40011400
 8005178:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800517c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005180:	2200      	movs	r2, #0
 8005182:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005186:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800518a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800518e:	4642      	mov	r2, r8
 8005190:	464b      	mov	r3, r9
 8005192:	1891      	adds	r1, r2, r2
 8005194:	6239      	str	r1, [r7, #32]
 8005196:	415b      	adcs	r3, r3
 8005198:	627b      	str	r3, [r7, #36]	@ 0x24
 800519a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800519e:	4641      	mov	r1, r8
 80051a0:	1854      	adds	r4, r2, r1
 80051a2:	4649      	mov	r1, r9
 80051a4:	eb43 0501 	adc.w	r5, r3, r1
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	00eb      	lsls	r3, r5, #3
 80051b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051b6:	00e2      	lsls	r2, r4, #3
 80051b8:	4614      	mov	r4, r2
 80051ba:	461d      	mov	r5, r3
 80051bc:	4643      	mov	r3, r8
 80051be:	18e3      	adds	r3, r4, r3
 80051c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051c4:	464b      	mov	r3, r9
 80051c6:	eb45 0303 	adc.w	r3, r5, r3
 80051ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051de:	f04f 0200 	mov.w	r2, #0
 80051e2:	f04f 0300 	mov.w	r3, #0
 80051e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051ea:	4629      	mov	r1, r5
 80051ec:	008b      	lsls	r3, r1, #2
 80051ee:	4621      	mov	r1, r4
 80051f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051f4:	4621      	mov	r1, r4
 80051f6:	008a      	lsls	r2, r1, #2
 80051f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80051fc:	f7fb fd4c 	bl	8000c98 <__aeabi_uldivmod>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4b60      	ldr	r3, [pc, #384]	@ (8005388 <UART_SetConfig+0x4e4>)
 8005206:	fba3 2302 	umull	r2, r3, r3, r2
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	011c      	lsls	r4, r3, #4
 800520e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005212:	2200      	movs	r2, #0
 8005214:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005218:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800521c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005220:	4642      	mov	r2, r8
 8005222:	464b      	mov	r3, r9
 8005224:	1891      	adds	r1, r2, r2
 8005226:	61b9      	str	r1, [r7, #24]
 8005228:	415b      	adcs	r3, r3
 800522a:	61fb      	str	r3, [r7, #28]
 800522c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005230:	4641      	mov	r1, r8
 8005232:	1851      	adds	r1, r2, r1
 8005234:	6139      	str	r1, [r7, #16]
 8005236:	4649      	mov	r1, r9
 8005238:	414b      	adcs	r3, r1
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005248:	4659      	mov	r1, fp
 800524a:	00cb      	lsls	r3, r1, #3
 800524c:	4651      	mov	r1, sl
 800524e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005252:	4651      	mov	r1, sl
 8005254:	00ca      	lsls	r2, r1, #3
 8005256:	4610      	mov	r0, r2
 8005258:	4619      	mov	r1, r3
 800525a:	4603      	mov	r3, r0
 800525c:	4642      	mov	r2, r8
 800525e:	189b      	adds	r3, r3, r2
 8005260:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005264:	464b      	mov	r3, r9
 8005266:	460a      	mov	r2, r1
 8005268:	eb42 0303 	adc.w	r3, r2, r3
 800526c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	67bb      	str	r3, [r7, #120]	@ 0x78
 800527a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800527c:	f04f 0200 	mov.w	r2, #0
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005288:	4649      	mov	r1, r9
 800528a:	008b      	lsls	r3, r1, #2
 800528c:	4641      	mov	r1, r8
 800528e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005292:	4641      	mov	r1, r8
 8005294:	008a      	lsls	r2, r1, #2
 8005296:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800529a:	f7fb fcfd 	bl	8000c98 <__aeabi_uldivmod>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4611      	mov	r1, r2
 80052a4:	4b38      	ldr	r3, [pc, #224]	@ (8005388 <UART_SetConfig+0x4e4>)
 80052a6:	fba3 2301 	umull	r2, r3, r3, r1
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	2264      	movs	r2, #100	@ 0x64
 80052ae:	fb02 f303 	mul.w	r3, r2, r3
 80052b2:	1acb      	subs	r3, r1, r3
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	3332      	adds	r3, #50	@ 0x32
 80052b8:	4a33      	ldr	r2, [pc, #204]	@ (8005388 <UART_SetConfig+0x4e4>)
 80052ba:	fba2 2303 	umull	r2, r3, r2, r3
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052c4:	441c      	add	r4, r3
 80052c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052ca:	2200      	movs	r2, #0
 80052cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80052ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80052d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80052d4:	4642      	mov	r2, r8
 80052d6:	464b      	mov	r3, r9
 80052d8:	1891      	adds	r1, r2, r2
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	415b      	adcs	r3, r3
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052e4:	4641      	mov	r1, r8
 80052e6:	1851      	adds	r1, r2, r1
 80052e8:	6039      	str	r1, [r7, #0]
 80052ea:	4649      	mov	r1, r9
 80052ec:	414b      	adcs	r3, r1
 80052ee:	607b      	str	r3, [r7, #4]
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	f04f 0300 	mov.w	r3, #0
 80052f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052fc:	4659      	mov	r1, fp
 80052fe:	00cb      	lsls	r3, r1, #3
 8005300:	4651      	mov	r1, sl
 8005302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005306:	4651      	mov	r1, sl
 8005308:	00ca      	lsls	r2, r1, #3
 800530a:	4610      	mov	r0, r2
 800530c:	4619      	mov	r1, r3
 800530e:	4603      	mov	r3, r0
 8005310:	4642      	mov	r2, r8
 8005312:	189b      	adds	r3, r3, r2
 8005314:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005316:	464b      	mov	r3, r9
 8005318:	460a      	mov	r2, r1
 800531a:	eb42 0303 	adc.w	r3, r2, r3
 800531e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	663b      	str	r3, [r7, #96]	@ 0x60
 800532a:	667a      	str	r2, [r7, #100]	@ 0x64
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005338:	4649      	mov	r1, r9
 800533a:	008b      	lsls	r3, r1, #2
 800533c:	4641      	mov	r1, r8
 800533e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005342:	4641      	mov	r1, r8
 8005344:	008a      	lsls	r2, r1, #2
 8005346:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800534a:	f7fb fca5 	bl	8000c98 <__aeabi_uldivmod>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	4b0d      	ldr	r3, [pc, #52]	@ (8005388 <UART_SetConfig+0x4e4>)
 8005354:	fba3 1302 	umull	r1, r3, r3, r2
 8005358:	095b      	lsrs	r3, r3, #5
 800535a:	2164      	movs	r1, #100	@ 0x64
 800535c:	fb01 f303 	mul.w	r3, r1, r3
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	3332      	adds	r3, #50	@ 0x32
 8005366:	4a08      	ldr	r2, [pc, #32]	@ (8005388 <UART_SetConfig+0x4e4>)
 8005368:	fba2 2303 	umull	r2, r3, r2, r3
 800536c:	095b      	lsrs	r3, r3, #5
 800536e:	f003 020f 	and.w	r2, r3, #15
 8005372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4422      	add	r2, r4
 800537a:	609a      	str	r2, [r3, #8]
}
 800537c:	bf00      	nop
 800537e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005382:	46bd      	mov	sp, r7
 8005384:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005388:	51eb851f 	.word	0x51eb851f

0800538c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	4603      	mov	r3, r0
 8005394:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800539a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800539e:	2b84      	cmp	r3, #132	@ 0x84
 80053a0:	d005      	beq.n	80053ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80053a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4413      	add	r3, r2
 80053aa:	3303      	adds	r3, #3
 80053ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80053ae:	68fb      	ldr	r3, [r7, #12]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80053c0:	f000 fafc 	bl	80059bc <vTaskStartScheduler>
  
  return osOK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	bd80      	pop	{r7, pc}

080053ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80053ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053cc:	b089      	sub	sp, #36	@ 0x24
 80053ce:	af04      	add	r7, sp, #16
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d020      	beq.n	800541e <osThreadCreate+0x54>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01c      	beq.n	800541e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685c      	ldr	r4, [r3, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691e      	ldr	r6, [r3, #16]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7ff ffc8 	bl	800538c <makeFreeRtosPriority>
 80053fc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005406:	9202      	str	r2, [sp, #8]
 8005408:	9301      	str	r3, [sp, #4]
 800540a:	9100      	str	r1, [sp, #0]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	4632      	mov	r2, r6
 8005410:	4629      	mov	r1, r5
 8005412:	4620      	mov	r0, r4
 8005414:	f000 f8ed 	bl	80055f2 <xTaskCreateStatic>
 8005418:	4603      	mov	r3, r0
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	e01c      	b.n	8005458 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685c      	ldr	r4, [r3, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800542a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff ffaa 	bl	800538c <makeFreeRtosPriority>
 8005438:	4602      	mov	r2, r0
 800543a:	f107 030c 	add.w	r3, r7, #12
 800543e:	9301      	str	r3, [sp, #4]
 8005440:	9200      	str	r2, [sp, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	4632      	mov	r2, r6
 8005446:	4629      	mov	r1, r5
 8005448:	4620      	mov	r0, r4
 800544a:	f000 f932 	bl	80056b2 <xTaskCreate>
 800544e:	4603      	mov	r3, r0
 8005450:	2b01      	cmp	r3, #1
 8005452:	d001      	beq.n	8005458 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005454:	2300      	movs	r3, #0
 8005456:	e000      	b.n	800545a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005458:	68fb      	ldr	r3, [r7, #12]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005462 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <osDelay+0x16>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	e000      	b.n	800547a <osDelay+0x18>
 8005478:	2301      	movs	r3, #1
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fa68 	bl	8005950 <vTaskDelay>
  
  return osOK;
 8005480:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f103 0208 	add.w	r2, r3, #8
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80054a2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f103 0208 	add.w	r2, r3, #8
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f103 0208 	add.w	r2, r3, #8
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	601a      	str	r2, [r3, #0]
}
 8005520:	bf00      	nop
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005542:	d103      	bne.n	800554c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	e00c      	b.n	8005566 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3308      	adds	r3, #8
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	e002      	b.n	800555a <vListInsert+0x2e>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	429a      	cmp	r2, r3
 8005564:	d2f6      	bcs.n	8005554 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	601a      	str	r2, [r3, #0]
}
 8005592:	bf00      	nop
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800559e:	b480      	push	{r7}
 80055a0:	b085      	sub	sp, #20
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6892      	ldr	r2, [r2, #8]
 80055b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6852      	ldr	r2, [r2, #4]
 80055be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d103      	bne.n	80055d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	1e5a      	subs	r2, r3, #1
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b08e      	sub	sp, #56	@ 0x38
 80055f6:	af04      	add	r7, sp, #16
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	607a      	str	r2, [r7, #4]
 80055fe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10b      	bne.n	800561e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005618:	bf00      	nop
 800561a:	bf00      	nop
 800561c:	e7fd      	b.n	800561a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800561e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10b      	bne.n	800563c <xTaskCreateStatic+0x4a>
	__asm volatile
 8005624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	61fb      	str	r3, [r7, #28]
}
 8005636:	bf00      	nop
 8005638:	bf00      	nop
 800563a:	e7fd      	b.n	8005638 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800563c:	23a0      	movs	r3, #160	@ 0xa0
 800563e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	2ba0      	cmp	r3, #160	@ 0xa0
 8005644:	d00b      	beq.n	800565e <xTaskCreateStatic+0x6c>
	__asm volatile
 8005646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	61bb      	str	r3, [r7, #24]
}
 8005658:	bf00      	nop
 800565a:	bf00      	nop
 800565c:	e7fd      	b.n	800565a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800565e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005662:	2b00      	cmp	r3, #0
 8005664:	d01e      	beq.n	80056a4 <xTaskCreateStatic+0xb2>
 8005666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005668:	2b00      	cmp	r3, #0
 800566a:	d01b      	beq.n	80056a4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800566c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005672:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005674:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005678:	2202      	movs	r2, #2
 800567a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800567e:	2300      	movs	r3, #0
 8005680:	9303      	str	r3, [sp, #12]
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	9302      	str	r3, [sp, #8]
 8005686:	f107 0314 	add.w	r3, r7, #20
 800568a:	9301      	str	r3, [sp, #4]
 800568c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 f850 	bl	800573c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800569c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800569e:	f000 f8ed 	bl	800587c <prvAddNewTaskToReadyList>
 80056a2:	e001      	b.n	80056a8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80056a8:	697b      	ldr	r3, [r7, #20]
	}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3728      	adds	r7, #40	@ 0x28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b08c      	sub	sp, #48	@ 0x30
 80056b6:	af04      	add	r7, sp, #16
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	603b      	str	r3, [r7, #0]
 80056be:	4613      	mov	r3, r2
 80056c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80056c2:	88fb      	ldrh	r3, [r7, #6]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fefe 	bl	80064c8 <pvPortMalloc>
 80056cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00e      	beq.n	80056f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80056d4:	20a0      	movs	r0, #160	@ 0xa0
 80056d6:	f000 fef7 	bl	80064c8 <pvPortMalloc>
 80056da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80056e8:	e005      	b.n	80056f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80056ea:	6978      	ldr	r0, [r7, #20]
 80056ec:	f000 ffba 	bl	8006664 <vPortFree>
 80056f0:	e001      	b.n	80056f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d017      	beq.n	800572c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005704:	88fa      	ldrh	r2, [r7, #6]
 8005706:	2300      	movs	r3, #0
 8005708:	9303      	str	r3, [sp, #12]
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	9302      	str	r3, [sp, #8]
 800570e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68b9      	ldr	r1, [r7, #8]
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 f80e 	bl	800573c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005720:	69f8      	ldr	r0, [r7, #28]
 8005722:	f000 f8ab 	bl	800587c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005726:	2301      	movs	r3, #1
 8005728:	61bb      	str	r3, [r7, #24]
 800572a:	e002      	b.n	8005732 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800572c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005730:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005732:	69bb      	ldr	r3, [r7, #24]
	}
 8005734:	4618      	mov	r0, r3
 8005736:	3720      	adds	r7, #32
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b088      	sub	sp, #32
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800574a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005754:	3b01      	subs	r3, #1
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	f023 0307 	bic.w	r3, r3, #7
 8005762:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00b      	beq.n	8005786 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	617b      	str	r3, [r7, #20]
}
 8005780:	bf00      	nop
 8005782:	bf00      	nop
 8005784:	e7fd      	b.n	8005782 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01f      	beq.n	80057cc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800578c:	2300      	movs	r3, #0
 800578e:	61fb      	str	r3, [r7, #28]
 8005790:	e012      	b.n	80057b8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	4413      	add	r3, r2
 8005798:	7819      	ldrb	r1, [r3, #0]
 800579a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	4413      	add	r3, r2
 80057a0:	3334      	adds	r3, #52	@ 0x34
 80057a2:	460a      	mov	r2, r1
 80057a4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	4413      	add	r3, r2
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d006      	beq.n	80057c0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	3301      	adds	r3, #1
 80057b6:	61fb      	str	r3, [r7, #28]
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	2b0f      	cmp	r3, #15
 80057bc:	d9e9      	bls.n	8005792 <prvInitialiseNewTask+0x56>
 80057be:	e000      	b.n	80057c2 <prvInitialiseNewTask+0x86>
			{
				break;
 80057c0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80057c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057ca:	e003      	b.n	80057d4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80057cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80057d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d6:	2b06      	cmp	r3, #6
 80057d8:	d901      	bls.n	80057de <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80057da:	2306      	movs	r3, #6
 80057dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80057de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80057e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057e8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80057ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ec:	2200      	movs	r2, #0
 80057ee:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f2:	3304      	adds	r3, #4
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff fe68 	bl	80054ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fc:	3318      	adds	r3, #24
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff fe63 	bl	80054ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005806:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005808:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800580a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580c:	f1c3 0207 	rsb	r2, r3, #7
 8005810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005812:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005818:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800581a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581c:	2200      	movs	r2, #0
 800581e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005824:	2200      	movs	r2, #0
 8005826:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800582a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582c:	334c      	adds	r3, #76	@ 0x4c
 800582e:	224c      	movs	r2, #76	@ 0x4c
 8005830:	2100      	movs	r1, #0
 8005832:	4618      	mov	r0, r3
 8005834:	f001 ffc7 	bl	80077c6 <memset>
 8005838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583a:	4a0d      	ldr	r2, [pc, #52]	@ (8005870 <prvInitialiseNewTask+0x134>)
 800583c:	651a      	str	r2, [r3, #80]	@ 0x50
 800583e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005840:	4a0c      	ldr	r2, [pc, #48]	@ (8005874 <prvInitialiseNewTask+0x138>)
 8005842:	655a      	str	r2, [r3, #84]	@ 0x54
 8005844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005846:	4a0c      	ldr	r2, [pc, #48]	@ (8005878 <prvInitialiseNewTask+0x13c>)
 8005848:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	68f9      	ldr	r1, [r7, #12]
 800584e:	69b8      	ldr	r0, [r7, #24]
 8005850:	f000 fc2a 	bl	80060a8 <pxPortInitialiseStack>
 8005854:	4602      	mov	r2, r0
 8005856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005858:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800585a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005866:	bf00      	nop
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20004378 	.word	0x20004378
 8005874:	200043e0 	.word	0x200043e0
 8005878:	20004448 	.word	0x20004448

0800587c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005884:	f000 fd40 	bl	8006308 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005888:	4b2a      	ldr	r3, [pc, #168]	@ (8005934 <prvAddNewTaskToReadyList+0xb8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3301      	adds	r3, #1
 800588e:	4a29      	ldr	r2, [pc, #164]	@ (8005934 <prvAddNewTaskToReadyList+0xb8>)
 8005890:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005892:	4b29      	ldr	r3, [pc, #164]	@ (8005938 <prvAddNewTaskToReadyList+0xbc>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d109      	bne.n	80058ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800589a:	4a27      	ldr	r2, [pc, #156]	@ (8005938 <prvAddNewTaskToReadyList+0xbc>)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058a0:	4b24      	ldr	r3, [pc, #144]	@ (8005934 <prvAddNewTaskToReadyList+0xb8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d110      	bne.n	80058ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058a8:	f000 fad4 	bl	8005e54 <prvInitialiseTaskLists>
 80058ac:	e00d      	b.n	80058ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058ae:	4b23      	ldr	r3, [pc, #140]	@ (800593c <prvAddNewTaskToReadyList+0xc0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058b6:	4b20      	ldr	r3, [pc, #128]	@ (8005938 <prvAddNewTaskToReadyList+0xbc>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d802      	bhi.n	80058ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005938 <prvAddNewTaskToReadyList+0xbc>)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005940 <prvAddNewTaskToReadyList+0xc4>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3301      	adds	r3, #1
 80058d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005940 <prvAddNewTaskToReadyList+0xc4>)
 80058d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d8:	2201      	movs	r2, #1
 80058da:	409a      	lsls	r2, r3
 80058dc:	4b19      	ldr	r3, [pc, #100]	@ (8005944 <prvAddNewTaskToReadyList+0xc8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	4a18      	ldr	r2, [pc, #96]	@ (8005944 <prvAddNewTaskToReadyList+0xc8>)
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ea:	4613      	mov	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4a15      	ldr	r2, [pc, #84]	@ (8005948 <prvAddNewTaskToReadyList+0xcc>)
 80058f4:	441a      	add	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3304      	adds	r3, #4
 80058fa:	4619      	mov	r1, r3
 80058fc:	4610      	mov	r0, r2
 80058fe:	f7ff fdf1 	bl	80054e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005902:	f000 fd33 	bl	800636c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005906:	4b0d      	ldr	r3, [pc, #52]	@ (800593c <prvAddNewTaskToReadyList+0xc0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00e      	beq.n	800592c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800590e:	4b0a      	ldr	r3, [pc, #40]	@ (8005938 <prvAddNewTaskToReadyList+0xbc>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005918:	429a      	cmp	r2, r3
 800591a:	d207      	bcs.n	800592c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800591c:	4b0b      	ldr	r3, [pc, #44]	@ (800594c <prvAddNewTaskToReadyList+0xd0>)
 800591e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800592c:	bf00      	nop
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	20000724 	.word	0x20000724
 8005938:	20000624 	.word	0x20000624
 800593c:	20000730 	.word	0x20000730
 8005940:	20000740 	.word	0x20000740
 8005944:	2000072c 	.word	0x2000072c
 8005948:	20000628 	.word	0x20000628
 800594c:	e000ed04 	.word	0xe000ed04

08005950 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d018      	beq.n	8005994 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005962:	4b14      	ldr	r3, [pc, #80]	@ (80059b4 <vTaskDelay+0x64>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00b      	beq.n	8005982 <vTaskDelay+0x32>
	__asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	60bb      	str	r3, [r7, #8]
}
 800597c:	bf00      	nop
 800597e:	bf00      	nop
 8005980:	e7fd      	b.n	800597e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005982:	f000 f885 	bl	8005a90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005986:	2100      	movs	r1, #0
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fb27 	bl	8005fdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800598e:	f000 f88d 	bl	8005aac <xTaskResumeAll>
 8005992:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d107      	bne.n	80059aa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800599a:	4b07      	ldr	r3, [pc, #28]	@ (80059b8 <vTaskDelay+0x68>)
 800599c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059aa:	bf00      	nop
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	2000074c 	.word	0x2000074c
 80059b8:	e000ed04 	.word	0xe000ed04

080059bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08a      	sub	sp, #40	@ 0x28
 80059c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80059c6:	2300      	movs	r3, #0
 80059c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80059ca:	463a      	mov	r2, r7
 80059cc:	1d39      	adds	r1, r7, #4
 80059ce:	f107 0308 	add.w	r3, r7, #8
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fb fb0e 	bl	8000ff4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80059d8:	6839      	ldr	r1, [r7, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	9202      	str	r2, [sp, #8]
 80059e0:	9301      	str	r3, [sp, #4]
 80059e2:	2300      	movs	r3, #0
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	2300      	movs	r3, #0
 80059e8:	460a      	mov	r2, r1
 80059ea:	4921      	ldr	r1, [pc, #132]	@ (8005a70 <vTaskStartScheduler+0xb4>)
 80059ec:	4821      	ldr	r0, [pc, #132]	@ (8005a74 <vTaskStartScheduler+0xb8>)
 80059ee:	f7ff fe00 	bl	80055f2 <xTaskCreateStatic>
 80059f2:	4603      	mov	r3, r0
 80059f4:	4a20      	ldr	r2, [pc, #128]	@ (8005a78 <vTaskStartScheduler+0xbc>)
 80059f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80059f8:	4b1f      	ldr	r3, [pc, #124]	@ (8005a78 <vTaskStartScheduler+0xbc>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a00:	2301      	movs	r3, #1
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	e001      	b.n	8005a0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d11b      	bne.n	8005a48 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	613b      	str	r3, [r7, #16]
}
 8005a22:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a24:	4b15      	ldr	r3, [pc, #84]	@ (8005a7c <vTaskStartScheduler+0xc0>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	334c      	adds	r3, #76	@ 0x4c
 8005a2a:	4a15      	ldr	r2, [pc, #84]	@ (8005a80 <vTaskStartScheduler+0xc4>)
 8005a2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a2e:	4b15      	ldr	r3, [pc, #84]	@ (8005a84 <vTaskStartScheduler+0xc8>)
 8005a30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a36:	4b14      	ldr	r3, [pc, #80]	@ (8005a88 <vTaskStartScheduler+0xcc>)
 8005a38:	2201      	movs	r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a3c:	4b13      	ldr	r3, [pc, #76]	@ (8005a8c <vTaskStartScheduler+0xd0>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a42:	f000 fbbd 	bl	80061c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a46:	e00f      	b.n	8005a68 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a4e:	d10b      	bne.n	8005a68 <vTaskStartScheduler+0xac>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	60fb      	str	r3, [r7, #12]
}
 8005a62:	bf00      	nop
 8005a64:	bf00      	nop
 8005a66:	e7fd      	b.n	8005a64 <vTaskStartScheduler+0xa8>
}
 8005a68:	bf00      	nop
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	0800b1d8 	.word	0x0800b1d8
 8005a74:	08005e25 	.word	0x08005e25
 8005a78:	20000748 	.word	0x20000748
 8005a7c:	20000624 	.word	0x20000624
 8005a80:	2000001c 	.word	0x2000001c
 8005a84:	20000744 	.word	0x20000744
 8005a88:	20000730 	.word	0x20000730
 8005a8c:	20000728 	.word	0x20000728

08005a90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a90:	b480      	push	{r7}
 8005a92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005a94:	4b04      	ldr	r3, [pc, #16]	@ (8005aa8 <vTaskSuspendAll+0x18>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	4a03      	ldr	r2, [pc, #12]	@ (8005aa8 <vTaskSuspendAll+0x18>)
 8005a9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005a9e:	bf00      	nop
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	2000074c 	.word	0x2000074c

08005aac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005aba:	4b42      	ldr	r3, [pc, #264]	@ (8005bc4 <xTaskResumeAll+0x118>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10b      	bne.n	8005ada <xTaskResumeAll+0x2e>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	603b      	str	r3, [r7, #0]
}
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop
 8005ad8:	e7fd      	b.n	8005ad6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ada:	f000 fc15 	bl	8006308 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ade:	4b39      	ldr	r3, [pc, #228]	@ (8005bc4 <xTaskResumeAll+0x118>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	4a37      	ldr	r2, [pc, #220]	@ (8005bc4 <xTaskResumeAll+0x118>)
 8005ae6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ae8:	4b36      	ldr	r3, [pc, #216]	@ (8005bc4 <xTaskResumeAll+0x118>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d161      	bne.n	8005bb4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005af0:	4b35      	ldr	r3, [pc, #212]	@ (8005bc8 <xTaskResumeAll+0x11c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d05d      	beq.n	8005bb4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005af8:	e02e      	b.n	8005b58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005afa:	4b34      	ldr	r3, [pc, #208]	@ (8005bcc <xTaskResumeAll+0x120>)
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	3318      	adds	r3, #24
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff fd49 	bl	800559e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3304      	adds	r3, #4
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7ff fd44 	bl	800559e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	409a      	lsls	r2, r3
 8005b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8005bd0 <xTaskResumeAll+0x124>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	4a2a      	ldr	r2, [pc, #168]	@ (8005bd0 <xTaskResumeAll+0x124>)
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4a27      	ldr	r2, [pc, #156]	@ (8005bd4 <xTaskResumeAll+0x128>)
 8005b36:	441a      	add	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4610      	mov	r0, r2
 8005b40:	f7ff fcd0 	bl	80054e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b48:	4b23      	ldr	r3, [pc, #140]	@ (8005bd8 <xTaskResumeAll+0x12c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d302      	bcc.n	8005b58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005b52:	4b22      	ldr	r3, [pc, #136]	@ (8005bdc <xTaskResumeAll+0x130>)
 8005b54:	2201      	movs	r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b58:	4b1c      	ldr	r3, [pc, #112]	@ (8005bcc <xTaskResumeAll+0x120>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1cc      	bne.n	8005afa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b66:	f000 fa19 	bl	8005f9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8005be0 <xTaskResumeAll+0x134>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d010      	beq.n	8005b98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b76:	f000 f837 	bl	8005be8 <xTaskIncrementTick>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005b80:	4b16      	ldr	r3, [pc, #88]	@ (8005bdc <xTaskResumeAll+0x130>)
 8005b82:	2201      	movs	r2, #1
 8005b84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1f1      	bne.n	8005b76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005b92:	4b13      	ldr	r3, [pc, #76]	@ (8005be0 <xTaskResumeAll+0x134>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b98:	4b10      	ldr	r3, [pc, #64]	@ (8005bdc <xTaskResumeAll+0x130>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d009      	beq.n	8005bb4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8005be4 <xTaskResumeAll+0x138>)
 8005ba6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bb4:	f000 fbda 	bl	800636c <vPortExitCritical>

	return xAlreadyYielded;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	2000074c 	.word	0x2000074c
 8005bc8:	20000724 	.word	0x20000724
 8005bcc:	200006e4 	.word	0x200006e4
 8005bd0:	2000072c 	.word	0x2000072c
 8005bd4:	20000628 	.word	0x20000628
 8005bd8:	20000624 	.word	0x20000624
 8005bdc:	20000738 	.word	0x20000738
 8005be0:	20000734 	.word	0x20000734
 8005be4:	e000ed04 	.word	0xe000ed04

08005be8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bf2:	4b4f      	ldr	r3, [pc, #316]	@ (8005d30 <xTaskIncrementTick+0x148>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f040 808f 	bne.w	8005d1a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005bfc:	4b4d      	ldr	r3, [pc, #308]	@ (8005d34 <xTaskIncrementTick+0x14c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3301      	adds	r3, #1
 8005c02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c04:	4a4b      	ldr	r2, [pc, #300]	@ (8005d34 <xTaskIncrementTick+0x14c>)
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d121      	bne.n	8005c54 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c10:	4b49      	ldr	r3, [pc, #292]	@ (8005d38 <xTaskIncrementTick+0x150>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00b      	beq.n	8005c32 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	603b      	str	r3, [r7, #0]
}
 8005c2c:	bf00      	nop
 8005c2e:	bf00      	nop
 8005c30:	e7fd      	b.n	8005c2e <xTaskIncrementTick+0x46>
 8005c32:	4b41      	ldr	r3, [pc, #260]	@ (8005d38 <xTaskIncrementTick+0x150>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	4b40      	ldr	r3, [pc, #256]	@ (8005d3c <xTaskIncrementTick+0x154>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a3e      	ldr	r2, [pc, #248]	@ (8005d38 <xTaskIncrementTick+0x150>)
 8005c3e:	6013      	str	r3, [r2, #0]
 8005c40:	4a3e      	ldr	r2, [pc, #248]	@ (8005d3c <xTaskIncrementTick+0x154>)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	4b3e      	ldr	r3, [pc, #248]	@ (8005d40 <xTaskIncrementTick+0x158>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	4a3c      	ldr	r2, [pc, #240]	@ (8005d40 <xTaskIncrementTick+0x158>)
 8005c4e:	6013      	str	r3, [r2, #0]
 8005c50:	f000 f9a4 	bl	8005f9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c54:	4b3b      	ldr	r3, [pc, #236]	@ (8005d44 <xTaskIncrementTick+0x15c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d348      	bcc.n	8005cf0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c5e:	4b36      	ldr	r3, [pc, #216]	@ (8005d38 <xTaskIncrementTick+0x150>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d104      	bne.n	8005c72 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c68:	4b36      	ldr	r3, [pc, #216]	@ (8005d44 <xTaskIncrementTick+0x15c>)
 8005c6a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c6e:	601a      	str	r2, [r3, #0]
					break;
 8005c70:	e03e      	b.n	8005cf0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c72:	4b31      	ldr	r3, [pc, #196]	@ (8005d38 <xTaskIncrementTick+0x150>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d203      	bcs.n	8005c92 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c8a:	4a2e      	ldr	r2, [pc, #184]	@ (8005d44 <xTaskIncrementTick+0x15c>)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c90:	e02e      	b.n	8005cf0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	3304      	adds	r3, #4
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff fc81 	bl	800559e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d004      	beq.n	8005cae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	3318      	adds	r3, #24
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7ff fc78 	bl	800559e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	409a      	lsls	r2, r3
 8005cb6:	4b24      	ldr	r3, [pc, #144]	@ (8005d48 <xTaskIncrementTick+0x160>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	4a22      	ldr	r2, [pc, #136]	@ (8005d48 <xTaskIncrementTick+0x160>)
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4a1f      	ldr	r2, [pc, #124]	@ (8005d4c <xTaskIncrementTick+0x164>)
 8005cce:	441a      	add	r2, r3
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	f7ff fc04 	bl	80054e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8005d50 <xTaskIncrementTick+0x168>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d3b9      	bcc.n	8005c5e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005cea:	2301      	movs	r3, #1
 8005cec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cee:	e7b6      	b.n	8005c5e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005cf0:	4b17      	ldr	r3, [pc, #92]	@ (8005d50 <xTaskIncrementTick+0x168>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cf6:	4915      	ldr	r1, [pc, #84]	@ (8005d4c <xTaskIncrementTick+0x164>)
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	440b      	add	r3, r1
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d901      	bls.n	8005d0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d0c:	4b11      	ldr	r3, [pc, #68]	@ (8005d54 <xTaskIncrementTick+0x16c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d007      	beq.n	8005d24 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005d14:	2301      	movs	r3, #1
 8005d16:	617b      	str	r3, [r7, #20]
 8005d18:	e004      	b.n	8005d24 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8005d58 <xTaskIncrementTick+0x170>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	4a0d      	ldr	r2, [pc, #52]	@ (8005d58 <xTaskIncrementTick+0x170>)
 8005d22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005d24:	697b      	ldr	r3, [r7, #20]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	2000074c 	.word	0x2000074c
 8005d34:	20000728 	.word	0x20000728
 8005d38:	200006dc 	.word	0x200006dc
 8005d3c:	200006e0 	.word	0x200006e0
 8005d40:	2000073c 	.word	0x2000073c
 8005d44:	20000744 	.word	0x20000744
 8005d48:	2000072c 	.word	0x2000072c
 8005d4c:	20000628 	.word	0x20000628
 8005d50:	20000624 	.word	0x20000624
 8005d54:	20000738 	.word	0x20000738
 8005d58:	20000734 	.word	0x20000734

08005d5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d62:	4b2a      	ldr	r3, [pc, #168]	@ (8005e0c <vTaskSwitchContext+0xb0>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d6a:	4b29      	ldr	r3, [pc, #164]	@ (8005e10 <vTaskSwitchContext+0xb4>)
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d70:	e045      	b.n	8005dfe <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005d72:	4b27      	ldr	r3, [pc, #156]	@ (8005e10 <vTaskSwitchContext+0xb4>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d78:	4b26      	ldr	r3, [pc, #152]	@ (8005e14 <vTaskSwitchContext+0xb8>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	fab3 f383 	clz	r3, r3
 8005d84:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005d86:	7afb      	ldrb	r3, [r7, #11]
 8005d88:	f1c3 031f 	rsb	r3, r3, #31
 8005d8c:	617b      	str	r3, [r7, #20]
 8005d8e:	4922      	ldr	r1, [pc, #136]	@ (8005e18 <vTaskSwitchContext+0xbc>)
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	440b      	add	r3, r1
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10b      	bne.n	8005dba <vTaskSwitchContext+0x5e>
	__asm volatile
 8005da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	607b      	str	r3, [r7, #4]
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop
 8005db8:	e7fd      	b.n	8005db6 <vTaskSwitchContext+0x5a>
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4a14      	ldr	r2, [pc, #80]	@ (8005e18 <vTaskSwitchContext+0xbc>)
 8005dc6:	4413      	add	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	605a      	str	r2, [r3, #4]
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	3308      	adds	r3, #8
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d104      	bne.n	8005dea <vTaskSwitchContext+0x8e>
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	605a      	str	r2, [r3, #4]
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4a0a      	ldr	r2, [pc, #40]	@ (8005e1c <vTaskSwitchContext+0xc0>)
 8005df2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005df4:	4b09      	ldr	r3, [pc, #36]	@ (8005e1c <vTaskSwitchContext+0xc0>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	334c      	adds	r3, #76	@ 0x4c
 8005dfa:	4a09      	ldr	r2, [pc, #36]	@ (8005e20 <vTaskSwitchContext+0xc4>)
 8005dfc:	6013      	str	r3, [r2, #0]
}
 8005dfe:	bf00      	nop
 8005e00:	371c      	adds	r7, #28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	2000074c 	.word	0x2000074c
 8005e10:	20000738 	.word	0x20000738
 8005e14:	2000072c 	.word	0x2000072c
 8005e18:	20000628 	.word	0x20000628
 8005e1c:	20000624 	.word	0x20000624
 8005e20:	2000001c 	.word	0x2000001c

08005e24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e2c:	f000 f852 	bl	8005ed4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e30:	4b06      	ldr	r3, [pc, #24]	@ (8005e4c <prvIdleTask+0x28>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d9f9      	bls.n	8005e2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e38:	4b05      	ldr	r3, [pc, #20]	@ (8005e50 <prvIdleTask+0x2c>)
 8005e3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e48:	e7f0      	b.n	8005e2c <prvIdleTask+0x8>
 8005e4a:	bf00      	nop
 8005e4c:	20000628 	.word	0x20000628
 8005e50:	e000ed04 	.word	0xe000ed04

08005e54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	607b      	str	r3, [r7, #4]
 8005e5e:	e00c      	b.n	8005e7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	4613      	mov	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4a12      	ldr	r2, [pc, #72]	@ (8005eb4 <prvInitialiseTaskLists+0x60>)
 8005e6c:	4413      	add	r3, r2
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7ff fb0b 	bl	800548a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3301      	adds	r3, #1
 8005e78:	607b      	str	r3, [r7, #4]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b06      	cmp	r3, #6
 8005e7e:	d9ef      	bls.n	8005e60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e80:	480d      	ldr	r0, [pc, #52]	@ (8005eb8 <prvInitialiseTaskLists+0x64>)
 8005e82:	f7ff fb02 	bl	800548a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e86:	480d      	ldr	r0, [pc, #52]	@ (8005ebc <prvInitialiseTaskLists+0x68>)
 8005e88:	f7ff faff 	bl	800548a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e8c:	480c      	ldr	r0, [pc, #48]	@ (8005ec0 <prvInitialiseTaskLists+0x6c>)
 8005e8e:	f7ff fafc 	bl	800548a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e92:	480c      	ldr	r0, [pc, #48]	@ (8005ec4 <prvInitialiseTaskLists+0x70>)
 8005e94:	f7ff faf9 	bl	800548a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e98:	480b      	ldr	r0, [pc, #44]	@ (8005ec8 <prvInitialiseTaskLists+0x74>)
 8005e9a:	f7ff faf6 	bl	800548a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005ecc <prvInitialiseTaskLists+0x78>)
 8005ea0:	4a05      	ldr	r2, [pc, #20]	@ (8005eb8 <prvInitialiseTaskLists+0x64>)
 8005ea2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed0 <prvInitialiseTaskLists+0x7c>)
 8005ea6:	4a05      	ldr	r2, [pc, #20]	@ (8005ebc <prvInitialiseTaskLists+0x68>)
 8005ea8:	601a      	str	r2, [r3, #0]
}
 8005eaa:	bf00      	nop
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	20000628 	.word	0x20000628
 8005eb8:	200006b4 	.word	0x200006b4
 8005ebc:	200006c8 	.word	0x200006c8
 8005ec0:	200006e4 	.word	0x200006e4
 8005ec4:	200006f8 	.word	0x200006f8
 8005ec8:	20000710 	.word	0x20000710
 8005ecc:	200006dc 	.word	0x200006dc
 8005ed0:	200006e0 	.word	0x200006e0

08005ed4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005eda:	e019      	b.n	8005f10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005edc:	f000 fa14 	bl	8006308 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ee0:	4b10      	ldr	r3, [pc, #64]	@ (8005f24 <prvCheckTasksWaitingTermination+0x50>)
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	3304      	adds	r3, #4
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff fb56 	bl	800559e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f28 <prvCheckTasksWaitingTermination+0x54>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	4a0b      	ldr	r2, [pc, #44]	@ (8005f28 <prvCheckTasksWaitingTermination+0x54>)
 8005efa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005efc:	4b0b      	ldr	r3, [pc, #44]	@ (8005f2c <prvCheckTasksWaitingTermination+0x58>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3b01      	subs	r3, #1
 8005f02:	4a0a      	ldr	r2, [pc, #40]	@ (8005f2c <prvCheckTasksWaitingTermination+0x58>)
 8005f04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f06:	f000 fa31 	bl	800636c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f810 	bl	8005f30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f10:	4b06      	ldr	r3, [pc, #24]	@ (8005f2c <prvCheckTasksWaitingTermination+0x58>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1e1      	bne.n	8005edc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f18:	bf00      	nop
 8005f1a:	bf00      	nop
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	200006f8 	.word	0x200006f8
 8005f28:	20000724 	.word	0x20000724
 8005f2c:	2000070c 	.word	0x2000070c

08005f30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	334c      	adds	r3, #76	@ 0x4c
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f001 fc5f 	bl	8007800 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d108      	bne.n	8005f5e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f50:	4618      	mov	r0, r3
 8005f52:	f000 fb87 	bl	8006664 <vPortFree>
				vPortFree( pxTCB );
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fb84 	bl	8006664 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f5c:	e019      	b.n	8005f92 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d103      	bne.n	8005f70 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fb7b 	bl	8006664 <vPortFree>
	}
 8005f6e:	e010      	b.n	8005f92 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d00b      	beq.n	8005f92 <prvDeleteTCB+0x62>
	__asm volatile
 8005f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7e:	f383 8811 	msr	BASEPRI, r3
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	60fb      	str	r3, [r7, #12]
}
 8005f8c:	bf00      	nop
 8005f8e:	bf00      	nop
 8005f90:	e7fd      	b.n	8005f8e <prvDeleteTCB+0x5e>
	}
 8005f92:	bf00      	nop
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8005fd4 <prvResetNextTaskUnblockTime+0x38>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d104      	bne.n	8005fb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fac:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd8 <prvResetNextTaskUnblockTime+0x3c>)
 8005fae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fb4:	e008      	b.n	8005fc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fb6:	4b07      	ldr	r3, [pc, #28]	@ (8005fd4 <prvResetNextTaskUnblockTime+0x38>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	4a04      	ldr	r2, [pc, #16]	@ (8005fd8 <prvResetNextTaskUnblockTime+0x3c>)
 8005fc6:	6013      	str	r3, [r2, #0]
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	200006dc 	.word	0x200006dc
 8005fd8:	20000744 	.word	0x20000744

08005fdc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fe6:	4b29      	ldr	r3, [pc, #164]	@ (800608c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fec:	4b28      	ldr	r3, [pc, #160]	@ (8006090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff fad3 	bl	800559e <uxListRemove>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10b      	bne.n	8006016 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005ffe:	4b24      	ldr	r3, [pc, #144]	@ (8006090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006004:	2201      	movs	r2, #1
 8006006:	fa02 f303 	lsl.w	r3, r2, r3
 800600a:	43da      	mvns	r2, r3
 800600c:	4b21      	ldr	r3, [pc, #132]	@ (8006094 <prvAddCurrentTaskToDelayedList+0xb8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4013      	ands	r3, r2
 8006012:	4a20      	ldr	r2, [pc, #128]	@ (8006094 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006014:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800601c:	d10a      	bne.n	8006034 <prvAddCurrentTaskToDelayedList+0x58>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d007      	beq.n	8006034 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006024:	4b1a      	ldr	r3, [pc, #104]	@ (8006090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3304      	adds	r3, #4
 800602a:	4619      	mov	r1, r3
 800602c:	481a      	ldr	r0, [pc, #104]	@ (8006098 <prvAddCurrentTaskToDelayedList+0xbc>)
 800602e:	f7ff fa59 	bl	80054e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006032:	e026      	b.n	8006082 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4413      	add	r3, r2
 800603a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800603c:	4b14      	ldr	r3, [pc, #80]	@ (8006090 <prvAddCurrentTaskToDelayedList+0xb4>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	429a      	cmp	r2, r3
 800604a:	d209      	bcs.n	8006060 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800604c:	4b13      	ldr	r3, [pc, #76]	@ (800609c <prvAddCurrentTaskToDelayedList+0xc0>)
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	4b0f      	ldr	r3, [pc, #60]	@ (8006090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3304      	adds	r3, #4
 8006056:	4619      	mov	r1, r3
 8006058:	4610      	mov	r0, r2
 800605a:	f7ff fa67 	bl	800552c <vListInsert>
}
 800605e:	e010      	b.n	8006082 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006060:	4b0f      	ldr	r3, [pc, #60]	@ (80060a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	4b0a      	ldr	r3, [pc, #40]	@ (8006090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3304      	adds	r3, #4
 800606a:	4619      	mov	r1, r3
 800606c:	4610      	mov	r0, r2
 800606e:	f7ff fa5d 	bl	800552c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006072:	4b0c      	ldr	r3, [pc, #48]	@ (80060a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	429a      	cmp	r2, r3
 800607a:	d202      	bcs.n	8006082 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800607c:	4a09      	ldr	r2, [pc, #36]	@ (80060a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	6013      	str	r3, [r2, #0]
}
 8006082:	bf00      	nop
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	20000728 	.word	0x20000728
 8006090:	20000624 	.word	0x20000624
 8006094:	2000072c 	.word	0x2000072c
 8006098:	20000710 	.word	0x20000710
 800609c:	200006e0 	.word	0x200006e0
 80060a0:	200006dc 	.word	0x200006dc
 80060a4:	20000744 	.word	0x20000744

080060a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	3b04      	subs	r3, #4
 80060b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80060c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3b04      	subs	r3, #4
 80060c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f023 0201 	bic.w	r2, r3, #1
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	3b04      	subs	r3, #4
 80060d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060d8:	4a0c      	ldr	r2, [pc, #48]	@ (800610c <pxPortInitialiseStack+0x64>)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	3b14      	subs	r3, #20
 80060e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3b04      	subs	r3, #4
 80060ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f06f 0202 	mvn.w	r2, #2
 80060f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3b20      	subs	r3, #32
 80060fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060fe:	68fb      	ldr	r3, [r7, #12]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	08006111 	.word	0x08006111

08006110 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006116:	2300      	movs	r3, #0
 8006118:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800611a:	4b13      	ldr	r3, [pc, #76]	@ (8006168 <prvTaskExitError+0x58>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006122:	d00b      	beq.n	800613c <prvTaskExitError+0x2c>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	60fb      	str	r3, [r7, #12]
}
 8006136:	bf00      	nop
 8006138:	bf00      	nop
 800613a:	e7fd      	b.n	8006138 <prvTaskExitError+0x28>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	60bb      	str	r3, [r7, #8]
}
 800614e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006150:	bf00      	nop
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d0fc      	beq.n	8006152 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006158:	bf00      	nop
 800615a:	bf00      	nop
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	2000000c 	.word	0x2000000c
 800616c:	00000000 	.word	0x00000000

08006170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006170:	4b07      	ldr	r3, [pc, #28]	@ (8006190 <pxCurrentTCBConst2>)
 8006172:	6819      	ldr	r1, [r3, #0]
 8006174:	6808      	ldr	r0, [r1, #0]
 8006176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617a:	f380 8809 	msr	PSP, r0
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f04f 0000 	mov.w	r0, #0
 8006186:	f380 8811 	msr	BASEPRI, r0
 800618a:	4770      	bx	lr
 800618c:	f3af 8000 	nop.w

08006190 <pxCurrentTCBConst2>:
 8006190:	20000624 	.word	0x20000624
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop

08006198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006198:	4808      	ldr	r0, [pc, #32]	@ (80061bc <prvPortStartFirstTask+0x24>)
 800619a:	6800      	ldr	r0, [r0, #0]
 800619c:	6800      	ldr	r0, [r0, #0]
 800619e:	f380 8808 	msr	MSP, r0
 80061a2:	f04f 0000 	mov.w	r0, #0
 80061a6:	f380 8814 	msr	CONTROL, r0
 80061aa:	b662      	cpsie	i
 80061ac:	b661      	cpsie	f
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	df00      	svc	0
 80061b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061ba:	bf00      	nop
 80061bc:	e000ed08 	.word	0xe000ed08

080061c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80061c6:	4b47      	ldr	r3, [pc, #284]	@ (80062e4 <xPortStartScheduler+0x124>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a47      	ldr	r2, [pc, #284]	@ (80062e8 <xPortStartScheduler+0x128>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d10b      	bne.n	80061e8 <xPortStartScheduler+0x28>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	613b      	str	r3, [r7, #16]
}
 80061e2:	bf00      	nop
 80061e4:	bf00      	nop
 80061e6:	e7fd      	b.n	80061e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80061e8:	4b3e      	ldr	r3, [pc, #248]	@ (80062e4 <xPortStartScheduler+0x124>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a3f      	ldr	r2, [pc, #252]	@ (80062ec <xPortStartScheduler+0x12c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d10b      	bne.n	800620a <xPortStartScheduler+0x4a>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	60fb      	str	r3, [r7, #12]
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop
 8006208:	e7fd      	b.n	8006206 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800620a:	4b39      	ldr	r3, [pc, #228]	@ (80062f0 <xPortStartScheduler+0x130>)
 800620c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	b2db      	uxtb	r3, r3
 8006214:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	22ff      	movs	r2, #255	@ 0xff
 800621a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	b2db      	uxtb	r3, r3
 8006222:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006224:	78fb      	ldrb	r3, [r7, #3]
 8006226:	b2db      	uxtb	r3, r3
 8006228:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800622c:	b2da      	uxtb	r2, r3
 800622e:	4b31      	ldr	r3, [pc, #196]	@ (80062f4 <xPortStartScheduler+0x134>)
 8006230:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006232:	4b31      	ldr	r3, [pc, #196]	@ (80062f8 <xPortStartScheduler+0x138>)
 8006234:	2207      	movs	r2, #7
 8006236:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006238:	e009      	b.n	800624e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800623a:	4b2f      	ldr	r3, [pc, #188]	@ (80062f8 <xPortStartScheduler+0x138>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3b01      	subs	r3, #1
 8006240:	4a2d      	ldr	r2, [pc, #180]	@ (80062f8 <xPortStartScheduler+0x138>)
 8006242:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006244:	78fb      	ldrb	r3, [r7, #3]
 8006246:	b2db      	uxtb	r3, r3
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	b2db      	uxtb	r3, r3
 800624c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800624e:	78fb      	ldrb	r3, [r7, #3]
 8006250:	b2db      	uxtb	r3, r3
 8006252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006256:	2b80      	cmp	r3, #128	@ 0x80
 8006258:	d0ef      	beq.n	800623a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800625a:	4b27      	ldr	r3, [pc, #156]	@ (80062f8 <xPortStartScheduler+0x138>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f1c3 0307 	rsb	r3, r3, #7
 8006262:	2b04      	cmp	r3, #4
 8006264:	d00b      	beq.n	800627e <xPortStartScheduler+0xbe>
	__asm volatile
 8006266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800626a:	f383 8811 	msr	BASEPRI, r3
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	60bb      	str	r3, [r7, #8]
}
 8006278:	bf00      	nop
 800627a:	bf00      	nop
 800627c:	e7fd      	b.n	800627a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800627e:	4b1e      	ldr	r3, [pc, #120]	@ (80062f8 <xPortStartScheduler+0x138>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	4a1c      	ldr	r2, [pc, #112]	@ (80062f8 <xPortStartScheduler+0x138>)
 8006286:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006288:	4b1b      	ldr	r3, [pc, #108]	@ (80062f8 <xPortStartScheduler+0x138>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006290:	4a19      	ldr	r2, [pc, #100]	@ (80062f8 <xPortStartScheduler+0x138>)
 8006292:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	b2da      	uxtb	r2, r3
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800629c:	4b17      	ldr	r3, [pc, #92]	@ (80062fc <xPortStartScheduler+0x13c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a16      	ldr	r2, [pc, #88]	@ (80062fc <xPortStartScheduler+0x13c>)
 80062a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80062a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062a8:	4b14      	ldr	r3, [pc, #80]	@ (80062fc <xPortStartScheduler+0x13c>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a13      	ldr	r2, [pc, #76]	@ (80062fc <xPortStartScheduler+0x13c>)
 80062ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80062b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062b4:	f000 f8da 	bl	800646c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062b8:	4b11      	ldr	r3, [pc, #68]	@ (8006300 <xPortStartScheduler+0x140>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80062be:	f000 f8f9 	bl	80064b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80062c2:	4b10      	ldr	r3, [pc, #64]	@ (8006304 <xPortStartScheduler+0x144>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a0f      	ldr	r2, [pc, #60]	@ (8006304 <xPortStartScheduler+0x144>)
 80062c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80062cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062ce:	f7ff ff63 	bl	8006198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062d2:	f7ff fd43 	bl	8005d5c <vTaskSwitchContext>
	prvTaskExitError();
 80062d6:	f7ff ff1b 	bl	8006110 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3718      	adds	r7, #24
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	e000ed00 	.word	0xe000ed00
 80062e8:	410fc271 	.word	0x410fc271
 80062ec:	410fc270 	.word	0x410fc270
 80062f0:	e000e400 	.word	0xe000e400
 80062f4:	20000750 	.word	0x20000750
 80062f8:	20000754 	.word	0x20000754
 80062fc:	e000ed20 	.word	0xe000ed20
 8006300:	2000000c 	.word	0x2000000c
 8006304:	e000ef34 	.word	0xe000ef34

08006308 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	607b      	str	r3, [r7, #4]
}
 8006320:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006322:	4b10      	ldr	r3, [pc, #64]	@ (8006364 <vPortEnterCritical+0x5c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3301      	adds	r3, #1
 8006328:	4a0e      	ldr	r2, [pc, #56]	@ (8006364 <vPortEnterCritical+0x5c>)
 800632a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800632c:	4b0d      	ldr	r3, [pc, #52]	@ (8006364 <vPortEnterCritical+0x5c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d110      	bne.n	8006356 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006334:	4b0c      	ldr	r3, [pc, #48]	@ (8006368 <vPortEnterCritical+0x60>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00b      	beq.n	8006356 <vPortEnterCritical+0x4e>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	603b      	str	r3, [r7, #0]
}
 8006350:	bf00      	nop
 8006352:	bf00      	nop
 8006354:	e7fd      	b.n	8006352 <vPortEnterCritical+0x4a>
	}
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	2000000c 	.word	0x2000000c
 8006368:	e000ed04 	.word	0xe000ed04

0800636c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006372:	4b12      	ldr	r3, [pc, #72]	@ (80063bc <vPortExitCritical+0x50>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10b      	bne.n	8006392 <vPortExitCritical+0x26>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	607b      	str	r3, [r7, #4]
}
 800638c:	bf00      	nop
 800638e:	bf00      	nop
 8006390:	e7fd      	b.n	800638e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006392:	4b0a      	ldr	r3, [pc, #40]	@ (80063bc <vPortExitCritical+0x50>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3b01      	subs	r3, #1
 8006398:	4a08      	ldr	r2, [pc, #32]	@ (80063bc <vPortExitCritical+0x50>)
 800639a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800639c:	4b07      	ldr	r3, [pc, #28]	@ (80063bc <vPortExitCritical+0x50>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d105      	bne.n	80063b0 <vPortExitCritical+0x44>
 80063a4:	2300      	movs	r3, #0
 80063a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	2000000c 	.word	0x2000000c

080063c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063c0:	f3ef 8009 	mrs	r0, PSP
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	4b15      	ldr	r3, [pc, #84]	@ (8006420 <pxCurrentTCBConst>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	f01e 0f10 	tst.w	lr, #16
 80063d0:	bf08      	it	eq
 80063d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80063d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063da:	6010      	str	r0, [r2, #0]
 80063dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80063e4:	f380 8811 	msr	BASEPRI, r0
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f7ff fcb4 	bl	8005d5c <vTaskSwitchContext>
 80063f4:	f04f 0000 	mov.w	r0, #0
 80063f8:	f380 8811 	msr	BASEPRI, r0
 80063fc:	bc09      	pop	{r0, r3}
 80063fe:	6819      	ldr	r1, [r3, #0]
 8006400:	6808      	ldr	r0, [r1, #0]
 8006402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006406:	f01e 0f10 	tst.w	lr, #16
 800640a:	bf08      	it	eq
 800640c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006410:	f380 8809 	msr	PSP, r0
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	f3af 8000 	nop.w

08006420 <pxCurrentTCBConst>:
 8006420:	20000624 	.word	0x20000624
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006424:	bf00      	nop
 8006426:	bf00      	nop

08006428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	607b      	str	r3, [r7, #4]
}
 8006440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006442:	f7ff fbd1 	bl	8005be8 <xTaskIncrementTick>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800644c:	4b06      	ldr	r3, [pc, #24]	@ (8006468 <SysTick_Handler+0x40>)
 800644e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	2300      	movs	r3, #0
 8006456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	f383 8811 	msr	BASEPRI, r3
}
 800645e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006460:	bf00      	nop
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	e000ed04 	.word	0xe000ed04

0800646c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800646c:	b480      	push	{r7}
 800646e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006470:	4b0b      	ldr	r3, [pc, #44]	@ (80064a0 <vPortSetupTimerInterrupt+0x34>)
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006476:	4b0b      	ldr	r3, [pc, #44]	@ (80064a4 <vPortSetupTimerInterrupt+0x38>)
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800647c:	4b0a      	ldr	r3, [pc, #40]	@ (80064a8 <vPortSetupTimerInterrupt+0x3c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a0a      	ldr	r2, [pc, #40]	@ (80064ac <vPortSetupTimerInterrupt+0x40>)
 8006482:	fba2 2303 	umull	r2, r3, r2, r3
 8006486:	099b      	lsrs	r3, r3, #6
 8006488:	4a09      	ldr	r2, [pc, #36]	@ (80064b0 <vPortSetupTimerInterrupt+0x44>)
 800648a:	3b01      	subs	r3, #1
 800648c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800648e:	4b04      	ldr	r3, [pc, #16]	@ (80064a0 <vPortSetupTimerInterrupt+0x34>)
 8006490:	2207      	movs	r2, #7
 8006492:	601a      	str	r2, [r3, #0]
}
 8006494:	bf00      	nop
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	e000e010 	.word	0xe000e010
 80064a4:	e000e018 	.word	0xe000e018
 80064a8:	20000000 	.word	0x20000000
 80064ac:	10624dd3 	.word	0x10624dd3
 80064b0:	e000e014 	.word	0xe000e014

080064b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80064b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80064c4 <vPortEnableVFP+0x10>
 80064b8:	6801      	ldr	r1, [r0, #0]
 80064ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80064be:	6001      	str	r1, [r0, #0]
 80064c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80064c2:	bf00      	nop
 80064c4:	e000ed88 	.word	0xe000ed88

080064c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08a      	sub	sp, #40	@ 0x28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80064d0:	2300      	movs	r3, #0
 80064d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80064d4:	f7ff fadc 	bl	8005a90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80064d8:	4b5c      	ldr	r3, [pc, #368]	@ (800664c <pvPortMalloc+0x184>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80064e0:	f000 f924 	bl	800672c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80064e4:	4b5a      	ldr	r3, [pc, #360]	@ (8006650 <pvPortMalloc+0x188>)
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4013      	ands	r3, r2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f040 8095 	bne.w	800661c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d01e      	beq.n	8006536 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80064f8:	2208      	movs	r2, #8
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4413      	add	r3, r2
 80064fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f003 0307 	and.w	r3, r3, #7
 8006506:	2b00      	cmp	r3, #0
 8006508:	d015      	beq.n	8006536 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f023 0307 	bic.w	r3, r3, #7
 8006510:	3308      	adds	r3, #8
 8006512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00b      	beq.n	8006536 <pvPortMalloc+0x6e>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	617b      	str	r3, [r7, #20]
}
 8006530:	bf00      	nop
 8006532:	bf00      	nop
 8006534:	e7fd      	b.n	8006532 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d06f      	beq.n	800661c <pvPortMalloc+0x154>
 800653c:	4b45      	ldr	r3, [pc, #276]	@ (8006654 <pvPortMalloc+0x18c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	429a      	cmp	r2, r3
 8006544:	d86a      	bhi.n	800661c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006546:	4b44      	ldr	r3, [pc, #272]	@ (8006658 <pvPortMalloc+0x190>)
 8006548:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800654a:	4b43      	ldr	r3, [pc, #268]	@ (8006658 <pvPortMalloc+0x190>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006550:	e004      	b.n	800655c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006554:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800655c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	429a      	cmp	r2, r3
 8006564:	d903      	bls.n	800656e <pvPortMalloc+0xa6>
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1f1      	bne.n	8006552 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800656e:	4b37      	ldr	r3, [pc, #220]	@ (800664c <pvPortMalloc+0x184>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006574:	429a      	cmp	r2, r3
 8006576:	d051      	beq.n	800661c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2208      	movs	r2, #8
 800657e:	4413      	add	r3, r2
 8006580:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	1ad2      	subs	r2, r2, r3
 8006592:	2308      	movs	r3, #8
 8006594:	005b      	lsls	r3, r3, #1
 8006596:	429a      	cmp	r2, r3
 8006598:	d920      	bls.n	80065dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800659a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4413      	add	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	f003 0307 	and.w	r3, r3, #7
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00b      	beq.n	80065c4 <pvPortMalloc+0xfc>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	613b      	str	r3, [r7, #16]
}
 80065be:	bf00      	nop
 80065c0:	bf00      	nop
 80065c2:	e7fd      	b.n	80065c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	1ad2      	subs	r2, r2, r3
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80065d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065d6:	69b8      	ldr	r0, [r7, #24]
 80065d8:	f000 f90a 	bl	80067f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065dc:	4b1d      	ldr	r3, [pc, #116]	@ (8006654 <pvPortMalloc+0x18c>)
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006654 <pvPortMalloc+0x18c>)
 80065e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006654 <pvPortMalloc+0x18c>)
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	4b1b      	ldr	r3, [pc, #108]	@ (800665c <pvPortMalloc+0x194>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d203      	bcs.n	80065fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065f6:	4b17      	ldr	r3, [pc, #92]	@ (8006654 <pvPortMalloc+0x18c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a18      	ldr	r2, [pc, #96]	@ (800665c <pvPortMalloc+0x194>)
 80065fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80065fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	4b13      	ldr	r3, [pc, #76]	@ (8006650 <pvPortMalloc+0x188>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	431a      	orrs	r2, r3
 8006608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800660c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660e:	2200      	movs	r2, #0
 8006610:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006612:	4b13      	ldr	r3, [pc, #76]	@ (8006660 <pvPortMalloc+0x198>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3301      	adds	r3, #1
 8006618:	4a11      	ldr	r2, [pc, #68]	@ (8006660 <pvPortMalloc+0x198>)
 800661a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800661c:	f7ff fa46 	bl	8005aac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00b      	beq.n	8006642 <pvPortMalloc+0x17a>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	60fb      	str	r3, [r7, #12]
}
 800663c:	bf00      	nop
 800663e:	bf00      	nop
 8006640:	e7fd      	b.n	800663e <pvPortMalloc+0x176>
	return pvReturn;
 8006642:	69fb      	ldr	r3, [r7, #28]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3728      	adds	r7, #40	@ 0x28
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	20004360 	.word	0x20004360
 8006650:	20004374 	.word	0x20004374
 8006654:	20004364 	.word	0x20004364
 8006658:	20004358 	.word	0x20004358
 800665c:	20004368 	.word	0x20004368
 8006660:	2000436c 	.word	0x2000436c

08006664 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d04f      	beq.n	8006716 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006676:	2308      	movs	r3, #8
 8006678:	425b      	negs	r3, r3
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	4413      	add	r3, r2
 800667e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	4b25      	ldr	r3, [pc, #148]	@ (8006720 <vPortFree+0xbc>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4013      	ands	r3, r2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10b      	bne.n	80066aa <vPortFree+0x46>
	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	60fb      	str	r3, [r7, #12]
}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop
 80066a8:	e7fd      	b.n	80066a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00b      	beq.n	80066ca <vPortFree+0x66>
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	60bb      	str	r3, [r7, #8]
}
 80066c4:	bf00      	nop
 80066c6:	bf00      	nop
 80066c8:	e7fd      	b.n	80066c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	4b14      	ldr	r3, [pc, #80]	@ (8006720 <vPortFree+0xbc>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4013      	ands	r3, r2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01e      	beq.n	8006716 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d11a      	bne.n	8006716 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006720 <vPortFree+0xbc>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	43db      	mvns	r3, r3
 80066ea:	401a      	ands	r2, r3
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80066f0:	f7ff f9ce 	bl	8005a90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006724 <vPortFree+0xc0>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4413      	add	r3, r2
 80066fe:	4a09      	ldr	r2, [pc, #36]	@ (8006724 <vPortFree+0xc0>)
 8006700:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006702:	6938      	ldr	r0, [r7, #16]
 8006704:	f000 f874 	bl	80067f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006708:	4b07      	ldr	r3, [pc, #28]	@ (8006728 <vPortFree+0xc4>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	3301      	adds	r3, #1
 800670e:	4a06      	ldr	r2, [pc, #24]	@ (8006728 <vPortFree+0xc4>)
 8006710:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006712:	f7ff f9cb 	bl	8005aac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006716:	bf00      	nop
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	20004374 	.word	0x20004374
 8006724:	20004364 	.word	0x20004364
 8006728:	20004370 	.word	0x20004370

0800672c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006732:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006736:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006738:	4b27      	ldr	r3, [pc, #156]	@ (80067d8 <prvHeapInit+0xac>)
 800673a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f003 0307 	and.w	r3, r3, #7
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00c      	beq.n	8006760 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	3307      	adds	r3, #7
 800674a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 0307 	bic.w	r3, r3, #7
 8006752:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	4a1f      	ldr	r2, [pc, #124]	@ (80067d8 <prvHeapInit+0xac>)
 800675c:	4413      	add	r3, r2
 800675e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006764:	4a1d      	ldr	r2, [pc, #116]	@ (80067dc <prvHeapInit+0xb0>)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800676a:	4b1c      	ldr	r3, [pc, #112]	@ (80067dc <prvHeapInit+0xb0>)
 800676c:	2200      	movs	r2, #0
 800676e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	4413      	add	r3, r2
 8006776:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006778:	2208      	movs	r2, #8
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	1a9b      	subs	r3, r3, r2
 800677e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0307 	bic.w	r3, r3, #7
 8006786:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4a15      	ldr	r2, [pc, #84]	@ (80067e0 <prvHeapInit+0xb4>)
 800678c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800678e:	4b14      	ldr	r3, [pc, #80]	@ (80067e0 <prvHeapInit+0xb4>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2200      	movs	r2, #0
 8006794:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006796:	4b12      	ldr	r3, [pc, #72]	@ (80067e0 <prvHeapInit+0xb4>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2200      	movs	r2, #0
 800679c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	1ad2      	subs	r2, r2, r3
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067ac:	4b0c      	ldr	r3, [pc, #48]	@ (80067e0 <prvHeapInit+0xb4>)
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	4a0a      	ldr	r2, [pc, #40]	@ (80067e4 <prvHeapInit+0xb8>)
 80067ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	4a09      	ldr	r2, [pc, #36]	@ (80067e8 <prvHeapInit+0xbc>)
 80067c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067c4:	4b09      	ldr	r3, [pc, #36]	@ (80067ec <prvHeapInit+0xc0>)
 80067c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80067ca:	601a      	str	r2, [r3, #0]
}
 80067cc:	bf00      	nop
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	20000758 	.word	0x20000758
 80067dc:	20004358 	.word	0x20004358
 80067e0:	20004360 	.word	0x20004360
 80067e4:	20004368 	.word	0x20004368
 80067e8:	20004364 	.word	0x20004364
 80067ec:	20004374 	.word	0x20004374

080067f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067f8:	4b28      	ldr	r3, [pc, #160]	@ (800689c <prvInsertBlockIntoFreeList+0xac>)
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	e002      	b.n	8006804 <prvInsertBlockIntoFreeList+0x14>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	429a      	cmp	r2, r3
 800680c:	d8f7      	bhi.n	80067fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	4413      	add	r3, r2
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	429a      	cmp	r2, r3
 800681e:	d108      	bne.n	8006832 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	441a      	add	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	441a      	add	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	429a      	cmp	r2, r3
 8006844:	d118      	bne.n	8006878 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	4b15      	ldr	r3, [pc, #84]	@ (80068a0 <prvInsertBlockIntoFreeList+0xb0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	429a      	cmp	r2, r3
 8006850:	d00d      	beq.n	800686e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	441a      	add	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	e008      	b.n	8006880 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800686e:	4b0c      	ldr	r3, [pc, #48]	@ (80068a0 <prvInsertBlockIntoFreeList+0xb0>)
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	e003      	b.n	8006880 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	429a      	cmp	r2, r3
 8006886:	d002      	beq.n	800688e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800688e:	bf00      	nop
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	20004358 	.word	0x20004358
 80068a0:	20004360 	.word	0x20004360

080068a4 <__cvt>:
 80068a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068a8:	ec57 6b10 	vmov	r6, r7, d0
 80068ac:	2f00      	cmp	r7, #0
 80068ae:	460c      	mov	r4, r1
 80068b0:	4619      	mov	r1, r3
 80068b2:	463b      	mov	r3, r7
 80068b4:	bfbb      	ittet	lt
 80068b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80068ba:	461f      	movlt	r7, r3
 80068bc:	2300      	movge	r3, #0
 80068be:	232d      	movlt	r3, #45	@ 0x2d
 80068c0:	700b      	strb	r3, [r1, #0]
 80068c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80068c8:	4691      	mov	r9, r2
 80068ca:	f023 0820 	bic.w	r8, r3, #32
 80068ce:	bfbc      	itt	lt
 80068d0:	4632      	movlt	r2, r6
 80068d2:	4616      	movlt	r6, r2
 80068d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80068d8:	d005      	beq.n	80068e6 <__cvt+0x42>
 80068da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80068de:	d100      	bne.n	80068e2 <__cvt+0x3e>
 80068e0:	3401      	adds	r4, #1
 80068e2:	2102      	movs	r1, #2
 80068e4:	e000      	b.n	80068e8 <__cvt+0x44>
 80068e6:	2103      	movs	r1, #3
 80068e8:	ab03      	add	r3, sp, #12
 80068ea:	9301      	str	r3, [sp, #4]
 80068ec:	ab02      	add	r3, sp, #8
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	ec47 6b10 	vmov	d0, r6, r7
 80068f4:	4653      	mov	r3, sl
 80068f6:	4622      	mov	r2, r4
 80068f8:	f001 f8da 	bl	8007ab0 <_dtoa_r>
 80068fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006900:	4605      	mov	r5, r0
 8006902:	d119      	bne.n	8006938 <__cvt+0x94>
 8006904:	f019 0f01 	tst.w	r9, #1
 8006908:	d00e      	beq.n	8006928 <__cvt+0x84>
 800690a:	eb00 0904 	add.w	r9, r0, r4
 800690e:	2200      	movs	r2, #0
 8006910:	2300      	movs	r3, #0
 8006912:	4630      	mov	r0, r6
 8006914:	4639      	mov	r1, r7
 8006916:	f7fa f8df 	bl	8000ad8 <__aeabi_dcmpeq>
 800691a:	b108      	cbz	r0, 8006920 <__cvt+0x7c>
 800691c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006920:	2230      	movs	r2, #48	@ 0x30
 8006922:	9b03      	ldr	r3, [sp, #12]
 8006924:	454b      	cmp	r3, r9
 8006926:	d31e      	bcc.n	8006966 <__cvt+0xc2>
 8006928:	9b03      	ldr	r3, [sp, #12]
 800692a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800692c:	1b5b      	subs	r3, r3, r5
 800692e:	4628      	mov	r0, r5
 8006930:	6013      	str	r3, [r2, #0]
 8006932:	b004      	add	sp, #16
 8006934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006938:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800693c:	eb00 0904 	add.w	r9, r0, r4
 8006940:	d1e5      	bne.n	800690e <__cvt+0x6a>
 8006942:	7803      	ldrb	r3, [r0, #0]
 8006944:	2b30      	cmp	r3, #48	@ 0x30
 8006946:	d10a      	bne.n	800695e <__cvt+0xba>
 8006948:	2200      	movs	r2, #0
 800694a:	2300      	movs	r3, #0
 800694c:	4630      	mov	r0, r6
 800694e:	4639      	mov	r1, r7
 8006950:	f7fa f8c2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006954:	b918      	cbnz	r0, 800695e <__cvt+0xba>
 8006956:	f1c4 0401 	rsb	r4, r4, #1
 800695a:	f8ca 4000 	str.w	r4, [sl]
 800695e:	f8da 3000 	ldr.w	r3, [sl]
 8006962:	4499      	add	r9, r3
 8006964:	e7d3      	b.n	800690e <__cvt+0x6a>
 8006966:	1c59      	adds	r1, r3, #1
 8006968:	9103      	str	r1, [sp, #12]
 800696a:	701a      	strb	r2, [r3, #0]
 800696c:	e7d9      	b.n	8006922 <__cvt+0x7e>

0800696e <__exponent>:
 800696e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006970:	2900      	cmp	r1, #0
 8006972:	bfba      	itte	lt
 8006974:	4249      	neglt	r1, r1
 8006976:	232d      	movlt	r3, #45	@ 0x2d
 8006978:	232b      	movge	r3, #43	@ 0x2b
 800697a:	2909      	cmp	r1, #9
 800697c:	7002      	strb	r2, [r0, #0]
 800697e:	7043      	strb	r3, [r0, #1]
 8006980:	dd29      	ble.n	80069d6 <__exponent+0x68>
 8006982:	f10d 0307 	add.w	r3, sp, #7
 8006986:	461d      	mov	r5, r3
 8006988:	270a      	movs	r7, #10
 800698a:	461a      	mov	r2, r3
 800698c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006990:	fb07 1416 	mls	r4, r7, r6, r1
 8006994:	3430      	adds	r4, #48	@ 0x30
 8006996:	f802 4c01 	strb.w	r4, [r2, #-1]
 800699a:	460c      	mov	r4, r1
 800699c:	2c63      	cmp	r4, #99	@ 0x63
 800699e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80069a2:	4631      	mov	r1, r6
 80069a4:	dcf1      	bgt.n	800698a <__exponent+0x1c>
 80069a6:	3130      	adds	r1, #48	@ 0x30
 80069a8:	1e94      	subs	r4, r2, #2
 80069aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80069ae:	1c41      	adds	r1, r0, #1
 80069b0:	4623      	mov	r3, r4
 80069b2:	42ab      	cmp	r3, r5
 80069b4:	d30a      	bcc.n	80069cc <__exponent+0x5e>
 80069b6:	f10d 0309 	add.w	r3, sp, #9
 80069ba:	1a9b      	subs	r3, r3, r2
 80069bc:	42ac      	cmp	r4, r5
 80069be:	bf88      	it	hi
 80069c0:	2300      	movhi	r3, #0
 80069c2:	3302      	adds	r3, #2
 80069c4:	4403      	add	r3, r0
 80069c6:	1a18      	subs	r0, r3, r0
 80069c8:	b003      	add	sp, #12
 80069ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80069d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80069d4:	e7ed      	b.n	80069b2 <__exponent+0x44>
 80069d6:	2330      	movs	r3, #48	@ 0x30
 80069d8:	3130      	adds	r1, #48	@ 0x30
 80069da:	7083      	strb	r3, [r0, #2]
 80069dc:	70c1      	strb	r1, [r0, #3]
 80069de:	1d03      	adds	r3, r0, #4
 80069e0:	e7f1      	b.n	80069c6 <__exponent+0x58>
	...

080069e4 <_printf_float>:
 80069e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e8:	b08d      	sub	sp, #52	@ 0x34
 80069ea:	460c      	mov	r4, r1
 80069ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80069f0:	4616      	mov	r6, r2
 80069f2:	461f      	mov	r7, r3
 80069f4:	4605      	mov	r5, r0
 80069f6:	f000 feef 	bl	80077d8 <_localeconv_r>
 80069fa:	6803      	ldr	r3, [r0, #0]
 80069fc:	9304      	str	r3, [sp, #16]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7f9 fc3e 	bl	8000280 <strlen>
 8006a04:	2300      	movs	r3, #0
 8006a06:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a08:	f8d8 3000 	ldr.w	r3, [r8]
 8006a0c:	9005      	str	r0, [sp, #20]
 8006a0e:	3307      	adds	r3, #7
 8006a10:	f023 0307 	bic.w	r3, r3, #7
 8006a14:	f103 0208 	add.w	r2, r3, #8
 8006a18:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006a1c:	f8d4 b000 	ldr.w	fp, [r4]
 8006a20:	f8c8 2000 	str.w	r2, [r8]
 8006a24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a28:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006a2c:	9307      	str	r3, [sp, #28]
 8006a2e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a32:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006a36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a3a:	4b9c      	ldr	r3, [pc, #624]	@ (8006cac <_printf_float+0x2c8>)
 8006a3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a40:	f7fa f87c 	bl	8000b3c <__aeabi_dcmpun>
 8006a44:	bb70      	cbnz	r0, 8006aa4 <_printf_float+0xc0>
 8006a46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a4a:	4b98      	ldr	r3, [pc, #608]	@ (8006cac <_printf_float+0x2c8>)
 8006a4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a50:	f7fa f856 	bl	8000b00 <__aeabi_dcmple>
 8006a54:	bb30      	cbnz	r0, 8006aa4 <_printf_float+0xc0>
 8006a56:	2200      	movs	r2, #0
 8006a58:	2300      	movs	r3, #0
 8006a5a:	4640      	mov	r0, r8
 8006a5c:	4649      	mov	r1, r9
 8006a5e:	f7fa f845 	bl	8000aec <__aeabi_dcmplt>
 8006a62:	b110      	cbz	r0, 8006a6a <_printf_float+0x86>
 8006a64:	232d      	movs	r3, #45	@ 0x2d
 8006a66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a6a:	4a91      	ldr	r2, [pc, #580]	@ (8006cb0 <_printf_float+0x2cc>)
 8006a6c:	4b91      	ldr	r3, [pc, #580]	@ (8006cb4 <_printf_float+0x2d0>)
 8006a6e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006a72:	bf94      	ite	ls
 8006a74:	4690      	movls	r8, r2
 8006a76:	4698      	movhi	r8, r3
 8006a78:	2303      	movs	r3, #3
 8006a7a:	6123      	str	r3, [r4, #16]
 8006a7c:	f02b 0304 	bic.w	r3, fp, #4
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	f04f 0900 	mov.w	r9, #0
 8006a86:	9700      	str	r7, [sp, #0]
 8006a88:	4633      	mov	r3, r6
 8006a8a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006a8c:	4621      	mov	r1, r4
 8006a8e:	4628      	mov	r0, r5
 8006a90:	f000 f9d2 	bl	8006e38 <_printf_common>
 8006a94:	3001      	adds	r0, #1
 8006a96:	f040 808d 	bne.w	8006bb4 <_printf_float+0x1d0>
 8006a9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a9e:	b00d      	add	sp, #52	@ 0x34
 8006aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa4:	4642      	mov	r2, r8
 8006aa6:	464b      	mov	r3, r9
 8006aa8:	4640      	mov	r0, r8
 8006aaa:	4649      	mov	r1, r9
 8006aac:	f7fa f846 	bl	8000b3c <__aeabi_dcmpun>
 8006ab0:	b140      	cbz	r0, 8006ac4 <_printf_float+0xe0>
 8006ab2:	464b      	mov	r3, r9
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	bfbc      	itt	lt
 8006ab8:	232d      	movlt	r3, #45	@ 0x2d
 8006aba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006abe:	4a7e      	ldr	r2, [pc, #504]	@ (8006cb8 <_printf_float+0x2d4>)
 8006ac0:	4b7e      	ldr	r3, [pc, #504]	@ (8006cbc <_printf_float+0x2d8>)
 8006ac2:	e7d4      	b.n	8006a6e <_printf_float+0x8a>
 8006ac4:	6863      	ldr	r3, [r4, #4]
 8006ac6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006aca:	9206      	str	r2, [sp, #24]
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	d13b      	bne.n	8006b48 <_printf_float+0x164>
 8006ad0:	2306      	movs	r3, #6
 8006ad2:	6063      	str	r3, [r4, #4]
 8006ad4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006ad8:	2300      	movs	r3, #0
 8006ada:	6022      	str	r2, [r4, #0]
 8006adc:	9303      	str	r3, [sp, #12]
 8006ade:	ab0a      	add	r3, sp, #40	@ 0x28
 8006ae0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006ae4:	ab09      	add	r3, sp, #36	@ 0x24
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	6861      	ldr	r1, [r4, #4]
 8006aea:	ec49 8b10 	vmov	d0, r8, r9
 8006aee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006af2:	4628      	mov	r0, r5
 8006af4:	f7ff fed6 	bl	80068a4 <__cvt>
 8006af8:	9b06      	ldr	r3, [sp, #24]
 8006afa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006afc:	2b47      	cmp	r3, #71	@ 0x47
 8006afe:	4680      	mov	r8, r0
 8006b00:	d129      	bne.n	8006b56 <_printf_float+0x172>
 8006b02:	1cc8      	adds	r0, r1, #3
 8006b04:	db02      	blt.n	8006b0c <_printf_float+0x128>
 8006b06:	6863      	ldr	r3, [r4, #4]
 8006b08:	4299      	cmp	r1, r3
 8006b0a:	dd41      	ble.n	8006b90 <_printf_float+0x1ac>
 8006b0c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006b10:	fa5f fa8a 	uxtb.w	sl, sl
 8006b14:	3901      	subs	r1, #1
 8006b16:	4652      	mov	r2, sl
 8006b18:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006b1c:	9109      	str	r1, [sp, #36]	@ 0x24
 8006b1e:	f7ff ff26 	bl	800696e <__exponent>
 8006b22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b24:	1813      	adds	r3, r2, r0
 8006b26:	2a01      	cmp	r2, #1
 8006b28:	4681      	mov	r9, r0
 8006b2a:	6123      	str	r3, [r4, #16]
 8006b2c:	dc02      	bgt.n	8006b34 <_printf_float+0x150>
 8006b2e:	6822      	ldr	r2, [r4, #0]
 8006b30:	07d2      	lsls	r2, r2, #31
 8006b32:	d501      	bpl.n	8006b38 <_printf_float+0x154>
 8006b34:	3301      	adds	r3, #1
 8006b36:	6123      	str	r3, [r4, #16]
 8006b38:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d0a2      	beq.n	8006a86 <_printf_float+0xa2>
 8006b40:	232d      	movs	r3, #45	@ 0x2d
 8006b42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b46:	e79e      	b.n	8006a86 <_printf_float+0xa2>
 8006b48:	9a06      	ldr	r2, [sp, #24]
 8006b4a:	2a47      	cmp	r2, #71	@ 0x47
 8006b4c:	d1c2      	bne.n	8006ad4 <_printf_float+0xf0>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1c0      	bne.n	8006ad4 <_printf_float+0xf0>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e7bd      	b.n	8006ad2 <_printf_float+0xee>
 8006b56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b5a:	d9db      	bls.n	8006b14 <_printf_float+0x130>
 8006b5c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006b60:	d118      	bne.n	8006b94 <_printf_float+0x1b0>
 8006b62:	2900      	cmp	r1, #0
 8006b64:	6863      	ldr	r3, [r4, #4]
 8006b66:	dd0b      	ble.n	8006b80 <_printf_float+0x19c>
 8006b68:	6121      	str	r1, [r4, #16]
 8006b6a:	b913      	cbnz	r3, 8006b72 <_printf_float+0x18e>
 8006b6c:	6822      	ldr	r2, [r4, #0]
 8006b6e:	07d0      	lsls	r0, r2, #31
 8006b70:	d502      	bpl.n	8006b78 <_printf_float+0x194>
 8006b72:	3301      	adds	r3, #1
 8006b74:	440b      	add	r3, r1
 8006b76:	6123      	str	r3, [r4, #16]
 8006b78:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006b7a:	f04f 0900 	mov.w	r9, #0
 8006b7e:	e7db      	b.n	8006b38 <_printf_float+0x154>
 8006b80:	b913      	cbnz	r3, 8006b88 <_printf_float+0x1a4>
 8006b82:	6822      	ldr	r2, [r4, #0]
 8006b84:	07d2      	lsls	r2, r2, #31
 8006b86:	d501      	bpl.n	8006b8c <_printf_float+0x1a8>
 8006b88:	3302      	adds	r3, #2
 8006b8a:	e7f4      	b.n	8006b76 <_printf_float+0x192>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e7f2      	b.n	8006b76 <_printf_float+0x192>
 8006b90:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006b94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b96:	4299      	cmp	r1, r3
 8006b98:	db05      	blt.n	8006ba6 <_printf_float+0x1c2>
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	6121      	str	r1, [r4, #16]
 8006b9e:	07d8      	lsls	r0, r3, #31
 8006ba0:	d5ea      	bpl.n	8006b78 <_printf_float+0x194>
 8006ba2:	1c4b      	adds	r3, r1, #1
 8006ba4:	e7e7      	b.n	8006b76 <_printf_float+0x192>
 8006ba6:	2900      	cmp	r1, #0
 8006ba8:	bfd4      	ite	le
 8006baa:	f1c1 0202 	rsble	r2, r1, #2
 8006bae:	2201      	movgt	r2, #1
 8006bb0:	4413      	add	r3, r2
 8006bb2:	e7e0      	b.n	8006b76 <_printf_float+0x192>
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	055a      	lsls	r2, r3, #21
 8006bb8:	d407      	bmi.n	8006bca <_printf_float+0x1e6>
 8006bba:	6923      	ldr	r3, [r4, #16]
 8006bbc:	4642      	mov	r2, r8
 8006bbe:	4631      	mov	r1, r6
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	47b8      	blx	r7
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d12b      	bne.n	8006c20 <_printf_float+0x23c>
 8006bc8:	e767      	b.n	8006a9a <_printf_float+0xb6>
 8006bca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006bce:	f240 80dd 	bls.w	8006d8c <_printf_float+0x3a8>
 8006bd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f7f9 ff7d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d033      	beq.n	8006c4a <_printf_float+0x266>
 8006be2:	4a37      	ldr	r2, [pc, #220]	@ (8006cc0 <_printf_float+0x2dc>)
 8006be4:	2301      	movs	r3, #1
 8006be6:	4631      	mov	r1, r6
 8006be8:	4628      	mov	r0, r5
 8006bea:	47b8      	blx	r7
 8006bec:	3001      	adds	r0, #1
 8006bee:	f43f af54 	beq.w	8006a9a <_printf_float+0xb6>
 8006bf2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006bf6:	4543      	cmp	r3, r8
 8006bf8:	db02      	blt.n	8006c00 <_printf_float+0x21c>
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	07d8      	lsls	r0, r3, #31
 8006bfe:	d50f      	bpl.n	8006c20 <_printf_float+0x23c>
 8006c00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c04:	4631      	mov	r1, r6
 8006c06:	4628      	mov	r0, r5
 8006c08:	47b8      	blx	r7
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	f43f af45 	beq.w	8006a9a <_printf_float+0xb6>
 8006c10:	f04f 0900 	mov.w	r9, #0
 8006c14:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006c18:	f104 0a1a 	add.w	sl, r4, #26
 8006c1c:	45c8      	cmp	r8, r9
 8006c1e:	dc09      	bgt.n	8006c34 <_printf_float+0x250>
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	079b      	lsls	r3, r3, #30
 8006c24:	f100 8103 	bmi.w	8006e2e <_printf_float+0x44a>
 8006c28:	68e0      	ldr	r0, [r4, #12]
 8006c2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c2c:	4298      	cmp	r0, r3
 8006c2e:	bfb8      	it	lt
 8006c30:	4618      	movlt	r0, r3
 8006c32:	e734      	b.n	8006a9e <_printf_float+0xba>
 8006c34:	2301      	movs	r3, #1
 8006c36:	4652      	mov	r2, sl
 8006c38:	4631      	mov	r1, r6
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	47b8      	blx	r7
 8006c3e:	3001      	adds	r0, #1
 8006c40:	f43f af2b 	beq.w	8006a9a <_printf_float+0xb6>
 8006c44:	f109 0901 	add.w	r9, r9, #1
 8006c48:	e7e8      	b.n	8006c1c <_printf_float+0x238>
 8006c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	dc39      	bgt.n	8006cc4 <_printf_float+0x2e0>
 8006c50:	4a1b      	ldr	r2, [pc, #108]	@ (8006cc0 <_printf_float+0x2dc>)
 8006c52:	2301      	movs	r3, #1
 8006c54:	4631      	mov	r1, r6
 8006c56:	4628      	mov	r0, r5
 8006c58:	47b8      	blx	r7
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	f43f af1d 	beq.w	8006a9a <_printf_float+0xb6>
 8006c60:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006c64:	ea59 0303 	orrs.w	r3, r9, r3
 8006c68:	d102      	bne.n	8006c70 <_printf_float+0x28c>
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	07d9      	lsls	r1, r3, #31
 8006c6e:	d5d7      	bpl.n	8006c20 <_printf_float+0x23c>
 8006c70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c74:	4631      	mov	r1, r6
 8006c76:	4628      	mov	r0, r5
 8006c78:	47b8      	blx	r7
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	f43f af0d 	beq.w	8006a9a <_printf_float+0xb6>
 8006c80:	f04f 0a00 	mov.w	sl, #0
 8006c84:	f104 0b1a 	add.w	fp, r4, #26
 8006c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c8a:	425b      	negs	r3, r3
 8006c8c:	4553      	cmp	r3, sl
 8006c8e:	dc01      	bgt.n	8006c94 <_printf_float+0x2b0>
 8006c90:	464b      	mov	r3, r9
 8006c92:	e793      	b.n	8006bbc <_printf_float+0x1d8>
 8006c94:	2301      	movs	r3, #1
 8006c96:	465a      	mov	r2, fp
 8006c98:	4631      	mov	r1, r6
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	47b8      	blx	r7
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	f43f aefb 	beq.w	8006a9a <_printf_float+0xb6>
 8006ca4:	f10a 0a01 	add.w	sl, sl, #1
 8006ca8:	e7ee      	b.n	8006c88 <_printf_float+0x2a4>
 8006caa:	bf00      	nop
 8006cac:	7fefffff 	.word	0x7fefffff
 8006cb0:	0800b1f8 	.word	0x0800b1f8
 8006cb4:	0800b1fc 	.word	0x0800b1fc
 8006cb8:	0800b200 	.word	0x0800b200
 8006cbc:	0800b204 	.word	0x0800b204
 8006cc0:	0800b208 	.word	0x0800b208
 8006cc4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006cc6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006cca:	4553      	cmp	r3, sl
 8006ccc:	bfa8      	it	ge
 8006cce:	4653      	movge	r3, sl
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	4699      	mov	r9, r3
 8006cd4:	dc36      	bgt.n	8006d44 <_printf_float+0x360>
 8006cd6:	f04f 0b00 	mov.w	fp, #0
 8006cda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cde:	f104 021a 	add.w	r2, r4, #26
 8006ce2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ce4:	9306      	str	r3, [sp, #24]
 8006ce6:	eba3 0309 	sub.w	r3, r3, r9
 8006cea:	455b      	cmp	r3, fp
 8006cec:	dc31      	bgt.n	8006d52 <_printf_float+0x36e>
 8006cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cf0:	459a      	cmp	sl, r3
 8006cf2:	dc3a      	bgt.n	8006d6a <_printf_float+0x386>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	07da      	lsls	r2, r3, #31
 8006cf8:	d437      	bmi.n	8006d6a <_printf_float+0x386>
 8006cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cfc:	ebaa 0903 	sub.w	r9, sl, r3
 8006d00:	9b06      	ldr	r3, [sp, #24]
 8006d02:	ebaa 0303 	sub.w	r3, sl, r3
 8006d06:	4599      	cmp	r9, r3
 8006d08:	bfa8      	it	ge
 8006d0a:	4699      	movge	r9, r3
 8006d0c:	f1b9 0f00 	cmp.w	r9, #0
 8006d10:	dc33      	bgt.n	8006d7a <_printf_float+0x396>
 8006d12:	f04f 0800 	mov.w	r8, #0
 8006d16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d1a:	f104 0b1a 	add.w	fp, r4, #26
 8006d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d20:	ebaa 0303 	sub.w	r3, sl, r3
 8006d24:	eba3 0309 	sub.w	r3, r3, r9
 8006d28:	4543      	cmp	r3, r8
 8006d2a:	f77f af79 	ble.w	8006c20 <_printf_float+0x23c>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	465a      	mov	r2, fp
 8006d32:	4631      	mov	r1, r6
 8006d34:	4628      	mov	r0, r5
 8006d36:	47b8      	blx	r7
 8006d38:	3001      	adds	r0, #1
 8006d3a:	f43f aeae 	beq.w	8006a9a <_printf_float+0xb6>
 8006d3e:	f108 0801 	add.w	r8, r8, #1
 8006d42:	e7ec      	b.n	8006d1e <_printf_float+0x33a>
 8006d44:	4642      	mov	r2, r8
 8006d46:	4631      	mov	r1, r6
 8006d48:	4628      	mov	r0, r5
 8006d4a:	47b8      	blx	r7
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	d1c2      	bne.n	8006cd6 <_printf_float+0x2f2>
 8006d50:	e6a3      	b.n	8006a9a <_printf_float+0xb6>
 8006d52:	2301      	movs	r3, #1
 8006d54:	4631      	mov	r1, r6
 8006d56:	4628      	mov	r0, r5
 8006d58:	9206      	str	r2, [sp, #24]
 8006d5a:	47b8      	blx	r7
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	f43f ae9c 	beq.w	8006a9a <_printf_float+0xb6>
 8006d62:	9a06      	ldr	r2, [sp, #24]
 8006d64:	f10b 0b01 	add.w	fp, fp, #1
 8006d68:	e7bb      	b.n	8006ce2 <_printf_float+0x2fe>
 8006d6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d6e:	4631      	mov	r1, r6
 8006d70:	4628      	mov	r0, r5
 8006d72:	47b8      	blx	r7
 8006d74:	3001      	adds	r0, #1
 8006d76:	d1c0      	bne.n	8006cfa <_printf_float+0x316>
 8006d78:	e68f      	b.n	8006a9a <_printf_float+0xb6>
 8006d7a:	9a06      	ldr	r2, [sp, #24]
 8006d7c:	464b      	mov	r3, r9
 8006d7e:	4442      	add	r2, r8
 8006d80:	4631      	mov	r1, r6
 8006d82:	4628      	mov	r0, r5
 8006d84:	47b8      	blx	r7
 8006d86:	3001      	adds	r0, #1
 8006d88:	d1c3      	bne.n	8006d12 <_printf_float+0x32e>
 8006d8a:	e686      	b.n	8006a9a <_printf_float+0xb6>
 8006d8c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006d90:	f1ba 0f01 	cmp.w	sl, #1
 8006d94:	dc01      	bgt.n	8006d9a <_printf_float+0x3b6>
 8006d96:	07db      	lsls	r3, r3, #31
 8006d98:	d536      	bpl.n	8006e08 <_printf_float+0x424>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	4642      	mov	r2, r8
 8006d9e:	4631      	mov	r1, r6
 8006da0:	4628      	mov	r0, r5
 8006da2:	47b8      	blx	r7
 8006da4:	3001      	adds	r0, #1
 8006da6:	f43f ae78 	beq.w	8006a9a <_printf_float+0xb6>
 8006daa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dae:	4631      	mov	r1, r6
 8006db0:	4628      	mov	r0, r5
 8006db2:	47b8      	blx	r7
 8006db4:	3001      	adds	r0, #1
 8006db6:	f43f ae70 	beq.w	8006a9a <_printf_float+0xb6>
 8006dba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006dc6:	f7f9 fe87 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dca:	b9c0      	cbnz	r0, 8006dfe <_printf_float+0x41a>
 8006dcc:	4653      	mov	r3, sl
 8006dce:	f108 0201 	add.w	r2, r8, #1
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	47b8      	blx	r7
 8006dd8:	3001      	adds	r0, #1
 8006dda:	d10c      	bne.n	8006df6 <_printf_float+0x412>
 8006ddc:	e65d      	b.n	8006a9a <_printf_float+0xb6>
 8006dde:	2301      	movs	r3, #1
 8006de0:	465a      	mov	r2, fp
 8006de2:	4631      	mov	r1, r6
 8006de4:	4628      	mov	r0, r5
 8006de6:	47b8      	blx	r7
 8006de8:	3001      	adds	r0, #1
 8006dea:	f43f ae56 	beq.w	8006a9a <_printf_float+0xb6>
 8006dee:	f108 0801 	add.w	r8, r8, #1
 8006df2:	45d0      	cmp	r8, sl
 8006df4:	dbf3      	blt.n	8006dde <_printf_float+0x3fa>
 8006df6:	464b      	mov	r3, r9
 8006df8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006dfc:	e6df      	b.n	8006bbe <_printf_float+0x1da>
 8006dfe:	f04f 0800 	mov.w	r8, #0
 8006e02:	f104 0b1a 	add.w	fp, r4, #26
 8006e06:	e7f4      	b.n	8006df2 <_printf_float+0x40e>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	4642      	mov	r2, r8
 8006e0c:	e7e1      	b.n	8006dd2 <_printf_float+0x3ee>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	464a      	mov	r2, r9
 8006e12:	4631      	mov	r1, r6
 8006e14:	4628      	mov	r0, r5
 8006e16:	47b8      	blx	r7
 8006e18:	3001      	adds	r0, #1
 8006e1a:	f43f ae3e 	beq.w	8006a9a <_printf_float+0xb6>
 8006e1e:	f108 0801 	add.w	r8, r8, #1
 8006e22:	68e3      	ldr	r3, [r4, #12]
 8006e24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e26:	1a5b      	subs	r3, r3, r1
 8006e28:	4543      	cmp	r3, r8
 8006e2a:	dcf0      	bgt.n	8006e0e <_printf_float+0x42a>
 8006e2c:	e6fc      	b.n	8006c28 <_printf_float+0x244>
 8006e2e:	f04f 0800 	mov.w	r8, #0
 8006e32:	f104 0919 	add.w	r9, r4, #25
 8006e36:	e7f4      	b.n	8006e22 <_printf_float+0x43e>

08006e38 <_printf_common>:
 8006e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e3c:	4616      	mov	r6, r2
 8006e3e:	4698      	mov	r8, r3
 8006e40:	688a      	ldr	r2, [r1, #8]
 8006e42:	690b      	ldr	r3, [r1, #16]
 8006e44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	bfb8      	it	lt
 8006e4c:	4613      	movlt	r3, r2
 8006e4e:	6033      	str	r3, [r6, #0]
 8006e50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e54:	4607      	mov	r7, r0
 8006e56:	460c      	mov	r4, r1
 8006e58:	b10a      	cbz	r2, 8006e5e <_printf_common+0x26>
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	6033      	str	r3, [r6, #0]
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	0699      	lsls	r1, r3, #26
 8006e62:	bf42      	ittt	mi
 8006e64:	6833      	ldrmi	r3, [r6, #0]
 8006e66:	3302      	addmi	r3, #2
 8006e68:	6033      	strmi	r3, [r6, #0]
 8006e6a:	6825      	ldr	r5, [r4, #0]
 8006e6c:	f015 0506 	ands.w	r5, r5, #6
 8006e70:	d106      	bne.n	8006e80 <_printf_common+0x48>
 8006e72:	f104 0a19 	add.w	sl, r4, #25
 8006e76:	68e3      	ldr	r3, [r4, #12]
 8006e78:	6832      	ldr	r2, [r6, #0]
 8006e7a:	1a9b      	subs	r3, r3, r2
 8006e7c:	42ab      	cmp	r3, r5
 8006e7e:	dc26      	bgt.n	8006ece <_printf_common+0x96>
 8006e80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e84:	6822      	ldr	r2, [r4, #0]
 8006e86:	3b00      	subs	r3, #0
 8006e88:	bf18      	it	ne
 8006e8a:	2301      	movne	r3, #1
 8006e8c:	0692      	lsls	r2, r2, #26
 8006e8e:	d42b      	bmi.n	8006ee8 <_printf_common+0xb0>
 8006e90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e94:	4641      	mov	r1, r8
 8006e96:	4638      	mov	r0, r7
 8006e98:	47c8      	blx	r9
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	d01e      	beq.n	8006edc <_printf_common+0xa4>
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	6922      	ldr	r2, [r4, #16]
 8006ea2:	f003 0306 	and.w	r3, r3, #6
 8006ea6:	2b04      	cmp	r3, #4
 8006ea8:	bf02      	ittt	eq
 8006eaa:	68e5      	ldreq	r5, [r4, #12]
 8006eac:	6833      	ldreq	r3, [r6, #0]
 8006eae:	1aed      	subeq	r5, r5, r3
 8006eb0:	68a3      	ldr	r3, [r4, #8]
 8006eb2:	bf0c      	ite	eq
 8006eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006eb8:	2500      	movne	r5, #0
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	bfc4      	itt	gt
 8006ebe:	1a9b      	subgt	r3, r3, r2
 8006ec0:	18ed      	addgt	r5, r5, r3
 8006ec2:	2600      	movs	r6, #0
 8006ec4:	341a      	adds	r4, #26
 8006ec6:	42b5      	cmp	r5, r6
 8006ec8:	d11a      	bne.n	8006f00 <_printf_common+0xc8>
 8006eca:	2000      	movs	r0, #0
 8006ecc:	e008      	b.n	8006ee0 <_printf_common+0xa8>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	4652      	mov	r2, sl
 8006ed2:	4641      	mov	r1, r8
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	47c8      	blx	r9
 8006ed8:	3001      	adds	r0, #1
 8006eda:	d103      	bne.n	8006ee4 <_printf_common+0xac>
 8006edc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee4:	3501      	adds	r5, #1
 8006ee6:	e7c6      	b.n	8006e76 <_printf_common+0x3e>
 8006ee8:	18e1      	adds	r1, r4, r3
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	2030      	movs	r0, #48	@ 0x30
 8006eee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ef2:	4422      	add	r2, r4
 8006ef4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ef8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006efc:	3302      	adds	r3, #2
 8006efe:	e7c7      	b.n	8006e90 <_printf_common+0x58>
 8006f00:	2301      	movs	r3, #1
 8006f02:	4622      	mov	r2, r4
 8006f04:	4641      	mov	r1, r8
 8006f06:	4638      	mov	r0, r7
 8006f08:	47c8      	blx	r9
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	d0e6      	beq.n	8006edc <_printf_common+0xa4>
 8006f0e:	3601      	adds	r6, #1
 8006f10:	e7d9      	b.n	8006ec6 <_printf_common+0x8e>
	...

08006f14 <_printf_i>:
 8006f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f18:	7e0f      	ldrb	r7, [r1, #24]
 8006f1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f1c:	2f78      	cmp	r7, #120	@ 0x78
 8006f1e:	4691      	mov	r9, r2
 8006f20:	4680      	mov	r8, r0
 8006f22:	460c      	mov	r4, r1
 8006f24:	469a      	mov	sl, r3
 8006f26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f2a:	d807      	bhi.n	8006f3c <_printf_i+0x28>
 8006f2c:	2f62      	cmp	r7, #98	@ 0x62
 8006f2e:	d80a      	bhi.n	8006f46 <_printf_i+0x32>
 8006f30:	2f00      	cmp	r7, #0
 8006f32:	f000 80d2 	beq.w	80070da <_printf_i+0x1c6>
 8006f36:	2f58      	cmp	r7, #88	@ 0x58
 8006f38:	f000 80b9 	beq.w	80070ae <_printf_i+0x19a>
 8006f3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f44:	e03a      	b.n	8006fbc <_printf_i+0xa8>
 8006f46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f4a:	2b15      	cmp	r3, #21
 8006f4c:	d8f6      	bhi.n	8006f3c <_printf_i+0x28>
 8006f4e:	a101      	add	r1, pc, #4	@ (adr r1, 8006f54 <_printf_i+0x40>)
 8006f50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f54:	08006fad 	.word	0x08006fad
 8006f58:	08006fc1 	.word	0x08006fc1
 8006f5c:	08006f3d 	.word	0x08006f3d
 8006f60:	08006f3d 	.word	0x08006f3d
 8006f64:	08006f3d 	.word	0x08006f3d
 8006f68:	08006f3d 	.word	0x08006f3d
 8006f6c:	08006fc1 	.word	0x08006fc1
 8006f70:	08006f3d 	.word	0x08006f3d
 8006f74:	08006f3d 	.word	0x08006f3d
 8006f78:	08006f3d 	.word	0x08006f3d
 8006f7c:	08006f3d 	.word	0x08006f3d
 8006f80:	080070c1 	.word	0x080070c1
 8006f84:	08006feb 	.word	0x08006feb
 8006f88:	0800707b 	.word	0x0800707b
 8006f8c:	08006f3d 	.word	0x08006f3d
 8006f90:	08006f3d 	.word	0x08006f3d
 8006f94:	080070e3 	.word	0x080070e3
 8006f98:	08006f3d 	.word	0x08006f3d
 8006f9c:	08006feb 	.word	0x08006feb
 8006fa0:	08006f3d 	.word	0x08006f3d
 8006fa4:	08006f3d 	.word	0x08006f3d
 8006fa8:	08007083 	.word	0x08007083
 8006fac:	6833      	ldr	r3, [r6, #0]
 8006fae:	1d1a      	adds	r2, r3, #4
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6032      	str	r2, [r6, #0]
 8006fb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e09d      	b.n	80070fc <_printf_i+0x1e8>
 8006fc0:	6833      	ldr	r3, [r6, #0]
 8006fc2:	6820      	ldr	r0, [r4, #0]
 8006fc4:	1d19      	adds	r1, r3, #4
 8006fc6:	6031      	str	r1, [r6, #0]
 8006fc8:	0606      	lsls	r6, r0, #24
 8006fca:	d501      	bpl.n	8006fd0 <_printf_i+0xbc>
 8006fcc:	681d      	ldr	r5, [r3, #0]
 8006fce:	e003      	b.n	8006fd8 <_printf_i+0xc4>
 8006fd0:	0645      	lsls	r5, r0, #25
 8006fd2:	d5fb      	bpl.n	8006fcc <_printf_i+0xb8>
 8006fd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006fd8:	2d00      	cmp	r5, #0
 8006fda:	da03      	bge.n	8006fe4 <_printf_i+0xd0>
 8006fdc:	232d      	movs	r3, #45	@ 0x2d
 8006fde:	426d      	negs	r5, r5
 8006fe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fe4:	4859      	ldr	r0, [pc, #356]	@ (800714c <_printf_i+0x238>)
 8006fe6:	230a      	movs	r3, #10
 8006fe8:	e011      	b.n	800700e <_printf_i+0xfa>
 8006fea:	6821      	ldr	r1, [r4, #0]
 8006fec:	6833      	ldr	r3, [r6, #0]
 8006fee:	0608      	lsls	r0, r1, #24
 8006ff0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ff4:	d402      	bmi.n	8006ffc <_printf_i+0xe8>
 8006ff6:	0649      	lsls	r1, r1, #25
 8006ff8:	bf48      	it	mi
 8006ffa:	b2ad      	uxthmi	r5, r5
 8006ffc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ffe:	4853      	ldr	r0, [pc, #332]	@ (800714c <_printf_i+0x238>)
 8007000:	6033      	str	r3, [r6, #0]
 8007002:	bf14      	ite	ne
 8007004:	230a      	movne	r3, #10
 8007006:	2308      	moveq	r3, #8
 8007008:	2100      	movs	r1, #0
 800700a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800700e:	6866      	ldr	r6, [r4, #4]
 8007010:	60a6      	str	r6, [r4, #8]
 8007012:	2e00      	cmp	r6, #0
 8007014:	bfa2      	ittt	ge
 8007016:	6821      	ldrge	r1, [r4, #0]
 8007018:	f021 0104 	bicge.w	r1, r1, #4
 800701c:	6021      	strge	r1, [r4, #0]
 800701e:	b90d      	cbnz	r5, 8007024 <_printf_i+0x110>
 8007020:	2e00      	cmp	r6, #0
 8007022:	d04b      	beq.n	80070bc <_printf_i+0x1a8>
 8007024:	4616      	mov	r6, r2
 8007026:	fbb5 f1f3 	udiv	r1, r5, r3
 800702a:	fb03 5711 	mls	r7, r3, r1, r5
 800702e:	5dc7      	ldrb	r7, [r0, r7]
 8007030:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007034:	462f      	mov	r7, r5
 8007036:	42bb      	cmp	r3, r7
 8007038:	460d      	mov	r5, r1
 800703a:	d9f4      	bls.n	8007026 <_printf_i+0x112>
 800703c:	2b08      	cmp	r3, #8
 800703e:	d10b      	bne.n	8007058 <_printf_i+0x144>
 8007040:	6823      	ldr	r3, [r4, #0]
 8007042:	07df      	lsls	r7, r3, #31
 8007044:	d508      	bpl.n	8007058 <_printf_i+0x144>
 8007046:	6923      	ldr	r3, [r4, #16]
 8007048:	6861      	ldr	r1, [r4, #4]
 800704a:	4299      	cmp	r1, r3
 800704c:	bfde      	ittt	le
 800704e:	2330      	movle	r3, #48	@ 0x30
 8007050:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007054:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007058:	1b92      	subs	r2, r2, r6
 800705a:	6122      	str	r2, [r4, #16]
 800705c:	f8cd a000 	str.w	sl, [sp]
 8007060:	464b      	mov	r3, r9
 8007062:	aa03      	add	r2, sp, #12
 8007064:	4621      	mov	r1, r4
 8007066:	4640      	mov	r0, r8
 8007068:	f7ff fee6 	bl	8006e38 <_printf_common>
 800706c:	3001      	adds	r0, #1
 800706e:	d14a      	bne.n	8007106 <_printf_i+0x1f2>
 8007070:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007074:	b004      	add	sp, #16
 8007076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	f043 0320 	orr.w	r3, r3, #32
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	4833      	ldr	r0, [pc, #204]	@ (8007150 <_printf_i+0x23c>)
 8007084:	2778      	movs	r7, #120	@ 0x78
 8007086:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	6831      	ldr	r1, [r6, #0]
 800708e:	061f      	lsls	r7, r3, #24
 8007090:	f851 5b04 	ldr.w	r5, [r1], #4
 8007094:	d402      	bmi.n	800709c <_printf_i+0x188>
 8007096:	065f      	lsls	r7, r3, #25
 8007098:	bf48      	it	mi
 800709a:	b2ad      	uxthmi	r5, r5
 800709c:	6031      	str	r1, [r6, #0]
 800709e:	07d9      	lsls	r1, r3, #31
 80070a0:	bf44      	itt	mi
 80070a2:	f043 0320 	orrmi.w	r3, r3, #32
 80070a6:	6023      	strmi	r3, [r4, #0]
 80070a8:	b11d      	cbz	r5, 80070b2 <_printf_i+0x19e>
 80070aa:	2310      	movs	r3, #16
 80070ac:	e7ac      	b.n	8007008 <_printf_i+0xf4>
 80070ae:	4827      	ldr	r0, [pc, #156]	@ (800714c <_printf_i+0x238>)
 80070b0:	e7e9      	b.n	8007086 <_printf_i+0x172>
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	f023 0320 	bic.w	r3, r3, #32
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	e7f6      	b.n	80070aa <_printf_i+0x196>
 80070bc:	4616      	mov	r6, r2
 80070be:	e7bd      	b.n	800703c <_printf_i+0x128>
 80070c0:	6833      	ldr	r3, [r6, #0]
 80070c2:	6825      	ldr	r5, [r4, #0]
 80070c4:	6961      	ldr	r1, [r4, #20]
 80070c6:	1d18      	adds	r0, r3, #4
 80070c8:	6030      	str	r0, [r6, #0]
 80070ca:	062e      	lsls	r6, r5, #24
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	d501      	bpl.n	80070d4 <_printf_i+0x1c0>
 80070d0:	6019      	str	r1, [r3, #0]
 80070d2:	e002      	b.n	80070da <_printf_i+0x1c6>
 80070d4:	0668      	lsls	r0, r5, #25
 80070d6:	d5fb      	bpl.n	80070d0 <_printf_i+0x1bc>
 80070d8:	8019      	strh	r1, [r3, #0]
 80070da:	2300      	movs	r3, #0
 80070dc:	6123      	str	r3, [r4, #16]
 80070de:	4616      	mov	r6, r2
 80070e0:	e7bc      	b.n	800705c <_printf_i+0x148>
 80070e2:	6833      	ldr	r3, [r6, #0]
 80070e4:	1d1a      	adds	r2, r3, #4
 80070e6:	6032      	str	r2, [r6, #0]
 80070e8:	681e      	ldr	r6, [r3, #0]
 80070ea:	6862      	ldr	r2, [r4, #4]
 80070ec:	2100      	movs	r1, #0
 80070ee:	4630      	mov	r0, r6
 80070f0:	f7f9 f876 	bl	80001e0 <memchr>
 80070f4:	b108      	cbz	r0, 80070fa <_printf_i+0x1e6>
 80070f6:	1b80      	subs	r0, r0, r6
 80070f8:	6060      	str	r0, [r4, #4]
 80070fa:	6863      	ldr	r3, [r4, #4]
 80070fc:	6123      	str	r3, [r4, #16]
 80070fe:	2300      	movs	r3, #0
 8007100:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007104:	e7aa      	b.n	800705c <_printf_i+0x148>
 8007106:	6923      	ldr	r3, [r4, #16]
 8007108:	4632      	mov	r2, r6
 800710a:	4649      	mov	r1, r9
 800710c:	4640      	mov	r0, r8
 800710e:	47d0      	blx	sl
 8007110:	3001      	adds	r0, #1
 8007112:	d0ad      	beq.n	8007070 <_printf_i+0x15c>
 8007114:	6823      	ldr	r3, [r4, #0]
 8007116:	079b      	lsls	r3, r3, #30
 8007118:	d413      	bmi.n	8007142 <_printf_i+0x22e>
 800711a:	68e0      	ldr	r0, [r4, #12]
 800711c:	9b03      	ldr	r3, [sp, #12]
 800711e:	4298      	cmp	r0, r3
 8007120:	bfb8      	it	lt
 8007122:	4618      	movlt	r0, r3
 8007124:	e7a6      	b.n	8007074 <_printf_i+0x160>
 8007126:	2301      	movs	r3, #1
 8007128:	4632      	mov	r2, r6
 800712a:	4649      	mov	r1, r9
 800712c:	4640      	mov	r0, r8
 800712e:	47d0      	blx	sl
 8007130:	3001      	adds	r0, #1
 8007132:	d09d      	beq.n	8007070 <_printf_i+0x15c>
 8007134:	3501      	adds	r5, #1
 8007136:	68e3      	ldr	r3, [r4, #12]
 8007138:	9903      	ldr	r1, [sp, #12]
 800713a:	1a5b      	subs	r3, r3, r1
 800713c:	42ab      	cmp	r3, r5
 800713e:	dcf2      	bgt.n	8007126 <_printf_i+0x212>
 8007140:	e7eb      	b.n	800711a <_printf_i+0x206>
 8007142:	2500      	movs	r5, #0
 8007144:	f104 0619 	add.w	r6, r4, #25
 8007148:	e7f5      	b.n	8007136 <_printf_i+0x222>
 800714a:	bf00      	nop
 800714c:	0800b20a 	.word	0x0800b20a
 8007150:	0800b21b 	.word	0x0800b21b

08007154 <_scanf_float>:
 8007154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007158:	b087      	sub	sp, #28
 800715a:	4617      	mov	r7, r2
 800715c:	9303      	str	r3, [sp, #12]
 800715e:	688b      	ldr	r3, [r1, #8]
 8007160:	1e5a      	subs	r2, r3, #1
 8007162:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007166:	bf81      	itttt	hi
 8007168:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800716c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007170:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007174:	608b      	strhi	r3, [r1, #8]
 8007176:	680b      	ldr	r3, [r1, #0]
 8007178:	460a      	mov	r2, r1
 800717a:	f04f 0500 	mov.w	r5, #0
 800717e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007182:	f842 3b1c 	str.w	r3, [r2], #28
 8007186:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800718a:	4680      	mov	r8, r0
 800718c:	460c      	mov	r4, r1
 800718e:	bf98      	it	ls
 8007190:	f04f 0b00 	movls.w	fp, #0
 8007194:	9201      	str	r2, [sp, #4]
 8007196:	4616      	mov	r6, r2
 8007198:	46aa      	mov	sl, r5
 800719a:	46a9      	mov	r9, r5
 800719c:	9502      	str	r5, [sp, #8]
 800719e:	68a2      	ldr	r2, [r4, #8]
 80071a0:	b152      	cbz	r2, 80071b8 <_scanf_float+0x64>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	2b4e      	cmp	r3, #78	@ 0x4e
 80071a8:	d864      	bhi.n	8007274 <_scanf_float+0x120>
 80071aa:	2b40      	cmp	r3, #64	@ 0x40
 80071ac:	d83c      	bhi.n	8007228 <_scanf_float+0xd4>
 80071ae:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80071b2:	b2c8      	uxtb	r0, r1
 80071b4:	280e      	cmp	r0, #14
 80071b6:	d93a      	bls.n	800722e <_scanf_float+0xda>
 80071b8:	f1b9 0f00 	cmp.w	r9, #0
 80071bc:	d003      	beq.n	80071c6 <_scanf_float+0x72>
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80071ca:	f1ba 0f01 	cmp.w	sl, #1
 80071ce:	f200 8117 	bhi.w	8007400 <_scanf_float+0x2ac>
 80071d2:	9b01      	ldr	r3, [sp, #4]
 80071d4:	429e      	cmp	r6, r3
 80071d6:	f200 8108 	bhi.w	80073ea <_scanf_float+0x296>
 80071da:	2001      	movs	r0, #1
 80071dc:	b007      	add	sp, #28
 80071de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80071e6:	2a0d      	cmp	r2, #13
 80071e8:	d8e6      	bhi.n	80071b8 <_scanf_float+0x64>
 80071ea:	a101      	add	r1, pc, #4	@ (adr r1, 80071f0 <_scanf_float+0x9c>)
 80071ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80071f0:	08007337 	.word	0x08007337
 80071f4:	080071b9 	.word	0x080071b9
 80071f8:	080071b9 	.word	0x080071b9
 80071fc:	080071b9 	.word	0x080071b9
 8007200:	08007397 	.word	0x08007397
 8007204:	0800736f 	.word	0x0800736f
 8007208:	080071b9 	.word	0x080071b9
 800720c:	080071b9 	.word	0x080071b9
 8007210:	08007345 	.word	0x08007345
 8007214:	080071b9 	.word	0x080071b9
 8007218:	080071b9 	.word	0x080071b9
 800721c:	080071b9 	.word	0x080071b9
 8007220:	080071b9 	.word	0x080071b9
 8007224:	080072fd 	.word	0x080072fd
 8007228:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800722c:	e7db      	b.n	80071e6 <_scanf_float+0x92>
 800722e:	290e      	cmp	r1, #14
 8007230:	d8c2      	bhi.n	80071b8 <_scanf_float+0x64>
 8007232:	a001      	add	r0, pc, #4	@ (adr r0, 8007238 <_scanf_float+0xe4>)
 8007234:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007238:	080072ed 	.word	0x080072ed
 800723c:	080071b9 	.word	0x080071b9
 8007240:	080072ed 	.word	0x080072ed
 8007244:	08007383 	.word	0x08007383
 8007248:	080071b9 	.word	0x080071b9
 800724c:	08007295 	.word	0x08007295
 8007250:	080072d3 	.word	0x080072d3
 8007254:	080072d3 	.word	0x080072d3
 8007258:	080072d3 	.word	0x080072d3
 800725c:	080072d3 	.word	0x080072d3
 8007260:	080072d3 	.word	0x080072d3
 8007264:	080072d3 	.word	0x080072d3
 8007268:	080072d3 	.word	0x080072d3
 800726c:	080072d3 	.word	0x080072d3
 8007270:	080072d3 	.word	0x080072d3
 8007274:	2b6e      	cmp	r3, #110	@ 0x6e
 8007276:	d809      	bhi.n	800728c <_scanf_float+0x138>
 8007278:	2b60      	cmp	r3, #96	@ 0x60
 800727a:	d8b2      	bhi.n	80071e2 <_scanf_float+0x8e>
 800727c:	2b54      	cmp	r3, #84	@ 0x54
 800727e:	d07b      	beq.n	8007378 <_scanf_float+0x224>
 8007280:	2b59      	cmp	r3, #89	@ 0x59
 8007282:	d199      	bne.n	80071b8 <_scanf_float+0x64>
 8007284:	2d07      	cmp	r5, #7
 8007286:	d197      	bne.n	80071b8 <_scanf_float+0x64>
 8007288:	2508      	movs	r5, #8
 800728a:	e02c      	b.n	80072e6 <_scanf_float+0x192>
 800728c:	2b74      	cmp	r3, #116	@ 0x74
 800728e:	d073      	beq.n	8007378 <_scanf_float+0x224>
 8007290:	2b79      	cmp	r3, #121	@ 0x79
 8007292:	e7f6      	b.n	8007282 <_scanf_float+0x12e>
 8007294:	6821      	ldr	r1, [r4, #0]
 8007296:	05c8      	lsls	r0, r1, #23
 8007298:	d51b      	bpl.n	80072d2 <_scanf_float+0x17e>
 800729a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800729e:	6021      	str	r1, [r4, #0]
 80072a0:	f109 0901 	add.w	r9, r9, #1
 80072a4:	f1bb 0f00 	cmp.w	fp, #0
 80072a8:	d003      	beq.n	80072b2 <_scanf_float+0x15e>
 80072aa:	3201      	adds	r2, #1
 80072ac:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80072b0:	60a2      	str	r2, [r4, #8]
 80072b2:	68a3      	ldr	r3, [r4, #8]
 80072b4:	3b01      	subs	r3, #1
 80072b6:	60a3      	str	r3, [r4, #8]
 80072b8:	6923      	ldr	r3, [r4, #16]
 80072ba:	3301      	adds	r3, #1
 80072bc:	6123      	str	r3, [r4, #16]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	3b01      	subs	r3, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	607b      	str	r3, [r7, #4]
 80072c6:	f340 8087 	ble.w	80073d8 <_scanf_float+0x284>
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	3301      	adds	r3, #1
 80072ce:	603b      	str	r3, [r7, #0]
 80072d0:	e765      	b.n	800719e <_scanf_float+0x4a>
 80072d2:	eb1a 0105 	adds.w	r1, sl, r5
 80072d6:	f47f af6f 	bne.w	80071b8 <_scanf_float+0x64>
 80072da:	6822      	ldr	r2, [r4, #0]
 80072dc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80072e0:	6022      	str	r2, [r4, #0]
 80072e2:	460d      	mov	r5, r1
 80072e4:	468a      	mov	sl, r1
 80072e6:	f806 3b01 	strb.w	r3, [r6], #1
 80072ea:	e7e2      	b.n	80072b2 <_scanf_float+0x15e>
 80072ec:	6822      	ldr	r2, [r4, #0]
 80072ee:	0610      	lsls	r0, r2, #24
 80072f0:	f57f af62 	bpl.w	80071b8 <_scanf_float+0x64>
 80072f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80072f8:	6022      	str	r2, [r4, #0]
 80072fa:	e7f4      	b.n	80072e6 <_scanf_float+0x192>
 80072fc:	f1ba 0f00 	cmp.w	sl, #0
 8007300:	d10e      	bne.n	8007320 <_scanf_float+0x1cc>
 8007302:	f1b9 0f00 	cmp.w	r9, #0
 8007306:	d10e      	bne.n	8007326 <_scanf_float+0x1d2>
 8007308:	6822      	ldr	r2, [r4, #0]
 800730a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800730e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007312:	d108      	bne.n	8007326 <_scanf_float+0x1d2>
 8007314:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007318:	6022      	str	r2, [r4, #0]
 800731a:	f04f 0a01 	mov.w	sl, #1
 800731e:	e7e2      	b.n	80072e6 <_scanf_float+0x192>
 8007320:	f1ba 0f02 	cmp.w	sl, #2
 8007324:	d055      	beq.n	80073d2 <_scanf_float+0x27e>
 8007326:	2d01      	cmp	r5, #1
 8007328:	d002      	beq.n	8007330 <_scanf_float+0x1dc>
 800732a:	2d04      	cmp	r5, #4
 800732c:	f47f af44 	bne.w	80071b8 <_scanf_float+0x64>
 8007330:	3501      	adds	r5, #1
 8007332:	b2ed      	uxtb	r5, r5
 8007334:	e7d7      	b.n	80072e6 <_scanf_float+0x192>
 8007336:	f1ba 0f01 	cmp.w	sl, #1
 800733a:	f47f af3d 	bne.w	80071b8 <_scanf_float+0x64>
 800733e:	f04f 0a02 	mov.w	sl, #2
 8007342:	e7d0      	b.n	80072e6 <_scanf_float+0x192>
 8007344:	b97d      	cbnz	r5, 8007366 <_scanf_float+0x212>
 8007346:	f1b9 0f00 	cmp.w	r9, #0
 800734a:	f47f af38 	bne.w	80071be <_scanf_float+0x6a>
 800734e:	6822      	ldr	r2, [r4, #0]
 8007350:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007354:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007358:	f040 8108 	bne.w	800756c <_scanf_float+0x418>
 800735c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007360:	6022      	str	r2, [r4, #0]
 8007362:	2501      	movs	r5, #1
 8007364:	e7bf      	b.n	80072e6 <_scanf_float+0x192>
 8007366:	2d03      	cmp	r5, #3
 8007368:	d0e2      	beq.n	8007330 <_scanf_float+0x1dc>
 800736a:	2d05      	cmp	r5, #5
 800736c:	e7de      	b.n	800732c <_scanf_float+0x1d8>
 800736e:	2d02      	cmp	r5, #2
 8007370:	f47f af22 	bne.w	80071b8 <_scanf_float+0x64>
 8007374:	2503      	movs	r5, #3
 8007376:	e7b6      	b.n	80072e6 <_scanf_float+0x192>
 8007378:	2d06      	cmp	r5, #6
 800737a:	f47f af1d 	bne.w	80071b8 <_scanf_float+0x64>
 800737e:	2507      	movs	r5, #7
 8007380:	e7b1      	b.n	80072e6 <_scanf_float+0x192>
 8007382:	6822      	ldr	r2, [r4, #0]
 8007384:	0591      	lsls	r1, r2, #22
 8007386:	f57f af17 	bpl.w	80071b8 <_scanf_float+0x64>
 800738a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800738e:	6022      	str	r2, [r4, #0]
 8007390:	f8cd 9008 	str.w	r9, [sp, #8]
 8007394:	e7a7      	b.n	80072e6 <_scanf_float+0x192>
 8007396:	6822      	ldr	r2, [r4, #0]
 8007398:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800739c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80073a0:	d006      	beq.n	80073b0 <_scanf_float+0x25c>
 80073a2:	0550      	lsls	r0, r2, #21
 80073a4:	f57f af08 	bpl.w	80071b8 <_scanf_float+0x64>
 80073a8:	f1b9 0f00 	cmp.w	r9, #0
 80073ac:	f000 80de 	beq.w	800756c <_scanf_float+0x418>
 80073b0:	0591      	lsls	r1, r2, #22
 80073b2:	bf58      	it	pl
 80073b4:	9902      	ldrpl	r1, [sp, #8]
 80073b6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80073ba:	bf58      	it	pl
 80073bc:	eba9 0101 	subpl.w	r1, r9, r1
 80073c0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80073c4:	bf58      	it	pl
 80073c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80073ca:	6022      	str	r2, [r4, #0]
 80073cc:	f04f 0900 	mov.w	r9, #0
 80073d0:	e789      	b.n	80072e6 <_scanf_float+0x192>
 80073d2:	f04f 0a03 	mov.w	sl, #3
 80073d6:	e786      	b.n	80072e6 <_scanf_float+0x192>
 80073d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80073dc:	4639      	mov	r1, r7
 80073de:	4640      	mov	r0, r8
 80073e0:	4798      	blx	r3
 80073e2:	2800      	cmp	r0, #0
 80073e4:	f43f aedb 	beq.w	800719e <_scanf_float+0x4a>
 80073e8:	e6e6      	b.n	80071b8 <_scanf_float+0x64>
 80073ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073f2:	463a      	mov	r2, r7
 80073f4:	4640      	mov	r0, r8
 80073f6:	4798      	blx	r3
 80073f8:	6923      	ldr	r3, [r4, #16]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	6123      	str	r3, [r4, #16]
 80073fe:	e6e8      	b.n	80071d2 <_scanf_float+0x7e>
 8007400:	1e6b      	subs	r3, r5, #1
 8007402:	2b06      	cmp	r3, #6
 8007404:	d824      	bhi.n	8007450 <_scanf_float+0x2fc>
 8007406:	2d02      	cmp	r5, #2
 8007408:	d836      	bhi.n	8007478 <_scanf_float+0x324>
 800740a:	9b01      	ldr	r3, [sp, #4]
 800740c:	429e      	cmp	r6, r3
 800740e:	f67f aee4 	bls.w	80071da <_scanf_float+0x86>
 8007412:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007416:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800741a:	463a      	mov	r2, r7
 800741c:	4640      	mov	r0, r8
 800741e:	4798      	blx	r3
 8007420:	6923      	ldr	r3, [r4, #16]
 8007422:	3b01      	subs	r3, #1
 8007424:	6123      	str	r3, [r4, #16]
 8007426:	e7f0      	b.n	800740a <_scanf_float+0x2b6>
 8007428:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800742c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007430:	463a      	mov	r2, r7
 8007432:	4640      	mov	r0, r8
 8007434:	4798      	blx	r3
 8007436:	6923      	ldr	r3, [r4, #16]
 8007438:	3b01      	subs	r3, #1
 800743a:	6123      	str	r3, [r4, #16]
 800743c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007440:	fa5f fa8a 	uxtb.w	sl, sl
 8007444:	f1ba 0f02 	cmp.w	sl, #2
 8007448:	d1ee      	bne.n	8007428 <_scanf_float+0x2d4>
 800744a:	3d03      	subs	r5, #3
 800744c:	b2ed      	uxtb	r5, r5
 800744e:	1b76      	subs	r6, r6, r5
 8007450:	6823      	ldr	r3, [r4, #0]
 8007452:	05da      	lsls	r2, r3, #23
 8007454:	d530      	bpl.n	80074b8 <_scanf_float+0x364>
 8007456:	055b      	lsls	r3, r3, #21
 8007458:	d511      	bpl.n	800747e <_scanf_float+0x32a>
 800745a:	9b01      	ldr	r3, [sp, #4]
 800745c:	429e      	cmp	r6, r3
 800745e:	f67f aebc 	bls.w	80071da <_scanf_float+0x86>
 8007462:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007466:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800746a:	463a      	mov	r2, r7
 800746c:	4640      	mov	r0, r8
 800746e:	4798      	blx	r3
 8007470:	6923      	ldr	r3, [r4, #16]
 8007472:	3b01      	subs	r3, #1
 8007474:	6123      	str	r3, [r4, #16]
 8007476:	e7f0      	b.n	800745a <_scanf_float+0x306>
 8007478:	46aa      	mov	sl, r5
 800747a:	46b3      	mov	fp, r6
 800747c:	e7de      	b.n	800743c <_scanf_float+0x2e8>
 800747e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007482:	6923      	ldr	r3, [r4, #16]
 8007484:	2965      	cmp	r1, #101	@ 0x65
 8007486:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800748a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800748e:	6123      	str	r3, [r4, #16]
 8007490:	d00c      	beq.n	80074ac <_scanf_float+0x358>
 8007492:	2945      	cmp	r1, #69	@ 0x45
 8007494:	d00a      	beq.n	80074ac <_scanf_float+0x358>
 8007496:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800749a:	463a      	mov	r2, r7
 800749c:	4640      	mov	r0, r8
 800749e:	4798      	blx	r3
 80074a0:	6923      	ldr	r3, [r4, #16]
 80074a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80074a6:	3b01      	subs	r3, #1
 80074a8:	1eb5      	subs	r5, r6, #2
 80074aa:	6123      	str	r3, [r4, #16]
 80074ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074b0:	463a      	mov	r2, r7
 80074b2:	4640      	mov	r0, r8
 80074b4:	4798      	blx	r3
 80074b6:	462e      	mov	r6, r5
 80074b8:	6822      	ldr	r2, [r4, #0]
 80074ba:	f012 0210 	ands.w	r2, r2, #16
 80074be:	d001      	beq.n	80074c4 <_scanf_float+0x370>
 80074c0:	2000      	movs	r0, #0
 80074c2:	e68b      	b.n	80071dc <_scanf_float+0x88>
 80074c4:	7032      	strb	r2, [r6, #0]
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80074cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074d0:	d11c      	bne.n	800750c <_scanf_float+0x3b8>
 80074d2:	9b02      	ldr	r3, [sp, #8]
 80074d4:	454b      	cmp	r3, r9
 80074d6:	eba3 0209 	sub.w	r2, r3, r9
 80074da:	d123      	bne.n	8007524 <_scanf_float+0x3d0>
 80074dc:	9901      	ldr	r1, [sp, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	4640      	mov	r0, r8
 80074e2:	f002 fc5d 	bl	8009da0 <_strtod_r>
 80074e6:	9b03      	ldr	r3, [sp, #12]
 80074e8:	6821      	ldr	r1, [r4, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f011 0f02 	tst.w	r1, #2
 80074f0:	ec57 6b10 	vmov	r6, r7, d0
 80074f4:	f103 0204 	add.w	r2, r3, #4
 80074f8:	d01f      	beq.n	800753a <_scanf_float+0x3e6>
 80074fa:	9903      	ldr	r1, [sp, #12]
 80074fc:	600a      	str	r2, [r1, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	e9c3 6700 	strd	r6, r7, [r3]
 8007504:	68e3      	ldr	r3, [r4, #12]
 8007506:	3301      	adds	r3, #1
 8007508:	60e3      	str	r3, [r4, #12]
 800750a:	e7d9      	b.n	80074c0 <_scanf_float+0x36c>
 800750c:	9b04      	ldr	r3, [sp, #16]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0e4      	beq.n	80074dc <_scanf_float+0x388>
 8007512:	9905      	ldr	r1, [sp, #20]
 8007514:	230a      	movs	r3, #10
 8007516:	3101      	adds	r1, #1
 8007518:	4640      	mov	r0, r8
 800751a:	f002 fcc1 	bl	8009ea0 <_strtol_r>
 800751e:	9b04      	ldr	r3, [sp, #16]
 8007520:	9e05      	ldr	r6, [sp, #20]
 8007522:	1ac2      	subs	r2, r0, r3
 8007524:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007528:	429e      	cmp	r6, r3
 800752a:	bf28      	it	cs
 800752c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007530:	4910      	ldr	r1, [pc, #64]	@ (8007574 <_scanf_float+0x420>)
 8007532:	4630      	mov	r0, r6
 8007534:	f000 f8e4 	bl	8007700 <siprintf>
 8007538:	e7d0      	b.n	80074dc <_scanf_float+0x388>
 800753a:	f011 0f04 	tst.w	r1, #4
 800753e:	9903      	ldr	r1, [sp, #12]
 8007540:	600a      	str	r2, [r1, #0]
 8007542:	d1dc      	bne.n	80074fe <_scanf_float+0x3aa>
 8007544:	681d      	ldr	r5, [r3, #0]
 8007546:	4632      	mov	r2, r6
 8007548:	463b      	mov	r3, r7
 800754a:	4630      	mov	r0, r6
 800754c:	4639      	mov	r1, r7
 800754e:	f7f9 faf5 	bl	8000b3c <__aeabi_dcmpun>
 8007552:	b128      	cbz	r0, 8007560 <_scanf_float+0x40c>
 8007554:	4808      	ldr	r0, [pc, #32]	@ (8007578 <_scanf_float+0x424>)
 8007556:	f000 fa1b 	bl	8007990 <nanf>
 800755a:	ed85 0a00 	vstr	s0, [r5]
 800755e:	e7d1      	b.n	8007504 <_scanf_float+0x3b0>
 8007560:	4630      	mov	r0, r6
 8007562:	4639      	mov	r1, r7
 8007564:	f7f9 fb48 	bl	8000bf8 <__aeabi_d2f>
 8007568:	6028      	str	r0, [r5, #0]
 800756a:	e7cb      	b.n	8007504 <_scanf_float+0x3b0>
 800756c:	f04f 0900 	mov.w	r9, #0
 8007570:	e629      	b.n	80071c6 <_scanf_float+0x72>
 8007572:	bf00      	nop
 8007574:	0800b22c 	.word	0x0800b22c
 8007578:	0800b5c5 	.word	0x0800b5c5

0800757c <std>:
 800757c:	2300      	movs	r3, #0
 800757e:	b510      	push	{r4, lr}
 8007580:	4604      	mov	r4, r0
 8007582:	e9c0 3300 	strd	r3, r3, [r0]
 8007586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800758a:	6083      	str	r3, [r0, #8]
 800758c:	8181      	strh	r1, [r0, #12]
 800758e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007590:	81c2      	strh	r2, [r0, #14]
 8007592:	6183      	str	r3, [r0, #24]
 8007594:	4619      	mov	r1, r3
 8007596:	2208      	movs	r2, #8
 8007598:	305c      	adds	r0, #92	@ 0x5c
 800759a:	f000 f914 	bl	80077c6 <memset>
 800759e:	4b0d      	ldr	r3, [pc, #52]	@ (80075d4 <std+0x58>)
 80075a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80075a2:	4b0d      	ldr	r3, [pc, #52]	@ (80075d8 <std+0x5c>)
 80075a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80075a6:	4b0d      	ldr	r3, [pc, #52]	@ (80075dc <std+0x60>)
 80075a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80075aa:	4b0d      	ldr	r3, [pc, #52]	@ (80075e0 <std+0x64>)
 80075ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80075ae:	4b0d      	ldr	r3, [pc, #52]	@ (80075e4 <std+0x68>)
 80075b0:	6224      	str	r4, [r4, #32]
 80075b2:	429c      	cmp	r4, r3
 80075b4:	d006      	beq.n	80075c4 <std+0x48>
 80075b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80075ba:	4294      	cmp	r4, r2
 80075bc:	d002      	beq.n	80075c4 <std+0x48>
 80075be:	33d0      	adds	r3, #208	@ 0xd0
 80075c0:	429c      	cmp	r4, r3
 80075c2:	d105      	bne.n	80075d0 <std+0x54>
 80075c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80075c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075cc:	f000 b9ce 	b.w	800796c <__retarget_lock_init_recursive>
 80075d0:	bd10      	pop	{r4, pc}
 80075d2:	bf00      	nop
 80075d4:	08007741 	.word	0x08007741
 80075d8:	08007763 	.word	0x08007763
 80075dc:	0800779b 	.word	0x0800779b
 80075e0:	080077bf 	.word	0x080077bf
 80075e4:	20004378 	.word	0x20004378

080075e8 <stdio_exit_handler>:
 80075e8:	4a02      	ldr	r2, [pc, #8]	@ (80075f4 <stdio_exit_handler+0xc>)
 80075ea:	4903      	ldr	r1, [pc, #12]	@ (80075f8 <stdio_exit_handler+0x10>)
 80075ec:	4803      	ldr	r0, [pc, #12]	@ (80075fc <stdio_exit_handler+0x14>)
 80075ee:	f000 b869 	b.w	80076c4 <_fwalk_sglue>
 80075f2:	bf00      	nop
 80075f4:	20000010 	.word	0x20000010
 80075f8:	0800a25d 	.word	0x0800a25d
 80075fc:	20000020 	.word	0x20000020

08007600 <cleanup_stdio>:
 8007600:	6841      	ldr	r1, [r0, #4]
 8007602:	4b0c      	ldr	r3, [pc, #48]	@ (8007634 <cleanup_stdio+0x34>)
 8007604:	4299      	cmp	r1, r3
 8007606:	b510      	push	{r4, lr}
 8007608:	4604      	mov	r4, r0
 800760a:	d001      	beq.n	8007610 <cleanup_stdio+0x10>
 800760c:	f002 fe26 	bl	800a25c <_fflush_r>
 8007610:	68a1      	ldr	r1, [r4, #8]
 8007612:	4b09      	ldr	r3, [pc, #36]	@ (8007638 <cleanup_stdio+0x38>)
 8007614:	4299      	cmp	r1, r3
 8007616:	d002      	beq.n	800761e <cleanup_stdio+0x1e>
 8007618:	4620      	mov	r0, r4
 800761a:	f002 fe1f 	bl	800a25c <_fflush_r>
 800761e:	68e1      	ldr	r1, [r4, #12]
 8007620:	4b06      	ldr	r3, [pc, #24]	@ (800763c <cleanup_stdio+0x3c>)
 8007622:	4299      	cmp	r1, r3
 8007624:	d004      	beq.n	8007630 <cleanup_stdio+0x30>
 8007626:	4620      	mov	r0, r4
 8007628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800762c:	f002 be16 	b.w	800a25c <_fflush_r>
 8007630:	bd10      	pop	{r4, pc}
 8007632:	bf00      	nop
 8007634:	20004378 	.word	0x20004378
 8007638:	200043e0 	.word	0x200043e0
 800763c:	20004448 	.word	0x20004448

08007640 <global_stdio_init.part.0>:
 8007640:	b510      	push	{r4, lr}
 8007642:	4b0b      	ldr	r3, [pc, #44]	@ (8007670 <global_stdio_init.part.0+0x30>)
 8007644:	4c0b      	ldr	r4, [pc, #44]	@ (8007674 <global_stdio_init.part.0+0x34>)
 8007646:	4a0c      	ldr	r2, [pc, #48]	@ (8007678 <global_stdio_init.part.0+0x38>)
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	4620      	mov	r0, r4
 800764c:	2200      	movs	r2, #0
 800764e:	2104      	movs	r1, #4
 8007650:	f7ff ff94 	bl	800757c <std>
 8007654:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007658:	2201      	movs	r2, #1
 800765a:	2109      	movs	r1, #9
 800765c:	f7ff ff8e 	bl	800757c <std>
 8007660:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007664:	2202      	movs	r2, #2
 8007666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800766a:	2112      	movs	r1, #18
 800766c:	f7ff bf86 	b.w	800757c <std>
 8007670:	200044b0 	.word	0x200044b0
 8007674:	20004378 	.word	0x20004378
 8007678:	080075e9 	.word	0x080075e9

0800767c <__sfp_lock_acquire>:
 800767c:	4801      	ldr	r0, [pc, #4]	@ (8007684 <__sfp_lock_acquire+0x8>)
 800767e:	f000 b976 	b.w	800796e <__retarget_lock_acquire_recursive>
 8007682:	bf00      	nop
 8007684:	200044b9 	.word	0x200044b9

08007688 <__sfp_lock_release>:
 8007688:	4801      	ldr	r0, [pc, #4]	@ (8007690 <__sfp_lock_release+0x8>)
 800768a:	f000 b971 	b.w	8007970 <__retarget_lock_release_recursive>
 800768e:	bf00      	nop
 8007690:	200044b9 	.word	0x200044b9

08007694 <__sinit>:
 8007694:	b510      	push	{r4, lr}
 8007696:	4604      	mov	r4, r0
 8007698:	f7ff fff0 	bl	800767c <__sfp_lock_acquire>
 800769c:	6a23      	ldr	r3, [r4, #32]
 800769e:	b11b      	cbz	r3, 80076a8 <__sinit+0x14>
 80076a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076a4:	f7ff bff0 	b.w	8007688 <__sfp_lock_release>
 80076a8:	4b04      	ldr	r3, [pc, #16]	@ (80076bc <__sinit+0x28>)
 80076aa:	6223      	str	r3, [r4, #32]
 80076ac:	4b04      	ldr	r3, [pc, #16]	@ (80076c0 <__sinit+0x2c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1f5      	bne.n	80076a0 <__sinit+0xc>
 80076b4:	f7ff ffc4 	bl	8007640 <global_stdio_init.part.0>
 80076b8:	e7f2      	b.n	80076a0 <__sinit+0xc>
 80076ba:	bf00      	nop
 80076bc:	08007601 	.word	0x08007601
 80076c0:	200044b0 	.word	0x200044b0

080076c4 <_fwalk_sglue>:
 80076c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076c8:	4607      	mov	r7, r0
 80076ca:	4688      	mov	r8, r1
 80076cc:	4614      	mov	r4, r2
 80076ce:	2600      	movs	r6, #0
 80076d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076d4:	f1b9 0901 	subs.w	r9, r9, #1
 80076d8:	d505      	bpl.n	80076e6 <_fwalk_sglue+0x22>
 80076da:	6824      	ldr	r4, [r4, #0]
 80076dc:	2c00      	cmp	r4, #0
 80076de:	d1f7      	bne.n	80076d0 <_fwalk_sglue+0xc>
 80076e0:	4630      	mov	r0, r6
 80076e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076e6:	89ab      	ldrh	r3, [r5, #12]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d907      	bls.n	80076fc <_fwalk_sglue+0x38>
 80076ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076f0:	3301      	adds	r3, #1
 80076f2:	d003      	beq.n	80076fc <_fwalk_sglue+0x38>
 80076f4:	4629      	mov	r1, r5
 80076f6:	4638      	mov	r0, r7
 80076f8:	47c0      	blx	r8
 80076fa:	4306      	orrs	r6, r0
 80076fc:	3568      	adds	r5, #104	@ 0x68
 80076fe:	e7e9      	b.n	80076d4 <_fwalk_sglue+0x10>

08007700 <siprintf>:
 8007700:	b40e      	push	{r1, r2, r3}
 8007702:	b500      	push	{lr}
 8007704:	b09c      	sub	sp, #112	@ 0x70
 8007706:	ab1d      	add	r3, sp, #116	@ 0x74
 8007708:	9002      	str	r0, [sp, #8]
 800770a:	9006      	str	r0, [sp, #24]
 800770c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007710:	4809      	ldr	r0, [pc, #36]	@ (8007738 <siprintf+0x38>)
 8007712:	9107      	str	r1, [sp, #28]
 8007714:	9104      	str	r1, [sp, #16]
 8007716:	4909      	ldr	r1, [pc, #36]	@ (800773c <siprintf+0x3c>)
 8007718:	f853 2b04 	ldr.w	r2, [r3], #4
 800771c:	9105      	str	r1, [sp, #20]
 800771e:	6800      	ldr	r0, [r0, #0]
 8007720:	9301      	str	r3, [sp, #4]
 8007722:	a902      	add	r1, sp, #8
 8007724:	f002 fc1a 	bl	8009f5c <_svfiprintf_r>
 8007728:	9b02      	ldr	r3, [sp, #8]
 800772a:	2200      	movs	r2, #0
 800772c:	701a      	strb	r2, [r3, #0]
 800772e:	b01c      	add	sp, #112	@ 0x70
 8007730:	f85d eb04 	ldr.w	lr, [sp], #4
 8007734:	b003      	add	sp, #12
 8007736:	4770      	bx	lr
 8007738:	2000001c 	.word	0x2000001c
 800773c:	ffff0208 	.word	0xffff0208

08007740 <__sread>:
 8007740:	b510      	push	{r4, lr}
 8007742:	460c      	mov	r4, r1
 8007744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007748:	f000 f8c2 	bl	80078d0 <_read_r>
 800774c:	2800      	cmp	r0, #0
 800774e:	bfab      	itete	ge
 8007750:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007752:	89a3      	ldrhlt	r3, [r4, #12]
 8007754:	181b      	addge	r3, r3, r0
 8007756:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800775a:	bfac      	ite	ge
 800775c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800775e:	81a3      	strhlt	r3, [r4, #12]
 8007760:	bd10      	pop	{r4, pc}

08007762 <__swrite>:
 8007762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007766:	461f      	mov	r7, r3
 8007768:	898b      	ldrh	r3, [r1, #12]
 800776a:	05db      	lsls	r3, r3, #23
 800776c:	4605      	mov	r5, r0
 800776e:	460c      	mov	r4, r1
 8007770:	4616      	mov	r6, r2
 8007772:	d505      	bpl.n	8007780 <__swrite+0x1e>
 8007774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007778:	2302      	movs	r3, #2
 800777a:	2200      	movs	r2, #0
 800777c:	f000 f896 	bl	80078ac <_lseek_r>
 8007780:	89a3      	ldrh	r3, [r4, #12]
 8007782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007786:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800778a:	81a3      	strh	r3, [r4, #12]
 800778c:	4632      	mov	r2, r6
 800778e:	463b      	mov	r3, r7
 8007790:	4628      	mov	r0, r5
 8007792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007796:	f000 b8ad 	b.w	80078f4 <_write_r>

0800779a <__sseek>:
 800779a:	b510      	push	{r4, lr}
 800779c:	460c      	mov	r4, r1
 800779e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a2:	f000 f883 	bl	80078ac <_lseek_r>
 80077a6:	1c43      	adds	r3, r0, #1
 80077a8:	89a3      	ldrh	r3, [r4, #12]
 80077aa:	bf15      	itete	ne
 80077ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80077ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80077b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80077b6:	81a3      	strheq	r3, [r4, #12]
 80077b8:	bf18      	it	ne
 80077ba:	81a3      	strhne	r3, [r4, #12]
 80077bc:	bd10      	pop	{r4, pc}

080077be <__sclose>:
 80077be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077c2:	f000 b80d 	b.w	80077e0 <_close_r>

080077c6 <memset>:
 80077c6:	4402      	add	r2, r0
 80077c8:	4603      	mov	r3, r0
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d100      	bne.n	80077d0 <memset+0xa>
 80077ce:	4770      	bx	lr
 80077d0:	f803 1b01 	strb.w	r1, [r3], #1
 80077d4:	e7f9      	b.n	80077ca <memset+0x4>
	...

080077d8 <_localeconv_r>:
 80077d8:	4800      	ldr	r0, [pc, #0]	@ (80077dc <_localeconv_r+0x4>)
 80077da:	4770      	bx	lr
 80077dc:	2000015c 	.word	0x2000015c

080077e0 <_close_r>:
 80077e0:	b538      	push	{r3, r4, r5, lr}
 80077e2:	4d06      	ldr	r5, [pc, #24]	@ (80077fc <_close_r+0x1c>)
 80077e4:	2300      	movs	r3, #0
 80077e6:	4604      	mov	r4, r0
 80077e8:	4608      	mov	r0, r1
 80077ea:	602b      	str	r3, [r5, #0]
 80077ec:	f7fa fca2 	bl	8002134 <_close>
 80077f0:	1c43      	adds	r3, r0, #1
 80077f2:	d102      	bne.n	80077fa <_close_r+0x1a>
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	b103      	cbz	r3, 80077fa <_close_r+0x1a>
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	bd38      	pop	{r3, r4, r5, pc}
 80077fc:	200044b4 	.word	0x200044b4

08007800 <_reclaim_reent>:
 8007800:	4b29      	ldr	r3, [pc, #164]	@ (80078a8 <_reclaim_reent+0xa8>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4283      	cmp	r3, r0
 8007806:	b570      	push	{r4, r5, r6, lr}
 8007808:	4604      	mov	r4, r0
 800780a:	d04b      	beq.n	80078a4 <_reclaim_reent+0xa4>
 800780c:	69c3      	ldr	r3, [r0, #28]
 800780e:	b1ab      	cbz	r3, 800783c <_reclaim_reent+0x3c>
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	b16b      	cbz	r3, 8007830 <_reclaim_reent+0x30>
 8007814:	2500      	movs	r5, #0
 8007816:	69e3      	ldr	r3, [r4, #28]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	5959      	ldr	r1, [r3, r5]
 800781c:	2900      	cmp	r1, #0
 800781e:	d13b      	bne.n	8007898 <_reclaim_reent+0x98>
 8007820:	3504      	adds	r5, #4
 8007822:	2d80      	cmp	r5, #128	@ 0x80
 8007824:	d1f7      	bne.n	8007816 <_reclaim_reent+0x16>
 8007826:	69e3      	ldr	r3, [r4, #28]
 8007828:	4620      	mov	r0, r4
 800782a:	68d9      	ldr	r1, [r3, #12]
 800782c:	f000 ff04 	bl	8008638 <_free_r>
 8007830:	69e3      	ldr	r3, [r4, #28]
 8007832:	6819      	ldr	r1, [r3, #0]
 8007834:	b111      	cbz	r1, 800783c <_reclaim_reent+0x3c>
 8007836:	4620      	mov	r0, r4
 8007838:	f000 fefe 	bl	8008638 <_free_r>
 800783c:	6961      	ldr	r1, [r4, #20]
 800783e:	b111      	cbz	r1, 8007846 <_reclaim_reent+0x46>
 8007840:	4620      	mov	r0, r4
 8007842:	f000 fef9 	bl	8008638 <_free_r>
 8007846:	69e1      	ldr	r1, [r4, #28]
 8007848:	b111      	cbz	r1, 8007850 <_reclaim_reent+0x50>
 800784a:	4620      	mov	r0, r4
 800784c:	f000 fef4 	bl	8008638 <_free_r>
 8007850:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007852:	b111      	cbz	r1, 800785a <_reclaim_reent+0x5a>
 8007854:	4620      	mov	r0, r4
 8007856:	f000 feef 	bl	8008638 <_free_r>
 800785a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800785c:	b111      	cbz	r1, 8007864 <_reclaim_reent+0x64>
 800785e:	4620      	mov	r0, r4
 8007860:	f000 feea 	bl	8008638 <_free_r>
 8007864:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007866:	b111      	cbz	r1, 800786e <_reclaim_reent+0x6e>
 8007868:	4620      	mov	r0, r4
 800786a:	f000 fee5 	bl	8008638 <_free_r>
 800786e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007870:	b111      	cbz	r1, 8007878 <_reclaim_reent+0x78>
 8007872:	4620      	mov	r0, r4
 8007874:	f000 fee0 	bl	8008638 <_free_r>
 8007878:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800787a:	b111      	cbz	r1, 8007882 <_reclaim_reent+0x82>
 800787c:	4620      	mov	r0, r4
 800787e:	f000 fedb 	bl	8008638 <_free_r>
 8007882:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007884:	b111      	cbz	r1, 800788c <_reclaim_reent+0x8c>
 8007886:	4620      	mov	r0, r4
 8007888:	f000 fed6 	bl	8008638 <_free_r>
 800788c:	6a23      	ldr	r3, [r4, #32]
 800788e:	b14b      	cbz	r3, 80078a4 <_reclaim_reent+0xa4>
 8007890:	4620      	mov	r0, r4
 8007892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007896:	4718      	bx	r3
 8007898:	680e      	ldr	r6, [r1, #0]
 800789a:	4620      	mov	r0, r4
 800789c:	f000 fecc 	bl	8008638 <_free_r>
 80078a0:	4631      	mov	r1, r6
 80078a2:	e7bb      	b.n	800781c <_reclaim_reent+0x1c>
 80078a4:	bd70      	pop	{r4, r5, r6, pc}
 80078a6:	bf00      	nop
 80078a8:	2000001c 	.word	0x2000001c

080078ac <_lseek_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4d07      	ldr	r5, [pc, #28]	@ (80078cc <_lseek_r+0x20>)
 80078b0:	4604      	mov	r4, r0
 80078b2:	4608      	mov	r0, r1
 80078b4:	4611      	mov	r1, r2
 80078b6:	2200      	movs	r2, #0
 80078b8:	602a      	str	r2, [r5, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	f7fa fc61 	bl	8002182 <_lseek>
 80078c0:	1c43      	adds	r3, r0, #1
 80078c2:	d102      	bne.n	80078ca <_lseek_r+0x1e>
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	b103      	cbz	r3, 80078ca <_lseek_r+0x1e>
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	bd38      	pop	{r3, r4, r5, pc}
 80078cc:	200044b4 	.word	0x200044b4

080078d0 <_read_r>:
 80078d0:	b538      	push	{r3, r4, r5, lr}
 80078d2:	4d07      	ldr	r5, [pc, #28]	@ (80078f0 <_read_r+0x20>)
 80078d4:	4604      	mov	r4, r0
 80078d6:	4608      	mov	r0, r1
 80078d8:	4611      	mov	r1, r2
 80078da:	2200      	movs	r2, #0
 80078dc:	602a      	str	r2, [r5, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	f7fa fbef 	bl	80020c2 <_read>
 80078e4:	1c43      	adds	r3, r0, #1
 80078e6:	d102      	bne.n	80078ee <_read_r+0x1e>
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	b103      	cbz	r3, 80078ee <_read_r+0x1e>
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	bd38      	pop	{r3, r4, r5, pc}
 80078f0:	200044b4 	.word	0x200044b4

080078f4 <_write_r>:
 80078f4:	b538      	push	{r3, r4, r5, lr}
 80078f6:	4d07      	ldr	r5, [pc, #28]	@ (8007914 <_write_r+0x20>)
 80078f8:	4604      	mov	r4, r0
 80078fa:	4608      	mov	r0, r1
 80078fc:	4611      	mov	r1, r2
 80078fe:	2200      	movs	r2, #0
 8007900:	602a      	str	r2, [r5, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	f7fa fbfa 	bl	80020fc <_write>
 8007908:	1c43      	adds	r3, r0, #1
 800790a:	d102      	bne.n	8007912 <_write_r+0x1e>
 800790c:	682b      	ldr	r3, [r5, #0]
 800790e:	b103      	cbz	r3, 8007912 <_write_r+0x1e>
 8007910:	6023      	str	r3, [r4, #0]
 8007912:	bd38      	pop	{r3, r4, r5, pc}
 8007914:	200044b4 	.word	0x200044b4

08007918 <__errno>:
 8007918:	4b01      	ldr	r3, [pc, #4]	@ (8007920 <__errno+0x8>)
 800791a:	6818      	ldr	r0, [r3, #0]
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	2000001c 	.word	0x2000001c

08007924 <__libc_init_array>:
 8007924:	b570      	push	{r4, r5, r6, lr}
 8007926:	4d0d      	ldr	r5, [pc, #52]	@ (800795c <__libc_init_array+0x38>)
 8007928:	4c0d      	ldr	r4, [pc, #52]	@ (8007960 <__libc_init_array+0x3c>)
 800792a:	1b64      	subs	r4, r4, r5
 800792c:	10a4      	asrs	r4, r4, #2
 800792e:	2600      	movs	r6, #0
 8007930:	42a6      	cmp	r6, r4
 8007932:	d109      	bne.n	8007948 <__libc_init_array+0x24>
 8007934:	4d0b      	ldr	r5, [pc, #44]	@ (8007964 <__libc_init_array+0x40>)
 8007936:	4c0c      	ldr	r4, [pc, #48]	@ (8007968 <__libc_init_array+0x44>)
 8007938:	f003 fb74 	bl	800b024 <_init>
 800793c:	1b64      	subs	r4, r4, r5
 800793e:	10a4      	asrs	r4, r4, #2
 8007940:	2600      	movs	r6, #0
 8007942:	42a6      	cmp	r6, r4
 8007944:	d105      	bne.n	8007952 <__libc_init_array+0x2e>
 8007946:	bd70      	pop	{r4, r5, r6, pc}
 8007948:	f855 3b04 	ldr.w	r3, [r5], #4
 800794c:	4798      	blx	r3
 800794e:	3601      	adds	r6, #1
 8007950:	e7ee      	b.n	8007930 <__libc_init_array+0xc>
 8007952:	f855 3b04 	ldr.w	r3, [r5], #4
 8007956:	4798      	blx	r3
 8007958:	3601      	adds	r6, #1
 800795a:	e7f2      	b.n	8007942 <__libc_init_array+0x1e>
 800795c:	0800b630 	.word	0x0800b630
 8007960:	0800b630 	.word	0x0800b630
 8007964:	0800b630 	.word	0x0800b630
 8007968:	0800b634 	.word	0x0800b634

0800796c <__retarget_lock_init_recursive>:
 800796c:	4770      	bx	lr

0800796e <__retarget_lock_acquire_recursive>:
 800796e:	4770      	bx	lr

08007970 <__retarget_lock_release_recursive>:
 8007970:	4770      	bx	lr

08007972 <memcpy>:
 8007972:	440a      	add	r2, r1
 8007974:	4291      	cmp	r1, r2
 8007976:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800797a:	d100      	bne.n	800797e <memcpy+0xc>
 800797c:	4770      	bx	lr
 800797e:	b510      	push	{r4, lr}
 8007980:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007984:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007988:	4291      	cmp	r1, r2
 800798a:	d1f9      	bne.n	8007980 <memcpy+0xe>
 800798c:	bd10      	pop	{r4, pc}
	...

08007990 <nanf>:
 8007990:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007998 <nanf+0x8>
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	7fc00000 	.word	0x7fc00000

0800799c <quorem>:
 800799c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a0:	6903      	ldr	r3, [r0, #16]
 80079a2:	690c      	ldr	r4, [r1, #16]
 80079a4:	42a3      	cmp	r3, r4
 80079a6:	4607      	mov	r7, r0
 80079a8:	db7e      	blt.n	8007aa8 <quorem+0x10c>
 80079aa:	3c01      	subs	r4, #1
 80079ac:	f101 0814 	add.w	r8, r1, #20
 80079b0:	00a3      	lsls	r3, r4, #2
 80079b2:	f100 0514 	add.w	r5, r0, #20
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079bc:	9301      	str	r3, [sp, #4]
 80079be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079c6:	3301      	adds	r3, #1
 80079c8:	429a      	cmp	r2, r3
 80079ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079ce:	fbb2 f6f3 	udiv	r6, r2, r3
 80079d2:	d32e      	bcc.n	8007a32 <quorem+0x96>
 80079d4:	f04f 0a00 	mov.w	sl, #0
 80079d8:	46c4      	mov	ip, r8
 80079da:	46ae      	mov	lr, r5
 80079dc:	46d3      	mov	fp, sl
 80079de:	f85c 3b04 	ldr.w	r3, [ip], #4
 80079e2:	b298      	uxth	r0, r3
 80079e4:	fb06 a000 	mla	r0, r6, r0, sl
 80079e8:	0c02      	lsrs	r2, r0, #16
 80079ea:	0c1b      	lsrs	r3, r3, #16
 80079ec:	fb06 2303 	mla	r3, r6, r3, r2
 80079f0:	f8de 2000 	ldr.w	r2, [lr]
 80079f4:	b280      	uxth	r0, r0
 80079f6:	b292      	uxth	r2, r2
 80079f8:	1a12      	subs	r2, r2, r0
 80079fa:	445a      	add	r2, fp
 80079fc:	f8de 0000 	ldr.w	r0, [lr]
 8007a00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007a0a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007a0e:	b292      	uxth	r2, r2
 8007a10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007a14:	45e1      	cmp	r9, ip
 8007a16:	f84e 2b04 	str.w	r2, [lr], #4
 8007a1a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007a1e:	d2de      	bcs.n	80079de <quorem+0x42>
 8007a20:	9b00      	ldr	r3, [sp, #0]
 8007a22:	58eb      	ldr	r3, [r5, r3]
 8007a24:	b92b      	cbnz	r3, 8007a32 <quorem+0x96>
 8007a26:	9b01      	ldr	r3, [sp, #4]
 8007a28:	3b04      	subs	r3, #4
 8007a2a:	429d      	cmp	r5, r3
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	d32f      	bcc.n	8007a90 <quorem+0xf4>
 8007a30:	613c      	str	r4, [r7, #16]
 8007a32:	4638      	mov	r0, r7
 8007a34:	f001 f9c4 	bl	8008dc0 <__mcmp>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	db25      	blt.n	8007a88 <quorem+0xec>
 8007a3c:	4629      	mov	r1, r5
 8007a3e:	2000      	movs	r0, #0
 8007a40:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a44:	f8d1 c000 	ldr.w	ip, [r1]
 8007a48:	fa1f fe82 	uxth.w	lr, r2
 8007a4c:	fa1f f38c 	uxth.w	r3, ip
 8007a50:	eba3 030e 	sub.w	r3, r3, lr
 8007a54:	4403      	add	r3, r0
 8007a56:	0c12      	lsrs	r2, r2, #16
 8007a58:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007a5c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a66:	45c1      	cmp	r9, r8
 8007a68:	f841 3b04 	str.w	r3, [r1], #4
 8007a6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a70:	d2e6      	bcs.n	8007a40 <quorem+0xa4>
 8007a72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a7a:	b922      	cbnz	r2, 8007a86 <quorem+0xea>
 8007a7c:	3b04      	subs	r3, #4
 8007a7e:	429d      	cmp	r5, r3
 8007a80:	461a      	mov	r2, r3
 8007a82:	d30b      	bcc.n	8007a9c <quorem+0x100>
 8007a84:	613c      	str	r4, [r7, #16]
 8007a86:	3601      	adds	r6, #1
 8007a88:	4630      	mov	r0, r6
 8007a8a:	b003      	add	sp, #12
 8007a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a90:	6812      	ldr	r2, [r2, #0]
 8007a92:	3b04      	subs	r3, #4
 8007a94:	2a00      	cmp	r2, #0
 8007a96:	d1cb      	bne.n	8007a30 <quorem+0x94>
 8007a98:	3c01      	subs	r4, #1
 8007a9a:	e7c6      	b.n	8007a2a <quorem+0x8e>
 8007a9c:	6812      	ldr	r2, [r2, #0]
 8007a9e:	3b04      	subs	r3, #4
 8007aa0:	2a00      	cmp	r2, #0
 8007aa2:	d1ef      	bne.n	8007a84 <quorem+0xe8>
 8007aa4:	3c01      	subs	r4, #1
 8007aa6:	e7ea      	b.n	8007a7e <quorem+0xe2>
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	e7ee      	b.n	8007a8a <quorem+0xee>
 8007aac:	0000      	movs	r0, r0
	...

08007ab0 <_dtoa_r>:
 8007ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab4:	69c7      	ldr	r7, [r0, #28]
 8007ab6:	b099      	sub	sp, #100	@ 0x64
 8007ab8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007abc:	ec55 4b10 	vmov	r4, r5, d0
 8007ac0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007ac2:	9109      	str	r1, [sp, #36]	@ 0x24
 8007ac4:	4683      	mov	fp, r0
 8007ac6:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ac8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007aca:	b97f      	cbnz	r7, 8007aec <_dtoa_r+0x3c>
 8007acc:	2010      	movs	r0, #16
 8007ace:	f000 fdfd 	bl	80086cc <malloc>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	f8cb 001c 	str.w	r0, [fp, #28]
 8007ad8:	b920      	cbnz	r0, 8007ae4 <_dtoa_r+0x34>
 8007ada:	4ba7      	ldr	r3, [pc, #668]	@ (8007d78 <_dtoa_r+0x2c8>)
 8007adc:	21ef      	movs	r1, #239	@ 0xef
 8007ade:	48a7      	ldr	r0, [pc, #668]	@ (8007d7c <_dtoa_r+0x2cc>)
 8007ae0:	f002 fc2a 	bl	800a338 <__assert_func>
 8007ae4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ae8:	6007      	str	r7, [r0, #0]
 8007aea:	60c7      	str	r7, [r0, #12]
 8007aec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007af0:	6819      	ldr	r1, [r3, #0]
 8007af2:	b159      	cbz	r1, 8007b0c <_dtoa_r+0x5c>
 8007af4:	685a      	ldr	r2, [r3, #4]
 8007af6:	604a      	str	r2, [r1, #4]
 8007af8:	2301      	movs	r3, #1
 8007afa:	4093      	lsls	r3, r2
 8007afc:	608b      	str	r3, [r1, #8]
 8007afe:	4658      	mov	r0, fp
 8007b00:	f000 feda 	bl	80088b8 <_Bfree>
 8007b04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	601a      	str	r2, [r3, #0]
 8007b0c:	1e2b      	subs	r3, r5, #0
 8007b0e:	bfb9      	ittee	lt
 8007b10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007b14:	9303      	strlt	r3, [sp, #12]
 8007b16:	2300      	movge	r3, #0
 8007b18:	6033      	strge	r3, [r6, #0]
 8007b1a:	9f03      	ldr	r7, [sp, #12]
 8007b1c:	4b98      	ldr	r3, [pc, #608]	@ (8007d80 <_dtoa_r+0x2d0>)
 8007b1e:	bfbc      	itt	lt
 8007b20:	2201      	movlt	r2, #1
 8007b22:	6032      	strlt	r2, [r6, #0]
 8007b24:	43bb      	bics	r3, r7
 8007b26:	d112      	bne.n	8007b4e <_dtoa_r+0x9e>
 8007b28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007b2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b34:	4323      	orrs	r3, r4
 8007b36:	f000 854d 	beq.w	80085d4 <_dtoa_r+0xb24>
 8007b3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007d94 <_dtoa_r+0x2e4>
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 854f 	beq.w	80085e4 <_dtoa_r+0xb34>
 8007b46:	f10a 0303 	add.w	r3, sl, #3
 8007b4a:	f000 bd49 	b.w	80085e0 <_dtoa_r+0xb30>
 8007b4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b52:	2200      	movs	r2, #0
 8007b54:	ec51 0b17 	vmov	r0, r1, d7
 8007b58:	2300      	movs	r3, #0
 8007b5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007b5e:	f7f8 ffbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b62:	4680      	mov	r8, r0
 8007b64:	b158      	cbz	r0, 8007b7e <_dtoa_r+0xce>
 8007b66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007b68:	2301      	movs	r3, #1
 8007b6a:	6013      	str	r3, [r2, #0]
 8007b6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b6e:	b113      	cbz	r3, 8007b76 <_dtoa_r+0xc6>
 8007b70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007b72:	4b84      	ldr	r3, [pc, #528]	@ (8007d84 <_dtoa_r+0x2d4>)
 8007b74:	6013      	str	r3, [r2, #0]
 8007b76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007d98 <_dtoa_r+0x2e8>
 8007b7a:	f000 bd33 	b.w	80085e4 <_dtoa_r+0xb34>
 8007b7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007b82:	aa16      	add	r2, sp, #88	@ 0x58
 8007b84:	a917      	add	r1, sp, #92	@ 0x5c
 8007b86:	4658      	mov	r0, fp
 8007b88:	f001 fa3a 	bl	8009000 <__d2b>
 8007b8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007b90:	4681      	mov	r9, r0
 8007b92:	2e00      	cmp	r6, #0
 8007b94:	d077      	beq.n	8007c86 <_dtoa_r+0x1d6>
 8007b96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ba0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ba4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ba8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007bac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	4b74      	ldr	r3, [pc, #464]	@ (8007d88 <_dtoa_r+0x2d8>)
 8007bb6:	f7f8 fb6f 	bl	8000298 <__aeabi_dsub>
 8007bba:	a369      	add	r3, pc, #420	@ (adr r3, 8007d60 <_dtoa_r+0x2b0>)
 8007bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc0:	f7f8 fd22 	bl	8000608 <__aeabi_dmul>
 8007bc4:	a368      	add	r3, pc, #416	@ (adr r3, 8007d68 <_dtoa_r+0x2b8>)
 8007bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bca:	f7f8 fb67 	bl	800029c <__adddf3>
 8007bce:	4604      	mov	r4, r0
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	460d      	mov	r5, r1
 8007bd4:	f7f8 fcae 	bl	8000534 <__aeabi_i2d>
 8007bd8:	a365      	add	r3, pc, #404	@ (adr r3, 8007d70 <_dtoa_r+0x2c0>)
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	f7f8 fd13 	bl	8000608 <__aeabi_dmul>
 8007be2:	4602      	mov	r2, r0
 8007be4:	460b      	mov	r3, r1
 8007be6:	4620      	mov	r0, r4
 8007be8:	4629      	mov	r1, r5
 8007bea:	f7f8 fb57 	bl	800029c <__adddf3>
 8007bee:	4604      	mov	r4, r0
 8007bf0:	460d      	mov	r5, r1
 8007bf2:	f7f8 ffb9 	bl	8000b68 <__aeabi_d2iz>
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	4607      	mov	r7, r0
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	4629      	mov	r1, r5
 8007c00:	f7f8 ff74 	bl	8000aec <__aeabi_dcmplt>
 8007c04:	b140      	cbz	r0, 8007c18 <_dtoa_r+0x168>
 8007c06:	4638      	mov	r0, r7
 8007c08:	f7f8 fc94 	bl	8000534 <__aeabi_i2d>
 8007c0c:	4622      	mov	r2, r4
 8007c0e:	462b      	mov	r3, r5
 8007c10:	f7f8 ff62 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c14:	b900      	cbnz	r0, 8007c18 <_dtoa_r+0x168>
 8007c16:	3f01      	subs	r7, #1
 8007c18:	2f16      	cmp	r7, #22
 8007c1a:	d851      	bhi.n	8007cc0 <_dtoa_r+0x210>
 8007c1c:	4b5b      	ldr	r3, [pc, #364]	@ (8007d8c <_dtoa_r+0x2dc>)
 8007c1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c2a:	f7f8 ff5f 	bl	8000aec <__aeabi_dcmplt>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	d048      	beq.n	8007cc4 <_dtoa_r+0x214>
 8007c32:	3f01      	subs	r7, #1
 8007c34:	2300      	movs	r3, #0
 8007c36:	9312      	str	r3, [sp, #72]	@ 0x48
 8007c38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007c3a:	1b9b      	subs	r3, r3, r6
 8007c3c:	1e5a      	subs	r2, r3, #1
 8007c3e:	bf44      	itt	mi
 8007c40:	f1c3 0801 	rsbmi	r8, r3, #1
 8007c44:	2300      	movmi	r3, #0
 8007c46:	9208      	str	r2, [sp, #32]
 8007c48:	bf54      	ite	pl
 8007c4a:	f04f 0800 	movpl.w	r8, #0
 8007c4e:	9308      	strmi	r3, [sp, #32]
 8007c50:	2f00      	cmp	r7, #0
 8007c52:	db39      	blt.n	8007cc8 <_dtoa_r+0x218>
 8007c54:	9b08      	ldr	r3, [sp, #32]
 8007c56:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007c58:	443b      	add	r3, r7
 8007c5a:	9308      	str	r3, [sp, #32]
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c62:	2b09      	cmp	r3, #9
 8007c64:	d864      	bhi.n	8007d30 <_dtoa_r+0x280>
 8007c66:	2b05      	cmp	r3, #5
 8007c68:	bfc4      	itt	gt
 8007c6a:	3b04      	subgt	r3, #4
 8007c6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c70:	f1a3 0302 	sub.w	r3, r3, #2
 8007c74:	bfcc      	ite	gt
 8007c76:	2400      	movgt	r4, #0
 8007c78:	2401      	movle	r4, #1
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d863      	bhi.n	8007d46 <_dtoa_r+0x296>
 8007c7e:	e8df f003 	tbb	[pc, r3]
 8007c82:	372a      	.short	0x372a
 8007c84:	5535      	.short	0x5535
 8007c86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007c8a:	441e      	add	r6, r3
 8007c8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007c90:	2b20      	cmp	r3, #32
 8007c92:	bfc1      	itttt	gt
 8007c94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007c98:	409f      	lslgt	r7, r3
 8007c9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007c9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007ca2:	bfd6      	itet	le
 8007ca4:	f1c3 0320 	rsble	r3, r3, #32
 8007ca8:	ea47 0003 	orrgt.w	r0, r7, r3
 8007cac:	fa04 f003 	lslle.w	r0, r4, r3
 8007cb0:	f7f8 fc30 	bl	8000514 <__aeabi_ui2d>
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007cba:	3e01      	subs	r6, #1
 8007cbc:	9214      	str	r2, [sp, #80]	@ 0x50
 8007cbe:	e777      	b.n	8007bb0 <_dtoa_r+0x100>
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e7b8      	b.n	8007c36 <_dtoa_r+0x186>
 8007cc4:	9012      	str	r0, [sp, #72]	@ 0x48
 8007cc6:	e7b7      	b.n	8007c38 <_dtoa_r+0x188>
 8007cc8:	427b      	negs	r3, r7
 8007cca:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ccc:	2300      	movs	r3, #0
 8007cce:	eba8 0807 	sub.w	r8, r8, r7
 8007cd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007cd4:	e7c4      	b.n	8007c60 <_dtoa_r+0x1b0>
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	dc35      	bgt.n	8007d4c <_dtoa_r+0x29c>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	9307      	str	r3, [sp, #28]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007cea:	e00b      	b.n	8007d04 <_dtoa_r+0x254>
 8007cec:	2301      	movs	r3, #1
 8007cee:	e7f3      	b.n	8007cd8 <_dtoa_r+0x228>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cf6:	18fb      	adds	r3, r7, r3
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	9307      	str	r3, [sp, #28]
 8007d00:	bfb8      	it	lt
 8007d02:	2301      	movlt	r3, #1
 8007d04:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007d08:	2100      	movs	r1, #0
 8007d0a:	2204      	movs	r2, #4
 8007d0c:	f102 0514 	add.w	r5, r2, #20
 8007d10:	429d      	cmp	r5, r3
 8007d12:	d91f      	bls.n	8007d54 <_dtoa_r+0x2a4>
 8007d14:	6041      	str	r1, [r0, #4]
 8007d16:	4658      	mov	r0, fp
 8007d18:	f000 fd8e 	bl	8008838 <_Balloc>
 8007d1c:	4682      	mov	sl, r0
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	d13c      	bne.n	8007d9c <_dtoa_r+0x2ec>
 8007d22:	4b1b      	ldr	r3, [pc, #108]	@ (8007d90 <_dtoa_r+0x2e0>)
 8007d24:	4602      	mov	r2, r0
 8007d26:	f240 11af 	movw	r1, #431	@ 0x1af
 8007d2a:	e6d8      	b.n	8007ade <_dtoa_r+0x2e>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e7e0      	b.n	8007cf2 <_dtoa_r+0x242>
 8007d30:	2401      	movs	r4, #1
 8007d32:	2300      	movs	r3, #0
 8007d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d36:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	9307      	str	r3, [sp, #28]
 8007d40:	2200      	movs	r2, #0
 8007d42:	2312      	movs	r3, #18
 8007d44:	e7d0      	b.n	8007ce8 <_dtoa_r+0x238>
 8007d46:	2301      	movs	r3, #1
 8007d48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d4a:	e7f5      	b.n	8007d38 <_dtoa_r+0x288>
 8007d4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	9307      	str	r3, [sp, #28]
 8007d52:	e7d7      	b.n	8007d04 <_dtoa_r+0x254>
 8007d54:	3101      	adds	r1, #1
 8007d56:	0052      	lsls	r2, r2, #1
 8007d58:	e7d8      	b.n	8007d0c <_dtoa_r+0x25c>
 8007d5a:	bf00      	nop
 8007d5c:	f3af 8000 	nop.w
 8007d60:	636f4361 	.word	0x636f4361
 8007d64:	3fd287a7 	.word	0x3fd287a7
 8007d68:	8b60c8b3 	.word	0x8b60c8b3
 8007d6c:	3fc68a28 	.word	0x3fc68a28
 8007d70:	509f79fb 	.word	0x509f79fb
 8007d74:	3fd34413 	.word	0x3fd34413
 8007d78:	0800b23e 	.word	0x0800b23e
 8007d7c:	0800b255 	.word	0x0800b255
 8007d80:	7ff00000 	.word	0x7ff00000
 8007d84:	0800b209 	.word	0x0800b209
 8007d88:	3ff80000 	.word	0x3ff80000
 8007d8c:	0800b350 	.word	0x0800b350
 8007d90:	0800b2ad 	.word	0x0800b2ad
 8007d94:	0800b23a 	.word	0x0800b23a
 8007d98:	0800b208 	.word	0x0800b208
 8007d9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007da0:	6018      	str	r0, [r3, #0]
 8007da2:	9b07      	ldr	r3, [sp, #28]
 8007da4:	2b0e      	cmp	r3, #14
 8007da6:	f200 80a4 	bhi.w	8007ef2 <_dtoa_r+0x442>
 8007daa:	2c00      	cmp	r4, #0
 8007dac:	f000 80a1 	beq.w	8007ef2 <_dtoa_r+0x442>
 8007db0:	2f00      	cmp	r7, #0
 8007db2:	dd33      	ble.n	8007e1c <_dtoa_r+0x36c>
 8007db4:	4bad      	ldr	r3, [pc, #692]	@ (800806c <_dtoa_r+0x5bc>)
 8007db6:	f007 020f 	and.w	r2, r7, #15
 8007dba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dbe:	ed93 7b00 	vldr	d7, [r3]
 8007dc2:	05f8      	lsls	r0, r7, #23
 8007dc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007dc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007dcc:	d516      	bpl.n	8007dfc <_dtoa_r+0x34c>
 8007dce:	4ba8      	ldr	r3, [pc, #672]	@ (8008070 <_dtoa_r+0x5c0>)
 8007dd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007dd8:	f7f8 fd40 	bl	800085c <__aeabi_ddiv>
 8007ddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007de0:	f004 040f 	and.w	r4, r4, #15
 8007de4:	2603      	movs	r6, #3
 8007de6:	4da2      	ldr	r5, [pc, #648]	@ (8008070 <_dtoa_r+0x5c0>)
 8007de8:	b954      	cbnz	r4, 8007e00 <_dtoa_r+0x350>
 8007dea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007df2:	f7f8 fd33 	bl	800085c <__aeabi_ddiv>
 8007df6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dfa:	e028      	b.n	8007e4e <_dtoa_r+0x39e>
 8007dfc:	2602      	movs	r6, #2
 8007dfe:	e7f2      	b.n	8007de6 <_dtoa_r+0x336>
 8007e00:	07e1      	lsls	r1, r4, #31
 8007e02:	d508      	bpl.n	8007e16 <_dtoa_r+0x366>
 8007e04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e0c:	f7f8 fbfc 	bl	8000608 <__aeabi_dmul>
 8007e10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e14:	3601      	adds	r6, #1
 8007e16:	1064      	asrs	r4, r4, #1
 8007e18:	3508      	adds	r5, #8
 8007e1a:	e7e5      	b.n	8007de8 <_dtoa_r+0x338>
 8007e1c:	f000 80d2 	beq.w	8007fc4 <_dtoa_r+0x514>
 8007e20:	427c      	negs	r4, r7
 8007e22:	4b92      	ldr	r3, [pc, #584]	@ (800806c <_dtoa_r+0x5bc>)
 8007e24:	4d92      	ldr	r5, [pc, #584]	@ (8008070 <_dtoa_r+0x5c0>)
 8007e26:	f004 020f 	and.w	r2, r4, #15
 8007e2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e36:	f7f8 fbe7 	bl	8000608 <__aeabi_dmul>
 8007e3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e3e:	1124      	asrs	r4, r4, #4
 8007e40:	2300      	movs	r3, #0
 8007e42:	2602      	movs	r6, #2
 8007e44:	2c00      	cmp	r4, #0
 8007e46:	f040 80b2 	bne.w	8007fae <_dtoa_r+0x4fe>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1d3      	bne.n	8007df6 <_dtoa_r+0x346>
 8007e4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007e50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f000 80b7 	beq.w	8007fc8 <_dtoa_r+0x518>
 8007e5a:	4b86      	ldr	r3, [pc, #536]	@ (8008074 <_dtoa_r+0x5c4>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	4620      	mov	r0, r4
 8007e60:	4629      	mov	r1, r5
 8007e62:	f7f8 fe43 	bl	8000aec <__aeabi_dcmplt>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	f000 80ae 	beq.w	8007fc8 <_dtoa_r+0x518>
 8007e6c:	9b07      	ldr	r3, [sp, #28]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f000 80aa 	beq.w	8007fc8 <_dtoa_r+0x518>
 8007e74:	9b00      	ldr	r3, [sp, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	dd37      	ble.n	8007eea <_dtoa_r+0x43a>
 8007e7a:	1e7b      	subs	r3, r7, #1
 8007e7c:	9304      	str	r3, [sp, #16]
 8007e7e:	4620      	mov	r0, r4
 8007e80:	4b7d      	ldr	r3, [pc, #500]	@ (8008078 <_dtoa_r+0x5c8>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	4629      	mov	r1, r5
 8007e86:	f7f8 fbbf 	bl	8000608 <__aeabi_dmul>
 8007e8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e8e:	9c00      	ldr	r4, [sp, #0]
 8007e90:	3601      	adds	r6, #1
 8007e92:	4630      	mov	r0, r6
 8007e94:	f7f8 fb4e 	bl	8000534 <__aeabi_i2d>
 8007e98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e9c:	f7f8 fbb4 	bl	8000608 <__aeabi_dmul>
 8007ea0:	4b76      	ldr	r3, [pc, #472]	@ (800807c <_dtoa_r+0x5cc>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f7f8 f9fa 	bl	800029c <__adddf3>
 8007ea8:	4605      	mov	r5, r0
 8007eaa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007eae:	2c00      	cmp	r4, #0
 8007eb0:	f040 808d 	bne.w	8007fce <_dtoa_r+0x51e>
 8007eb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eb8:	4b71      	ldr	r3, [pc, #452]	@ (8008080 <_dtoa_r+0x5d0>)
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f7f8 f9ec 	bl	8000298 <__aeabi_dsub>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ec8:	462a      	mov	r2, r5
 8007eca:	4633      	mov	r3, r6
 8007ecc:	f7f8 fe2c 	bl	8000b28 <__aeabi_dcmpgt>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	f040 828b 	bne.w	80083ec <_dtoa_r+0x93c>
 8007ed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eda:	462a      	mov	r2, r5
 8007edc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ee0:	f7f8 fe04 	bl	8000aec <__aeabi_dcmplt>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	f040 8128 	bne.w	800813a <_dtoa_r+0x68a>
 8007eea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007eee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007ef2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f2c0 815a 	blt.w	80081ae <_dtoa_r+0x6fe>
 8007efa:	2f0e      	cmp	r7, #14
 8007efc:	f300 8157 	bgt.w	80081ae <_dtoa_r+0x6fe>
 8007f00:	4b5a      	ldr	r3, [pc, #360]	@ (800806c <_dtoa_r+0x5bc>)
 8007f02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f06:	ed93 7b00 	vldr	d7, [r3]
 8007f0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	ed8d 7b00 	vstr	d7, [sp]
 8007f12:	da03      	bge.n	8007f1c <_dtoa_r+0x46c>
 8007f14:	9b07      	ldr	r3, [sp, #28]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f340 8101 	ble.w	800811e <_dtoa_r+0x66e>
 8007f1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f20:	4656      	mov	r6, sl
 8007f22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f26:	4620      	mov	r0, r4
 8007f28:	4629      	mov	r1, r5
 8007f2a:	f7f8 fc97 	bl	800085c <__aeabi_ddiv>
 8007f2e:	f7f8 fe1b 	bl	8000b68 <__aeabi_d2iz>
 8007f32:	4680      	mov	r8, r0
 8007f34:	f7f8 fafe 	bl	8000534 <__aeabi_i2d>
 8007f38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f3c:	f7f8 fb64 	bl	8000608 <__aeabi_dmul>
 8007f40:	4602      	mov	r2, r0
 8007f42:	460b      	mov	r3, r1
 8007f44:	4620      	mov	r0, r4
 8007f46:	4629      	mov	r1, r5
 8007f48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007f4c:	f7f8 f9a4 	bl	8000298 <__aeabi_dsub>
 8007f50:	f806 4b01 	strb.w	r4, [r6], #1
 8007f54:	9d07      	ldr	r5, [sp, #28]
 8007f56:	eba6 040a 	sub.w	r4, r6, sl
 8007f5a:	42a5      	cmp	r5, r4
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	f040 8117 	bne.w	8008192 <_dtoa_r+0x6e2>
 8007f64:	f7f8 f99a 	bl	800029c <__adddf3>
 8007f68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	460d      	mov	r5, r1
 8007f70:	f7f8 fdda 	bl	8000b28 <__aeabi_dcmpgt>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	f040 80f9 	bne.w	800816c <_dtoa_r+0x6bc>
 8007f7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f7e:	4620      	mov	r0, r4
 8007f80:	4629      	mov	r1, r5
 8007f82:	f7f8 fda9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f86:	b118      	cbz	r0, 8007f90 <_dtoa_r+0x4e0>
 8007f88:	f018 0f01 	tst.w	r8, #1
 8007f8c:	f040 80ee 	bne.w	800816c <_dtoa_r+0x6bc>
 8007f90:	4649      	mov	r1, r9
 8007f92:	4658      	mov	r0, fp
 8007f94:	f000 fc90 	bl	80088b8 <_Bfree>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	7033      	strb	r3, [r6, #0]
 8007f9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007f9e:	3701      	adds	r7, #1
 8007fa0:	601f      	str	r7, [r3, #0]
 8007fa2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f000 831d 	beq.w	80085e4 <_dtoa_r+0xb34>
 8007faa:	601e      	str	r6, [r3, #0]
 8007fac:	e31a      	b.n	80085e4 <_dtoa_r+0xb34>
 8007fae:	07e2      	lsls	r2, r4, #31
 8007fb0:	d505      	bpl.n	8007fbe <_dtoa_r+0x50e>
 8007fb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fb6:	f7f8 fb27 	bl	8000608 <__aeabi_dmul>
 8007fba:	3601      	adds	r6, #1
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	1064      	asrs	r4, r4, #1
 8007fc0:	3508      	adds	r5, #8
 8007fc2:	e73f      	b.n	8007e44 <_dtoa_r+0x394>
 8007fc4:	2602      	movs	r6, #2
 8007fc6:	e742      	b.n	8007e4e <_dtoa_r+0x39e>
 8007fc8:	9c07      	ldr	r4, [sp, #28]
 8007fca:	9704      	str	r7, [sp, #16]
 8007fcc:	e761      	b.n	8007e92 <_dtoa_r+0x3e2>
 8007fce:	4b27      	ldr	r3, [pc, #156]	@ (800806c <_dtoa_r+0x5bc>)
 8007fd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007fd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fd6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007fda:	4454      	add	r4, sl
 8007fdc:	2900      	cmp	r1, #0
 8007fde:	d053      	beq.n	8008088 <_dtoa_r+0x5d8>
 8007fe0:	4928      	ldr	r1, [pc, #160]	@ (8008084 <_dtoa_r+0x5d4>)
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	f7f8 fc3a 	bl	800085c <__aeabi_ddiv>
 8007fe8:	4633      	mov	r3, r6
 8007fea:	462a      	mov	r2, r5
 8007fec:	f7f8 f954 	bl	8000298 <__aeabi_dsub>
 8007ff0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ff4:	4656      	mov	r6, sl
 8007ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ffa:	f7f8 fdb5 	bl	8000b68 <__aeabi_d2iz>
 8007ffe:	4605      	mov	r5, r0
 8008000:	f7f8 fa98 	bl	8000534 <__aeabi_i2d>
 8008004:	4602      	mov	r2, r0
 8008006:	460b      	mov	r3, r1
 8008008:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800800c:	f7f8 f944 	bl	8000298 <__aeabi_dsub>
 8008010:	3530      	adds	r5, #48	@ 0x30
 8008012:	4602      	mov	r2, r0
 8008014:	460b      	mov	r3, r1
 8008016:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800801a:	f806 5b01 	strb.w	r5, [r6], #1
 800801e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008022:	f7f8 fd63 	bl	8000aec <__aeabi_dcmplt>
 8008026:	2800      	cmp	r0, #0
 8008028:	d171      	bne.n	800810e <_dtoa_r+0x65e>
 800802a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800802e:	4911      	ldr	r1, [pc, #68]	@ (8008074 <_dtoa_r+0x5c4>)
 8008030:	2000      	movs	r0, #0
 8008032:	f7f8 f931 	bl	8000298 <__aeabi_dsub>
 8008036:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800803a:	f7f8 fd57 	bl	8000aec <__aeabi_dcmplt>
 800803e:	2800      	cmp	r0, #0
 8008040:	f040 8095 	bne.w	800816e <_dtoa_r+0x6be>
 8008044:	42a6      	cmp	r6, r4
 8008046:	f43f af50 	beq.w	8007eea <_dtoa_r+0x43a>
 800804a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800804e:	4b0a      	ldr	r3, [pc, #40]	@ (8008078 <_dtoa_r+0x5c8>)
 8008050:	2200      	movs	r2, #0
 8008052:	f7f8 fad9 	bl	8000608 <__aeabi_dmul>
 8008056:	4b08      	ldr	r3, [pc, #32]	@ (8008078 <_dtoa_r+0x5c8>)
 8008058:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800805c:	2200      	movs	r2, #0
 800805e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008062:	f7f8 fad1 	bl	8000608 <__aeabi_dmul>
 8008066:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800806a:	e7c4      	b.n	8007ff6 <_dtoa_r+0x546>
 800806c:	0800b350 	.word	0x0800b350
 8008070:	0800b328 	.word	0x0800b328
 8008074:	3ff00000 	.word	0x3ff00000
 8008078:	40240000 	.word	0x40240000
 800807c:	401c0000 	.word	0x401c0000
 8008080:	40140000 	.word	0x40140000
 8008084:	3fe00000 	.word	0x3fe00000
 8008088:	4631      	mov	r1, r6
 800808a:	4628      	mov	r0, r5
 800808c:	f7f8 fabc 	bl	8000608 <__aeabi_dmul>
 8008090:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008094:	9415      	str	r4, [sp, #84]	@ 0x54
 8008096:	4656      	mov	r6, sl
 8008098:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800809c:	f7f8 fd64 	bl	8000b68 <__aeabi_d2iz>
 80080a0:	4605      	mov	r5, r0
 80080a2:	f7f8 fa47 	bl	8000534 <__aeabi_i2d>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080ae:	f7f8 f8f3 	bl	8000298 <__aeabi_dsub>
 80080b2:	3530      	adds	r5, #48	@ 0x30
 80080b4:	f806 5b01 	strb.w	r5, [r6], #1
 80080b8:	4602      	mov	r2, r0
 80080ba:	460b      	mov	r3, r1
 80080bc:	42a6      	cmp	r6, r4
 80080be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080c2:	f04f 0200 	mov.w	r2, #0
 80080c6:	d124      	bne.n	8008112 <_dtoa_r+0x662>
 80080c8:	4bac      	ldr	r3, [pc, #688]	@ (800837c <_dtoa_r+0x8cc>)
 80080ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80080ce:	f7f8 f8e5 	bl	800029c <__adddf3>
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080da:	f7f8 fd25 	bl	8000b28 <__aeabi_dcmpgt>
 80080de:	2800      	cmp	r0, #0
 80080e0:	d145      	bne.n	800816e <_dtoa_r+0x6be>
 80080e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80080e6:	49a5      	ldr	r1, [pc, #660]	@ (800837c <_dtoa_r+0x8cc>)
 80080e8:	2000      	movs	r0, #0
 80080ea:	f7f8 f8d5 	bl	8000298 <__aeabi_dsub>
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080f6:	f7f8 fcf9 	bl	8000aec <__aeabi_dcmplt>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	f43f aef5 	beq.w	8007eea <_dtoa_r+0x43a>
 8008100:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008102:	1e73      	subs	r3, r6, #1
 8008104:	9315      	str	r3, [sp, #84]	@ 0x54
 8008106:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800810a:	2b30      	cmp	r3, #48	@ 0x30
 800810c:	d0f8      	beq.n	8008100 <_dtoa_r+0x650>
 800810e:	9f04      	ldr	r7, [sp, #16]
 8008110:	e73e      	b.n	8007f90 <_dtoa_r+0x4e0>
 8008112:	4b9b      	ldr	r3, [pc, #620]	@ (8008380 <_dtoa_r+0x8d0>)
 8008114:	f7f8 fa78 	bl	8000608 <__aeabi_dmul>
 8008118:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800811c:	e7bc      	b.n	8008098 <_dtoa_r+0x5e8>
 800811e:	d10c      	bne.n	800813a <_dtoa_r+0x68a>
 8008120:	4b98      	ldr	r3, [pc, #608]	@ (8008384 <_dtoa_r+0x8d4>)
 8008122:	2200      	movs	r2, #0
 8008124:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008128:	f7f8 fa6e 	bl	8000608 <__aeabi_dmul>
 800812c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008130:	f7f8 fcf0 	bl	8000b14 <__aeabi_dcmpge>
 8008134:	2800      	cmp	r0, #0
 8008136:	f000 8157 	beq.w	80083e8 <_dtoa_r+0x938>
 800813a:	2400      	movs	r4, #0
 800813c:	4625      	mov	r5, r4
 800813e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008140:	43db      	mvns	r3, r3
 8008142:	9304      	str	r3, [sp, #16]
 8008144:	4656      	mov	r6, sl
 8008146:	2700      	movs	r7, #0
 8008148:	4621      	mov	r1, r4
 800814a:	4658      	mov	r0, fp
 800814c:	f000 fbb4 	bl	80088b8 <_Bfree>
 8008150:	2d00      	cmp	r5, #0
 8008152:	d0dc      	beq.n	800810e <_dtoa_r+0x65e>
 8008154:	b12f      	cbz	r7, 8008162 <_dtoa_r+0x6b2>
 8008156:	42af      	cmp	r7, r5
 8008158:	d003      	beq.n	8008162 <_dtoa_r+0x6b2>
 800815a:	4639      	mov	r1, r7
 800815c:	4658      	mov	r0, fp
 800815e:	f000 fbab 	bl	80088b8 <_Bfree>
 8008162:	4629      	mov	r1, r5
 8008164:	4658      	mov	r0, fp
 8008166:	f000 fba7 	bl	80088b8 <_Bfree>
 800816a:	e7d0      	b.n	800810e <_dtoa_r+0x65e>
 800816c:	9704      	str	r7, [sp, #16]
 800816e:	4633      	mov	r3, r6
 8008170:	461e      	mov	r6, r3
 8008172:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008176:	2a39      	cmp	r2, #57	@ 0x39
 8008178:	d107      	bne.n	800818a <_dtoa_r+0x6da>
 800817a:	459a      	cmp	sl, r3
 800817c:	d1f8      	bne.n	8008170 <_dtoa_r+0x6c0>
 800817e:	9a04      	ldr	r2, [sp, #16]
 8008180:	3201      	adds	r2, #1
 8008182:	9204      	str	r2, [sp, #16]
 8008184:	2230      	movs	r2, #48	@ 0x30
 8008186:	f88a 2000 	strb.w	r2, [sl]
 800818a:	781a      	ldrb	r2, [r3, #0]
 800818c:	3201      	adds	r2, #1
 800818e:	701a      	strb	r2, [r3, #0]
 8008190:	e7bd      	b.n	800810e <_dtoa_r+0x65e>
 8008192:	4b7b      	ldr	r3, [pc, #492]	@ (8008380 <_dtoa_r+0x8d0>)
 8008194:	2200      	movs	r2, #0
 8008196:	f7f8 fa37 	bl	8000608 <__aeabi_dmul>
 800819a:	2200      	movs	r2, #0
 800819c:	2300      	movs	r3, #0
 800819e:	4604      	mov	r4, r0
 80081a0:	460d      	mov	r5, r1
 80081a2:	f7f8 fc99 	bl	8000ad8 <__aeabi_dcmpeq>
 80081a6:	2800      	cmp	r0, #0
 80081a8:	f43f aebb 	beq.w	8007f22 <_dtoa_r+0x472>
 80081ac:	e6f0      	b.n	8007f90 <_dtoa_r+0x4e0>
 80081ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80081b0:	2a00      	cmp	r2, #0
 80081b2:	f000 80db 	beq.w	800836c <_dtoa_r+0x8bc>
 80081b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081b8:	2a01      	cmp	r2, #1
 80081ba:	f300 80bf 	bgt.w	800833c <_dtoa_r+0x88c>
 80081be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80081c0:	2a00      	cmp	r2, #0
 80081c2:	f000 80b7 	beq.w	8008334 <_dtoa_r+0x884>
 80081c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80081ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80081cc:	4646      	mov	r6, r8
 80081ce:	9a08      	ldr	r2, [sp, #32]
 80081d0:	2101      	movs	r1, #1
 80081d2:	441a      	add	r2, r3
 80081d4:	4658      	mov	r0, fp
 80081d6:	4498      	add	r8, r3
 80081d8:	9208      	str	r2, [sp, #32]
 80081da:	f000 fc6b 	bl	8008ab4 <__i2b>
 80081de:	4605      	mov	r5, r0
 80081e0:	b15e      	cbz	r6, 80081fa <_dtoa_r+0x74a>
 80081e2:	9b08      	ldr	r3, [sp, #32]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	dd08      	ble.n	80081fa <_dtoa_r+0x74a>
 80081e8:	42b3      	cmp	r3, r6
 80081ea:	9a08      	ldr	r2, [sp, #32]
 80081ec:	bfa8      	it	ge
 80081ee:	4633      	movge	r3, r6
 80081f0:	eba8 0803 	sub.w	r8, r8, r3
 80081f4:	1af6      	subs	r6, r6, r3
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	9308      	str	r3, [sp, #32]
 80081fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081fc:	b1f3      	cbz	r3, 800823c <_dtoa_r+0x78c>
 80081fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 80b7 	beq.w	8008374 <_dtoa_r+0x8c4>
 8008206:	b18c      	cbz	r4, 800822c <_dtoa_r+0x77c>
 8008208:	4629      	mov	r1, r5
 800820a:	4622      	mov	r2, r4
 800820c:	4658      	mov	r0, fp
 800820e:	f000 fd11 	bl	8008c34 <__pow5mult>
 8008212:	464a      	mov	r2, r9
 8008214:	4601      	mov	r1, r0
 8008216:	4605      	mov	r5, r0
 8008218:	4658      	mov	r0, fp
 800821a:	f000 fc61 	bl	8008ae0 <__multiply>
 800821e:	4649      	mov	r1, r9
 8008220:	9004      	str	r0, [sp, #16]
 8008222:	4658      	mov	r0, fp
 8008224:	f000 fb48 	bl	80088b8 <_Bfree>
 8008228:	9b04      	ldr	r3, [sp, #16]
 800822a:	4699      	mov	r9, r3
 800822c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800822e:	1b1a      	subs	r2, r3, r4
 8008230:	d004      	beq.n	800823c <_dtoa_r+0x78c>
 8008232:	4649      	mov	r1, r9
 8008234:	4658      	mov	r0, fp
 8008236:	f000 fcfd 	bl	8008c34 <__pow5mult>
 800823a:	4681      	mov	r9, r0
 800823c:	2101      	movs	r1, #1
 800823e:	4658      	mov	r0, fp
 8008240:	f000 fc38 	bl	8008ab4 <__i2b>
 8008244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008246:	4604      	mov	r4, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	f000 81cf 	beq.w	80085ec <_dtoa_r+0xb3c>
 800824e:	461a      	mov	r2, r3
 8008250:	4601      	mov	r1, r0
 8008252:	4658      	mov	r0, fp
 8008254:	f000 fcee 	bl	8008c34 <__pow5mult>
 8008258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800825a:	2b01      	cmp	r3, #1
 800825c:	4604      	mov	r4, r0
 800825e:	f300 8095 	bgt.w	800838c <_dtoa_r+0x8dc>
 8008262:	9b02      	ldr	r3, [sp, #8]
 8008264:	2b00      	cmp	r3, #0
 8008266:	f040 8087 	bne.w	8008378 <_dtoa_r+0x8c8>
 800826a:	9b03      	ldr	r3, [sp, #12]
 800826c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008270:	2b00      	cmp	r3, #0
 8008272:	f040 8089 	bne.w	8008388 <_dtoa_r+0x8d8>
 8008276:	9b03      	ldr	r3, [sp, #12]
 8008278:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800827c:	0d1b      	lsrs	r3, r3, #20
 800827e:	051b      	lsls	r3, r3, #20
 8008280:	b12b      	cbz	r3, 800828e <_dtoa_r+0x7de>
 8008282:	9b08      	ldr	r3, [sp, #32]
 8008284:	3301      	adds	r3, #1
 8008286:	9308      	str	r3, [sp, #32]
 8008288:	f108 0801 	add.w	r8, r8, #1
 800828c:	2301      	movs	r3, #1
 800828e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008292:	2b00      	cmp	r3, #0
 8008294:	f000 81b0 	beq.w	80085f8 <_dtoa_r+0xb48>
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800829e:	6918      	ldr	r0, [r3, #16]
 80082a0:	f000 fbbc 	bl	8008a1c <__hi0bits>
 80082a4:	f1c0 0020 	rsb	r0, r0, #32
 80082a8:	9b08      	ldr	r3, [sp, #32]
 80082aa:	4418      	add	r0, r3
 80082ac:	f010 001f 	ands.w	r0, r0, #31
 80082b0:	d077      	beq.n	80083a2 <_dtoa_r+0x8f2>
 80082b2:	f1c0 0320 	rsb	r3, r0, #32
 80082b6:	2b04      	cmp	r3, #4
 80082b8:	dd6b      	ble.n	8008392 <_dtoa_r+0x8e2>
 80082ba:	9b08      	ldr	r3, [sp, #32]
 80082bc:	f1c0 001c 	rsb	r0, r0, #28
 80082c0:	4403      	add	r3, r0
 80082c2:	4480      	add	r8, r0
 80082c4:	4406      	add	r6, r0
 80082c6:	9308      	str	r3, [sp, #32]
 80082c8:	f1b8 0f00 	cmp.w	r8, #0
 80082cc:	dd05      	ble.n	80082da <_dtoa_r+0x82a>
 80082ce:	4649      	mov	r1, r9
 80082d0:	4642      	mov	r2, r8
 80082d2:	4658      	mov	r0, fp
 80082d4:	f000 fd08 	bl	8008ce8 <__lshift>
 80082d8:	4681      	mov	r9, r0
 80082da:	9b08      	ldr	r3, [sp, #32]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	dd05      	ble.n	80082ec <_dtoa_r+0x83c>
 80082e0:	4621      	mov	r1, r4
 80082e2:	461a      	mov	r2, r3
 80082e4:	4658      	mov	r0, fp
 80082e6:	f000 fcff 	bl	8008ce8 <__lshift>
 80082ea:	4604      	mov	r4, r0
 80082ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d059      	beq.n	80083a6 <_dtoa_r+0x8f6>
 80082f2:	4621      	mov	r1, r4
 80082f4:	4648      	mov	r0, r9
 80082f6:	f000 fd63 	bl	8008dc0 <__mcmp>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	da53      	bge.n	80083a6 <_dtoa_r+0x8f6>
 80082fe:	1e7b      	subs	r3, r7, #1
 8008300:	9304      	str	r3, [sp, #16]
 8008302:	4649      	mov	r1, r9
 8008304:	2300      	movs	r3, #0
 8008306:	220a      	movs	r2, #10
 8008308:	4658      	mov	r0, fp
 800830a:	f000 faf7 	bl	80088fc <__multadd>
 800830e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008310:	4681      	mov	r9, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	f000 8172 	beq.w	80085fc <_dtoa_r+0xb4c>
 8008318:	2300      	movs	r3, #0
 800831a:	4629      	mov	r1, r5
 800831c:	220a      	movs	r2, #10
 800831e:	4658      	mov	r0, fp
 8008320:	f000 faec 	bl	80088fc <__multadd>
 8008324:	9b00      	ldr	r3, [sp, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	4605      	mov	r5, r0
 800832a:	dc67      	bgt.n	80083fc <_dtoa_r+0x94c>
 800832c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800832e:	2b02      	cmp	r3, #2
 8008330:	dc41      	bgt.n	80083b6 <_dtoa_r+0x906>
 8008332:	e063      	b.n	80083fc <_dtoa_r+0x94c>
 8008334:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008336:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800833a:	e746      	b.n	80081ca <_dtoa_r+0x71a>
 800833c:	9b07      	ldr	r3, [sp, #28]
 800833e:	1e5c      	subs	r4, r3, #1
 8008340:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008342:	42a3      	cmp	r3, r4
 8008344:	bfbf      	itttt	lt
 8008346:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008348:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800834a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800834c:	1ae3      	sublt	r3, r4, r3
 800834e:	bfb4      	ite	lt
 8008350:	18d2      	addlt	r2, r2, r3
 8008352:	1b1c      	subge	r4, r3, r4
 8008354:	9b07      	ldr	r3, [sp, #28]
 8008356:	bfbc      	itt	lt
 8008358:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800835a:	2400      	movlt	r4, #0
 800835c:	2b00      	cmp	r3, #0
 800835e:	bfb5      	itete	lt
 8008360:	eba8 0603 	sublt.w	r6, r8, r3
 8008364:	9b07      	ldrge	r3, [sp, #28]
 8008366:	2300      	movlt	r3, #0
 8008368:	4646      	movge	r6, r8
 800836a:	e730      	b.n	80081ce <_dtoa_r+0x71e>
 800836c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800836e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008370:	4646      	mov	r6, r8
 8008372:	e735      	b.n	80081e0 <_dtoa_r+0x730>
 8008374:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008376:	e75c      	b.n	8008232 <_dtoa_r+0x782>
 8008378:	2300      	movs	r3, #0
 800837a:	e788      	b.n	800828e <_dtoa_r+0x7de>
 800837c:	3fe00000 	.word	0x3fe00000
 8008380:	40240000 	.word	0x40240000
 8008384:	40140000 	.word	0x40140000
 8008388:	9b02      	ldr	r3, [sp, #8]
 800838a:	e780      	b.n	800828e <_dtoa_r+0x7de>
 800838c:	2300      	movs	r3, #0
 800838e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008390:	e782      	b.n	8008298 <_dtoa_r+0x7e8>
 8008392:	d099      	beq.n	80082c8 <_dtoa_r+0x818>
 8008394:	9a08      	ldr	r2, [sp, #32]
 8008396:	331c      	adds	r3, #28
 8008398:	441a      	add	r2, r3
 800839a:	4498      	add	r8, r3
 800839c:	441e      	add	r6, r3
 800839e:	9208      	str	r2, [sp, #32]
 80083a0:	e792      	b.n	80082c8 <_dtoa_r+0x818>
 80083a2:	4603      	mov	r3, r0
 80083a4:	e7f6      	b.n	8008394 <_dtoa_r+0x8e4>
 80083a6:	9b07      	ldr	r3, [sp, #28]
 80083a8:	9704      	str	r7, [sp, #16]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	dc20      	bgt.n	80083f0 <_dtoa_r+0x940>
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	dd1e      	ble.n	80083f4 <_dtoa_r+0x944>
 80083b6:	9b00      	ldr	r3, [sp, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f47f aec0 	bne.w	800813e <_dtoa_r+0x68e>
 80083be:	4621      	mov	r1, r4
 80083c0:	2205      	movs	r2, #5
 80083c2:	4658      	mov	r0, fp
 80083c4:	f000 fa9a 	bl	80088fc <__multadd>
 80083c8:	4601      	mov	r1, r0
 80083ca:	4604      	mov	r4, r0
 80083cc:	4648      	mov	r0, r9
 80083ce:	f000 fcf7 	bl	8008dc0 <__mcmp>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	f77f aeb3 	ble.w	800813e <_dtoa_r+0x68e>
 80083d8:	4656      	mov	r6, sl
 80083da:	2331      	movs	r3, #49	@ 0x31
 80083dc:	f806 3b01 	strb.w	r3, [r6], #1
 80083e0:	9b04      	ldr	r3, [sp, #16]
 80083e2:	3301      	adds	r3, #1
 80083e4:	9304      	str	r3, [sp, #16]
 80083e6:	e6ae      	b.n	8008146 <_dtoa_r+0x696>
 80083e8:	9c07      	ldr	r4, [sp, #28]
 80083ea:	9704      	str	r7, [sp, #16]
 80083ec:	4625      	mov	r5, r4
 80083ee:	e7f3      	b.n	80083d8 <_dtoa_r+0x928>
 80083f0:	9b07      	ldr	r3, [sp, #28]
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 8104 	beq.w	8008604 <_dtoa_r+0xb54>
 80083fc:	2e00      	cmp	r6, #0
 80083fe:	dd05      	ble.n	800840c <_dtoa_r+0x95c>
 8008400:	4629      	mov	r1, r5
 8008402:	4632      	mov	r2, r6
 8008404:	4658      	mov	r0, fp
 8008406:	f000 fc6f 	bl	8008ce8 <__lshift>
 800840a:	4605      	mov	r5, r0
 800840c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800840e:	2b00      	cmp	r3, #0
 8008410:	d05a      	beq.n	80084c8 <_dtoa_r+0xa18>
 8008412:	6869      	ldr	r1, [r5, #4]
 8008414:	4658      	mov	r0, fp
 8008416:	f000 fa0f 	bl	8008838 <_Balloc>
 800841a:	4606      	mov	r6, r0
 800841c:	b928      	cbnz	r0, 800842a <_dtoa_r+0x97a>
 800841e:	4b84      	ldr	r3, [pc, #528]	@ (8008630 <_dtoa_r+0xb80>)
 8008420:	4602      	mov	r2, r0
 8008422:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008426:	f7ff bb5a 	b.w	8007ade <_dtoa_r+0x2e>
 800842a:	692a      	ldr	r2, [r5, #16]
 800842c:	3202      	adds	r2, #2
 800842e:	0092      	lsls	r2, r2, #2
 8008430:	f105 010c 	add.w	r1, r5, #12
 8008434:	300c      	adds	r0, #12
 8008436:	f7ff fa9c 	bl	8007972 <memcpy>
 800843a:	2201      	movs	r2, #1
 800843c:	4631      	mov	r1, r6
 800843e:	4658      	mov	r0, fp
 8008440:	f000 fc52 	bl	8008ce8 <__lshift>
 8008444:	f10a 0301 	add.w	r3, sl, #1
 8008448:	9307      	str	r3, [sp, #28]
 800844a:	9b00      	ldr	r3, [sp, #0]
 800844c:	4453      	add	r3, sl
 800844e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008450:	9b02      	ldr	r3, [sp, #8]
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	462f      	mov	r7, r5
 8008458:	930a      	str	r3, [sp, #40]	@ 0x28
 800845a:	4605      	mov	r5, r0
 800845c:	9b07      	ldr	r3, [sp, #28]
 800845e:	4621      	mov	r1, r4
 8008460:	3b01      	subs	r3, #1
 8008462:	4648      	mov	r0, r9
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	f7ff fa99 	bl	800799c <quorem>
 800846a:	4639      	mov	r1, r7
 800846c:	9002      	str	r0, [sp, #8]
 800846e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008472:	4648      	mov	r0, r9
 8008474:	f000 fca4 	bl	8008dc0 <__mcmp>
 8008478:	462a      	mov	r2, r5
 800847a:	9008      	str	r0, [sp, #32]
 800847c:	4621      	mov	r1, r4
 800847e:	4658      	mov	r0, fp
 8008480:	f000 fcba 	bl	8008df8 <__mdiff>
 8008484:	68c2      	ldr	r2, [r0, #12]
 8008486:	4606      	mov	r6, r0
 8008488:	bb02      	cbnz	r2, 80084cc <_dtoa_r+0xa1c>
 800848a:	4601      	mov	r1, r0
 800848c:	4648      	mov	r0, r9
 800848e:	f000 fc97 	bl	8008dc0 <__mcmp>
 8008492:	4602      	mov	r2, r0
 8008494:	4631      	mov	r1, r6
 8008496:	4658      	mov	r0, fp
 8008498:	920e      	str	r2, [sp, #56]	@ 0x38
 800849a:	f000 fa0d 	bl	80088b8 <_Bfree>
 800849e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084a2:	9e07      	ldr	r6, [sp, #28]
 80084a4:	ea43 0102 	orr.w	r1, r3, r2
 80084a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084aa:	4319      	orrs	r1, r3
 80084ac:	d110      	bne.n	80084d0 <_dtoa_r+0xa20>
 80084ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084b2:	d029      	beq.n	8008508 <_dtoa_r+0xa58>
 80084b4:	9b08      	ldr	r3, [sp, #32]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	dd02      	ble.n	80084c0 <_dtoa_r+0xa10>
 80084ba:	9b02      	ldr	r3, [sp, #8]
 80084bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80084c0:	9b00      	ldr	r3, [sp, #0]
 80084c2:	f883 8000 	strb.w	r8, [r3]
 80084c6:	e63f      	b.n	8008148 <_dtoa_r+0x698>
 80084c8:	4628      	mov	r0, r5
 80084ca:	e7bb      	b.n	8008444 <_dtoa_r+0x994>
 80084cc:	2201      	movs	r2, #1
 80084ce:	e7e1      	b.n	8008494 <_dtoa_r+0x9e4>
 80084d0:	9b08      	ldr	r3, [sp, #32]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	db04      	blt.n	80084e0 <_dtoa_r+0xa30>
 80084d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084d8:	430b      	orrs	r3, r1
 80084da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80084dc:	430b      	orrs	r3, r1
 80084de:	d120      	bne.n	8008522 <_dtoa_r+0xa72>
 80084e0:	2a00      	cmp	r2, #0
 80084e2:	dded      	ble.n	80084c0 <_dtoa_r+0xa10>
 80084e4:	4649      	mov	r1, r9
 80084e6:	2201      	movs	r2, #1
 80084e8:	4658      	mov	r0, fp
 80084ea:	f000 fbfd 	bl	8008ce8 <__lshift>
 80084ee:	4621      	mov	r1, r4
 80084f0:	4681      	mov	r9, r0
 80084f2:	f000 fc65 	bl	8008dc0 <__mcmp>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	dc03      	bgt.n	8008502 <_dtoa_r+0xa52>
 80084fa:	d1e1      	bne.n	80084c0 <_dtoa_r+0xa10>
 80084fc:	f018 0f01 	tst.w	r8, #1
 8008500:	d0de      	beq.n	80084c0 <_dtoa_r+0xa10>
 8008502:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008506:	d1d8      	bne.n	80084ba <_dtoa_r+0xa0a>
 8008508:	9a00      	ldr	r2, [sp, #0]
 800850a:	2339      	movs	r3, #57	@ 0x39
 800850c:	7013      	strb	r3, [r2, #0]
 800850e:	4633      	mov	r3, r6
 8008510:	461e      	mov	r6, r3
 8008512:	3b01      	subs	r3, #1
 8008514:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008518:	2a39      	cmp	r2, #57	@ 0x39
 800851a:	d052      	beq.n	80085c2 <_dtoa_r+0xb12>
 800851c:	3201      	adds	r2, #1
 800851e:	701a      	strb	r2, [r3, #0]
 8008520:	e612      	b.n	8008148 <_dtoa_r+0x698>
 8008522:	2a00      	cmp	r2, #0
 8008524:	dd07      	ble.n	8008536 <_dtoa_r+0xa86>
 8008526:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800852a:	d0ed      	beq.n	8008508 <_dtoa_r+0xa58>
 800852c:	9a00      	ldr	r2, [sp, #0]
 800852e:	f108 0301 	add.w	r3, r8, #1
 8008532:	7013      	strb	r3, [r2, #0]
 8008534:	e608      	b.n	8008148 <_dtoa_r+0x698>
 8008536:	9b07      	ldr	r3, [sp, #28]
 8008538:	9a07      	ldr	r2, [sp, #28]
 800853a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800853e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008540:	4293      	cmp	r3, r2
 8008542:	d028      	beq.n	8008596 <_dtoa_r+0xae6>
 8008544:	4649      	mov	r1, r9
 8008546:	2300      	movs	r3, #0
 8008548:	220a      	movs	r2, #10
 800854a:	4658      	mov	r0, fp
 800854c:	f000 f9d6 	bl	80088fc <__multadd>
 8008550:	42af      	cmp	r7, r5
 8008552:	4681      	mov	r9, r0
 8008554:	f04f 0300 	mov.w	r3, #0
 8008558:	f04f 020a 	mov.w	r2, #10
 800855c:	4639      	mov	r1, r7
 800855e:	4658      	mov	r0, fp
 8008560:	d107      	bne.n	8008572 <_dtoa_r+0xac2>
 8008562:	f000 f9cb 	bl	80088fc <__multadd>
 8008566:	4607      	mov	r7, r0
 8008568:	4605      	mov	r5, r0
 800856a:	9b07      	ldr	r3, [sp, #28]
 800856c:	3301      	adds	r3, #1
 800856e:	9307      	str	r3, [sp, #28]
 8008570:	e774      	b.n	800845c <_dtoa_r+0x9ac>
 8008572:	f000 f9c3 	bl	80088fc <__multadd>
 8008576:	4629      	mov	r1, r5
 8008578:	4607      	mov	r7, r0
 800857a:	2300      	movs	r3, #0
 800857c:	220a      	movs	r2, #10
 800857e:	4658      	mov	r0, fp
 8008580:	f000 f9bc 	bl	80088fc <__multadd>
 8008584:	4605      	mov	r5, r0
 8008586:	e7f0      	b.n	800856a <_dtoa_r+0xaba>
 8008588:	9b00      	ldr	r3, [sp, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	bfcc      	ite	gt
 800858e:	461e      	movgt	r6, r3
 8008590:	2601      	movle	r6, #1
 8008592:	4456      	add	r6, sl
 8008594:	2700      	movs	r7, #0
 8008596:	4649      	mov	r1, r9
 8008598:	2201      	movs	r2, #1
 800859a:	4658      	mov	r0, fp
 800859c:	f000 fba4 	bl	8008ce8 <__lshift>
 80085a0:	4621      	mov	r1, r4
 80085a2:	4681      	mov	r9, r0
 80085a4:	f000 fc0c 	bl	8008dc0 <__mcmp>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	dcb0      	bgt.n	800850e <_dtoa_r+0xa5e>
 80085ac:	d102      	bne.n	80085b4 <_dtoa_r+0xb04>
 80085ae:	f018 0f01 	tst.w	r8, #1
 80085b2:	d1ac      	bne.n	800850e <_dtoa_r+0xa5e>
 80085b4:	4633      	mov	r3, r6
 80085b6:	461e      	mov	r6, r3
 80085b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085bc:	2a30      	cmp	r2, #48	@ 0x30
 80085be:	d0fa      	beq.n	80085b6 <_dtoa_r+0xb06>
 80085c0:	e5c2      	b.n	8008148 <_dtoa_r+0x698>
 80085c2:	459a      	cmp	sl, r3
 80085c4:	d1a4      	bne.n	8008510 <_dtoa_r+0xa60>
 80085c6:	9b04      	ldr	r3, [sp, #16]
 80085c8:	3301      	adds	r3, #1
 80085ca:	9304      	str	r3, [sp, #16]
 80085cc:	2331      	movs	r3, #49	@ 0x31
 80085ce:	f88a 3000 	strb.w	r3, [sl]
 80085d2:	e5b9      	b.n	8008148 <_dtoa_r+0x698>
 80085d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80085d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008634 <_dtoa_r+0xb84>
 80085da:	b11b      	cbz	r3, 80085e4 <_dtoa_r+0xb34>
 80085dc:	f10a 0308 	add.w	r3, sl, #8
 80085e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80085e2:	6013      	str	r3, [r2, #0]
 80085e4:	4650      	mov	r0, sl
 80085e6:	b019      	add	sp, #100	@ 0x64
 80085e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	f77f ae37 	ble.w	8008262 <_dtoa_r+0x7b2>
 80085f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80085f8:	2001      	movs	r0, #1
 80085fa:	e655      	b.n	80082a8 <_dtoa_r+0x7f8>
 80085fc:	9b00      	ldr	r3, [sp, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f77f aed6 	ble.w	80083b0 <_dtoa_r+0x900>
 8008604:	4656      	mov	r6, sl
 8008606:	4621      	mov	r1, r4
 8008608:	4648      	mov	r0, r9
 800860a:	f7ff f9c7 	bl	800799c <quorem>
 800860e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008612:	f806 8b01 	strb.w	r8, [r6], #1
 8008616:	9b00      	ldr	r3, [sp, #0]
 8008618:	eba6 020a 	sub.w	r2, r6, sl
 800861c:	4293      	cmp	r3, r2
 800861e:	ddb3      	ble.n	8008588 <_dtoa_r+0xad8>
 8008620:	4649      	mov	r1, r9
 8008622:	2300      	movs	r3, #0
 8008624:	220a      	movs	r2, #10
 8008626:	4658      	mov	r0, fp
 8008628:	f000 f968 	bl	80088fc <__multadd>
 800862c:	4681      	mov	r9, r0
 800862e:	e7ea      	b.n	8008606 <_dtoa_r+0xb56>
 8008630:	0800b2ad 	.word	0x0800b2ad
 8008634:	0800b231 	.word	0x0800b231

08008638 <_free_r>:
 8008638:	b538      	push	{r3, r4, r5, lr}
 800863a:	4605      	mov	r5, r0
 800863c:	2900      	cmp	r1, #0
 800863e:	d041      	beq.n	80086c4 <_free_r+0x8c>
 8008640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008644:	1f0c      	subs	r4, r1, #4
 8008646:	2b00      	cmp	r3, #0
 8008648:	bfb8      	it	lt
 800864a:	18e4      	addlt	r4, r4, r3
 800864c:	f000 f8e8 	bl	8008820 <__malloc_lock>
 8008650:	4a1d      	ldr	r2, [pc, #116]	@ (80086c8 <_free_r+0x90>)
 8008652:	6813      	ldr	r3, [r2, #0]
 8008654:	b933      	cbnz	r3, 8008664 <_free_r+0x2c>
 8008656:	6063      	str	r3, [r4, #4]
 8008658:	6014      	str	r4, [r2, #0]
 800865a:	4628      	mov	r0, r5
 800865c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008660:	f000 b8e4 	b.w	800882c <__malloc_unlock>
 8008664:	42a3      	cmp	r3, r4
 8008666:	d908      	bls.n	800867a <_free_r+0x42>
 8008668:	6820      	ldr	r0, [r4, #0]
 800866a:	1821      	adds	r1, r4, r0
 800866c:	428b      	cmp	r3, r1
 800866e:	bf01      	itttt	eq
 8008670:	6819      	ldreq	r1, [r3, #0]
 8008672:	685b      	ldreq	r3, [r3, #4]
 8008674:	1809      	addeq	r1, r1, r0
 8008676:	6021      	streq	r1, [r4, #0]
 8008678:	e7ed      	b.n	8008656 <_free_r+0x1e>
 800867a:	461a      	mov	r2, r3
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	b10b      	cbz	r3, 8008684 <_free_r+0x4c>
 8008680:	42a3      	cmp	r3, r4
 8008682:	d9fa      	bls.n	800867a <_free_r+0x42>
 8008684:	6811      	ldr	r1, [r2, #0]
 8008686:	1850      	adds	r0, r2, r1
 8008688:	42a0      	cmp	r0, r4
 800868a:	d10b      	bne.n	80086a4 <_free_r+0x6c>
 800868c:	6820      	ldr	r0, [r4, #0]
 800868e:	4401      	add	r1, r0
 8008690:	1850      	adds	r0, r2, r1
 8008692:	4283      	cmp	r3, r0
 8008694:	6011      	str	r1, [r2, #0]
 8008696:	d1e0      	bne.n	800865a <_free_r+0x22>
 8008698:	6818      	ldr	r0, [r3, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	6053      	str	r3, [r2, #4]
 800869e:	4408      	add	r0, r1
 80086a0:	6010      	str	r0, [r2, #0]
 80086a2:	e7da      	b.n	800865a <_free_r+0x22>
 80086a4:	d902      	bls.n	80086ac <_free_r+0x74>
 80086a6:	230c      	movs	r3, #12
 80086a8:	602b      	str	r3, [r5, #0]
 80086aa:	e7d6      	b.n	800865a <_free_r+0x22>
 80086ac:	6820      	ldr	r0, [r4, #0]
 80086ae:	1821      	adds	r1, r4, r0
 80086b0:	428b      	cmp	r3, r1
 80086b2:	bf04      	itt	eq
 80086b4:	6819      	ldreq	r1, [r3, #0]
 80086b6:	685b      	ldreq	r3, [r3, #4]
 80086b8:	6063      	str	r3, [r4, #4]
 80086ba:	bf04      	itt	eq
 80086bc:	1809      	addeq	r1, r1, r0
 80086be:	6021      	streq	r1, [r4, #0]
 80086c0:	6054      	str	r4, [r2, #4]
 80086c2:	e7ca      	b.n	800865a <_free_r+0x22>
 80086c4:	bd38      	pop	{r3, r4, r5, pc}
 80086c6:	bf00      	nop
 80086c8:	200044c0 	.word	0x200044c0

080086cc <malloc>:
 80086cc:	4b02      	ldr	r3, [pc, #8]	@ (80086d8 <malloc+0xc>)
 80086ce:	4601      	mov	r1, r0
 80086d0:	6818      	ldr	r0, [r3, #0]
 80086d2:	f000 b825 	b.w	8008720 <_malloc_r>
 80086d6:	bf00      	nop
 80086d8:	2000001c 	.word	0x2000001c

080086dc <sbrk_aligned>:
 80086dc:	b570      	push	{r4, r5, r6, lr}
 80086de:	4e0f      	ldr	r6, [pc, #60]	@ (800871c <sbrk_aligned+0x40>)
 80086e0:	460c      	mov	r4, r1
 80086e2:	6831      	ldr	r1, [r6, #0]
 80086e4:	4605      	mov	r5, r0
 80086e6:	b911      	cbnz	r1, 80086ee <sbrk_aligned+0x12>
 80086e8:	f001 fe0c 	bl	800a304 <_sbrk_r>
 80086ec:	6030      	str	r0, [r6, #0]
 80086ee:	4621      	mov	r1, r4
 80086f0:	4628      	mov	r0, r5
 80086f2:	f001 fe07 	bl	800a304 <_sbrk_r>
 80086f6:	1c43      	adds	r3, r0, #1
 80086f8:	d103      	bne.n	8008702 <sbrk_aligned+0x26>
 80086fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80086fe:	4620      	mov	r0, r4
 8008700:	bd70      	pop	{r4, r5, r6, pc}
 8008702:	1cc4      	adds	r4, r0, #3
 8008704:	f024 0403 	bic.w	r4, r4, #3
 8008708:	42a0      	cmp	r0, r4
 800870a:	d0f8      	beq.n	80086fe <sbrk_aligned+0x22>
 800870c:	1a21      	subs	r1, r4, r0
 800870e:	4628      	mov	r0, r5
 8008710:	f001 fdf8 	bl	800a304 <_sbrk_r>
 8008714:	3001      	adds	r0, #1
 8008716:	d1f2      	bne.n	80086fe <sbrk_aligned+0x22>
 8008718:	e7ef      	b.n	80086fa <sbrk_aligned+0x1e>
 800871a:	bf00      	nop
 800871c:	200044bc 	.word	0x200044bc

08008720 <_malloc_r>:
 8008720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008724:	1ccd      	adds	r5, r1, #3
 8008726:	f025 0503 	bic.w	r5, r5, #3
 800872a:	3508      	adds	r5, #8
 800872c:	2d0c      	cmp	r5, #12
 800872e:	bf38      	it	cc
 8008730:	250c      	movcc	r5, #12
 8008732:	2d00      	cmp	r5, #0
 8008734:	4606      	mov	r6, r0
 8008736:	db01      	blt.n	800873c <_malloc_r+0x1c>
 8008738:	42a9      	cmp	r1, r5
 800873a:	d904      	bls.n	8008746 <_malloc_r+0x26>
 800873c:	230c      	movs	r3, #12
 800873e:	6033      	str	r3, [r6, #0]
 8008740:	2000      	movs	r0, #0
 8008742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008746:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800881c <_malloc_r+0xfc>
 800874a:	f000 f869 	bl	8008820 <__malloc_lock>
 800874e:	f8d8 3000 	ldr.w	r3, [r8]
 8008752:	461c      	mov	r4, r3
 8008754:	bb44      	cbnz	r4, 80087a8 <_malloc_r+0x88>
 8008756:	4629      	mov	r1, r5
 8008758:	4630      	mov	r0, r6
 800875a:	f7ff ffbf 	bl	80086dc <sbrk_aligned>
 800875e:	1c43      	adds	r3, r0, #1
 8008760:	4604      	mov	r4, r0
 8008762:	d158      	bne.n	8008816 <_malloc_r+0xf6>
 8008764:	f8d8 4000 	ldr.w	r4, [r8]
 8008768:	4627      	mov	r7, r4
 800876a:	2f00      	cmp	r7, #0
 800876c:	d143      	bne.n	80087f6 <_malloc_r+0xd6>
 800876e:	2c00      	cmp	r4, #0
 8008770:	d04b      	beq.n	800880a <_malloc_r+0xea>
 8008772:	6823      	ldr	r3, [r4, #0]
 8008774:	4639      	mov	r1, r7
 8008776:	4630      	mov	r0, r6
 8008778:	eb04 0903 	add.w	r9, r4, r3
 800877c:	f001 fdc2 	bl	800a304 <_sbrk_r>
 8008780:	4581      	cmp	r9, r0
 8008782:	d142      	bne.n	800880a <_malloc_r+0xea>
 8008784:	6821      	ldr	r1, [r4, #0]
 8008786:	1a6d      	subs	r5, r5, r1
 8008788:	4629      	mov	r1, r5
 800878a:	4630      	mov	r0, r6
 800878c:	f7ff ffa6 	bl	80086dc <sbrk_aligned>
 8008790:	3001      	adds	r0, #1
 8008792:	d03a      	beq.n	800880a <_malloc_r+0xea>
 8008794:	6823      	ldr	r3, [r4, #0]
 8008796:	442b      	add	r3, r5
 8008798:	6023      	str	r3, [r4, #0]
 800879a:	f8d8 3000 	ldr.w	r3, [r8]
 800879e:	685a      	ldr	r2, [r3, #4]
 80087a0:	bb62      	cbnz	r2, 80087fc <_malloc_r+0xdc>
 80087a2:	f8c8 7000 	str.w	r7, [r8]
 80087a6:	e00f      	b.n	80087c8 <_malloc_r+0xa8>
 80087a8:	6822      	ldr	r2, [r4, #0]
 80087aa:	1b52      	subs	r2, r2, r5
 80087ac:	d420      	bmi.n	80087f0 <_malloc_r+0xd0>
 80087ae:	2a0b      	cmp	r2, #11
 80087b0:	d917      	bls.n	80087e2 <_malloc_r+0xc2>
 80087b2:	1961      	adds	r1, r4, r5
 80087b4:	42a3      	cmp	r3, r4
 80087b6:	6025      	str	r5, [r4, #0]
 80087b8:	bf18      	it	ne
 80087ba:	6059      	strne	r1, [r3, #4]
 80087bc:	6863      	ldr	r3, [r4, #4]
 80087be:	bf08      	it	eq
 80087c0:	f8c8 1000 	streq.w	r1, [r8]
 80087c4:	5162      	str	r2, [r4, r5]
 80087c6:	604b      	str	r3, [r1, #4]
 80087c8:	4630      	mov	r0, r6
 80087ca:	f000 f82f 	bl	800882c <__malloc_unlock>
 80087ce:	f104 000b 	add.w	r0, r4, #11
 80087d2:	1d23      	adds	r3, r4, #4
 80087d4:	f020 0007 	bic.w	r0, r0, #7
 80087d8:	1ac2      	subs	r2, r0, r3
 80087da:	bf1c      	itt	ne
 80087dc:	1a1b      	subne	r3, r3, r0
 80087de:	50a3      	strne	r3, [r4, r2]
 80087e0:	e7af      	b.n	8008742 <_malloc_r+0x22>
 80087e2:	6862      	ldr	r2, [r4, #4]
 80087e4:	42a3      	cmp	r3, r4
 80087e6:	bf0c      	ite	eq
 80087e8:	f8c8 2000 	streq.w	r2, [r8]
 80087ec:	605a      	strne	r2, [r3, #4]
 80087ee:	e7eb      	b.n	80087c8 <_malloc_r+0xa8>
 80087f0:	4623      	mov	r3, r4
 80087f2:	6864      	ldr	r4, [r4, #4]
 80087f4:	e7ae      	b.n	8008754 <_malloc_r+0x34>
 80087f6:	463c      	mov	r4, r7
 80087f8:	687f      	ldr	r7, [r7, #4]
 80087fa:	e7b6      	b.n	800876a <_malloc_r+0x4a>
 80087fc:	461a      	mov	r2, r3
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	42a3      	cmp	r3, r4
 8008802:	d1fb      	bne.n	80087fc <_malloc_r+0xdc>
 8008804:	2300      	movs	r3, #0
 8008806:	6053      	str	r3, [r2, #4]
 8008808:	e7de      	b.n	80087c8 <_malloc_r+0xa8>
 800880a:	230c      	movs	r3, #12
 800880c:	6033      	str	r3, [r6, #0]
 800880e:	4630      	mov	r0, r6
 8008810:	f000 f80c 	bl	800882c <__malloc_unlock>
 8008814:	e794      	b.n	8008740 <_malloc_r+0x20>
 8008816:	6005      	str	r5, [r0, #0]
 8008818:	e7d6      	b.n	80087c8 <_malloc_r+0xa8>
 800881a:	bf00      	nop
 800881c:	200044c0 	.word	0x200044c0

08008820 <__malloc_lock>:
 8008820:	4801      	ldr	r0, [pc, #4]	@ (8008828 <__malloc_lock+0x8>)
 8008822:	f7ff b8a4 	b.w	800796e <__retarget_lock_acquire_recursive>
 8008826:	bf00      	nop
 8008828:	200044b8 	.word	0x200044b8

0800882c <__malloc_unlock>:
 800882c:	4801      	ldr	r0, [pc, #4]	@ (8008834 <__malloc_unlock+0x8>)
 800882e:	f7ff b89f 	b.w	8007970 <__retarget_lock_release_recursive>
 8008832:	bf00      	nop
 8008834:	200044b8 	.word	0x200044b8

08008838 <_Balloc>:
 8008838:	b570      	push	{r4, r5, r6, lr}
 800883a:	69c6      	ldr	r6, [r0, #28]
 800883c:	4604      	mov	r4, r0
 800883e:	460d      	mov	r5, r1
 8008840:	b976      	cbnz	r6, 8008860 <_Balloc+0x28>
 8008842:	2010      	movs	r0, #16
 8008844:	f7ff ff42 	bl	80086cc <malloc>
 8008848:	4602      	mov	r2, r0
 800884a:	61e0      	str	r0, [r4, #28]
 800884c:	b920      	cbnz	r0, 8008858 <_Balloc+0x20>
 800884e:	4b18      	ldr	r3, [pc, #96]	@ (80088b0 <_Balloc+0x78>)
 8008850:	4818      	ldr	r0, [pc, #96]	@ (80088b4 <_Balloc+0x7c>)
 8008852:	216b      	movs	r1, #107	@ 0x6b
 8008854:	f001 fd70 	bl	800a338 <__assert_func>
 8008858:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800885c:	6006      	str	r6, [r0, #0]
 800885e:	60c6      	str	r6, [r0, #12]
 8008860:	69e6      	ldr	r6, [r4, #28]
 8008862:	68f3      	ldr	r3, [r6, #12]
 8008864:	b183      	cbz	r3, 8008888 <_Balloc+0x50>
 8008866:	69e3      	ldr	r3, [r4, #28]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800886e:	b9b8      	cbnz	r0, 80088a0 <_Balloc+0x68>
 8008870:	2101      	movs	r1, #1
 8008872:	fa01 f605 	lsl.w	r6, r1, r5
 8008876:	1d72      	adds	r2, r6, #5
 8008878:	0092      	lsls	r2, r2, #2
 800887a:	4620      	mov	r0, r4
 800887c:	f001 fd7a 	bl	800a374 <_calloc_r>
 8008880:	b160      	cbz	r0, 800889c <_Balloc+0x64>
 8008882:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008886:	e00e      	b.n	80088a6 <_Balloc+0x6e>
 8008888:	2221      	movs	r2, #33	@ 0x21
 800888a:	2104      	movs	r1, #4
 800888c:	4620      	mov	r0, r4
 800888e:	f001 fd71 	bl	800a374 <_calloc_r>
 8008892:	69e3      	ldr	r3, [r4, #28]
 8008894:	60f0      	str	r0, [r6, #12]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1e4      	bne.n	8008866 <_Balloc+0x2e>
 800889c:	2000      	movs	r0, #0
 800889e:	bd70      	pop	{r4, r5, r6, pc}
 80088a0:	6802      	ldr	r2, [r0, #0]
 80088a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088a6:	2300      	movs	r3, #0
 80088a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088ac:	e7f7      	b.n	800889e <_Balloc+0x66>
 80088ae:	bf00      	nop
 80088b0:	0800b23e 	.word	0x0800b23e
 80088b4:	0800b2be 	.word	0x0800b2be

080088b8 <_Bfree>:
 80088b8:	b570      	push	{r4, r5, r6, lr}
 80088ba:	69c6      	ldr	r6, [r0, #28]
 80088bc:	4605      	mov	r5, r0
 80088be:	460c      	mov	r4, r1
 80088c0:	b976      	cbnz	r6, 80088e0 <_Bfree+0x28>
 80088c2:	2010      	movs	r0, #16
 80088c4:	f7ff ff02 	bl	80086cc <malloc>
 80088c8:	4602      	mov	r2, r0
 80088ca:	61e8      	str	r0, [r5, #28]
 80088cc:	b920      	cbnz	r0, 80088d8 <_Bfree+0x20>
 80088ce:	4b09      	ldr	r3, [pc, #36]	@ (80088f4 <_Bfree+0x3c>)
 80088d0:	4809      	ldr	r0, [pc, #36]	@ (80088f8 <_Bfree+0x40>)
 80088d2:	218f      	movs	r1, #143	@ 0x8f
 80088d4:	f001 fd30 	bl	800a338 <__assert_func>
 80088d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088dc:	6006      	str	r6, [r0, #0]
 80088de:	60c6      	str	r6, [r0, #12]
 80088e0:	b13c      	cbz	r4, 80088f2 <_Bfree+0x3a>
 80088e2:	69eb      	ldr	r3, [r5, #28]
 80088e4:	6862      	ldr	r2, [r4, #4]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088ec:	6021      	str	r1, [r4, #0]
 80088ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088f2:	bd70      	pop	{r4, r5, r6, pc}
 80088f4:	0800b23e 	.word	0x0800b23e
 80088f8:	0800b2be 	.word	0x0800b2be

080088fc <__multadd>:
 80088fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008900:	690d      	ldr	r5, [r1, #16]
 8008902:	4607      	mov	r7, r0
 8008904:	460c      	mov	r4, r1
 8008906:	461e      	mov	r6, r3
 8008908:	f101 0c14 	add.w	ip, r1, #20
 800890c:	2000      	movs	r0, #0
 800890e:	f8dc 3000 	ldr.w	r3, [ip]
 8008912:	b299      	uxth	r1, r3
 8008914:	fb02 6101 	mla	r1, r2, r1, r6
 8008918:	0c1e      	lsrs	r6, r3, #16
 800891a:	0c0b      	lsrs	r3, r1, #16
 800891c:	fb02 3306 	mla	r3, r2, r6, r3
 8008920:	b289      	uxth	r1, r1
 8008922:	3001      	adds	r0, #1
 8008924:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008928:	4285      	cmp	r5, r0
 800892a:	f84c 1b04 	str.w	r1, [ip], #4
 800892e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008932:	dcec      	bgt.n	800890e <__multadd+0x12>
 8008934:	b30e      	cbz	r6, 800897a <__multadd+0x7e>
 8008936:	68a3      	ldr	r3, [r4, #8]
 8008938:	42ab      	cmp	r3, r5
 800893a:	dc19      	bgt.n	8008970 <__multadd+0x74>
 800893c:	6861      	ldr	r1, [r4, #4]
 800893e:	4638      	mov	r0, r7
 8008940:	3101      	adds	r1, #1
 8008942:	f7ff ff79 	bl	8008838 <_Balloc>
 8008946:	4680      	mov	r8, r0
 8008948:	b928      	cbnz	r0, 8008956 <__multadd+0x5a>
 800894a:	4602      	mov	r2, r0
 800894c:	4b0c      	ldr	r3, [pc, #48]	@ (8008980 <__multadd+0x84>)
 800894e:	480d      	ldr	r0, [pc, #52]	@ (8008984 <__multadd+0x88>)
 8008950:	21ba      	movs	r1, #186	@ 0xba
 8008952:	f001 fcf1 	bl	800a338 <__assert_func>
 8008956:	6922      	ldr	r2, [r4, #16]
 8008958:	3202      	adds	r2, #2
 800895a:	f104 010c 	add.w	r1, r4, #12
 800895e:	0092      	lsls	r2, r2, #2
 8008960:	300c      	adds	r0, #12
 8008962:	f7ff f806 	bl	8007972 <memcpy>
 8008966:	4621      	mov	r1, r4
 8008968:	4638      	mov	r0, r7
 800896a:	f7ff ffa5 	bl	80088b8 <_Bfree>
 800896e:	4644      	mov	r4, r8
 8008970:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008974:	3501      	adds	r5, #1
 8008976:	615e      	str	r6, [r3, #20]
 8008978:	6125      	str	r5, [r4, #16]
 800897a:	4620      	mov	r0, r4
 800897c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008980:	0800b2ad 	.word	0x0800b2ad
 8008984:	0800b2be 	.word	0x0800b2be

08008988 <__s2b>:
 8008988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800898c:	460c      	mov	r4, r1
 800898e:	4615      	mov	r5, r2
 8008990:	461f      	mov	r7, r3
 8008992:	2209      	movs	r2, #9
 8008994:	3308      	adds	r3, #8
 8008996:	4606      	mov	r6, r0
 8008998:	fb93 f3f2 	sdiv	r3, r3, r2
 800899c:	2100      	movs	r1, #0
 800899e:	2201      	movs	r2, #1
 80089a0:	429a      	cmp	r2, r3
 80089a2:	db09      	blt.n	80089b8 <__s2b+0x30>
 80089a4:	4630      	mov	r0, r6
 80089a6:	f7ff ff47 	bl	8008838 <_Balloc>
 80089aa:	b940      	cbnz	r0, 80089be <__s2b+0x36>
 80089ac:	4602      	mov	r2, r0
 80089ae:	4b19      	ldr	r3, [pc, #100]	@ (8008a14 <__s2b+0x8c>)
 80089b0:	4819      	ldr	r0, [pc, #100]	@ (8008a18 <__s2b+0x90>)
 80089b2:	21d3      	movs	r1, #211	@ 0xd3
 80089b4:	f001 fcc0 	bl	800a338 <__assert_func>
 80089b8:	0052      	lsls	r2, r2, #1
 80089ba:	3101      	adds	r1, #1
 80089bc:	e7f0      	b.n	80089a0 <__s2b+0x18>
 80089be:	9b08      	ldr	r3, [sp, #32]
 80089c0:	6143      	str	r3, [r0, #20]
 80089c2:	2d09      	cmp	r5, #9
 80089c4:	f04f 0301 	mov.w	r3, #1
 80089c8:	6103      	str	r3, [r0, #16]
 80089ca:	dd16      	ble.n	80089fa <__s2b+0x72>
 80089cc:	f104 0909 	add.w	r9, r4, #9
 80089d0:	46c8      	mov	r8, r9
 80089d2:	442c      	add	r4, r5
 80089d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80089d8:	4601      	mov	r1, r0
 80089da:	3b30      	subs	r3, #48	@ 0x30
 80089dc:	220a      	movs	r2, #10
 80089de:	4630      	mov	r0, r6
 80089e0:	f7ff ff8c 	bl	80088fc <__multadd>
 80089e4:	45a0      	cmp	r8, r4
 80089e6:	d1f5      	bne.n	80089d4 <__s2b+0x4c>
 80089e8:	f1a5 0408 	sub.w	r4, r5, #8
 80089ec:	444c      	add	r4, r9
 80089ee:	1b2d      	subs	r5, r5, r4
 80089f0:	1963      	adds	r3, r4, r5
 80089f2:	42bb      	cmp	r3, r7
 80089f4:	db04      	blt.n	8008a00 <__s2b+0x78>
 80089f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089fa:	340a      	adds	r4, #10
 80089fc:	2509      	movs	r5, #9
 80089fe:	e7f6      	b.n	80089ee <__s2b+0x66>
 8008a00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008a04:	4601      	mov	r1, r0
 8008a06:	3b30      	subs	r3, #48	@ 0x30
 8008a08:	220a      	movs	r2, #10
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	f7ff ff76 	bl	80088fc <__multadd>
 8008a10:	e7ee      	b.n	80089f0 <__s2b+0x68>
 8008a12:	bf00      	nop
 8008a14:	0800b2ad 	.word	0x0800b2ad
 8008a18:	0800b2be 	.word	0x0800b2be

08008a1c <__hi0bits>:
 8008a1c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008a20:	4603      	mov	r3, r0
 8008a22:	bf36      	itet	cc
 8008a24:	0403      	lslcc	r3, r0, #16
 8008a26:	2000      	movcs	r0, #0
 8008a28:	2010      	movcc	r0, #16
 8008a2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a2e:	bf3c      	itt	cc
 8008a30:	021b      	lslcc	r3, r3, #8
 8008a32:	3008      	addcc	r0, #8
 8008a34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a38:	bf3c      	itt	cc
 8008a3a:	011b      	lslcc	r3, r3, #4
 8008a3c:	3004      	addcc	r0, #4
 8008a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a42:	bf3c      	itt	cc
 8008a44:	009b      	lslcc	r3, r3, #2
 8008a46:	3002      	addcc	r0, #2
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	db05      	blt.n	8008a58 <__hi0bits+0x3c>
 8008a4c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008a50:	f100 0001 	add.w	r0, r0, #1
 8008a54:	bf08      	it	eq
 8008a56:	2020      	moveq	r0, #32
 8008a58:	4770      	bx	lr

08008a5a <__lo0bits>:
 8008a5a:	6803      	ldr	r3, [r0, #0]
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	f013 0007 	ands.w	r0, r3, #7
 8008a62:	d00b      	beq.n	8008a7c <__lo0bits+0x22>
 8008a64:	07d9      	lsls	r1, r3, #31
 8008a66:	d421      	bmi.n	8008aac <__lo0bits+0x52>
 8008a68:	0798      	lsls	r0, r3, #30
 8008a6a:	bf49      	itett	mi
 8008a6c:	085b      	lsrmi	r3, r3, #1
 8008a6e:	089b      	lsrpl	r3, r3, #2
 8008a70:	2001      	movmi	r0, #1
 8008a72:	6013      	strmi	r3, [r2, #0]
 8008a74:	bf5c      	itt	pl
 8008a76:	6013      	strpl	r3, [r2, #0]
 8008a78:	2002      	movpl	r0, #2
 8008a7a:	4770      	bx	lr
 8008a7c:	b299      	uxth	r1, r3
 8008a7e:	b909      	cbnz	r1, 8008a84 <__lo0bits+0x2a>
 8008a80:	0c1b      	lsrs	r3, r3, #16
 8008a82:	2010      	movs	r0, #16
 8008a84:	b2d9      	uxtb	r1, r3
 8008a86:	b909      	cbnz	r1, 8008a8c <__lo0bits+0x32>
 8008a88:	3008      	adds	r0, #8
 8008a8a:	0a1b      	lsrs	r3, r3, #8
 8008a8c:	0719      	lsls	r1, r3, #28
 8008a8e:	bf04      	itt	eq
 8008a90:	091b      	lsreq	r3, r3, #4
 8008a92:	3004      	addeq	r0, #4
 8008a94:	0799      	lsls	r1, r3, #30
 8008a96:	bf04      	itt	eq
 8008a98:	089b      	lsreq	r3, r3, #2
 8008a9a:	3002      	addeq	r0, #2
 8008a9c:	07d9      	lsls	r1, r3, #31
 8008a9e:	d403      	bmi.n	8008aa8 <__lo0bits+0x4e>
 8008aa0:	085b      	lsrs	r3, r3, #1
 8008aa2:	f100 0001 	add.w	r0, r0, #1
 8008aa6:	d003      	beq.n	8008ab0 <__lo0bits+0x56>
 8008aa8:	6013      	str	r3, [r2, #0]
 8008aaa:	4770      	bx	lr
 8008aac:	2000      	movs	r0, #0
 8008aae:	4770      	bx	lr
 8008ab0:	2020      	movs	r0, #32
 8008ab2:	4770      	bx	lr

08008ab4 <__i2b>:
 8008ab4:	b510      	push	{r4, lr}
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	2101      	movs	r1, #1
 8008aba:	f7ff febd 	bl	8008838 <_Balloc>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	b928      	cbnz	r0, 8008ace <__i2b+0x1a>
 8008ac2:	4b05      	ldr	r3, [pc, #20]	@ (8008ad8 <__i2b+0x24>)
 8008ac4:	4805      	ldr	r0, [pc, #20]	@ (8008adc <__i2b+0x28>)
 8008ac6:	f240 1145 	movw	r1, #325	@ 0x145
 8008aca:	f001 fc35 	bl	800a338 <__assert_func>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	6144      	str	r4, [r0, #20]
 8008ad2:	6103      	str	r3, [r0, #16]
 8008ad4:	bd10      	pop	{r4, pc}
 8008ad6:	bf00      	nop
 8008ad8:	0800b2ad 	.word	0x0800b2ad
 8008adc:	0800b2be 	.word	0x0800b2be

08008ae0 <__multiply>:
 8008ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae4:	4614      	mov	r4, r2
 8008ae6:	690a      	ldr	r2, [r1, #16]
 8008ae8:	6923      	ldr	r3, [r4, #16]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	bfa8      	it	ge
 8008aee:	4623      	movge	r3, r4
 8008af0:	460f      	mov	r7, r1
 8008af2:	bfa4      	itt	ge
 8008af4:	460c      	movge	r4, r1
 8008af6:	461f      	movge	r7, r3
 8008af8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008afc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008b00:	68a3      	ldr	r3, [r4, #8]
 8008b02:	6861      	ldr	r1, [r4, #4]
 8008b04:	eb0a 0609 	add.w	r6, sl, r9
 8008b08:	42b3      	cmp	r3, r6
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	bfb8      	it	lt
 8008b0e:	3101      	addlt	r1, #1
 8008b10:	f7ff fe92 	bl	8008838 <_Balloc>
 8008b14:	b930      	cbnz	r0, 8008b24 <__multiply+0x44>
 8008b16:	4602      	mov	r2, r0
 8008b18:	4b44      	ldr	r3, [pc, #272]	@ (8008c2c <__multiply+0x14c>)
 8008b1a:	4845      	ldr	r0, [pc, #276]	@ (8008c30 <__multiply+0x150>)
 8008b1c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008b20:	f001 fc0a 	bl	800a338 <__assert_func>
 8008b24:	f100 0514 	add.w	r5, r0, #20
 8008b28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b2c:	462b      	mov	r3, r5
 8008b2e:	2200      	movs	r2, #0
 8008b30:	4543      	cmp	r3, r8
 8008b32:	d321      	bcc.n	8008b78 <__multiply+0x98>
 8008b34:	f107 0114 	add.w	r1, r7, #20
 8008b38:	f104 0214 	add.w	r2, r4, #20
 8008b3c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008b40:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008b44:	9302      	str	r3, [sp, #8]
 8008b46:	1b13      	subs	r3, r2, r4
 8008b48:	3b15      	subs	r3, #21
 8008b4a:	f023 0303 	bic.w	r3, r3, #3
 8008b4e:	3304      	adds	r3, #4
 8008b50:	f104 0715 	add.w	r7, r4, #21
 8008b54:	42ba      	cmp	r2, r7
 8008b56:	bf38      	it	cc
 8008b58:	2304      	movcc	r3, #4
 8008b5a:	9301      	str	r3, [sp, #4]
 8008b5c:	9b02      	ldr	r3, [sp, #8]
 8008b5e:	9103      	str	r1, [sp, #12]
 8008b60:	428b      	cmp	r3, r1
 8008b62:	d80c      	bhi.n	8008b7e <__multiply+0x9e>
 8008b64:	2e00      	cmp	r6, #0
 8008b66:	dd03      	ble.n	8008b70 <__multiply+0x90>
 8008b68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d05b      	beq.n	8008c28 <__multiply+0x148>
 8008b70:	6106      	str	r6, [r0, #16]
 8008b72:	b005      	add	sp, #20
 8008b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b78:	f843 2b04 	str.w	r2, [r3], #4
 8008b7c:	e7d8      	b.n	8008b30 <__multiply+0x50>
 8008b7e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008b82:	f1ba 0f00 	cmp.w	sl, #0
 8008b86:	d024      	beq.n	8008bd2 <__multiply+0xf2>
 8008b88:	f104 0e14 	add.w	lr, r4, #20
 8008b8c:	46a9      	mov	r9, r5
 8008b8e:	f04f 0c00 	mov.w	ip, #0
 8008b92:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b96:	f8d9 3000 	ldr.w	r3, [r9]
 8008b9a:	fa1f fb87 	uxth.w	fp, r7
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ba4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008ba8:	f8d9 7000 	ldr.w	r7, [r9]
 8008bac:	4463      	add	r3, ip
 8008bae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008bb2:	fb0a c70b 	mla	r7, sl, fp, ip
 8008bb6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008bc0:	4572      	cmp	r2, lr
 8008bc2:	f849 3b04 	str.w	r3, [r9], #4
 8008bc6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008bca:	d8e2      	bhi.n	8008b92 <__multiply+0xb2>
 8008bcc:	9b01      	ldr	r3, [sp, #4]
 8008bce:	f845 c003 	str.w	ip, [r5, r3]
 8008bd2:	9b03      	ldr	r3, [sp, #12]
 8008bd4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008bd8:	3104      	adds	r1, #4
 8008bda:	f1b9 0f00 	cmp.w	r9, #0
 8008bde:	d021      	beq.n	8008c24 <__multiply+0x144>
 8008be0:	682b      	ldr	r3, [r5, #0]
 8008be2:	f104 0c14 	add.w	ip, r4, #20
 8008be6:	46ae      	mov	lr, r5
 8008be8:	f04f 0a00 	mov.w	sl, #0
 8008bec:	f8bc b000 	ldrh.w	fp, [ip]
 8008bf0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008bf4:	fb09 770b 	mla	r7, r9, fp, r7
 8008bf8:	4457      	add	r7, sl
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008c00:	f84e 3b04 	str.w	r3, [lr], #4
 8008c04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c0c:	f8be 3000 	ldrh.w	r3, [lr]
 8008c10:	fb09 330a 	mla	r3, r9, sl, r3
 8008c14:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008c18:	4562      	cmp	r2, ip
 8008c1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c1e:	d8e5      	bhi.n	8008bec <__multiply+0x10c>
 8008c20:	9f01      	ldr	r7, [sp, #4]
 8008c22:	51eb      	str	r3, [r5, r7]
 8008c24:	3504      	adds	r5, #4
 8008c26:	e799      	b.n	8008b5c <__multiply+0x7c>
 8008c28:	3e01      	subs	r6, #1
 8008c2a:	e79b      	b.n	8008b64 <__multiply+0x84>
 8008c2c:	0800b2ad 	.word	0x0800b2ad
 8008c30:	0800b2be 	.word	0x0800b2be

08008c34 <__pow5mult>:
 8008c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c38:	4615      	mov	r5, r2
 8008c3a:	f012 0203 	ands.w	r2, r2, #3
 8008c3e:	4607      	mov	r7, r0
 8008c40:	460e      	mov	r6, r1
 8008c42:	d007      	beq.n	8008c54 <__pow5mult+0x20>
 8008c44:	4c25      	ldr	r4, [pc, #148]	@ (8008cdc <__pow5mult+0xa8>)
 8008c46:	3a01      	subs	r2, #1
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c4e:	f7ff fe55 	bl	80088fc <__multadd>
 8008c52:	4606      	mov	r6, r0
 8008c54:	10ad      	asrs	r5, r5, #2
 8008c56:	d03d      	beq.n	8008cd4 <__pow5mult+0xa0>
 8008c58:	69fc      	ldr	r4, [r7, #28]
 8008c5a:	b97c      	cbnz	r4, 8008c7c <__pow5mult+0x48>
 8008c5c:	2010      	movs	r0, #16
 8008c5e:	f7ff fd35 	bl	80086cc <malloc>
 8008c62:	4602      	mov	r2, r0
 8008c64:	61f8      	str	r0, [r7, #28]
 8008c66:	b928      	cbnz	r0, 8008c74 <__pow5mult+0x40>
 8008c68:	4b1d      	ldr	r3, [pc, #116]	@ (8008ce0 <__pow5mult+0xac>)
 8008c6a:	481e      	ldr	r0, [pc, #120]	@ (8008ce4 <__pow5mult+0xb0>)
 8008c6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008c70:	f001 fb62 	bl	800a338 <__assert_func>
 8008c74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c78:	6004      	str	r4, [r0, #0]
 8008c7a:	60c4      	str	r4, [r0, #12]
 8008c7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008c80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c84:	b94c      	cbnz	r4, 8008c9a <__pow5mult+0x66>
 8008c86:	f240 2171 	movw	r1, #625	@ 0x271
 8008c8a:	4638      	mov	r0, r7
 8008c8c:	f7ff ff12 	bl	8008ab4 <__i2b>
 8008c90:	2300      	movs	r3, #0
 8008c92:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c96:	4604      	mov	r4, r0
 8008c98:	6003      	str	r3, [r0, #0]
 8008c9a:	f04f 0900 	mov.w	r9, #0
 8008c9e:	07eb      	lsls	r3, r5, #31
 8008ca0:	d50a      	bpl.n	8008cb8 <__pow5mult+0x84>
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	4622      	mov	r2, r4
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	f7ff ff1a 	bl	8008ae0 <__multiply>
 8008cac:	4631      	mov	r1, r6
 8008cae:	4680      	mov	r8, r0
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	f7ff fe01 	bl	80088b8 <_Bfree>
 8008cb6:	4646      	mov	r6, r8
 8008cb8:	106d      	asrs	r5, r5, #1
 8008cba:	d00b      	beq.n	8008cd4 <__pow5mult+0xa0>
 8008cbc:	6820      	ldr	r0, [r4, #0]
 8008cbe:	b938      	cbnz	r0, 8008cd0 <__pow5mult+0x9c>
 8008cc0:	4622      	mov	r2, r4
 8008cc2:	4621      	mov	r1, r4
 8008cc4:	4638      	mov	r0, r7
 8008cc6:	f7ff ff0b 	bl	8008ae0 <__multiply>
 8008cca:	6020      	str	r0, [r4, #0]
 8008ccc:	f8c0 9000 	str.w	r9, [r0]
 8008cd0:	4604      	mov	r4, r0
 8008cd2:	e7e4      	b.n	8008c9e <__pow5mult+0x6a>
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cda:	bf00      	nop
 8008cdc:	0800b318 	.word	0x0800b318
 8008ce0:	0800b23e 	.word	0x0800b23e
 8008ce4:	0800b2be 	.word	0x0800b2be

08008ce8 <__lshift>:
 8008ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cec:	460c      	mov	r4, r1
 8008cee:	6849      	ldr	r1, [r1, #4]
 8008cf0:	6923      	ldr	r3, [r4, #16]
 8008cf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cf6:	68a3      	ldr	r3, [r4, #8]
 8008cf8:	4607      	mov	r7, r0
 8008cfa:	4691      	mov	r9, r2
 8008cfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d00:	f108 0601 	add.w	r6, r8, #1
 8008d04:	42b3      	cmp	r3, r6
 8008d06:	db0b      	blt.n	8008d20 <__lshift+0x38>
 8008d08:	4638      	mov	r0, r7
 8008d0a:	f7ff fd95 	bl	8008838 <_Balloc>
 8008d0e:	4605      	mov	r5, r0
 8008d10:	b948      	cbnz	r0, 8008d26 <__lshift+0x3e>
 8008d12:	4602      	mov	r2, r0
 8008d14:	4b28      	ldr	r3, [pc, #160]	@ (8008db8 <__lshift+0xd0>)
 8008d16:	4829      	ldr	r0, [pc, #164]	@ (8008dbc <__lshift+0xd4>)
 8008d18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008d1c:	f001 fb0c 	bl	800a338 <__assert_func>
 8008d20:	3101      	adds	r1, #1
 8008d22:	005b      	lsls	r3, r3, #1
 8008d24:	e7ee      	b.n	8008d04 <__lshift+0x1c>
 8008d26:	2300      	movs	r3, #0
 8008d28:	f100 0114 	add.w	r1, r0, #20
 8008d2c:	f100 0210 	add.w	r2, r0, #16
 8008d30:	4618      	mov	r0, r3
 8008d32:	4553      	cmp	r3, sl
 8008d34:	db33      	blt.n	8008d9e <__lshift+0xb6>
 8008d36:	6920      	ldr	r0, [r4, #16]
 8008d38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d3c:	f104 0314 	add.w	r3, r4, #20
 8008d40:	f019 091f 	ands.w	r9, r9, #31
 8008d44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d4c:	d02b      	beq.n	8008da6 <__lshift+0xbe>
 8008d4e:	f1c9 0e20 	rsb	lr, r9, #32
 8008d52:	468a      	mov	sl, r1
 8008d54:	2200      	movs	r2, #0
 8008d56:	6818      	ldr	r0, [r3, #0]
 8008d58:	fa00 f009 	lsl.w	r0, r0, r9
 8008d5c:	4310      	orrs	r0, r2
 8008d5e:	f84a 0b04 	str.w	r0, [sl], #4
 8008d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d66:	459c      	cmp	ip, r3
 8008d68:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d6c:	d8f3      	bhi.n	8008d56 <__lshift+0x6e>
 8008d6e:	ebac 0304 	sub.w	r3, ip, r4
 8008d72:	3b15      	subs	r3, #21
 8008d74:	f023 0303 	bic.w	r3, r3, #3
 8008d78:	3304      	adds	r3, #4
 8008d7a:	f104 0015 	add.w	r0, r4, #21
 8008d7e:	4584      	cmp	ip, r0
 8008d80:	bf38      	it	cc
 8008d82:	2304      	movcc	r3, #4
 8008d84:	50ca      	str	r2, [r1, r3]
 8008d86:	b10a      	cbz	r2, 8008d8c <__lshift+0xa4>
 8008d88:	f108 0602 	add.w	r6, r8, #2
 8008d8c:	3e01      	subs	r6, #1
 8008d8e:	4638      	mov	r0, r7
 8008d90:	612e      	str	r6, [r5, #16]
 8008d92:	4621      	mov	r1, r4
 8008d94:	f7ff fd90 	bl	80088b8 <_Bfree>
 8008d98:	4628      	mov	r0, r5
 8008d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008da2:	3301      	adds	r3, #1
 8008da4:	e7c5      	b.n	8008d32 <__lshift+0x4a>
 8008da6:	3904      	subs	r1, #4
 8008da8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dac:	f841 2f04 	str.w	r2, [r1, #4]!
 8008db0:	459c      	cmp	ip, r3
 8008db2:	d8f9      	bhi.n	8008da8 <__lshift+0xc0>
 8008db4:	e7ea      	b.n	8008d8c <__lshift+0xa4>
 8008db6:	bf00      	nop
 8008db8:	0800b2ad 	.word	0x0800b2ad
 8008dbc:	0800b2be 	.word	0x0800b2be

08008dc0 <__mcmp>:
 8008dc0:	690a      	ldr	r2, [r1, #16]
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	6900      	ldr	r0, [r0, #16]
 8008dc6:	1a80      	subs	r0, r0, r2
 8008dc8:	b530      	push	{r4, r5, lr}
 8008dca:	d10e      	bne.n	8008dea <__mcmp+0x2a>
 8008dcc:	3314      	adds	r3, #20
 8008dce:	3114      	adds	r1, #20
 8008dd0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008dd4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008dd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ddc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008de0:	4295      	cmp	r5, r2
 8008de2:	d003      	beq.n	8008dec <__mcmp+0x2c>
 8008de4:	d205      	bcs.n	8008df2 <__mcmp+0x32>
 8008de6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008dea:	bd30      	pop	{r4, r5, pc}
 8008dec:	42a3      	cmp	r3, r4
 8008dee:	d3f3      	bcc.n	8008dd8 <__mcmp+0x18>
 8008df0:	e7fb      	b.n	8008dea <__mcmp+0x2a>
 8008df2:	2001      	movs	r0, #1
 8008df4:	e7f9      	b.n	8008dea <__mcmp+0x2a>
	...

08008df8 <__mdiff>:
 8008df8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfc:	4689      	mov	r9, r1
 8008dfe:	4606      	mov	r6, r0
 8008e00:	4611      	mov	r1, r2
 8008e02:	4648      	mov	r0, r9
 8008e04:	4614      	mov	r4, r2
 8008e06:	f7ff ffdb 	bl	8008dc0 <__mcmp>
 8008e0a:	1e05      	subs	r5, r0, #0
 8008e0c:	d112      	bne.n	8008e34 <__mdiff+0x3c>
 8008e0e:	4629      	mov	r1, r5
 8008e10:	4630      	mov	r0, r6
 8008e12:	f7ff fd11 	bl	8008838 <_Balloc>
 8008e16:	4602      	mov	r2, r0
 8008e18:	b928      	cbnz	r0, 8008e26 <__mdiff+0x2e>
 8008e1a:	4b3f      	ldr	r3, [pc, #252]	@ (8008f18 <__mdiff+0x120>)
 8008e1c:	f240 2137 	movw	r1, #567	@ 0x237
 8008e20:	483e      	ldr	r0, [pc, #248]	@ (8008f1c <__mdiff+0x124>)
 8008e22:	f001 fa89 	bl	800a338 <__assert_func>
 8008e26:	2301      	movs	r3, #1
 8008e28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e2c:	4610      	mov	r0, r2
 8008e2e:	b003      	add	sp, #12
 8008e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e34:	bfbc      	itt	lt
 8008e36:	464b      	movlt	r3, r9
 8008e38:	46a1      	movlt	r9, r4
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008e40:	bfba      	itte	lt
 8008e42:	461c      	movlt	r4, r3
 8008e44:	2501      	movlt	r5, #1
 8008e46:	2500      	movge	r5, #0
 8008e48:	f7ff fcf6 	bl	8008838 <_Balloc>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	b918      	cbnz	r0, 8008e58 <__mdiff+0x60>
 8008e50:	4b31      	ldr	r3, [pc, #196]	@ (8008f18 <__mdiff+0x120>)
 8008e52:	f240 2145 	movw	r1, #581	@ 0x245
 8008e56:	e7e3      	b.n	8008e20 <__mdiff+0x28>
 8008e58:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008e5c:	6926      	ldr	r6, [r4, #16]
 8008e5e:	60c5      	str	r5, [r0, #12]
 8008e60:	f109 0310 	add.w	r3, r9, #16
 8008e64:	f109 0514 	add.w	r5, r9, #20
 8008e68:	f104 0e14 	add.w	lr, r4, #20
 8008e6c:	f100 0b14 	add.w	fp, r0, #20
 8008e70:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008e74:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008e78:	9301      	str	r3, [sp, #4]
 8008e7a:	46d9      	mov	r9, fp
 8008e7c:	f04f 0c00 	mov.w	ip, #0
 8008e80:	9b01      	ldr	r3, [sp, #4]
 8008e82:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008e86:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008e8a:	9301      	str	r3, [sp, #4]
 8008e8c:	fa1f f38a 	uxth.w	r3, sl
 8008e90:	4619      	mov	r1, r3
 8008e92:	b283      	uxth	r3, r0
 8008e94:	1acb      	subs	r3, r1, r3
 8008e96:	0c00      	lsrs	r0, r0, #16
 8008e98:	4463      	add	r3, ip
 8008e9a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008e9e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008ea8:	4576      	cmp	r6, lr
 8008eaa:	f849 3b04 	str.w	r3, [r9], #4
 8008eae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008eb2:	d8e5      	bhi.n	8008e80 <__mdiff+0x88>
 8008eb4:	1b33      	subs	r3, r6, r4
 8008eb6:	3b15      	subs	r3, #21
 8008eb8:	f023 0303 	bic.w	r3, r3, #3
 8008ebc:	3415      	adds	r4, #21
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	42a6      	cmp	r6, r4
 8008ec2:	bf38      	it	cc
 8008ec4:	2304      	movcc	r3, #4
 8008ec6:	441d      	add	r5, r3
 8008ec8:	445b      	add	r3, fp
 8008eca:	461e      	mov	r6, r3
 8008ecc:	462c      	mov	r4, r5
 8008ece:	4544      	cmp	r4, r8
 8008ed0:	d30e      	bcc.n	8008ef0 <__mdiff+0xf8>
 8008ed2:	f108 0103 	add.w	r1, r8, #3
 8008ed6:	1b49      	subs	r1, r1, r5
 8008ed8:	f021 0103 	bic.w	r1, r1, #3
 8008edc:	3d03      	subs	r5, #3
 8008ede:	45a8      	cmp	r8, r5
 8008ee0:	bf38      	it	cc
 8008ee2:	2100      	movcc	r1, #0
 8008ee4:	440b      	add	r3, r1
 8008ee6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008eea:	b191      	cbz	r1, 8008f12 <__mdiff+0x11a>
 8008eec:	6117      	str	r7, [r2, #16]
 8008eee:	e79d      	b.n	8008e2c <__mdiff+0x34>
 8008ef0:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ef4:	46e6      	mov	lr, ip
 8008ef6:	0c08      	lsrs	r0, r1, #16
 8008ef8:	fa1c fc81 	uxtah	ip, ip, r1
 8008efc:	4471      	add	r1, lr
 8008efe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008f02:	b289      	uxth	r1, r1
 8008f04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008f08:	f846 1b04 	str.w	r1, [r6], #4
 8008f0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f10:	e7dd      	b.n	8008ece <__mdiff+0xd6>
 8008f12:	3f01      	subs	r7, #1
 8008f14:	e7e7      	b.n	8008ee6 <__mdiff+0xee>
 8008f16:	bf00      	nop
 8008f18:	0800b2ad 	.word	0x0800b2ad
 8008f1c:	0800b2be 	.word	0x0800b2be

08008f20 <__ulp>:
 8008f20:	b082      	sub	sp, #8
 8008f22:	ed8d 0b00 	vstr	d0, [sp]
 8008f26:	9a01      	ldr	r2, [sp, #4]
 8008f28:	4b0f      	ldr	r3, [pc, #60]	@ (8008f68 <__ulp+0x48>)
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	dc08      	bgt.n	8008f46 <__ulp+0x26>
 8008f34:	425b      	negs	r3, r3
 8008f36:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008f3a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008f3e:	da04      	bge.n	8008f4a <__ulp+0x2a>
 8008f40:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008f44:	4113      	asrs	r3, r2
 8008f46:	2200      	movs	r2, #0
 8008f48:	e008      	b.n	8008f5c <__ulp+0x3c>
 8008f4a:	f1a2 0314 	sub.w	r3, r2, #20
 8008f4e:	2b1e      	cmp	r3, #30
 8008f50:	bfda      	itte	le
 8008f52:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008f56:	40da      	lsrle	r2, r3
 8008f58:	2201      	movgt	r2, #1
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	4610      	mov	r0, r2
 8008f60:	ec41 0b10 	vmov	d0, r0, r1
 8008f64:	b002      	add	sp, #8
 8008f66:	4770      	bx	lr
 8008f68:	7ff00000 	.word	0x7ff00000

08008f6c <__b2d>:
 8008f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f70:	6906      	ldr	r6, [r0, #16]
 8008f72:	f100 0814 	add.w	r8, r0, #20
 8008f76:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008f7a:	1f37      	subs	r7, r6, #4
 8008f7c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008f80:	4610      	mov	r0, r2
 8008f82:	f7ff fd4b 	bl	8008a1c <__hi0bits>
 8008f86:	f1c0 0320 	rsb	r3, r0, #32
 8008f8a:	280a      	cmp	r0, #10
 8008f8c:	600b      	str	r3, [r1, #0]
 8008f8e:	491b      	ldr	r1, [pc, #108]	@ (8008ffc <__b2d+0x90>)
 8008f90:	dc15      	bgt.n	8008fbe <__b2d+0x52>
 8008f92:	f1c0 0c0b 	rsb	ip, r0, #11
 8008f96:	fa22 f30c 	lsr.w	r3, r2, ip
 8008f9a:	45b8      	cmp	r8, r7
 8008f9c:	ea43 0501 	orr.w	r5, r3, r1
 8008fa0:	bf34      	ite	cc
 8008fa2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008fa6:	2300      	movcs	r3, #0
 8008fa8:	3015      	adds	r0, #21
 8008faa:	fa02 f000 	lsl.w	r0, r2, r0
 8008fae:	fa23 f30c 	lsr.w	r3, r3, ip
 8008fb2:	4303      	orrs	r3, r0
 8008fb4:	461c      	mov	r4, r3
 8008fb6:	ec45 4b10 	vmov	d0, r4, r5
 8008fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fbe:	45b8      	cmp	r8, r7
 8008fc0:	bf3a      	itte	cc
 8008fc2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008fc6:	f1a6 0708 	subcc.w	r7, r6, #8
 8008fca:	2300      	movcs	r3, #0
 8008fcc:	380b      	subs	r0, #11
 8008fce:	d012      	beq.n	8008ff6 <__b2d+0x8a>
 8008fd0:	f1c0 0120 	rsb	r1, r0, #32
 8008fd4:	fa23 f401 	lsr.w	r4, r3, r1
 8008fd8:	4082      	lsls	r2, r0
 8008fda:	4322      	orrs	r2, r4
 8008fdc:	4547      	cmp	r7, r8
 8008fde:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008fe2:	bf8c      	ite	hi
 8008fe4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008fe8:	2200      	movls	r2, #0
 8008fea:	4083      	lsls	r3, r0
 8008fec:	40ca      	lsrs	r2, r1
 8008fee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	e7de      	b.n	8008fb4 <__b2d+0x48>
 8008ff6:	ea42 0501 	orr.w	r5, r2, r1
 8008ffa:	e7db      	b.n	8008fb4 <__b2d+0x48>
 8008ffc:	3ff00000 	.word	0x3ff00000

08009000 <__d2b>:
 8009000:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009004:	460f      	mov	r7, r1
 8009006:	2101      	movs	r1, #1
 8009008:	ec59 8b10 	vmov	r8, r9, d0
 800900c:	4616      	mov	r6, r2
 800900e:	f7ff fc13 	bl	8008838 <_Balloc>
 8009012:	4604      	mov	r4, r0
 8009014:	b930      	cbnz	r0, 8009024 <__d2b+0x24>
 8009016:	4602      	mov	r2, r0
 8009018:	4b23      	ldr	r3, [pc, #140]	@ (80090a8 <__d2b+0xa8>)
 800901a:	4824      	ldr	r0, [pc, #144]	@ (80090ac <__d2b+0xac>)
 800901c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009020:	f001 f98a 	bl	800a338 <__assert_func>
 8009024:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009028:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800902c:	b10d      	cbz	r5, 8009032 <__d2b+0x32>
 800902e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009032:	9301      	str	r3, [sp, #4]
 8009034:	f1b8 0300 	subs.w	r3, r8, #0
 8009038:	d023      	beq.n	8009082 <__d2b+0x82>
 800903a:	4668      	mov	r0, sp
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	f7ff fd0c 	bl	8008a5a <__lo0bits>
 8009042:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009046:	b1d0      	cbz	r0, 800907e <__d2b+0x7e>
 8009048:	f1c0 0320 	rsb	r3, r0, #32
 800904c:	fa02 f303 	lsl.w	r3, r2, r3
 8009050:	430b      	orrs	r3, r1
 8009052:	40c2      	lsrs	r2, r0
 8009054:	6163      	str	r3, [r4, #20]
 8009056:	9201      	str	r2, [sp, #4]
 8009058:	9b01      	ldr	r3, [sp, #4]
 800905a:	61a3      	str	r3, [r4, #24]
 800905c:	2b00      	cmp	r3, #0
 800905e:	bf0c      	ite	eq
 8009060:	2201      	moveq	r2, #1
 8009062:	2202      	movne	r2, #2
 8009064:	6122      	str	r2, [r4, #16]
 8009066:	b1a5      	cbz	r5, 8009092 <__d2b+0x92>
 8009068:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800906c:	4405      	add	r5, r0
 800906e:	603d      	str	r5, [r7, #0]
 8009070:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009074:	6030      	str	r0, [r6, #0]
 8009076:	4620      	mov	r0, r4
 8009078:	b003      	add	sp, #12
 800907a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800907e:	6161      	str	r1, [r4, #20]
 8009080:	e7ea      	b.n	8009058 <__d2b+0x58>
 8009082:	a801      	add	r0, sp, #4
 8009084:	f7ff fce9 	bl	8008a5a <__lo0bits>
 8009088:	9b01      	ldr	r3, [sp, #4]
 800908a:	6163      	str	r3, [r4, #20]
 800908c:	3020      	adds	r0, #32
 800908e:	2201      	movs	r2, #1
 8009090:	e7e8      	b.n	8009064 <__d2b+0x64>
 8009092:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009096:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800909a:	6038      	str	r0, [r7, #0]
 800909c:	6918      	ldr	r0, [r3, #16]
 800909e:	f7ff fcbd 	bl	8008a1c <__hi0bits>
 80090a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80090a6:	e7e5      	b.n	8009074 <__d2b+0x74>
 80090a8:	0800b2ad 	.word	0x0800b2ad
 80090ac:	0800b2be 	.word	0x0800b2be

080090b0 <__ratio>:
 80090b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b4:	b085      	sub	sp, #20
 80090b6:	e9cd 1000 	strd	r1, r0, [sp]
 80090ba:	a902      	add	r1, sp, #8
 80090bc:	f7ff ff56 	bl	8008f6c <__b2d>
 80090c0:	9800      	ldr	r0, [sp, #0]
 80090c2:	a903      	add	r1, sp, #12
 80090c4:	ec55 4b10 	vmov	r4, r5, d0
 80090c8:	f7ff ff50 	bl	8008f6c <__b2d>
 80090cc:	9b01      	ldr	r3, [sp, #4]
 80090ce:	6919      	ldr	r1, [r3, #16]
 80090d0:	9b00      	ldr	r3, [sp, #0]
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	1ac9      	subs	r1, r1, r3
 80090d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80090da:	1a9b      	subs	r3, r3, r2
 80090dc:	ec5b ab10 	vmov	sl, fp, d0
 80090e0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	bfce      	itee	gt
 80090e8:	462a      	movgt	r2, r5
 80090ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80090ee:	465a      	movle	r2, fp
 80090f0:	462f      	mov	r7, r5
 80090f2:	46d9      	mov	r9, fp
 80090f4:	bfcc      	ite	gt
 80090f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80090fa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80090fe:	464b      	mov	r3, r9
 8009100:	4652      	mov	r2, sl
 8009102:	4620      	mov	r0, r4
 8009104:	4639      	mov	r1, r7
 8009106:	f7f7 fba9 	bl	800085c <__aeabi_ddiv>
 800910a:	ec41 0b10 	vmov	d0, r0, r1
 800910e:	b005      	add	sp, #20
 8009110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009114 <__copybits>:
 8009114:	3901      	subs	r1, #1
 8009116:	b570      	push	{r4, r5, r6, lr}
 8009118:	1149      	asrs	r1, r1, #5
 800911a:	6914      	ldr	r4, [r2, #16]
 800911c:	3101      	adds	r1, #1
 800911e:	f102 0314 	add.w	r3, r2, #20
 8009122:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009126:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800912a:	1f05      	subs	r5, r0, #4
 800912c:	42a3      	cmp	r3, r4
 800912e:	d30c      	bcc.n	800914a <__copybits+0x36>
 8009130:	1aa3      	subs	r3, r4, r2
 8009132:	3b11      	subs	r3, #17
 8009134:	f023 0303 	bic.w	r3, r3, #3
 8009138:	3211      	adds	r2, #17
 800913a:	42a2      	cmp	r2, r4
 800913c:	bf88      	it	hi
 800913e:	2300      	movhi	r3, #0
 8009140:	4418      	add	r0, r3
 8009142:	2300      	movs	r3, #0
 8009144:	4288      	cmp	r0, r1
 8009146:	d305      	bcc.n	8009154 <__copybits+0x40>
 8009148:	bd70      	pop	{r4, r5, r6, pc}
 800914a:	f853 6b04 	ldr.w	r6, [r3], #4
 800914e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009152:	e7eb      	b.n	800912c <__copybits+0x18>
 8009154:	f840 3b04 	str.w	r3, [r0], #4
 8009158:	e7f4      	b.n	8009144 <__copybits+0x30>

0800915a <__any_on>:
 800915a:	f100 0214 	add.w	r2, r0, #20
 800915e:	6900      	ldr	r0, [r0, #16]
 8009160:	114b      	asrs	r3, r1, #5
 8009162:	4298      	cmp	r0, r3
 8009164:	b510      	push	{r4, lr}
 8009166:	db11      	blt.n	800918c <__any_on+0x32>
 8009168:	dd0a      	ble.n	8009180 <__any_on+0x26>
 800916a:	f011 011f 	ands.w	r1, r1, #31
 800916e:	d007      	beq.n	8009180 <__any_on+0x26>
 8009170:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009174:	fa24 f001 	lsr.w	r0, r4, r1
 8009178:	fa00 f101 	lsl.w	r1, r0, r1
 800917c:	428c      	cmp	r4, r1
 800917e:	d10b      	bne.n	8009198 <__any_on+0x3e>
 8009180:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009184:	4293      	cmp	r3, r2
 8009186:	d803      	bhi.n	8009190 <__any_on+0x36>
 8009188:	2000      	movs	r0, #0
 800918a:	bd10      	pop	{r4, pc}
 800918c:	4603      	mov	r3, r0
 800918e:	e7f7      	b.n	8009180 <__any_on+0x26>
 8009190:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009194:	2900      	cmp	r1, #0
 8009196:	d0f5      	beq.n	8009184 <__any_on+0x2a>
 8009198:	2001      	movs	r0, #1
 800919a:	e7f6      	b.n	800918a <__any_on+0x30>

0800919c <sulp>:
 800919c:	b570      	push	{r4, r5, r6, lr}
 800919e:	4604      	mov	r4, r0
 80091a0:	460d      	mov	r5, r1
 80091a2:	ec45 4b10 	vmov	d0, r4, r5
 80091a6:	4616      	mov	r6, r2
 80091a8:	f7ff feba 	bl	8008f20 <__ulp>
 80091ac:	ec51 0b10 	vmov	r0, r1, d0
 80091b0:	b17e      	cbz	r6, 80091d2 <sulp+0x36>
 80091b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80091b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	dd09      	ble.n	80091d2 <sulp+0x36>
 80091be:	051b      	lsls	r3, r3, #20
 80091c0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80091c4:	2400      	movs	r4, #0
 80091c6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80091ca:	4622      	mov	r2, r4
 80091cc:	462b      	mov	r3, r5
 80091ce:	f7f7 fa1b 	bl	8000608 <__aeabi_dmul>
 80091d2:	ec41 0b10 	vmov	d0, r0, r1
 80091d6:	bd70      	pop	{r4, r5, r6, pc}

080091d8 <_strtod_l>:
 80091d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091dc:	b09f      	sub	sp, #124	@ 0x7c
 80091de:	460c      	mov	r4, r1
 80091e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80091e2:	2200      	movs	r2, #0
 80091e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80091e6:	9005      	str	r0, [sp, #20]
 80091e8:	f04f 0a00 	mov.w	sl, #0
 80091ec:	f04f 0b00 	mov.w	fp, #0
 80091f0:	460a      	mov	r2, r1
 80091f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80091f4:	7811      	ldrb	r1, [r2, #0]
 80091f6:	292b      	cmp	r1, #43	@ 0x2b
 80091f8:	d04a      	beq.n	8009290 <_strtod_l+0xb8>
 80091fa:	d838      	bhi.n	800926e <_strtod_l+0x96>
 80091fc:	290d      	cmp	r1, #13
 80091fe:	d832      	bhi.n	8009266 <_strtod_l+0x8e>
 8009200:	2908      	cmp	r1, #8
 8009202:	d832      	bhi.n	800926a <_strtod_l+0x92>
 8009204:	2900      	cmp	r1, #0
 8009206:	d03b      	beq.n	8009280 <_strtod_l+0xa8>
 8009208:	2200      	movs	r2, #0
 800920a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800920c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800920e:	782a      	ldrb	r2, [r5, #0]
 8009210:	2a30      	cmp	r2, #48	@ 0x30
 8009212:	f040 80b3 	bne.w	800937c <_strtod_l+0x1a4>
 8009216:	786a      	ldrb	r2, [r5, #1]
 8009218:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800921c:	2a58      	cmp	r2, #88	@ 0x58
 800921e:	d16e      	bne.n	80092fe <_strtod_l+0x126>
 8009220:	9302      	str	r3, [sp, #8]
 8009222:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009224:	9301      	str	r3, [sp, #4]
 8009226:	ab1a      	add	r3, sp, #104	@ 0x68
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	4a8e      	ldr	r2, [pc, #568]	@ (8009464 <_strtod_l+0x28c>)
 800922c:	9805      	ldr	r0, [sp, #20]
 800922e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009230:	a919      	add	r1, sp, #100	@ 0x64
 8009232:	f001 f91b 	bl	800a46c <__gethex>
 8009236:	f010 060f 	ands.w	r6, r0, #15
 800923a:	4604      	mov	r4, r0
 800923c:	d005      	beq.n	800924a <_strtod_l+0x72>
 800923e:	2e06      	cmp	r6, #6
 8009240:	d128      	bne.n	8009294 <_strtod_l+0xbc>
 8009242:	3501      	adds	r5, #1
 8009244:	2300      	movs	r3, #0
 8009246:	9519      	str	r5, [sp, #100]	@ 0x64
 8009248:	930b      	str	r3, [sp, #44]	@ 0x2c
 800924a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800924c:	2b00      	cmp	r3, #0
 800924e:	f040 858e 	bne.w	8009d6e <_strtod_l+0xb96>
 8009252:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009254:	b1cb      	cbz	r3, 800928a <_strtod_l+0xb2>
 8009256:	4652      	mov	r2, sl
 8009258:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800925c:	ec43 2b10 	vmov	d0, r2, r3
 8009260:	b01f      	add	sp, #124	@ 0x7c
 8009262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009266:	2920      	cmp	r1, #32
 8009268:	d1ce      	bne.n	8009208 <_strtod_l+0x30>
 800926a:	3201      	adds	r2, #1
 800926c:	e7c1      	b.n	80091f2 <_strtod_l+0x1a>
 800926e:	292d      	cmp	r1, #45	@ 0x2d
 8009270:	d1ca      	bne.n	8009208 <_strtod_l+0x30>
 8009272:	2101      	movs	r1, #1
 8009274:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009276:	1c51      	adds	r1, r2, #1
 8009278:	9119      	str	r1, [sp, #100]	@ 0x64
 800927a:	7852      	ldrb	r2, [r2, #1]
 800927c:	2a00      	cmp	r2, #0
 800927e:	d1c5      	bne.n	800920c <_strtod_l+0x34>
 8009280:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009282:	9419      	str	r4, [sp, #100]	@ 0x64
 8009284:	2b00      	cmp	r3, #0
 8009286:	f040 8570 	bne.w	8009d6a <_strtod_l+0xb92>
 800928a:	4652      	mov	r2, sl
 800928c:	465b      	mov	r3, fp
 800928e:	e7e5      	b.n	800925c <_strtod_l+0x84>
 8009290:	2100      	movs	r1, #0
 8009292:	e7ef      	b.n	8009274 <_strtod_l+0x9c>
 8009294:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009296:	b13a      	cbz	r2, 80092a8 <_strtod_l+0xd0>
 8009298:	2135      	movs	r1, #53	@ 0x35
 800929a:	a81c      	add	r0, sp, #112	@ 0x70
 800929c:	f7ff ff3a 	bl	8009114 <__copybits>
 80092a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092a2:	9805      	ldr	r0, [sp, #20]
 80092a4:	f7ff fb08 	bl	80088b8 <_Bfree>
 80092a8:	3e01      	subs	r6, #1
 80092aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80092ac:	2e04      	cmp	r6, #4
 80092ae:	d806      	bhi.n	80092be <_strtod_l+0xe6>
 80092b0:	e8df f006 	tbb	[pc, r6]
 80092b4:	201d0314 	.word	0x201d0314
 80092b8:	14          	.byte	0x14
 80092b9:	00          	.byte	0x00
 80092ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80092be:	05e1      	lsls	r1, r4, #23
 80092c0:	bf48      	it	mi
 80092c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80092c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80092ca:	0d1b      	lsrs	r3, r3, #20
 80092cc:	051b      	lsls	r3, r3, #20
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1bb      	bne.n	800924a <_strtod_l+0x72>
 80092d2:	f7fe fb21 	bl	8007918 <__errno>
 80092d6:	2322      	movs	r3, #34	@ 0x22
 80092d8:	6003      	str	r3, [r0, #0]
 80092da:	e7b6      	b.n	800924a <_strtod_l+0x72>
 80092dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80092e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80092e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80092e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80092ec:	e7e7      	b.n	80092be <_strtod_l+0xe6>
 80092ee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800946c <_strtod_l+0x294>
 80092f2:	e7e4      	b.n	80092be <_strtod_l+0xe6>
 80092f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80092f8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80092fc:	e7df      	b.n	80092be <_strtod_l+0xe6>
 80092fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009300:	1c5a      	adds	r2, r3, #1
 8009302:	9219      	str	r2, [sp, #100]	@ 0x64
 8009304:	785b      	ldrb	r3, [r3, #1]
 8009306:	2b30      	cmp	r3, #48	@ 0x30
 8009308:	d0f9      	beq.n	80092fe <_strtod_l+0x126>
 800930a:	2b00      	cmp	r3, #0
 800930c:	d09d      	beq.n	800924a <_strtod_l+0x72>
 800930e:	2301      	movs	r3, #1
 8009310:	9309      	str	r3, [sp, #36]	@ 0x24
 8009312:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009314:	930c      	str	r3, [sp, #48]	@ 0x30
 8009316:	2300      	movs	r3, #0
 8009318:	9308      	str	r3, [sp, #32]
 800931a:	930a      	str	r3, [sp, #40]	@ 0x28
 800931c:	461f      	mov	r7, r3
 800931e:	220a      	movs	r2, #10
 8009320:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009322:	7805      	ldrb	r5, [r0, #0]
 8009324:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009328:	b2d9      	uxtb	r1, r3
 800932a:	2909      	cmp	r1, #9
 800932c:	d928      	bls.n	8009380 <_strtod_l+0x1a8>
 800932e:	494e      	ldr	r1, [pc, #312]	@ (8009468 <_strtod_l+0x290>)
 8009330:	2201      	movs	r2, #1
 8009332:	f000 ffd5 	bl	800a2e0 <strncmp>
 8009336:	2800      	cmp	r0, #0
 8009338:	d032      	beq.n	80093a0 <_strtod_l+0x1c8>
 800933a:	2000      	movs	r0, #0
 800933c:	462a      	mov	r2, r5
 800933e:	4681      	mov	r9, r0
 8009340:	463d      	mov	r5, r7
 8009342:	4603      	mov	r3, r0
 8009344:	2a65      	cmp	r2, #101	@ 0x65
 8009346:	d001      	beq.n	800934c <_strtod_l+0x174>
 8009348:	2a45      	cmp	r2, #69	@ 0x45
 800934a:	d114      	bne.n	8009376 <_strtod_l+0x19e>
 800934c:	b91d      	cbnz	r5, 8009356 <_strtod_l+0x17e>
 800934e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009350:	4302      	orrs	r2, r0
 8009352:	d095      	beq.n	8009280 <_strtod_l+0xa8>
 8009354:	2500      	movs	r5, #0
 8009356:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009358:	1c62      	adds	r2, r4, #1
 800935a:	9219      	str	r2, [sp, #100]	@ 0x64
 800935c:	7862      	ldrb	r2, [r4, #1]
 800935e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009360:	d077      	beq.n	8009452 <_strtod_l+0x27a>
 8009362:	2a2d      	cmp	r2, #45	@ 0x2d
 8009364:	d07b      	beq.n	800945e <_strtod_l+0x286>
 8009366:	f04f 0c00 	mov.w	ip, #0
 800936a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800936e:	2909      	cmp	r1, #9
 8009370:	f240 8082 	bls.w	8009478 <_strtod_l+0x2a0>
 8009374:	9419      	str	r4, [sp, #100]	@ 0x64
 8009376:	f04f 0800 	mov.w	r8, #0
 800937a:	e0a2      	b.n	80094c2 <_strtod_l+0x2ea>
 800937c:	2300      	movs	r3, #0
 800937e:	e7c7      	b.n	8009310 <_strtod_l+0x138>
 8009380:	2f08      	cmp	r7, #8
 8009382:	bfd5      	itete	le
 8009384:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009386:	9908      	ldrgt	r1, [sp, #32]
 8009388:	fb02 3301 	mlale	r3, r2, r1, r3
 800938c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009390:	f100 0001 	add.w	r0, r0, #1
 8009394:	bfd4      	ite	le
 8009396:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009398:	9308      	strgt	r3, [sp, #32]
 800939a:	3701      	adds	r7, #1
 800939c:	9019      	str	r0, [sp, #100]	@ 0x64
 800939e:	e7bf      	b.n	8009320 <_strtod_l+0x148>
 80093a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093a2:	1c5a      	adds	r2, r3, #1
 80093a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80093a6:	785a      	ldrb	r2, [r3, #1]
 80093a8:	b37f      	cbz	r7, 800940a <_strtod_l+0x232>
 80093aa:	4681      	mov	r9, r0
 80093ac:	463d      	mov	r5, r7
 80093ae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80093b2:	2b09      	cmp	r3, #9
 80093b4:	d912      	bls.n	80093dc <_strtod_l+0x204>
 80093b6:	2301      	movs	r3, #1
 80093b8:	e7c4      	b.n	8009344 <_strtod_l+0x16c>
 80093ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093bc:	1c5a      	adds	r2, r3, #1
 80093be:	9219      	str	r2, [sp, #100]	@ 0x64
 80093c0:	785a      	ldrb	r2, [r3, #1]
 80093c2:	3001      	adds	r0, #1
 80093c4:	2a30      	cmp	r2, #48	@ 0x30
 80093c6:	d0f8      	beq.n	80093ba <_strtod_l+0x1e2>
 80093c8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80093cc:	2b08      	cmp	r3, #8
 80093ce:	f200 84d3 	bhi.w	8009d78 <_strtod_l+0xba0>
 80093d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80093d6:	4681      	mov	r9, r0
 80093d8:	2000      	movs	r0, #0
 80093da:	4605      	mov	r5, r0
 80093dc:	3a30      	subs	r2, #48	@ 0x30
 80093de:	f100 0301 	add.w	r3, r0, #1
 80093e2:	d02a      	beq.n	800943a <_strtod_l+0x262>
 80093e4:	4499      	add	r9, r3
 80093e6:	eb00 0c05 	add.w	ip, r0, r5
 80093ea:	462b      	mov	r3, r5
 80093ec:	210a      	movs	r1, #10
 80093ee:	4563      	cmp	r3, ip
 80093f0:	d10d      	bne.n	800940e <_strtod_l+0x236>
 80093f2:	1c69      	adds	r1, r5, #1
 80093f4:	4401      	add	r1, r0
 80093f6:	4428      	add	r0, r5
 80093f8:	2808      	cmp	r0, #8
 80093fa:	dc16      	bgt.n	800942a <_strtod_l+0x252>
 80093fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80093fe:	230a      	movs	r3, #10
 8009400:	fb03 2300 	mla	r3, r3, r0, r2
 8009404:	930a      	str	r3, [sp, #40]	@ 0x28
 8009406:	2300      	movs	r3, #0
 8009408:	e018      	b.n	800943c <_strtod_l+0x264>
 800940a:	4638      	mov	r0, r7
 800940c:	e7da      	b.n	80093c4 <_strtod_l+0x1ec>
 800940e:	2b08      	cmp	r3, #8
 8009410:	f103 0301 	add.w	r3, r3, #1
 8009414:	dc03      	bgt.n	800941e <_strtod_l+0x246>
 8009416:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009418:	434e      	muls	r6, r1
 800941a:	960a      	str	r6, [sp, #40]	@ 0x28
 800941c:	e7e7      	b.n	80093ee <_strtod_l+0x216>
 800941e:	2b10      	cmp	r3, #16
 8009420:	bfde      	ittt	le
 8009422:	9e08      	ldrle	r6, [sp, #32]
 8009424:	434e      	mulle	r6, r1
 8009426:	9608      	strle	r6, [sp, #32]
 8009428:	e7e1      	b.n	80093ee <_strtod_l+0x216>
 800942a:	280f      	cmp	r0, #15
 800942c:	dceb      	bgt.n	8009406 <_strtod_l+0x22e>
 800942e:	9808      	ldr	r0, [sp, #32]
 8009430:	230a      	movs	r3, #10
 8009432:	fb03 2300 	mla	r3, r3, r0, r2
 8009436:	9308      	str	r3, [sp, #32]
 8009438:	e7e5      	b.n	8009406 <_strtod_l+0x22e>
 800943a:	4629      	mov	r1, r5
 800943c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800943e:	1c50      	adds	r0, r2, #1
 8009440:	9019      	str	r0, [sp, #100]	@ 0x64
 8009442:	7852      	ldrb	r2, [r2, #1]
 8009444:	4618      	mov	r0, r3
 8009446:	460d      	mov	r5, r1
 8009448:	e7b1      	b.n	80093ae <_strtod_l+0x1d6>
 800944a:	f04f 0900 	mov.w	r9, #0
 800944e:	2301      	movs	r3, #1
 8009450:	e77d      	b.n	800934e <_strtod_l+0x176>
 8009452:	f04f 0c00 	mov.w	ip, #0
 8009456:	1ca2      	adds	r2, r4, #2
 8009458:	9219      	str	r2, [sp, #100]	@ 0x64
 800945a:	78a2      	ldrb	r2, [r4, #2]
 800945c:	e785      	b.n	800936a <_strtod_l+0x192>
 800945e:	f04f 0c01 	mov.w	ip, #1
 8009462:	e7f8      	b.n	8009456 <_strtod_l+0x27e>
 8009464:	0800b430 	.word	0x0800b430
 8009468:	0800b418 	.word	0x0800b418
 800946c:	7ff00000 	.word	0x7ff00000
 8009470:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009472:	1c51      	adds	r1, r2, #1
 8009474:	9119      	str	r1, [sp, #100]	@ 0x64
 8009476:	7852      	ldrb	r2, [r2, #1]
 8009478:	2a30      	cmp	r2, #48	@ 0x30
 800947a:	d0f9      	beq.n	8009470 <_strtod_l+0x298>
 800947c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009480:	2908      	cmp	r1, #8
 8009482:	f63f af78 	bhi.w	8009376 <_strtod_l+0x19e>
 8009486:	3a30      	subs	r2, #48	@ 0x30
 8009488:	920e      	str	r2, [sp, #56]	@ 0x38
 800948a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800948c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800948e:	f04f 080a 	mov.w	r8, #10
 8009492:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009494:	1c56      	adds	r6, r2, #1
 8009496:	9619      	str	r6, [sp, #100]	@ 0x64
 8009498:	7852      	ldrb	r2, [r2, #1]
 800949a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800949e:	f1be 0f09 	cmp.w	lr, #9
 80094a2:	d939      	bls.n	8009518 <_strtod_l+0x340>
 80094a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80094a6:	1a76      	subs	r6, r6, r1
 80094a8:	2e08      	cmp	r6, #8
 80094aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80094ae:	dc03      	bgt.n	80094b8 <_strtod_l+0x2e0>
 80094b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80094b2:	4588      	cmp	r8, r1
 80094b4:	bfa8      	it	ge
 80094b6:	4688      	movge	r8, r1
 80094b8:	f1bc 0f00 	cmp.w	ip, #0
 80094bc:	d001      	beq.n	80094c2 <_strtod_l+0x2ea>
 80094be:	f1c8 0800 	rsb	r8, r8, #0
 80094c2:	2d00      	cmp	r5, #0
 80094c4:	d14e      	bne.n	8009564 <_strtod_l+0x38c>
 80094c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80094c8:	4308      	orrs	r0, r1
 80094ca:	f47f aebe 	bne.w	800924a <_strtod_l+0x72>
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	f47f aed6 	bne.w	8009280 <_strtod_l+0xa8>
 80094d4:	2a69      	cmp	r2, #105	@ 0x69
 80094d6:	d028      	beq.n	800952a <_strtod_l+0x352>
 80094d8:	dc25      	bgt.n	8009526 <_strtod_l+0x34e>
 80094da:	2a49      	cmp	r2, #73	@ 0x49
 80094dc:	d025      	beq.n	800952a <_strtod_l+0x352>
 80094de:	2a4e      	cmp	r2, #78	@ 0x4e
 80094e0:	f47f aece 	bne.w	8009280 <_strtod_l+0xa8>
 80094e4:	499b      	ldr	r1, [pc, #620]	@ (8009754 <_strtod_l+0x57c>)
 80094e6:	a819      	add	r0, sp, #100	@ 0x64
 80094e8:	f001 f9e2 	bl	800a8b0 <__match>
 80094ec:	2800      	cmp	r0, #0
 80094ee:	f43f aec7 	beq.w	8009280 <_strtod_l+0xa8>
 80094f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	2b28      	cmp	r3, #40	@ 0x28
 80094f8:	d12e      	bne.n	8009558 <_strtod_l+0x380>
 80094fa:	4997      	ldr	r1, [pc, #604]	@ (8009758 <_strtod_l+0x580>)
 80094fc:	aa1c      	add	r2, sp, #112	@ 0x70
 80094fe:	a819      	add	r0, sp, #100	@ 0x64
 8009500:	f001 f9ea 	bl	800a8d8 <__hexnan>
 8009504:	2805      	cmp	r0, #5
 8009506:	d127      	bne.n	8009558 <_strtod_l+0x380>
 8009508:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800950a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800950e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009512:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009516:	e698      	b.n	800924a <_strtod_l+0x72>
 8009518:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800951a:	fb08 2101 	mla	r1, r8, r1, r2
 800951e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009522:	920e      	str	r2, [sp, #56]	@ 0x38
 8009524:	e7b5      	b.n	8009492 <_strtod_l+0x2ba>
 8009526:	2a6e      	cmp	r2, #110	@ 0x6e
 8009528:	e7da      	b.n	80094e0 <_strtod_l+0x308>
 800952a:	498c      	ldr	r1, [pc, #560]	@ (800975c <_strtod_l+0x584>)
 800952c:	a819      	add	r0, sp, #100	@ 0x64
 800952e:	f001 f9bf 	bl	800a8b0 <__match>
 8009532:	2800      	cmp	r0, #0
 8009534:	f43f aea4 	beq.w	8009280 <_strtod_l+0xa8>
 8009538:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800953a:	4989      	ldr	r1, [pc, #548]	@ (8009760 <_strtod_l+0x588>)
 800953c:	3b01      	subs	r3, #1
 800953e:	a819      	add	r0, sp, #100	@ 0x64
 8009540:	9319      	str	r3, [sp, #100]	@ 0x64
 8009542:	f001 f9b5 	bl	800a8b0 <__match>
 8009546:	b910      	cbnz	r0, 800954e <_strtod_l+0x376>
 8009548:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800954a:	3301      	adds	r3, #1
 800954c:	9319      	str	r3, [sp, #100]	@ 0x64
 800954e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009770 <_strtod_l+0x598>
 8009552:	f04f 0a00 	mov.w	sl, #0
 8009556:	e678      	b.n	800924a <_strtod_l+0x72>
 8009558:	4882      	ldr	r0, [pc, #520]	@ (8009764 <_strtod_l+0x58c>)
 800955a:	f000 fee5 	bl	800a328 <nan>
 800955e:	ec5b ab10 	vmov	sl, fp, d0
 8009562:	e672      	b.n	800924a <_strtod_l+0x72>
 8009564:	eba8 0309 	sub.w	r3, r8, r9
 8009568:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800956a:	9309      	str	r3, [sp, #36]	@ 0x24
 800956c:	2f00      	cmp	r7, #0
 800956e:	bf08      	it	eq
 8009570:	462f      	moveq	r7, r5
 8009572:	2d10      	cmp	r5, #16
 8009574:	462c      	mov	r4, r5
 8009576:	bfa8      	it	ge
 8009578:	2410      	movge	r4, #16
 800957a:	f7f6 ffcb 	bl	8000514 <__aeabi_ui2d>
 800957e:	2d09      	cmp	r5, #9
 8009580:	4682      	mov	sl, r0
 8009582:	468b      	mov	fp, r1
 8009584:	dc13      	bgt.n	80095ae <_strtod_l+0x3d6>
 8009586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009588:	2b00      	cmp	r3, #0
 800958a:	f43f ae5e 	beq.w	800924a <_strtod_l+0x72>
 800958e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009590:	dd78      	ble.n	8009684 <_strtod_l+0x4ac>
 8009592:	2b16      	cmp	r3, #22
 8009594:	dc5f      	bgt.n	8009656 <_strtod_l+0x47e>
 8009596:	4974      	ldr	r1, [pc, #464]	@ (8009768 <_strtod_l+0x590>)
 8009598:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800959c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095a0:	4652      	mov	r2, sl
 80095a2:	465b      	mov	r3, fp
 80095a4:	f7f7 f830 	bl	8000608 <__aeabi_dmul>
 80095a8:	4682      	mov	sl, r0
 80095aa:	468b      	mov	fp, r1
 80095ac:	e64d      	b.n	800924a <_strtod_l+0x72>
 80095ae:	4b6e      	ldr	r3, [pc, #440]	@ (8009768 <_strtod_l+0x590>)
 80095b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80095b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80095b8:	f7f7 f826 	bl	8000608 <__aeabi_dmul>
 80095bc:	4682      	mov	sl, r0
 80095be:	9808      	ldr	r0, [sp, #32]
 80095c0:	468b      	mov	fp, r1
 80095c2:	f7f6 ffa7 	bl	8000514 <__aeabi_ui2d>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	4650      	mov	r0, sl
 80095cc:	4659      	mov	r1, fp
 80095ce:	f7f6 fe65 	bl	800029c <__adddf3>
 80095d2:	2d0f      	cmp	r5, #15
 80095d4:	4682      	mov	sl, r0
 80095d6:	468b      	mov	fp, r1
 80095d8:	ddd5      	ble.n	8009586 <_strtod_l+0x3ae>
 80095da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095dc:	1b2c      	subs	r4, r5, r4
 80095de:	441c      	add	r4, r3
 80095e0:	2c00      	cmp	r4, #0
 80095e2:	f340 8096 	ble.w	8009712 <_strtod_l+0x53a>
 80095e6:	f014 030f 	ands.w	r3, r4, #15
 80095ea:	d00a      	beq.n	8009602 <_strtod_l+0x42a>
 80095ec:	495e      	ldr	r1, [pc, #376]	@ (8009768 <_strtod_l+0x590>)
 80095ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095f2:	4652      	mov	r2, sl
 80095f4:	465b      	mov	r3, fp
 80095f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095fa:	f7f7 f805 	bl	8000608 <__aeabi_dmul>
 80095fe:	4682      	mov	sl, r0
 8009600:	468b      	mov	fp, r1
 8009602:	f034 040f 	bics.w	r4, r4, #15
 8009606:	d073      	beq.n	80096f0 <_strtod_l+0x518>
 8009608:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800960c:	dd48      	ble.n	80096a0 <_strtod_l+0x4c8>
 800960e:	2400      	movs	r4, #0
 8009610:	46a0      	mov	r8, r4
 8009612:	940a      	str	r4, [sp, #40]	@ 0x28
 8009614:	46a1      	mov	r9, r4
 8009616:	9a05      	ldr	r2, [sp, #20]
 8009618:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009770 <_strtod_l+0x598>
 800961c:	2322      	movs	r3, #34	@ 0x22
 800961e:	6013      	str	r3, [r2, #0]
 8009620:	f04f 0a00 	mov.w	sl, #0
 8009624:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009626:	2b00      	cmp	r3, #0
 8009628:	f43f ae0f 	beq.w	800924a <_strtod_l+0x72>
 800962c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800962e:	9805      	ldr	r0, [sp, #20]
 8009630:	f7ff f942 	bl	80088b8 <_Bfree>
 8009634:	9805      	ldr	r0, [sp, #20]
 8009636:	4649      	mov	r1, r9
 8009638:	f7ff f93e 	bl	80088b8 <_Bfree>
 800963c:	9805      	ldr	r0, [sp, #20]
 800963e:	4641      	mov	r1, r8
 8009640:	f7ff f93a 	bl	80088b8 <_Bfree>
 8009644:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009646:	9805      	ldr	r0, [sp, #20]
 8009648:	f7ff f936 	bl	80088b8 <_Bfree>
 800964c:	9805      	ldr	r0, [sp, #20]
 800964e:	4621      	mov	r1, r4
 8009650:	f7ff f932 	bl	80088b8 <_Bfree>
 8009654:	e5f9      	b.n	800924a <_strtod_l+0x72>
 8009656:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009658:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800965c:	4293      	cmp	r3, r2
 800965e:	dbbc      	blt.n	80095da <_strtod_l+0x402>
 8009660:	4c41      	ldr	r4, [pc, #260]	@ (8009768 <_strtod_l+0x590>)
 8009662:	f1c5 050f 	rsb	r5, r5, #15
 8009666:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800966a:	4652      	mov	r2, sl
 800966c:	465b      	mov	r3, fp
 800966e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009672:	f7f6 ffc9 	bl	8000608 <__aeabi_dmul>
 8009676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009678:	1b5d      	subs	r5, r3, r5
 800967a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800967e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009682:	e78f      	b.n	80095a4 <_strtod_l+0x3cc>
 8009684:	3316      	adds	r3, #22
 8009686:	dba8      	blt.n	80095da <_strtod_l+0x402>
 8009688:	4b37      	ldr	r3, [pc, #220]	@ (8009768 <_strtod_l+0x590>)
 800968a:	eba9 0808 	sub.w	r8, r9, r8
 800968e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009692:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009696:	4650      	mov	r0, sl
 8009698:	4659      	mov	r1, fp
 800969a:	f7f7 f8df 	bl	800085c <__aeabi_ddiv>
 800969e:	e783      	b.n	80095a8 <_strtod_l+0x3d0>
 80096a0:	4b32      	ldr	r3, [pc, #200]	@ (800976c <_strtod_l+0x594>)
 80096a2:	9308      	str	r3, [sp, #32]
 80096a4:	2300      	movs	r3, #0
 80096a6:	1124      	asrs	r4, r4, #4
 80096a8:	4650      	mov	r0, sl
 80096aa:	4659      	mov	r1, fp
 80096ac:	461e      	mov	r6, r3
 80096ae:	2c01      	cmp	r4, #1
 80096b0:	dc21      	bgt.n	80096f6 <_strtod_l+0x51e>
 80096b2:	b10b      	cbz	r3, 80096b8 <_strtod_l+0x4e0>
 80096b4:	4682      	mov	sl, r0
 80096b6:	468b      	mov	fp, r1
 80096b8:	492c      	ldr	r1, [pc, #176]	@ (800976c <_strtod_l+0x594>)
 80096ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80096be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80096c2:	4652      	mov	r2, sl
 80096c4:	465b      	mov	r3, fp
 80096c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096ca:	f7f6 ff9d 	bl	8000608 <__aeabi_dmul>
 80096ce:	4b28      	ldr	r3, [pc, #160]	@ (8009770 <_strtod_l+0x598>)
 80096d0:	460a      	mov	r2, r1
 80096d2:	400b      	ands	r3, r1
 80096d4:	4927      	ldr	r1, [pc, #156]	@ (8009774 <_strtod_l+0x59c>)
 80096d6:	428b      	cmp	r3, r1
 80096d8:	4682      	mov	sl, r0
 80096da:	d898      	bhi.n	800960e <_strtod_l+0x436>
 80096dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80096e0:	428b      	cmp	r3, r1
 80096e2:	bf86      	itte	hi
 80096e4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009778 <_strtod_l+0x5a0>
 80096e8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80096ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80096f0:	2300      	movs	r3, #0
 80096f2:	9308      	str	r3, [sp, #32]
 80096f4:	e07a      	b.n	80097ec <_strtod_l+0x614>
 80096f6:	07e2      	lsls	r2, r4, #31
 80096f8:	d505      	bpl.n	8009706 <_strtod_l+0x52e>
 80096fa:	9b08      	ldr	r3, [sp, #32]
 80096fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009700:	f7f6 ff82 	bl	8000608 <__aeabi_dmul>
 8009704:	2301      	movs	r3, #1
 8009706:	9a08      	ldr	r2, [sp, #32]
 8009708:	3208      	adds	r2, #8
 800970a:	3601      	adds	r6, #1
 800970c:	1064      	asrs	r4, r4, #1
 800970e:	9208      	str	r2, [sp, #32]
 8009710:	e7cd      	b.n	80096ae <_strtod_l+0x4d6>
 8009712:	d0ed      	beq.n	80096f0 <_strtod_l+0x518>
 8009714:	4264      	negs	r4, r4
 8009716:	f014 020f 	ands.w	r2, r4, #15
 800971a:	d00a      	beq.n	8009732 <_strtod_l+0x55a>
 800971c:	4b12      	ldr	r3, [pc, #72]	@ (8009768 <_strtod_l+0x590>)
 800971e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009722:	4650      	mov	r0, sl
 8009724:	4659      	mov	r1, fp
 8009726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972a:	f7f7 f897 	bl	800085c <__aeabi_ddiv>
 800972e:	4682      	mov	sl, r0
 8009730:	468b      	mov	fp, r1
 8009732:	1124      	asrs	r4, r4, #4
 8009734:	d0dc      	beq.n	80096f0 <_strtod_l+0x518>
 8009736:	2c1f      	cmp	r4, #31
 8009738:	dd20      	ble.n	800977c <_strtod_l+0x5a4>
 800973a:	2400      	movs	r4, #0
 800973c:	46a0      	mov	r8, r4
 800973e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009740:	46a1      	mov	r9, r4
 8009742:	9a05      	ldr	r2, [sp, #20]
 8009744:	2322      	movs	r3, #34	@ 0x22
 8009746:	f04f 0a00 	mov.w	sl, #0
 800974a:	f04f 0b00 	mov.w	fp, #0
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	e768      	b.n	8009624 <_strtod_l+0x44c>
 8009752:	bf00      	nop
 8009754:	0800b205 	.word	0x0800b205
 8009758:	0800b41c 	.word	0x0800b41c
 800975c:	0800b1fd 	.word	0x0800b1fd
 8009760:	0800b234 	.word	0x0800b234
 8009764:	0800b5c5 	.word	0x0800b5c5
 8009768:	0800b350 	.word	0x0800b350
 800976c:	0800b328 	.word	0x0800b328
 8009770:	7ff00000 	.word	0x7ff00000
 8009774:	7ca00000 	.word	0x7ca00000
 8009778:	7fefffff 	.word	0x7fefffff
 800977c:	f014 0310 	ands.w	r3, r4, #16
 8009780:	bf18      	it	ne
 8009782:	236a      	movne	r3, #106	@ 0x6a
 8009784:	4ea9      	ldr	r6, [pc, #676]	@ (8009a2c <_strtod_l+0x854>)
 8009786:	9308      	str	r3, [sp, #32]
 8009788:	4650      	mov	r0, sl
 800978a:	4659      	mov	r1, fp
 800978c:	2300      	movs	r3, #0
 800978e:	07e2      	lsls	r2, r4, #31
 8009790:	d504      	bpl.n	800979c <_strtod_l+0x5c4>
 8009792:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009796:	f7f6 ff37 	bl	8000608 <__aeabi_dmul>
 800979a:	2301      	movs	r3, #1
 800979c:	1064      	asrs	r4, r4, #1
 800979e:	f106 0608 	add.w	r6, r6, #8
 80097a2:	d1f4      	bne.n	800978e <_strtod_l+0x5b6>
 80097a4:	b10b      	cbz	r3, 80097aa <_strtod_l+0x5d2>
 80097a6:	4682      	mov	sl, r0
 80097a8:	468b      	mov	fp, r1
 80097aa:	9b08      	ldr	r3, [sp, #32]
 80097ac:	b1b3      	cbz	r3, 80097dc <_strtod_l+0x604>
 80097ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80097b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	4659      	mov	r1, fp
 80097ba:	dd0f      	ble.n	80097dc <_strtod_l+0x604>
 80097bc:	2b1f      	cmp	r3, #31
 80097be:	dd55      	ble.n	800986c <_strtod_l+0x694>
 80097c0:	2b34      	cmp	r3, #52	@ 0x34
 80097c2:	bfde      	ittt	le
 80097c4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80097c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80097cc:	4093      	lslle	r3, r2
 80097ce:	f04f 0a00 	mov.w	sl, #0
 80097d2:	bfcc      	ite	gt
 80097d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80097d8:	ea03 0b01 	andle.w	fp, r3, r1
 80097dc:	2200      	movs	r2, #0
 80097de:	2300      	movs	r3, #0
 80097e0:	4650      	mov	r0, sl
 80097e2:	4659      	mov	r1, fp
 80097e4:	f7f7 f978 	bl	8000ad8 <__aeabi_dcmpeq>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d1a6      	bne.n	800973a <_strtod_l+0x562>
 80097ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80097f2:	9805      	ldr	r0, [sp, #20]
 80097f4:	462b      	mov	r3, r5
 80097f6:	463a      	mov	r2, r7
 80097f8:	f7ff f8c6 	bl	8008988 <__s2b>
 80097fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80097fe:	2800      	cmp	r0, #0
 8009800:	f43f af05 	beq.w	800960e <_strtod_l+0x436>
 8009804:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009806:	2a00      	cmp	r2, #0
 8009808:	eba9 0308 	sub.w	r3, r9, r8
 800980c:	bfa8      	it	ge
 800980e:	2300      	movge	r3, #0
 8009810:	9312      	str	r3, [sp, #72]	@ 0x48
 8009812:	2400      	movs	r4, #0
 8009814:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009818:	9316      	str	r3, [sp, #88]	@ 0x58
 800981a:	46a0      	mov	r8, r4
 800981c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800981e:	9805      	ldr	r0, [sp, #20]
 8009820:	6859      	ldr	r1, [r3, #4]
 8009822:	f7ff f809 	bl	8008838 <_Balloc>
 8009826:	4681      	mov	r9, r0
 8009828:	2800      	cmp	r0, #0
 800982a:	f43f aef4 	beq.w	8009616 <_strtod_l+0x43e>
 800982e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009830:	691a      	ldr	r2, [r3, #16]
 8009832:	3202      	adds	r2, #2
 8009834:	f103 010c 	add.w	r1, r3, #12
 8009838:	0092      	lsls	r2, r2, #2
 800983a:	300c      	adds	r0, #12
 800983c:	f7fe f899 	bl	8007972 <memcpy>
 8009840:	ec4b ab10 	vmov	d0, sl, fp
 8009844:	9805      	ldr	r0, [sp, #20]
 8009846:	aa1c      	add	r2, sp, #112	@ 0x70
 8009848:	a91b      	add	r1, sp, #108	@ 0x6c
 800984a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800984e:	f7ff fbd7 	bl	8009000 <__d2b>
 8009852:	901a      	str	r0, [sp, #104]	@ 0x68
 8009854:	2800      	cmp	r0, #0
 8009856:	f43f aede 	beq.w	8009616 <_strtod_l+0x43e>
 800985a:	9805      	ldr	r0, [sp, #20]
 800985c:	2101      	movs	r1, #1
 800985e:	f7ff f929 	bl	8008ab4 <__i2b>
 8009862:	4680      	mov	r8, r0
 8009864:	b948      	cbnz	r0, 800987a <_strtod_l+0x6a2>
 8009866:	f04f 0800 	mov.w	r8, #0
 800986a:	e6d4      	b.n	8009616 <_strtod_l+0x43e>
 800986c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009870:	fa02 f303 	lsl.w	r3, r2, r3
 8009874:	ea03 0a0a 	and.w	sl, r3, sl
 8009878:	e7b0      	b.n	80097dc <_strtod_l+0x604>
 800987a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800987c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800987e:	2d00      	cmp	r5, #0
 8009880:	bfab      	itete	ge
 8009882:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009884:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009886:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009888:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800988a:	bfac      	ite	ge
 800988c:	18ef      	addge	r7, r5, r3
 800988e:	1b5e      	sublt	r6, r3, r5
 8009890:	9b08      	ldr	r3, [sp, #32]
 8009892:	1aed      	subs	r5, r5, r3
 8009894:	4415      	add	r5, r2
 8009896:	4b66      	ldr	r3, [pc, #408]	@ (8009a30 <_strtod_l+0x858>)
 8009898:	3d01      	subs	r5, #1
 800989a:	429d      	cmp	r5, r3
 800989c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80098a0:	da50      	bge.n	8009944 <_strtod_l+0x76c>
 80098a2:	1b5b      	subs	r3, r3, r5
 80098a4:	2b1f      	cmp	r3, #31
 80098a6:	eba2 0203 	sub.w	r2, r2, r3
 80098aa:	f04f 0101 	mov.w	r1, #1
 80098ae:	dc3d      	bgt.n	800992c <_strtod_l+0x754>
 80098b0:	fa01 f303 	lsl.w	r3, r1, r3
 80098b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098b6:	2300      	movs	r3, #0
 80098b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80098ba:	18bd      	adds	r5, r7, r2
 80098bc:	9b08      	ldr	r3, [sp, #32]
 80098be:	42af      	cmp	r7, r5
 80098c0:	4416      	add	r6, r2
 80098c2:	441e      	add	r6, r3
 80098c4:	463b      	mov	r3, r7
 80098c6:	bfa8      	it	ge
 80098c8:	462b      	movge	r3, r5
 80098ca:	42b3      	cmp	r3, r6
 80098cc:	bfa8      	it	ge
 80098ce:	4633      	movge	r3, r6
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	bfc2      	ittt	gt
 80098d4:	1aed      	subgt	r5, r5, r3
 80098d6:	1af6      	subgt	r6, r6, r3
 80098d8:	1aff      	subgt	r7, r7, r3
 80098da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80098dc:	2b00      	cmp	r3, #0
 80098de:	dd16      	ble.n	800990e <_strtod_l+0x736>
 80098e0:	4641      	mov	r1, r8
 80098e2:	9805      	ldr	r0, [sp, #20]
 80098e4:	461a      	mov	r2, r3
 80098e6:	f7ff f9a5 	bl	8008c34 <__pow5mult>
 80098ea:	4680      	mov	r8, r0
 80098ec:	2800      	cmp	r0, #0
 80098ee:	d0ba      	beq.n	8009866 <_strtod_l+0x68e>
 80098f0:	4601      	mov	r1, r0
 80098f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80098f4:	9805      	ldr	r0, [sp, #20]
 80098f6:	f7ff f8f3 	bl	8008ae0 <__multiply>
 80098fa:	900e      	str	r0, [sp, #56]	@ 0x38
 80098fc:	2800      	cmp	r0, #0
 80098fe:	f43f ae8a 	beq.w	8009616 <_strtod_l+0x43e>
 8009902:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009904:	9805      	ldr	r0, [sp, #20]
 8009906:	f7fe ffd7 	bl	80088b8 <_Bfree>
 800990a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800990c:	931a      	str	r3, [sp, #104]	@ 0x68
 800990e:	2d00      	cmp	r5, #0
 8009910:	dc1d      	bgt.n	800994e <_strtod_l+0x776>
 8009912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009914:	2b00      	cmp	r3, #0
 8009916:	dd23      	ble.n	8009960 <_strtod_l+0x788>
 8009918:	4649      	mov	r1, r9
 800991a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800991c:	9805      	ldr	r0, [sp, #20]
 800991e:	f7ff f989 	bl	8008c34 <__pow5mult>
 8009922:	4681      	mov	r9, r0
 8009924:	b9e0      	cbnz	r0, 8009960 <_strtod_l+0x788>
 8009926:	f04f 0900 	mov.w	r9, #0
 800992a:	e674      	b.n	8009616 <_strtod_l+0x43e>
 800992c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009930:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009934:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009938:	35e2      	adds	r5, #226	@ 0xe2
 800993a:	fa01 f305 	lsl.w	r3, r1, r5
 800993e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009940:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009942:	e7ba      	b.n	80098ba <_strtod_l+0x6e2>
 8009944:	2300      	movs	r3, #0
 8009946:	9310      	str	r3, [sp, #64]	@ 0x40
 8009948:	2301      	movs	r3, #1
 800994a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800994c:	e7b5      	b.n	80098ba <_strtod_l+0x6e2>
 800994e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009950:	9805      	ldr	r0, [sp, #20]
 8009952:	462a      	mov	r2, r5
 8009954:	f7ff f9c8 	bl	8008ce8 <__lshift>
 8009958:	901a      	str	r0, [sp, #104]	@ 0x68
 800995a:	2800      	cmp	r0, #0
 800995c:	d1d9      	bne.n	8009912 <_strtod_l+0x73a>
 800995e:	e65a      	b.n	8009616 <_strtod_l+0x43e>
 8009960:	2e00      	cmp	r6, #0
 8009962:	dd07      	ble.n	8009974 <_strtod_l+0x79c>
 8009964:	4649      	mov	r1, r9
 8009966:	9805      	ldr	r0, [sp, #20]
 8009968:	4632      	mov	r2, r6
 800996a:	f7ff f9bd 	bl	8008ce8 <__lshift>
 800996e:	4681      	mov	r9, r0
 8009970:	2800      	cmp	r0, #0
 8009972:	d0d8      	beq.n	8009926 <_strtod_l+0x74e>
 8009974:	2f00      	cmp	r7, #0
 8009976:	dd08      	ble.n	800998a <_strtod_l+0x7b2>
 8009978:	4641      	mov	r1, r8
 800997a:	9805      	ldr	r0, [sp, #20]
 800997c:	463a      	mov	r2, r7
 800997e:	f7ff f9b3 	bl	8008ce8 <__lshift>
 8009982:	4680      	mov	r8, r0
 8009984:	2800      	cmp	r0, #0
 8009986:	f43f ae46 	beq.w	8009616 <_strtod_l+0x43e>
 800998a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800998c:	9805      	ldr	r0, [sp, #20]
 800998e:	464a      	mov	r2, r9
 8009990:	f7ff fa32 	bl	8008df8 <__mdiff>
 8009994:	4604      	mov	r4, r0
 8009996:	2800      	cmp	r0, #0
 8009998:	f43f ae3d 	beq.w	8009616 <_strtod_l+0x43e>
 800999c:	68c3      	ldr	r3, [r0, #12]
 800999e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80099a0:	2300      	movs	r3, #0
 80099a2:	60c3      	str	r3, [r0, #12]
 80099a4:	4641      	mov	r1, r8
 80099a6:	f7ff fa0b 	bl	8008dc0 <__mcmp>
 80099aa:	2800      	cmp	r0, #0
 80099ac:	da46      	bge.n	8009a3c <_strtod_l+0x864>
 80099ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099b0:	ea53 030a 	orrs.w	r3, r3, sl
 80099b4:	d16c      	bne.n	8009a90 <_strtod_l+0x8b8>
 80099b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d168      	bne.n	8009a90 <_strtod_l+0x8b8>
 80099be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80099c2:	0d1b      	lsrs	r3, r3, #20
 80099c4:	051b      	lsls	r3, r3, #20
 80099c6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80099ca:	d961      	bls.n	8009a90 <_strtod_l+0x8b8>
 80099cc:	6963      	ldr	r3, [r4, #20]
 80099ce:	b913      	cbnz	r3, 80099d6 <_strtod_l+0x7fe>
 80099d0:	6923      	ldr	r3, [r4, #16]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	dd5c      	ble.n	8009a90 <_strtod_l+0x8b8>
 80099d6:	4621      	mov	r1, r4
 80099d8:	2201      	movs	r2, #1
 80099da:	9805      	ldr	r0, [sp, #20]
 80099dc:	f7ff f984 	bl	8008ce8 <__lshift>
 80099e0:	4641      	mov	r1, r8
 80099e2:	4604      	mov	r4, r0
 80099e4:	f7ff f9ec 	bl	8008dc0 <__mcmp>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	dd51      	ble.n	8009a90 <_strtod_l+0x8b8>
 80099ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80099f0:	9a08      	ldr	r2, [sp, #32]
 80099f2:	0d1b      	lsrs	r3, r3, #20
 80099f4:	051b      	lsls	r3, r3, #20
 80099f6:	2a00      	cmp	r2, #0
 80099f8:	d06b      	beq.n	8009ad2 <_strtod_l+0x8fa>
 80099fa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80099fe:	d868      	bhi.n	8009ad2 <_strtod_l+0x8fa>
 8009a00:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009a04:	f67f ae9d 	bls.w	8009742 <_strtod_l+0x56a>
 8009a08:	4b0a      	ldr	r3, [pc, #40]	@ (8009a34 <_strtod_l+0x85c>)
 8009a0a:	4650      	mov	r0, sl
 8009a0c:	4659      	mov	r1, fp
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f7f6 fdfa 	bl	8000608 <__aeabi_dmul>
 8009a14:	4b08      	ldr	r3, [pc, #32]	@ (8009a38 <_strtod_l+0x860>)
 8009a16:	400b      	ands	r3, r1
 8009a18:	4682      	mov	sl, r0
 8009a1a:	468b      	mov	fp, r1
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f47f ae05 	bne.w	800962c <_strtod_l+0x454>
 8009a22:	9a05      	ldr	r2, [sp, #20]
 8009a24:	2322      	movs	r3, #34	@ 0x22
 8009a26:	6013      	str	r3, [r2, #0]
 8009a28:	e600      	b.n	800962c <_strtod_l+0x454>
 8009a2a:	bf00      	nop
 8009a2c:	0800b448 	.word	0x0800b448
 8009a30:	fffffc02 	.word	0xfffffc02
 8009a34:	39500000 	.word	0x39500000
 8009a38:	7ff00000 	.word	0x7ff00000
 8009a3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009a40:	d165      	bne.n	8009b0e <_strtod_l+0x936>
 8009a42:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009a44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a48:	b35a      	cbz	r2, 8009aa2 <_strtod_l+0x8ca>
 8009a4a:	4a9f      	ldr	r2, [pc, #636]	@ (8009cc8 <_strtod_l+0xaf0>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d12b      	bne.n	8009aa8 <_strtod_l+0x8d0>
 8009a50:	9b08      	ldr	r3, [sp, #32]
 8009a52:	4651      	mov	r1, sl
 8009a54:	b303      	cbz	r3, 8009a98 <_strtod_l+0x8c0>
 8009a56:	4b9d      	ldr	r3, [pc, #628]	@ (8009ccc <_strtod_l+0xaf4>)
 8009a58:	465a      	mov	r2, fp
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009a60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a64:	d81b      	bhi.n	8009a9e <_strtod_l+0x8c6>
 8009a66:	0d1b      	lsrs	r3, r3, #20
 8009a68:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a70:	4299      	cmp	r1, r3
 8009a72:	d119      	bne.n	8009aa8 <_strtod_l+0x8d0>
 8009a74:	4b96      	ldr	r3, [pc, #600]	@ (8009cd0 <_strtod_l+0xaf8>)
 8009a76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d102      	bne.n	8009a82 <_strtod_l+0x8aa>
 8009a7c:	3101      	adds	r1, #1
 8009a7e:	f43f adca 	beq.w	8009616 <_strtod_l+0x43e>
 8009a82:	4b92      	ldr	r3, [pc, #584]	@ (8009ccc <_strtod_l+0xaf4>)
 8009a84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a86:	401a      	ands	r2, r3
 8009a88:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009a8c:	f04f 0a00 	mov.w	sl, #0
 8009a90:	9b08      	ldr	r3, [sp, #32]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1b8      	bne.n	8009a08 <_strtod_l+0x830>
 8009a96:	e5c9      	b.n	800962c <_strtod_l+0x454>
 8009a98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a9c:	e7e8      	b.n	8009a70 <_strtod_l+0x898>
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	e7e6      	b.n	8009a70 <_strtod_l+0x898>
 8009aa2:	ea53 030a 	orrs.w	r3, r3, sl
 8009aa6:	d0a1      	beq.n	80099ec <_strtod_l+0x814>
 8009aa8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009aaa:	b1db      	cbz	r3, 8009ae4 <_strtod_l+0x90c>
 8009aac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009aae:	4213      	tst	r3, r2
 8009ab0:	d0ee      	beq.n	8009a90 <_strtod_l+0x8b8>
 8009ab2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ab4:	9a08      	ldr	r2, [sp, #32]
 8009ab6:	4650      	mov	r0, sl
 8009ab8:	4659      	mov	r1, fp
 8009aba:	b1bb      	cbz	r3, 8009aec <_strtod_l+0x914>
 8009abc:	f7ff fb6e 	bl	800919c <sulp>
 8009ac0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ac4:	ec53 2b10 	vmov	r2, r3, d0
 8009ac8:	f7f6 fbe8 	bl	800029c <__adddf3>
 8009acc:	4682      	mov	sl, r0
 8009ace:	468b      	mov	fp, r1
 8009ad0:	e7de      	b.n	8009a90 <_strtod_l+0x8b8>
 8009ad2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009ad6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009ada:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009ade:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009ae2:	e7d5      	b.n	8009a90 <_strtod_l+0x8b8>
 8009ae4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ae6:	ea13 0f0a 	tst.w	r3, sl
 8009aea:	e7e1      	b.n	8009ab0 <_strtod_l+0x8d8>
 8009aec:	f7ff fb56 	bl	800919c <sulp>
 8009af0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009af4:	ec53 2b10 	vmov	r2, r3, d0
 8009af8:	f7f6 fbce 	bl	8000298 <__aeabi_dsub>
 8009afc:	2200      	movs	r2, #0
 8009afe:	2300      	movs	r3, #0
 8009b00:	4682      	mov	sl, r0
 8009b02:	468b      	mov	fp, r1
 8009b04:	f7f6 ffe8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	d0c1      	beq.n	8009a90 <_strtod_l+0x8b8>
 8009b0c:	e619      	b.n	8009742 <_strtod_l+0x56a>
 8009b0e:	4641      	mov	r1, r8
 8009b10:	4620      	mov	r0, r4
 8009b12:	f7ff facd 	bl	80090b0 <__ratio>
 8009b16:	ec57 6b10 	vmov	r6, r7, d0
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009b20:	4630      	mov	r0, r6
 8009b22:	4639      	mov	r1, r7
 8009b24:	f7f6 ffec 	bl	8000b00 <__aeabi_dcmple>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	d06f      	beq.n	8009c0c <_strtod_l+0xa34>
 8009b2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d17a      	bne.n	8009c28 <_strtod_l+0xa50>
 8009b32:	f1ba 0f00 	cmp.w	sl, #0
 8009b36:	d158      	bne.n	8009bea <_strtod_l+0xa12>
 8009b38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d15a      	bne.n	8009bf8 <_strtod_l+0xa20>
 8009b42:	4b64      	ldr	r3, [pc, #400]	@ (8009cd4 <_strtod_l+0xafc>)
 8009b44:	2200      	movs	r2, #0
 8009b46:	4630      	mov	r0, r6
 8009b48:	4639      	mov	r1, r7
 8009b4a:	f7f6 ffcf 	bl	8000aec <__aeabi_dcmplt>
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	d159      	bne.n	8009c06 <_strtod_l+0xa2e>
 8009b52:	4630      	mov	r0, r6
 8009b54:	4639      	mov	r1, r7
 8009b56:	4b60      	ldr	r3, [pc, #384]	@ (8009cd8 <_strtod_l+0xb00>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f7f6 fd55 	bl	8000608 <__aeabi_dmul>
 8009b5e:	4606      	mov	r6, r0
 8009b60:	460f      	mov	r7, r1
 8009b62:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009b66:	9606      	str	r6, [sp, #24]
 8009b68:	9307      	str	r3, [sp, #28]
 8009b6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b6e:	4d57      	ldr	r5, [pc, #348]	@ (8009ccc <_strtod_l+0xaf4>)
 8009b70:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009b74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b76:	401d      	ands	r5, r3
 8009b78:	4b58      	ldr	r3, [pc, #352]	@ (8009cdc <_strtod_l+0xb04>)
 8009b7a:	429d      	cmp	r5, r3
 8009b7c:	f040 80b2 	bne.w	8009ce4 <_strtod_l+0xb0c>
 8009b80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b82:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009b86:	ec4b ab10 	vmov	d0, sl, fp
 8009b8a:	f7ff f9c9 	bl	8008f20 <__ulp>
 8009b8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b92:	ec51 0b10 	vmov	r0, r1, d0
 8009b96:	f7f6 fd37 	bl	8000608 <__aeabi_dmul>
 8009b9a:	4652      	mov	r2, sl
 8009b9c:	465b      	mov	r3, fp
 8009b9e:	f7f6 fb7d 	bl	800029c <__adddf3>
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	4949      	ldr	r1, [pc, #292]	@ (8009ccc <_strtod_l+0xaf4>)
 8009ba6:	4a4e      	ldr	r2, [pc, #312]	@ (8009ce0 <_strtod_l+0xb08>)
 8009ba8:	4019      	ands	r1, r3
 8009baa:	4291      	cmp	r1, r2
 8009bac:	4682      	mov	sl, r0
 8009bae:	d942      	bls.n	8009c36 <_strtod_l+0xa5e>
 8009bb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009bb2:	4b47      	ldr	r3, [pc, #284]	@ (8009cd0 <_strtod_l+0xaf8>)
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d103      	bne.n	8009bc0 <_strtod_l+0x9e8>
 8009bb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009bba:	3301      	adds	r3, #1
 8009bbc:	f43f ad2b 	beq.w	8009616 <_strtod_l+0x43e>
 8009bc0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009cd0 <_strtod_l+0xaf8>
 8009bc4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009bc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009bca:	9805      	ldr	r0, [sp, #20]
 8009bcc:	f7fe fe74 	bl	80088b8 <_Bfree>
 8009bd0:	9805      	ldr	r0, [sp, #20]
 8009bd2:	4649      	mov	r1, r9
 8009bd4:	f7fe fe70 	bl	80088b8 <_Bfree>
 8009bd8:	9805      	ldr	r0, [sp, #20]
 8009bda:	4641      	mov	r1, r8
 8009bdc:	f7fe fe6c 	bl	80088b8 <_Bfree>
 8009be0:	9805      	ldr	r0, [sp, #20]
 8009be2:	4621      	mov	r1, r4
 8009be4:	f7fe fe68 	bl	80088b8 <_Bfree>
 8009be8:	e618      	b.n	800981c <_strtod_l+0x644>
 8009bea:	f1ba 0f01 	cmp.w	sl, #1
 8009bee:	d103      	bne.n	8009bf8 <_strtod_l+0xa20>
 8009bf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f43f ada5 	beq.w	8009742 <_strtod_l+0x56a>
 8009bf8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009ca8 <_strtod_l+0xad0>
 8009bfc:	4f35      	ldr	r7, [pc, #212]	@ (8009cd4 <_strtod_l+0xafc>)
 8009bfe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c02:	2600      	movs	r6, #0
 8009c04:	e7b1      	b.n	8009b6a <_strtod_l+0x992>
 8009c06:	4f34      	ldr	r7, [pc, #208]	@ (8009cd8 <_strtod_l+0xb00>)
 8009c08:	2600      	movs	r6, #0
 8009c0a:	e7aa      	b.n	8009b62 <_strtod_l+0x98a>
 8009c0c:	4b32      	ldr	r3, [pc, #200]	@ (8009cd8 <_strtod_l+0xb00>)
 8009c0e:	4630      	mov	r0, r6
 8009c10:	4639      	mov	r1, r7
 8009c12:	2200      	movs	r2, #0
 8009c14:	f7f6 fcf8 	bl	8000608 <__aeabi_dmul>
 8009c18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c1a:	4606      	mov	r6, r0
 8009c1c:	460f      	mov	r7, r1
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d09f      	beq.n	8009b62 <_strtod_l+0x98a>
 8009c22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009c26:	e7a0      	b.n	8009b6a <_strtod_l+0x992>
 8009c28:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009cb0 <_strtod_l+0xad8>
 8009c2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c30:	ec57 6b17 	vmov	r6, r7, d7
 8009c34:	e799      	b.n	8009b6a <_strtod_l+0x992>
 8009c36:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009c3a:	9b08      	ldr	r3, [sp, #32]
 8009c3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d1c1      	bne.n	8009bc8 <_strtod_l+0x9f0>
 8009c44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009c48:	0d1b      	lsrs	r3, r3, #20
 8009c4a:	051b      	lsls	r3, r3, #20
 8009c4c:	429d      	cmp	r5, r3
 8009c4e:	d1bb      	bne.n	8009bc8 <_strtod_l+0x9f0>
 8009c50:	4630      	mov	r0, r6
 8009c52:	4639      	mov	r1, r7
 8009c54:	f7f7 f838 	bl	8000cc8 <__aeabi_d2lz>
 8009c58:	f7f6 fca8 	bl	80005ac <__aeabi_l2d>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	460b      	mov	r3, r1
 8009c60:	4630      	mov	r0, r6
 8009c62:	4639      	mov	r1, r7
 8009c64:	f7f6 fb18 	bl	8000298 <__aeabi_dsub>
 8009c68:	460b      	mov	r3, r1
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009c70:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009c74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c76:	ea46 060a 	orr.w	r6, r6, sl
 8009c7a:	431e      	orrs	r6, r3
 8009c7c:	d06f      	beq.n	8009d5e <_strtod_l+0xb86>
 8009c7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009cb8 <_strtod_l+0xae0>)
 8009c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c84:	f7f6 ff32 	bl	8000aec <__aeabi_dcmplt>
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	f47f accf 	bne.w	800962c <_strtod_l+0x454>
 8009c8e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009cc0 <_strtod_l+0xae8>)
 8009c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c98:	f7f6 ff46 	bl	8000b28 <__aeabi_dcmpgt>
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	d093      	beq.n	8009bc8 <_strtod_l+0x9f0>
 8009ca0:	e4c4      	b.n	800962c <_strtod_l+0x454>
 8009ca2:	bf00      	nop
 8009ca4:	f3af 8000 	nop.w
 8009ca8:	00000000 	.word	0x00000000
 8009cac:	bff00000 	.word	0xbff00000
 8009cb0:	00000000 	.word	0x00000000
 8009cb4:	3ff00000 	.word	0x3ff00000
 8009cb8:	94a03595 	.word	0x94a03595
 8009cbc:	3fdfffff 	.word	0x3fdfffff
 8009cc0:	35afe535 	.word	0x35afe535
 8009cc4:	3fe00000 	.word	0x3fe00000
 8009cc8:	000fffff 	.word	0x000fffff
 8009ccc:	7ff00000 	.word	0x7ff00000
 8009cd0:	7fefffff 	.word	0x7fefffff
 8009cd4:	3ff00000 	.word	0x3ff00000
 8009cd8:	3fe00000 	.word	0x3fe00000
 8009cdc:	7fe00000 	.word	0x7fe00000
 8009ce0:	7c9fffff 	.word	0x7c9fffff
 8009ce4:	9b08      	ldr	r3, [sp, #32]
 8009ce6:	b323      	cbz	r3, 8009d32 <_strtod_l+0xb5a>
 8009ce8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009cec:	d821      	bhi.n	8009d32 <_strtod_l+0xb5a>
 8009cee:	a328      	add	r3, pc, #160	@ (adr r3, 8009d90 <_strtod_l+0xbb8>)
 8009cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	4639      	mov	r1, r7
 8009cf8:	f7f6 ff02 	bl	8000b00 <__aeabi_dcmple>
 8009cfc:	b1a0      	cbz	r0, 8009d28 <_strtod_l+0xb50>
 8009cfe:	4639      	mov	r1, r7
 8009d00:	4630      	mov	r0, r6
 8009d02:	f7f6 ff59 	bl	8000bb8 <__aeabi_d2uiz>
 8009d06:	2801      	cmp	r0, #1
 8009d08:	bf38      	it	cc
 8009d0a:	2001      	movcc	r0, #1
 8009d0c:	f7f6 fc02 	bl	8000514 <__aeabi_ui2d>
 8009d10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d12:	4606      	mov	r6, r0
 8009d14:	460f      	mov	r7, r1
 8009d16:	b9fb      	cbnz	r3, 8009d58 <_strtod_l+0xb80>
 8009d18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009d1c:	9014      	str	r0, [sp, #80]	@ 0x50
 8009d1e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009d20:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009d24:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009d28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009d2a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009d2e:	1b5b      	subs	r3, r3, r5
 8009d30:	9311      	str	r3, [sp, #68]	@ 0x44
 8009d32:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009d36:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009d3a:	f7ff f8f1 	bl	8008f20 <__ulp>
 8009d3e:	4650      	mov	r0, sl
 8009d40:	ec53 2b10 	vmov	r2, r3, d0
 8009d44:	4659      	mov	r1, fp
 8009d46:	f7f6 fc5f 	bl	8000608 <__aeabi_dmul>
 8009d4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009d4e:	f7f6 faa5 	bl	800029c <__adddf3>
 8009d52:	4682      	mov	sl, r0
 8009d54:	468b      	mov	fp, r1
 8009d56:	e770      	b.n	8009c3a <_strtod_l+0xa62>
 8009d58:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009d5c:	e7e0      	b.n	8009d20 <_strtod_l+0xb48>
 8009d5e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009d98 <_strtod_l+0xbc0>)
 8009d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d64:	f7f6 fec2 	bl	8000aec <__aeabi_dcmplt>
 8009d68:	e798      	b.n	8009c9c <_strtod_l+0xac4>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d6e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009d70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d72:	6013      	str	r3, [r2, #0]
 8009d74:	f7ff ba6d 	b.w	8009252 <_strtod_l+0x7a>
 8009d78:	2a65      	cmp	r2, #101	@ 0x65
 8009d7a:	f43f ab66 	beq.w	800944a <_strtod_l+0x272>
 8009d7e:	2a45      	cmp	r2, #69	@ 0x45
 8009d80:	f43f ab63 	beq.w	800944a <_strtod_l+0x272>
 8009d84:	2301      	movs	r3, #1
 8009d86:	f7ff bb9e 	b.w	80094c6 <_strtod_l+0x2ee>
 8009d8a:	bf00      	nop
 8009d8c:	f3af 8000 	nop.w
 8009d90:	ffc00000 	.word	0xffc00000
 8009d94:	41dfffff 	.word	0x41dfffff
 8009d98:	94a03595 	.word	0x94a03595
 8009d9c:	3fcfffff 	.word	0x3fcfffff

08009da0 <_strtod_r>:
 8009da0:	4b01      	ldr	r3, [pc, #4]	@ (8009da8 <_strtod_r+0x8>)
 8009da2:	f7ff ba19 	b.w	80091d8 <_strtod_l>
 8009da6:	bf00      	nop
 8009da8:	2000006c 	.word	0x2000006c

08009dac <_strtol_l.constprop.0>:
 8009dac:	2b24      	cmp	r3, #36	@ 0x24
 8009dae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009db2:	4686      	mov	lr, r0
 8009db4:	4690      	mov	r8, r2
 8009db6:	d801      	bhi.n	8009dbc <_strtol_l.constprop.0+0x10>
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d106      	bne.n	8009dca <_strtol_l.constprop.0+0x1e>
 8009dbc:	f7fd fdac 	bl	8007918 <__errno>
 8009dc0:	2316      	movs	r3, #22
 8009dc2:	6003      	str	r3, [r0, #0]
 8009dc4:	2000      	movs	r0, #0
 8009dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dca:	4834      	ldr	r0, [pc, #208]	@ (8009e9c <_strtol_l.constprop.0+0xf0>)
 8009dcc:	460d      	mov	r5, r1
 8009dce:	462a      	mov	r2, r5
 8009dd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dd4:	5d06      	ldrb	r6, [r0, r4]
 8009dd6:	f016 0608 	ands.w	r6, r6, #8
 8009dda:	d1f8      	bne.n	8009dce <_strtol_l.constprop.0+0x22>
 8009ddc:	2c2d      	cmp	r4, #45	@ 0x2d
 8009dde:	d12d      	bne.n	8009e3c <_strtol_l.constprop.0+0x90>
 8009de0:	782c      	ldrb	r4, [r5, #0]
 8009de2:	2601      	movs	r6, #1
 8009de4:	1c95      	adds	r5, r2, #2
 8009de6:	f033 0210 	bics.w	r2, r3, #16
 8009dea:	d109      	bne.n	8009e00 <_strtol_l.constprop.0+0x54>
 8009dec:	2c30      	cmp	r4, #48	@ 0x30
 8009dee:	d12a      	bne.n	8009e46 <_strtol_l.constprop.0+0x9a>
 8009df0:	782a      	ldrb	r2, [r5, #0]
 8009df2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009df6:	2a58      	cmp	r2, #88	@ 0x58
 8009df8:	d125      	bne.n	8009e46 <_strtol_l.constprop.0+0x9a>
 8009dfa:	786c      	ldrb	r4, [r5, #1]
 8009dfc:	2310      	movs	r3, #16
 8009dfe:	3502      	adds	r5, #2
 8009e00:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009e04:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009e08:	2200      	movs	r2, #0
 8009e0a:	fbbc f9f3 	udiv	r9, ip, r3
 8009e0e:	4610      	mov	r0, r2
 8009e10:	fb03 ca19 	mls	sl, r3, r9, ip
 8009e14:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009e18:	2f09      	cmp	r7, #9
 8009e1a:	d81b      	bhi.n	8009e54 <_strtol_l.constprop.0+0xa8>
 8009e1c:	463c      	mov	r4, r7
 8009e1e:	42a3      	cmp	r3, r4
 8009e20:	dd27      	ble.n	8009e72 <_strtol_l.constprop.0+0xc6>
 8009e22:	1c57      	adds	r7, r2, #1
 8009e24:	d007      	beq.n	8009e36 <_strtol_l.constprop.0+0x8a>
 8009e26:	4581      	cmp	r9, r0
 8009e28:	d320      	bcc.n	8009e6c <_strtol_l.constprop.0+0xc0>
 8009e2a:	d101      	bne.n	8009e30 <_strtol_l.constprop.0+0x84>
 8009e2c:	45a2      	cmp	sl, r4
 8009e2e:	db1d      	blt.n	8009e6c <_strtol_l.constprop.0+0xc0>
 8009e30:	fb00 4003 	mla	r0, r0, r3, r4
 8009e34:	2201      	movs	r2, #1
 8009e36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e3a:	e7eb      	b.n	8009e14 <_strtol_l.constprop.0+0x68>
 8009e3c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009e3e:	bf04      	itt	eq
 8009e40:	782c      	ldrbeq	r4, [r5, #0]
 8009e42:	1c95      	addeq	r5, r2, #2
 8009e44:	e7cf      	b.n	8009de6 <_strtol_l.constprop.0+0x3a>
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1da      	bne.n	8009e00 <_strtol_l.constprop.0+0x54>
 8009e4a:	2c30      	cmp	r4, #48	@ 0x30
 8009e4c:	bf0c      	ite	eq
 8009e4e:	2308      	moveq	r3, #8
 8009e50:	230a      	movne	r3, #10
 8009e52:	e7d5      	b.n	8009e00 <_strtol_l.constprop.0+0x54>
 8009e54:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009e58:	2f19      	cmp	r7, #25
 8009e5a:	d801      	bhi.n	8009e60 <_strtol_l.constprop.0+0xb4>
 8009e5c:	3c37      	subs	r4, #55	@ 0x37
 8009e5e:	e7de      	b.n	8009e1e <_strtol_l.constprop.0+0x72>
 8009e60:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009e64:	2f19      	cmp	r7, #25
 8009e66:	d804      	bhi.n	8009e72 <_strtol_l.constprop.0+0xc6>
 8009e68:	3c57      	subs	r4, #87	@ 0x57
 8009e6a:	e7d8      	b.n	8009e1e <_strtol_l.constprop.0+0x72>
 8009e6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e70:	e7e1      	b.n	8009e36 <_strtol_l.constprop.0+0x8a>
 8009e72:	1c53      	adds	r3, r2, #1
 8009e74:	d108      	bne.n	8009e88 <_strtol_l.constprop.0+0xdc>
 8009e76:	2322      	movs	r3, #34	@ 0x22
 8009e78:	f8ce 3000 	str.w	r3, [lr]
 8009e7c:	4660      	mov	r0, ip
 8009e7e:	f1b8 0f00 	cmp.w	r8, #0
 8009e82:	d0a0      	beq.n	8009dc6 <_strtol_l.constprop.0+0x1a>
 8009e84:	1e69      	subs	r1, r5, #1
 8009e86:	e006      	b.n	8009e96 <_strtol_l.constprop.0+0xea>
 8009e88:	b106      	cbz	r6, 8009e8c <_strtol_l.constprop.0+0xe0>
 8009e8a:	4240      	negs	r0, r0
 8009e8c:	f1b8 0f00 	cmp.w	r8, #0
 8009e90:	d099      	beq.n	8009dc6 <_strtol_l.constprop.0+0x1a>
 8009e92:	2a00      	cmp	r2, #0
 8009e94:	d1f6      	bne.n	8009e84 <_strtol_l.constprop.0+0xd8>
 8009e96:	f8c8 1000 	str.w	r1, [r8]
 8009e9a:	e794      	b.n	8009dc6 <_strtol_l.constprop.0+0x1a>
 8009e9c:	0800b471 	.word	0x0800b471

08009ea0 <_strtol_r>:
 8009ea0:	f7ff bf84 	b.w	8009dac <_strtol_l.constprop.0>

08009ea4 <__ssputs_r>:
 8009ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ea8:	688e      	ldr	r6, [r1, #8]
 8009eaa:	461f      	mov	r7, r3
 8009eac:	42be      	cmp	r6, r7
 8009eae:	680b      	ldr	r3, [r1, #0]
 8009eb0:	4682      	mov	sl, r0
 8009eb2:	460c      	mov	r4, r1
 8009eb4:	4690      	mov	r8, r2
 8009eb6:	d82d      	bhi.n	8009f14 <__ssputs_r+0x70>
 8009eb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ebc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009ec0:	d026      	beq.n	8009f10 <__ssputs_r+0x6c>
 8009ec2:	6965      	ldr	r5, [r4, #20]
 8009ec4:	6909      	ldr	r1, [r1, #16]
 8009ec6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009eca:	eba3 0901 	sub.w	r9, r3, r1
 8009ece:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ed2:	1c7b      	adds	r3, r7, #1
 8009ed4:	444b      	add	r3, r9
 8009ed6:	106d      	asrs	r5, r5, #1
 8009ed8:	429d      	cmp	r5, r3
 8009eda:	bf38      	it	cc
 8009edc:	461d      	movcc	r5, r3
 8009ede:	0553      	lsls	r3, r2, #21
 8009ee0:	d527      	bpl.n	8009f32 <__ssputs_r+0x8e>
 8009ee2:	4629      	mov	r1, r5
 8009ee4:	f7fe fc1c 	bl	8008720 <_malloc_r>
 8009ee8:	4606      	mov	r6, r0
 8009eea:	b360      	cbz	r0, 8009f46 <__ssputs_r+0xa2>
 8009eec:	6921      	ldr	r1, [r4, #16]
 8009eee:	464a      	mov	r2, r9
 8009ef0:	f7fd fd3f 	bl	8007972 <memcpy>
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009efe:	81a3      	strh	r3, [r4, #12]
 8009f00:	6126      	str	r6, [r4, #16]
 8009f02:	6165      	str	r5, [r4, #20]
 8009f04:	444e      	add	r6, r9
 8009f06:	eba5 0509 	sub.w	r5, r5, r9
 8009f0a:	6026      	str	r6, [r4, #0]
 8009f0c:	60a5      	str	r5, [r4, #8]
 8009f0e:	463e      	mov	r6, r7
 8009f10:	42be      	cmp	r6, r7
 8009f12:	d900      	bls.n	8009f16 <__ssputs_r+0x72>
 8009f14:	463e      	mov	r6, r7
 8009f16:	6820      	ldr	r0, [r4, #0]
 8009f18:	4632      	mov	r2, r6
 8009f1a:	4641      	mov	r1, r8
 8009f1c:	f000 f9c6 	bl	800a2ac <memmove>
 8009f20:	68a3      	ldr	r3, [r4, #8]
 8009f22:	1b9b      	subs	r3, r3, r6
 8009f24:	60a3      	str	r3, [r4, #8]
 8009f26:	6823      	ldr	r3, [r4, #0]
 8009f28:	4433      	add	r3, r6
 8009f2a:	6023      	str	r3, [r4, #0]
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f32:	462a      	mov	r2, r5
 8009f34:	f000 fd7d 	bl	800aa32 <_realloc_r>
 8009f38:	4606      	mov	r6, r0
 8009f3a:	2800      	cmp	r0, #0
 8009f3c:	d1e0      	bne.n	8009f00 <__ssputs_r+0x5c>
 8009f3e:	6921      	ldr	r1, [r4, #16]
 8009f40:	4650      	mov	r0, sl
 8009f42:	f7fe fb79 	bl	8008638 <_free_r>
 8009f46:	230c      	movs	r3, #12
 8009f48:	f8ca 3000 	str.w	r3, [sl]
 8009f4c:	89a3      	ldrh	r3, [r4, #12]
 8009f4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f52:	81a3      	strh	r3, [r4, #12]
 8009f54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f58:	e7e9      	b.n	8009f2e <__ssputs_r+0x8a>
	...

08009f5c <_svfiprintf_r>:
 8009f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f60:	4698      	mov	r8, r3
 8009f62:	898b      	ldrh	r3, [r1, #12]
 8009f64:	061b      	lsls	r3, r3, #24
 8009f66:	b09d      	sub	sp, #116	@ 0x74
 8009f68:	4607      	mov	r7, r0
 8009f6a:	460d      	mov	r5, r1
 8009f6c:	4614      	mov	r4, r2
 8009f6e:	d510      	bpl.n	8009f92 <_svfiprintf_r+0x36>
 8009f70:	690b      	ldr	r3, [r1, #16]
 8009f72:	b973      	cbnz	r3, 8009f92 <_svfiprintf_r+0x36>
 8009f74:	2140      	movs	r1, #64	@ 0x40
 8009f76:	f7fe fbd3 	bl	8008720 <_malloc_r>
 8009f7a:	6028      	str	r0, [r5, #0]
 8009f7c:	6128      	str	r0, [r5, #16]
 8009f7e:	b930      	cbnz	r0, 8009f8e <_svfiprintf_r+0x32>
 8009f80:	230c      	movs	r3, #12
 8009f82:	603b      	str	r3, [r7, #0]
 8009f84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f88:	b01d      	add	sp, #116	@ 0x74
 8009f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8e:	2340      	movs	r3, #64	@ 0x40
 8009f90:	616b      	str	r3, [r5, #20]
 8009f92:	2300      	movs	r3, #0
 8009f94:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f96:	2320      	movs	r3, #32
 8009f98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fa0:	2330      	movs	r3, #48	@ 0x30
 8009fa2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a140 <_svfiprintf_r+0x1e4>
 8009fa6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009faa:	f04f 0901 	mov.w	r9, #1
 8009fae:	4623      	mov	r3, r4
 8009fb0:	469a      	mov	sl, r3
 8009fb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fb6:	b10a      	cbz	r2, 8009fbc <_svfiprintf_r+0x60>
 8009fb8:	2a25      	cmp	r2, #37	@ 0x25
 8009fba:	d1f9      	bne.n	8009fb0 <_svfiprintf_r+0x54>
 8009fbc:	ebba 0b04 	subs.w	fp, sl, r4
 8009fc0:	d00b      	beq.n	8009fda <_svfiprintf_r+0x7e>
 8009fc2:	465b      	mov	r3, fp
 8009fc4:	4622      	mov	r2, r4
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	4638      	mov	r0, r7
 8009fca:	f7ff ff6b 	bl	8009ea4 <__ssputs_r>
 8009fce:	3001      	adds	r0, #1
 8009fd0:	f000 80a7 	beq.w	800a122 <_svfiprintf_r+0x1c6>
 8009fd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fd6:	445a      	add	r2, fp
 8009fd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fda:	f89a 3000 	ldrb.w	r3, [sl]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f000 809f 	beq.w	800a122 <_svfiprintf_r+0x1c6>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009fea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fee:	f10a 0a01 	add.w	sl, sl, #1
 8009ff2:	9304      	str	r3, [sp, #16]
 8009ff4:	9307      	str	r3, [sp, #28]
 8009ff6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ffa:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ffc:	4654      	mov	r4, sl
 8009ffe:	2205      	movs	r2, #5
 800a000:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a004:	484e      	ldr	r0, [pc, #312]	@ (800a140 <_svfiprintf_r+0x1e4>)
 800a006:	f7f6 f8eb 	bl	80001e0 <memchr>
 800a00a:	9a04      	ldr	r2, [sp, #16]
 800a00c:	b9d8      	cbnz	r0, 800a046 <_svfiprintf_r+0xea>
 800a00e:	06d0      	lsls	r0, r2, #27
 800a010:	bf44      	itt	mi
 800a012:	2320      	movmi	r3, #32
 800a014:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a018:	0711      	lsls	r1, r2, #28
 800a01a:	bf44      	itt	mi
 800a01c:	232b      	movmi	r3, #43	@ 0x2b
 800a01e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a022:	f89a 3000 	ldrb.w	r3, [sl]
 800a026:	2b2a      	cmp	r3, #42	@ 0x2a
 800a028:	d015      	beq.n	800a056 <_svfiprintf_r+0xfa>
 800a02a:	9a07      	ldr	r2, [sp, #28]
 800a02c:	4654      	mov	r4, sl
 800a02e:	2000      	movs	r0, #0
 800a030:	f04f 0c0a 	mov.w	ip, #10
 800a034:	4621      	mov	r1, r4
 800a036:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a03a:	3b30      	subs	r3, #48	@ 0x30
 800a03c:	2b09      	cmp	r3, #9
 800a03e:	d94b      	bls.n	800a0d8 <_svfiprintf_r+0x17c>
 800a040:	b1b0      	cbz	r0, 800a070 <_svfiprintf_r+0x114>
 800a042:	9207      	str	r2, [sp, #28]
 800a044:	e014      	b.n	800a070 <_svfiprintf_r+0x114>
 800a046:	eba0 0308 	sub.w	r3, r0, r8
 800a04a:	fa09 f303 	lsl.w	r3, r9, r3
 800a04e:	4313      	orrs	r3, r2
 800a050:	9304      	str	r3, [sp, #16]
 800a052:	46a2      	mov	sl, r4
 800a054:	e7d2      	b.n	8009ffc <_svfiprintf_r+0xa0>
 800a056:	9b03      	ldr	r3, [sp, #12]
 800a058:	1d19      	adds	r1, r3, #4
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	9103      	str	r1, [sp, #12]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	bfbb      	ittet	lt
 800a062:	425b      	neglt	r3, r3
 800a064:	f042 0202 	orrlt.w	r2, r2, #2
 800a068:	9307      	strge	r3, [sp, #28]
 800a06a:	9307      	strlt	r3, [sp, #28]
 800a06c:	bfb8      	it	lt
 800a06e:	9204      	strlt	r2, [sp, #16]
 800a070:	7823      	ldrb	r3, [r4, #0]
 800a072:	2b2e      	cmp	r3, #46	@ 0x2e
 800a074:	d10a      	bne.n	800a08c <_svfiprintf_r+0x130>
 800a076:	7863      	ldrb	r3, [r4, #1]
 800a078:	2b2a      	cmp	r3, #42	@ 0x2a
 800a07a:	d132      	bne.n	800a0e2 <_svfiprintf_r+0x186>
 800a07c:	9b03      	ldr	r3, [sp, #12]
 800a07e:	1d1a      	adds	r2, r3, #4
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	9203      	str	r2, [sp, #12]
 800a084:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a088:	3402      	adds	r4, #2
 800a08a:	9305      	str	r3, [sp, #20]
 800a08c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a150 <_svfiprintf_r+0x1f4>
 800a090:	7821      	ldrb	r1, [r4, #0]
 800a092:	2203      	movs	r2, #3
 800a094:	4650      	mov	r0, sl
 800a096:	f7f6 f8a3 	bl	80001e0 <memchr>
 800a09a:	b138      	cbz	r0, 800a0ac <_svfiprintf_r+0x150>
 800a09c:	9b04      	ldr	r3, [sp, #16]
 800a09e:	eba0 000a 	sub.w	r0, r0, sl
 800a0a2:	2240      	movs	r2, #64	@ 0x40
 800a0a4:	4082      	lsls	r2, r0
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	3401      	adds	r4, #1
 800a0aa:	9304      	str	r3, [sp, #16]
 800a0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0b0:	4824      	ldr	r0, [pc, #144]	@ (800a144 <_svfiprintf_r+0x1e8>)
 800a0b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0b6:	2206      	movs	r2, #6
 800a0b8:	f7f6 f892 	bl	80001e0 <memchr>
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	d036      	beq.n	800a12e <_svfiprintf_r+0x1d2>
 800a0c0:	4b21      	ldr	r3, [pc, #132]	@ (800a148 <_svfiprintf_r+0x1ec>)
 800a0c2:	bb1b      	cbnz	r3, 800a10c <_svfiprintf_r+0x1b0>
 800a0c4:	9b03      	ldr	r3, [sp, #12]
 800a0c6:	3307      	adds	r3, #7
 800a0c8:	f023 0307 	bic.w	r3, r3, #7
 800a0cc:	3308      	adds	r3, #8
 800a0ce:	9303      	str	r3, [sp, #12]
 800a0d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0d2:	4433      	add	r3, r6
 800a0d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0d6:	e76a      	b.n	8009fae <_svfiprintf_r+0x52>
 800a0d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0dc:	460c      	mov	r4, r1
 800a0de:	2001      	movs	r0, #1
 800a0e0:	e7a8      	b.n	800a034 <_svfiprintf_r+0xd8>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	3401      	adds	r4, #1
 800a0e6:	9305      	str	r3, [sp, #20]
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	f04f 0c0a 	mov.w	ip, #10
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0f4:	3a30      	subs	r2, #48	@ 0x30
 800a0f6:	2a09      	cmp	r2, #9
 800a0f8:	d903      	bls.n	800a102 <_svfiprintf_r+0x1a6>
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d0c6      	beq.n	800a08c <_svfiprintf_r+0x130>
 800a0fe:	9105      	str	r1, [sp, #20]
 800a100:	e7c4      	b.n	800a08c <_svfiprintf_r+0x130>
 800a102:	fb0c 2101 	mla	r1, ip, r1, r2
 800a106:	4604      	mov	r4, r0
 800a108:	2301      	movs	r3, #1
 800a10a:	e7f0      	b.n	800a0ee <_svfiprintf_r+0x192>
 800a10c:	ab03      	add	r3, sp, #12
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	462a      	mov	r2, r5
 800a112:	4b0e      	ldr	r3, [pc, #56]	@ (800a14c <_svfiprintf_r+0x1f0>)
 800a114:	a904      	add	r1, sp, #16
 800a116:	4638      	mov	r0, r7
 800a118:	f7fc fc64 	bl	80069e4 <_printf_float>
 800a11c:	1c42      	adds	r2, r0, #1
 800a11e:	4606      	mov	r6, r0
 800a120:	d1d6      	bne.n	800a0d0 <_svfiprintf_r+0x174>
 800a122:	89ab      	ldrh	r3, [r5, #12]
 800a124:	065b      	lsls	r3, r3, #25
 800a126:	f53f af2d 	bmi.w	8009f84 <_svfiprintf_r+0x28>
 800a12a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a12c:	e72c      	b.n	8009f88 <_svfiprintf_r+0x2c>
 800a12e:	ab03      	add	r3, sp, #12
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	462a      	mov	r2, r5
 800a134:	4b05      	ldr	r3, [pc, #20]	@ (800a14c <_svfiprintf_r+0x1f0>)
 800a136:	a904      	add	r1, sp, #16
 800a138:	4638      	mov	r0, r7
 800a13a:	f7fc feeb 	bl	8006f14 <_printf_i>
 800a13e:	e7ed      	b.n	800a11c <_svfiprintf_r+0x1c0>
 800a140:	0800b571 	.word	0x0800b571
 800a144:	0800b57b 	.word	0x0800b57b
 800a148:	080069e5 	.word	0x080069e5
 800a14c:	08009ea5 	.word	0x08009ea5
 800a150:	0800b577 	.word	0x0800b577

0800a154 <__sflush_r>:
 800a154:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a15c:	0716      	lsls	r6, r2, #28
 800a15e:	4605      	mov	r5, r0
 800a160:	460c      	mov	r4, r1
 800a162:	d454      	bmi.n	800a20e <__sflush_r+0xba>
 800a164:	684b      	ldr	r3, [r1, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	dc02      	bgt.n	800a170 <__sflush_r+0x1c>
 800a16a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	dd48      	ble.n	800a202 <__sflush_r+0xae>
 800a170:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a172:	2e00      	cmp	r6, #0
 800a174:	d045      	beq.n	800a202 <__sflush_r+0xae>
 800a176:	2300      	movs	r3, #0
 800a178:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a17c:	682f      	ldr	r7, [r5, #0]
 800a17e:	6a21      	ldr	r1, [r4, #32]
 800a180:	602b      	str	r3, [r5, #0]
 800a182:	d030      	beq.n	800a1e6 <__sflush_r+0x92>
 800a184:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a186:	89a3      	ldrh	r3, [r4, #12]
 800a188:	0759      	lsls	r1, r3, #29
 800a18a:	d505      	bpl.n	800a198 <__sflush_r+0x44>
 800a18c:	6863      	ldr	r3, [r4, #4]
 800a18e:	1ad2      	subs	r2, r2, r3
 800a190:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a192:	b10b      	cbz	r3, 800a198 <__sflush_r+0x44>
 800a194:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a196:	1ad2      	subs	r2, r2, r3
 800a198:	2300      	movs	r3, #0
 800a19a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a19c:	6a21      	ldr	r1, [r4, #32]
 800a19e:	4628      	mov	r0, r5
 800a1a0:	47b0      	blx	r6
 800a1a2:	1c43      	adds	r3, r0, #1
 800a1a4:	89a3      	ldrh	r3, [r4, #12]
 800a1a6:	d106      	bne.n	800a1b6 <__sflush_r+0x62>
 800a1a8:	6829      	ldr	r1, [r5, #0]
 800a1aa:	291d      	cmp	r1, #29
 800a1ac:	d82b      	bhi.n	800a206 <__sflush_r+0xb2>
 800a1ae:	4a2a      	ldr	r2, [pc, #168]	@ (800a258 <__sflush_r+0x104>)
 800a1b0:	410a      	asrs	r2, r1
 800a1b2:	07d6      	lsls	r6, r2, #31
 800a1b4:	d427      	bmi.n	800a206 <__sflush_r+0xb2>
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	6062      	str	r2, [r4, #4]
 800a1ba:	04d9      	lsls	r1, r3, #19
 800a1bc:	6922      	ldr	r2, [r4, #16]
 800a1be:	6022      	str	r2, [r4, #0]
 800a1c0:	d504      	bpl.n	800a1cc <__sflush_r+0x78>
 800a1c2:	1c42      	adds	r2, r0, #1
 800a1c4:	d101      	bne.n	800a1ca <__sflush_r+0x76>
 800a1c6:	682b      	ldr	r3, [r5, #0]
 800a1c8:	b903      	cbnz	r3, 800a1cc <__sflush_r+0x78>
 800a1ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800a1cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1ce:	602f      	str	r7, [r5, #0]
 800a1d0:	b1b9      	cbz	r1, 800a202 <__sflush_r+0xae>
 800a1d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1d6:	4299      	cmp	r1, r3
 800a1d8:	d002      	beq.n	800a1e0 <__sflush_r+0x8c>
 800a1da:	4628      	mov	r0, r5
 800a1dc:	f7fe fa2c 	bl	8008638 <_free_r>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a1e4:	e00d      	b.n	800a202 <__sflush_r+0xae>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	47b0      	blx	r6
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	1c50      	adds	r0, r2, #1
 800a1f0:	d1c9      	bne.n	800a186 <__sflush_r+0x32>
 800a1f2:	682b      	ldr	r3, [r5, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d0c6      	beq.n	800a186 <__sflush_r+0x32>
 800a1f8:	2b1d      	cmp	r3, #29
 800a1fa:	d001      	beq.n	800a200 <__sflush_r+0xac>
 800a1fc:	2b16      	cmp	r3, #22
 800a1fe:	d11e      	bne.n	800a23e <__sflush_r+0xea>
 800a200:	602f      	str	r7, [r5, #0]
 800a202:	2000      	movs	r0, #0
 800a204:	e022      	b.n	800a24c <__sflush_r+0xf8>
 800a206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a20a:	b21b      	sxth	r3, r3
 800a20c:	e01b      	b.n	800a246 <__sflush_r+0xf2>
 800a20e:	690f      	ldr	r7, [r1, #16]
 800a210:	2f00      	cmp	r7, #0
 800a212:	d0f6      	beq.n	800a202 <__sflush_r+0xae>
 800a214:	0793      	lsls	r3, r2, #30
 800a216:	680e      	ldr	r6, [r1, #0]
 800a218:	bf08      	it	eq
 800a21a:	694b      	ldreq	r3, [r1, #20]
 800a21c:	600f      	str	r7, [r1, #0]
 800a21e:	bf18      	it	ne
 800a220:	2300      	movne	r3, #0
 800a222:	eba6 0807 	sub.w	r8, r6, r7
 800a226:	608b      	str	r3, [r1, #8]
 800a228:	f1b8 0f00 	cmp.w	r8, #0
 800a22c:	dde9      	ble.n	800a202 <__sflush_r+0xae>
 800a22e:	6a21      	ldr	r1, [r4, #32]
 800a230:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a232:	4643      	mov	r3, r8
 800a234:	463a      	mov	r2, r7
 800a236:	4628      	mov	r0, r5
 800a238:	47b0      	blx	r6
 800a23a:	2800      	cmp	r0, #0
 800a23c:	dc08      	bgt.n	800a250 <__sflush_r+0xfc>
 800a23e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a246:	81a3      	strh	r3, [r4, #12]
 800a248:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a250:	4407      	add	r7, r0
 800a252:	eba8 0800 	sub.w	r8, r8, r0
 800a256:	e7e7      	b.n	800a228 <__sflush_r+0xd4>
 800a258:	dfbffffe 	.word	0xdfbffffe

0800a25c <_fflush_r>:
 800a25c:	b538      	push	{r3, r4, r5, lr}
 800a25e:	690b      	ldr	r3, [r1, #16]
 800a260:	4605      	mov	r5, r0
 800a262:	460c      	mov	r4, r1
 800a264:	b913      	cbnz	r3, 800a26c <_fflush_r+0x10>
 800a266:	2500      	movs	r5, #0
 800a268:	4628      	mov	r0, r5
 800a26a:	bd38      	pop	{r3, r4, r5, pc}
 800a26c:	b118      	cbz	r0, 800a276 <_fflush_r+0x1a>
 800a26e:	6a03      	ldr	r3, [r0, #32]
 800a270:	b90b      	cbnz	r3, 800a276 <_fflush_r+0x1a>
 800a272:	f7fd fa0f 	bl	8007694 <__sinit>
 800a276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d0f3      	beq.n	800a266 <_fflush_r+0xa>
 800a27e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a280:	07d0      	lsls	r0, r2, #31
 800a282:	d404      	bmi.n	800a28e <_fflush_r+0x32>
 800a284:	0599      	lsls	r1, r3, #22
 800a286:	d402      	bmi.n	800a28e <_fflush_r+0x32>
 800a288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a28a:	f7fd fb70 	bl	800796e <__retarget_lock_acquire_recursive>
 800a28e:	4628      	mov	r0, r5
 800a290:	4621      	mov	r1, r4
 800a292:	f7ff ff5f 	bl	800a154 <__sflush_r>
 800a296:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a298:	07da      	lsls	r2, r3, #31
 800a29a:	4605      	mov	r5, r0
 800a29c:	d4e4      	bmi.n	800a268 <_fflush_r+0xc>
 800a29e:	89a3      	ldrh	r3, [r4, #12]
 800a2a0:	059b      	lsls	r3, r3, #22
 800a2a2:	d4e1      	bmi.n	800a268 <_fflush_r+0xc>
 800a2a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2a6:	f7fd fb63 	bl	8007970 <__retarget_lock_release_recursive>
 800a2aa:	e7dd      	b.n	800a268 <_fflush_r+0xc>

0800a2ac <memmove>:
 800a2ac:	4288      	cmp	r0, r1
 800a2ae:	b510      	push	{r4, lr}
 800a2b0:	eb01 0402 	add.w	r4, r1, r2
 800a2b4:	d902      	bls.n	800a2bc <memmove+0x10>
 800a2b6:	4284      	cmp	r4, r0
 800a2b8:	4623      	mov	r3, r4
 800a2ba:	d807      	bhi.n	800a2cc <memmove+0x20>
 800a2bc:	1e43      	subs	r3, r0, #1
 800a2be:	42a1      	cmp	r1, r4
 800a2c0:	d008      	beq.n	800a2d4 <memmove+0x28>
 800a2c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2ca:	e7f8      	b.n	800a2be <memmove+0x12>
 800a2cc:	4402      	add	r2, r0
 800a2ce:	4601      	mov	r1, r0
 800a2d0:	428a      	cmp	r2, r1
 800a2d2:	d100      	bne.n	800a2d6 <memmove+0x2a>
 800a2d4:	bd10      	pop	{r4, pc}
 800a2d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2de:	e7f7      	b.n	800a2d0 <memmove+0x24>

0800a2e0 <strncmp>:
 800a2e0:	b510      	push	{r4, lr}
 800a2e2:	b16a      	cbz	r2, 800a300 <strncmp+0x20>
 800a2e4:	3901      	subs	r1, #1
 800a2e6:	1884      	adds	r4, r0, r2
 800a2e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d103      	bne.n	800a2fc <strncmp+0x1c>
 800a2f4:	42a0      	cmp	r0, r4
 800a2f6:	d001      	beq.n	800a2fc <strncmp+0x1c>
 800a2f8:	2a00      	cmp	r2, #0
 800a2fa:	d1f5      	bne.n	800a2e8 <strncmp+0x8>
 800a2fc:	1ad0      	subs	r0, r2, r3
 800a2fe:	bd10      	pop	{r4, pc}
 800a300:	4610      	mov	r0, r2
 800a302:	e7fc      	b.n	800a2fe <strncmp+0x1e>

0800a304 <_sbrk_r>:
 800a304:	b538      	push	{r3, r4, r5, lr}
 800a306:	4d06      	ldr	r5, [pc, #24]	@ (800a320 <_sbrk_r+0x1c>)
 800a308:	2300      	movs	r3, #0
 800a30a:	4604      	mov	r4, r0
 800a30c:	4608      	mov	r0, r1
 800a30e:	602b      	str	r3, [r5, #0]
 800a310:	f7f7 ff44 	bl	800219c <_sbrk>
 800a314:	1c43      	adds	r3, r0, #1
 800a316:	d102      	bne.n	800a31e <_sbrk_r+0x1a>
 800a318:	682b      	ldr	r3, [r5, #0]
 800a31a:	b103      	cbz	r3, 800a31e <_sbrk_r+0x1a>
 800a31c:	6023      	str	r3, [r4, #0]
 800a31e:	bd38      	pop	{r3, r4, r5, pc}
 800a320:	200044b4 	.word	0x200044b4
 800a324:	00000000 	.word	0x00000000

0800a328 <nan>:
 800a328:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a330 <nan+0x8>
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	00000000 	.word	0x00000000
 800a334:	7ff80000 	.word	0x7ff80000

0800a338 <__assert_func>:
 800a338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a33a:	4614      	mov	r4, r2
 800a33c:	461a      	mov	r2, r3
 800a33e:	4b09      	ldr	r3, [pc, #36]	@ (800a364 <__assert_func+0x2c>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4605      	mov	r5, r0
 800a344:	68d8      	ldr	r0, [r3, #12]
 800a346:	b954      	cbnz	r4, 800a35e <__assert_func+0x26>
 800a348:	4b07      	ldr	r3, [pc, #28]	@ (800a368 <__assert_func+0x30>)
 800a34a:	461c      	mov	r4, r3
 800a34c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a350:	9100      	str	r1, [sp, #0]
 800a352:	462b      	mov	r3, r5
 800a354:	4905      	ldr	r1, [pc, #20]	@ (800a36c <__assert_func+0x34>)
 800a356:	f000 fba7 	bl	800aaa8 <fiprintf>
 800a35a:	f000 fbb7 	bl	800aacc <abort>
 800a35e:	4b04      	ldr	r3, [pc, #16]	@ (800a370 <__assert_func+0x38>)
 800a360:	e7f4      	b.n	800a34c <__assert_func+0x14>
 800a362:	bf00      	nop
 800a364:	2000001c 	.word	0x2000001c
 800a368:	0800b5c5 	.word	0x0800b5c5
 800a36c:	0800b597 	.word	0x0800b597
 800a370:	0800b58a 	.word	0x0800b58a

0800a374 <_calloc_r>:
 800a374:	b570      	push	{r4, r5, r6, lr}
 800a376:	fba1 5402 	umull	r5, r4, r1, r2
 800a37a:	b93c      	cbnz	r4, 800a38c <_calloc_r+0x18>
 800a37c:	4629      	mov	r1, r5
 800a37e:	f7fe f9cf 	bl	8008720 <_malloc_r>
 800a382:	4606      	mov	r6, r0
 800a384:	b928      	cbnz	r0, 800a392 <_calloc_r+0x1e>
 800a386:	2600      	movs	r6, #0
 800a388:	4630      	mov	r0, r6
 800a38a:	bd70      	pop	{r4, r5, r6, pc}
 800a38c:	220c      	movs	r2, #12
 800a38e:	6002      	str	r2, [r0, #0]
 800a390:	e7f9      	b.n	800a386 <_calloc_r+0x12>
 800a392:	462a      	mov	r2, r5
 800a394:	4621      	mov	r1, r4
 800a396:	f7fd fa16 	bl	80077c6 <memset>
 800a39a:	e7f5      	b.n	800a388 <_calloc_r+0x14>

0800a39c <rshift>:
 800a39c:	6903      	ldr	r3, [r0, #16]
 800a39e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a3a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a3aa:	f100 0414 	add.w	r4, r0, #20
 800a3ae:	dd45      	ble.n	800a43c <rshift+0xa0>
 800a3b0:	f011 011f 	ands.w	r1, r1, #31
 800a3b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3bc:	d10c      	bne.n	800a3d8 <rshift+0x3c>
 800a3be:	f100 0710 	add.w	r7, r0, #16
 800a3c2:	4629      	mov	r1, r5
 800a3c4:	42b1      	cmp	r1, r6
 800a3c6:	d334      	bcc.n	800a432 <rshift+0x96>
 800a3c8:	1a9b      	subs	r3, r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	1eea      	subs	r2, r5, #3
 800a3ce:	4296      	cmp	r6, r2
 800a3d0:	bf38      	it	cc
 800a3d2:	2300      	movcc	r3, #0
 800a3d4:	4423      	add	r3, r4
 800a3d6:	e015      	b.n	800a404 <rshift+0x68>
 800a3d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a3dc:	f1c1 0820 	rsb	r8, r1, #32
 800a3e0:	40cf      	lsrs	r7, r1
 800a3e2:	f105 0e04 	add.w	lr, r5, #4
 800a3e6:	46a1      	mov	r9, r4
 800a3e8:	4576      	cmp	r6, lr
 800a3ea:	46f4      	mov	ip, lr
 800a3ec:	d815      	bhi.n	800a41a <rshift+0x7e>
 800a3ee:	1a9a      	subs	r2, r3, r2
 800a3f0:	0092      	lsls	r2, r2, #2
 800a3f2:	3a04      	subs	r2, #4
 800a3f4:	3501      	adds	r5, #1
 800a3f6:	42ae      	cmp	r6, r5
 800a3f8:	bf38      	it	cc
 800a3fa:	2200      	movcc	r2, #0
 800a3fc:	18a3      	adds	r3, r4, r2
 800a3fe:	50a7      	str	r7, [r4, r2]
 800a400:	b107      	cbz	r7, 800a404 <rshift+0x68>
 800a402:	3304      	adds	r3, #4
 800a404:	1b1a      	subs	r2, r3, r4
 800a406:	42a3      	cmp	r3, r4
 800a408:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a40c:	bf08      	it	eq
 800a40e:	2300      	moveq	r3, #0
 800a410:	6102      	str	r2, [r0, #16]
 800a412:	bf08      	it	eq
 800a414:	6143      	streq	r3, [r0, #20]
 800a416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a41a:	f8dc c000 	ldr.w	ip, [ip]
 800a41e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a422:	ea4c 0707 	orr.w	r7, ip, r7
 800a426:	f849 7b04 	str.w	r7, [r9], #4
 800a42a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a42e:	40cf      	lsrs	r7, r1
 800a430:	e7da      	b.n	800a3e8 <rshift+0x4c>
 800a432:	f851 cb04 	ldr.w	ip, [r1], #4
 800a436:	f847 cf04 	str.w	ip, [r7, #4]!
 800a43a:	e7c3      	b.n	800a3c4 <rshift+0x28>
 800a43c:	4623      	mov	r3, r4
 800a43e:	e7e1      	b.n	800a404 <rshift+0x68>

0800a440 <__hexdig_fun>:
 800a440:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a444:	2b09      	cmp	r3, #9
 800a446:	d802      	bhi.n	800a44e <__hexdig_fun+0xe>
 800a448:	3820      	subs	r0, #32
 800a44a:	b2c0      	uxtb	r0, r0
 800a44c:	4770      	bx	lr
 800a44e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a452:	2b05      	cmp	r3, #5
 800a454:	d801      	bhi.n	800a45a <__hexdig_fun+0x1a>
 800a456:	3847      	subs	r0, #71	@ 0x47
 800a458:	e7f7      	b.n	800a44a <__hexdig_fun+0xa>
 800a45a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a45e:	2b05      	cmp	r3, #5
 800a460:	d801      	bhi.n	800a466 <__hexdig_fun+0x26>
 800a462:	3827      	subs	r0, #39	@ 0x27
 800a464:	e7f1      	b.n	800a44a <__hexdig_fun+0xa>
 800a466:	2000      	movs	r0, #0
 800a468:	4770      	bx	lr
	...

0800a46c <__gethex>:
 800a46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a470:	b085      	sub	sp, #20
 800a472:	468a      	mov	sl, r1
 800a474:	9302      	str	r3, [sp, #8]
 800a476:	680b      	ldr	r3, [r1, #0]
 800a478:	9001      	str	r0, [sp, #4]
 800a47a:	4690      	mov	r8, r2
 800a47c:	1c9c      	adds	r4, r3, #2
 800a47e:	46a1      	mov	r9, r4
 800a480:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a484:	2830      	cmp	r0, #48	@ 0x30
 800a486:	d0fa      	beq.n	800a47e <__gethex+0x12>
 800a488:	eba9 0303 	sub.w	r3, r9, r3
 800a48c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a490:	f7ff ffd6 	bl	800a440 <__hexdig_fun>
 800a494:	4605      	mov	r5, r0
 800a496:	2800      	cmp	r0, #0
 800a498:	d168      	bne.n	800a56c <__gethex+0x100>
 800a49a:	49a0      	ldr	r1, [pc, #640]	@ (800a71c <__gethex+0x2b0>)
 800a49c:	2201      	movs	r2, #1
 800a49e:	4648      	mov	r0, r9
 800a4a0:	f7ff ff1e 	bl	800a2e0 <strncmp>
 800a4a4:	4607      	mov	r7, r0
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d167      	bne.n	800a57a <__gethex+0x10e>
 800a4aa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a4ae:	4626      	mov	r6, r4
 800a4b0:	f7ff ffc6 	bl	800a440 <__hexdig_fun>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	d062      	beq.n	800a57e <__gethex+0x112>
 800a4b8:	4623      	mov	r3, r4
 800a4ba:	7818      	ldrb	r0, [r3, #0]
 800a4bc:	2830      	cmp	r0, #48	@ 0x30
 800a4be:	4699      	mov	r9, r3
 800a4c0:	f103 0301 	add.w	r3, r3, #1
 800a4c4:	d0f9      	beq.n	800a4ba <__gethex+0x4e>
 800a4c6:	f7ff ffbb 	bl	800a440 <__hexdig_fun>
 800a4ca:	fab0 f580 	clz	r5, r0
 800a4ce:	096d      	lsrs	r5, r5, #5
 800a4d0:	f04f 0b01 	mov.w	fp, #1
 800a4d4:	464a      	mov	r2, r9
 800a4d6:	4616      	mov	r6, r2
 800a4d8:	3201      	adds	r2, #1
 800a4da:	7830      	ldrb	r0, [r6, #0]
 800a4dc:	f7ff ffb0 	bl	800a440 <__hexdig_fun>
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	d1f8      	bne.n	800a4d6 <__gethex+0x6a>
 800a4e4:	498d      	ldr	r1, [pc, #564]	@ (800a71c <__gethex+0x2b0>)
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	f7ff fef9 	bl	800a2e0 <strncmp>
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	d13f      	bne.n	800a572 <__gethex+0x106>
 800a4f2:	b944      	cbnz	r4, 800a506 <__gethex+0x9a>
 800a4f4:	1c74      	adds	r4, r6, #1
 800a4f6:	4622      	mov	r2, r4
 800a4f8:	4616      	mov	r6, r2
 800a4fa:	3201      	adds	r2, #1
 800a4fc:	7830      	ldrb	r0, [r6, #0]
 800a4fe:	f7ff ff9f 	bl	800a440 <__hexdig_fun>
 800a502:	2800      	cmp	r0, #0
 800a504:	d1f8      	bne.n	800a4f8 <__gethex+0x8c>
 800a506:	1ba4      	subs	r4, r4, r6
 800a508:	00a7      	lsls	r7, r4, #2
 800a50a:	7833      	ldrb	r3, [r6, #0]
 800a50c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a510:	2b50      	cmp	r3, #80	@ 0x50
 800a512:	d13e      	bne.n	800a592 <__gethex+0x126>
 800a514:	7873      	ldrb	r3, [r6, #1]
 800a516:	2b2b      	cmp	r3, #43	@ 0x2b
 800a518:	d033      	beq.n	800a582 <__gethex+0x116>
 800a51a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a51c:	d034      	beq.n	800a588 <__gethex+0x11c>
 800a51e:	1c71      	adds	r1, r6, #1
 800a520:	2400      	movs	r4, #0
 800a522:	7808      	ldrb	r0, [r1, #0]
 800a524:	f7ff ff8c 	bl	800a440 <__hexdig_fun>
 800a528:	1e43      	subs	r3, r0, #1
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2b18      	cmp	r3, #24
 800a52e:	d830      	bhi.n	800a592 <__gethex+0x126>
 800a530:	f1a0 0210 	sub.w	r2, r0, #16
 800a534:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a538:	f7ff ff82 	bl	800a440 <__hexdig_fun>
 800a53c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800a540:	fa5f fc8c 	uxtb.w	ip, ip
 800a544:	f1bc 0f18 	cmp.w	ip, #24
 800a548:	f04f 030a 	mov.w	r3, #10
 800a54c:	d91e      	bls.n	800a58c <__gethex+0x120>
 800a54e:	b104      	cbz	r4, 800a552 <__gethex+0xe6>
 800a550:	4252      	negs	r2, r2
 800a552:	4417      	add	r7, r2
 800a554:	f8ca 1000 	str.w	r1, [sl]
 800a558:	b1ed      	cbz	r5, 800a596 <__gethex+0x12a>
 800a55a:	f1bb 0f00 	cmp.w	fp, #0
 800a55e:	bf0c      	ite	eq
 800a560:	2506      	moveq	r5, #6
 800a562:	2500      	movne	r5, #0
 800a564:	4628      	mov	r0, r5
 800a566:	b005      	add	sp, #20
 800a568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56c:	2500      	movs	r5, #0
 800a56e:	462c      	mov	r4, r5
 800a570:	e7b0      	b.n	800a4d4 <__gethex+0x68>
 800a572:	2c00      	cmp	r4, #0
 800a574:	d1c7      	bne.n	800a506 <__gethex+0x9a>
 800a576:	4627      	mov	r7, r4
 800a578:	e7c7      	b.n	800a50a <__gethex+0x9e>
 800a57a:	464e      	mov	r6, r9
 800a57c:	462f      	mov	r7, r5
 800a57e:	2501      	movs	r5, #1
 800a580:	e7c3      	b.n	800a50a <__gethex+0x9e>
 800a582:	2400      	movs	r4, #0
 800a584:	1cb1      	adds	r1, r6, #2
 800a586:	e7cc      	b.n	800a522 <__gethex+0xb6>
 800a588:	2401      	movs	r4, #1
 800a58a:	e7fb      	b.n	800a584 <__gethex+0x118>
 800a58c:	fb03 0002 	mla	r0, r3, r2, r0
 800a590:	e7ce      	b.n	800a530 <__gethex+0xc4>
 800a592:	4631      	mov	r1, r6
 800a594:	e7de      	b.n	800a554 <__gethex+0xe8>
 800a596:	eba6 0309 	sub.w	r3, r6, r9
 800a59a:	3b01      	subs	r3, #1
 800a59c:	4629      	mov	r1, r5
 800a59e:	2b07      	cmp	r3, #7
 800a5a0:	dc0a      	bgt.n	800a5b8 <__gethex+0x14c>
 800a5a2:	9801      	ldr	r0, [sp, #4]
 800a5a4:	f7fe f948 	bl	8008838 <_Balloc>
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	b940      	cbnz	r0, 800a5be <__gethex+0x152>
 800a5ac:	4b5c      	ldr	r3, [pc, #368]	@ (800a720 <__gethex+0x2b4>)
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	21e4      	movs	r1, #228	@ 0xe4
 800a5b2:	485c      	ldr	r0, [pc, #368]	@ (800a724 <__gethex+0x2b8>)
 800a5b4:	f7ff fec0 	bl	800a338 <__assert_func>
 800a5b8:	3101      	adds	r1, #1
 800a5ba:	105b      	asrs	r3, r3, #1
 800a5bc:	e7ef      	b.n	800a59e <__gethex+0x132>
 800a5be:	f100 0a14 	add.w	sl, r0, #20
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	4655      	mov	r5, sl
 800a5c6:	469b      	mov	fp, r3
 800a5c8:	45b1      	cmp	r9, r6
 800a5ca:	d337      	bcc.n	800a63c <__gethex+0x1d0>
 800a5cc:	f845 bb04 	str.w	fp, [r5], #4
 800a5d0:	eba5 050a 	sub.w	r5, r5, sl
 800a5d4:	10ad      	asrs	r5, r5, #2
 800a5d6:	6125      	str	r5, [r4, #16]
 800a5d8:	4658      	mov	r0, fp
 800a5da:	f7fe fa1f 	bl	8008a1c <__hi0bits>
 800a5de:	016d      	lsls	r5, r5, #5
 800a5e0:	f8d8 6000 	ldr.w	r6, [r8]
 800a5e4:	1a2d      	subs	r5, r5, r0
 800a5e6:	42b5      	cmp	r5, r6
 800a5e8:	dd54      	ble.n	800a694 <__gethex+0x228>
 800a5ea:	1bad      	subs	r5, r5, r6
 800a5ec:	4629      	mov	r1, r5
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f7fe fdb3 	bl	800915a <__any_on>
 800a5f4:	4681      	mov	r9, r0
 800a5f6:	b178      	cbz	r0, 800a618 <__gethex+0x1ac>
 800a5f8:	1e6b      	subs	r3, r5, #1
 800a5fa:	1159      	asrs	r1, r3, #5
 800a5fc:	f003 021f 	and.w	r2, r3, #31
 800a600:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a604:	f04f 0901 	mov.w	r9, #1
 800a608:	fa09 f202 	lsl.w	r2, r9, r2
 800a60c:	420a      	tst	r2, r1
 800a60e:	d003      	beq.n	800a618 <__gethex+0x1ac>
 800a610:	454b      	cmp	r3, r9
 800a612:	dc36      	bgt.n	800a682 <__gethex+0x216>
 800a614:	f04f 0902 	mov.w	r9, #2
 800a618:	4629      	mov	r1, r5
 800a61a:	4620      	mov	r0, r4
 800a61c:	f7ff febe 	bl	800a39c <rshift>
 800a620:	442f      	add	r7, r5
 800a622:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a626:	42bb      	cmp	r3, r7
 800a628:	da42      	bge.n	800a6b0 <__gethex+0x244>
 800a62a:	9801      	ldr	r0, [sp, #4]
 800a62c:	4621      	mov	r1, r4
 800a62e:	f7fe f943 	bl	80088b8 <_Bfree>
 800a632:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a634:	2300      	movs	r3, #0
 800a636:	6013      	str	r3, [r2, #0]
 800a638:	25a3      	movs	r5, #163	@ 0xa3
 800a63a:	e793      	b.n	800a564 <__gethex+0xf8>
 800a63c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a640:	2a2e      	cmp	r2, #46	@ 0x2e
 800a642:	d012      	beq.n	800a66a <__gethex+0x1fe>
 800a644:	2b20      	cmp	r3, #32
 800a646:	d104      	bne.n	800a652 <__gethex+0x1e6>
 800a648:	f845 bb04 	str.w	fp, [r5], #4
 800a64c:	f04f 0b00 	mov.w	fp, #0
 800a650:	465b      	mov	r3, fp
 800a652:	7830      	ldrb	r0, [r6, #0]
 800a654:	9303      	str	r3, [sp, #12]
 800a656:	f7ff fef3 	bl	800a440 <__hexdig_fun>
 800a65a:	9b03      	ldr	r3, [sp, #12]
 800a65c:	f000 000f 	and.w	r0, r0, #15
 800a660:	4098      	lsls	r0, r3
 800a662:	ea4b 0b00 	orr.w	fp, fp, r0
 800a666:	3304      	adds	r3, #4
 800a668:	e7ae      	b.n	800a5c8 <__gethex+0x15c>
 800a66a:	45b1      	cmp	r9, r6
 800a66c:	d8ea      	bhi.n	800a644 <__gethex+0x1d8>
 800a66e:	492b      	ldr	r1, [pc, #172]	@ (800a71c <__gethex+0x2b0>)
 800a670:	9303      	str	r3, [sp, #12]
 800a672:	2201      	movs	r2, #1
 800a674:	4630      	mov	r0, r6
 800a676:	f7ff fe33 	bl	800a2e0 <strncmp>
 800a67a:	9b03      	ldr	r3, [sp, #12]
 800a67c:	2800      	cmp	r0, #0
 800a67e:	d1e1      	bne.n	800a644 <__gethex+0x1d8>
 800a680:	e7a2      	b.n	800a5c8 <__gethex+0x15c>
 800a682:	1ea9      	subs	r1, r5, #2
 800a684:	4620      	mov	r0, r4
 800a686:	f7fe fd68 	bl	800915a <__any_on>
 800a68a:	2800      	cmp	r0, #0
 800a68c:	d0c2      	beq.n	800a614 <__gethex+0x1a8>
 800a68e:	f04f 0903 	mov.w	r9, #3
 800a692:	e7c1      	b.n	800a618 <__gethex+0x1ac>
 800a694:	da09      	bge.n	800a6aa <__gethex+0x23e>
 800a696:	1b75      	subs	r5, r6, r5
 800a698:	4621      	mov	r1, r4
 800a69a:	9801      	ldr	r0, [sp, #4]
 800a69c:	462a      	mov	r2, r5
 800a69e:	f7fe fb23 	bl	8008ce8 <__lshift>
 800a6a2:	1b7f      	subs	r7, r7, r5
 800a6a4:	4604      	mov	r4, r0
 800a6a6:	f100 0a14 	add.w	sl, r0, #20
 800a6aa:	f04f 0900 	mov.w	r9, #0
 800a6ae:	e7b8      	b.n	800a622 <__gethex+0x1b6>
 800a6b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a6b4:	42bd      	cmp	r5, r7
 800a6b6:	dd6f      	ble.n	800a798 <__gethex+0x32c>
 800a6b8:	1bed      	subs	r5, r5, r7
 800a6ba:	42ae      	cmp	r6, r5
 800a6bc:	dc34      	bgt.n	800a728 <__gethex+0x2bc>
 800a6be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d022      	beq.n	800a70c <__gethex+0x2a0>
 800a6c6:	2b03      	cmp	r3, #3
 800a6c8:	d024      	beq.n	800a714 <__gethex+0x2a8>
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d115      	bne.n	800a6fa <__gethex+0x28e>
 800a6ce:	42ae      	cmp	r6, r5
 800a6d0:	d113      	bne.n	800a6fa <__gethex+0x28e>
 800a6d2:	2e01      	cmp	r6, #1
 800a6d4:	d10b      	bne.n	800a6ee <__gethex+0x282>
 800a6d6:	9a02      	ldr	r2, [sp, #8]
 800a6d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a6dc:	6013      	str	r3, [r2, #0]
 800a6de:	2301      	movs	r3, #1
 800a6e0:	6123      	str	r3, [r4, #16]
 800a6e2:	f8ca 3000 	str.w	r3, [sl]
 800a6e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6e8:	2562      	movs	r5, #98	@ 0x62
 800a6ea:	601c      	str	r4, [r3, #0]
 800a6ec:	e73a      	b.n	800a564 <__gethex+0xf8>
 800a6ee:	1e71      	subs	r1, r6, #1
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	f7fe fd32 	bl	800915a <__any_on>
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	d1ed      	bne.n	800a6d6 <__gethex+0x26a>
 800a6fa:	9801      	ldr	r0, [sp, #4]
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	f7fe f8db 	bl	80088b8 <_Bfree>
 800a702:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a704:	2300      	movs	r3, #0
 800a706:	6013      	str	r3, [r2, #0]
 800a708:	2550      	movs	r5, #80	@ 0x50
 800a70a:	e72b      	b.n	800a564 <__gethex+0xf8>
 800a70c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d1f3      	bne.n	800a6fa <__gethex+0x28e>
 800a712:	e7e0      	b.n	800a6d6 <__gethex+0x26a>
 800a714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1dd      	bne.n	800a6d6 <__gethex+0x26a>
 800a71a:	e7ee      	b.n	800a6fa <__gethex+0x28e>
 800a71c:	0800b418 	.word	0x0800b418
 800a720:	0800b2ad 	.word	0x0800b2ad
 800a724:	0800b5c6 	.word	0x0800b5c6
 800a728:	1e6f      	subs	r7, r5, #1
 800a72a:	f1b9 0f00 	cmp.w	r9, #0
 800a72e:	d130      	bne.n	800a792 <__gethex+0x326>
 800a730:	b127      	cbz	r7, 800a73c <__gethex+0x2d0>
 800a732:	4639      	mov	r1, r7
 800a734:	4620      	mov	r0, r4
 800a736:	f7fe fd10 	bl	800915a <__any_on>
 800a73a:	4681      	mov	r9, r0
 800a73c:	117a      	asrs	r2, r7, #5
 800a73e:	2301      	movs	r3, #1
 800a740:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a744:	f007 071f 	and.w	r7, r7, #31
 800a748:	40bb      	lsls	r3, r7
 800a74a:	4213      	tst	r3, r2
 800a74c:	4629      	mov	r1, r5
 800a74e:	4620      	mov	r0, r4
 800a750:	bf18      	it	ne
 800a752:	f049 0902 	orrne.w	r9, r9, #2
 800a756:	f7ff fe21 	bl	800a39c <rshift>
 800a75a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a75e:	1b76      	subs	r6, r6, r5
 800a760:	2502      	movs	r5, #2
 800a762:	f1b9 0f00 	cmp.w	r9, #0
 800a766:	d047      	beq.n	800a7f8 <__gethex+0x38c>
 800a768:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d015      	beq.n	800a79c <__gethex+0x330>
 800a770:	2b03      	cmp	r3, #3
 800a772:	d017      	beq.n	800a7a4 <__gethex+0x338>
 800a774:	2b01      	cmp	r3, #1
 800a776:	d109      	bne.n	800a78c <__gethex+0x320>
 800a778:	f019 0f02 	tst.w	r9, #2
 800a77c:	d006      	beq.n	800a78c <__gethex+0x320>
 800a77e:	f8da 3000 	ldr.w	r3, [sl]
 800a782:	ea49 0903 	orr.w	r9, r9, r3
 800a786:	f019 0f01 	tst.w	r9, #1
 800a78a:	d10e      	bne.n	800a7aa <__gethex+0x33e>
 800a78c:	f045 0510 	orr.w	r5, r5, #16
 800a790:	e032      	b.n	800a7f8 <__gethex+0x38c>
 800a792:	f04f 0901 	mov.w	r9, #1
 800a796:	e7d1      	b.n	800a73c <__gethex+0x2d0>
 800a798:	2501      	movs	r5, #1
 800a79a:	e7e2      	b.n	800a762 <__gethex+0x2f6>
 800a79c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a79e:	f1c3 0301 	rsb	r3, r3, #1
 800a7a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a7a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d0f0      	beq.n	800a78c <__gethex+0x320>
 800a7aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a7ae:	f104 0314 	add.w	r3, r4, #20
 800a7b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a7b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a7ba:	f04f 0c00 	mov.w	ip, #0
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7c4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800a7c8:	d01b      	beq.n	800a802 <__gethex+0x396>
 800a7ca:	3201      	adds	r2, #1
 800a7cc:	6002      	str	r2, [r0, #0]
 800a7ce:	2d02      	cmp	r5, #2
 800a7d0:	f104 0314 	add.w	r3, r4, #20
 800a7d4:	d13c      	bne.n	800a850 <__gethex+0x3e4>
 800a7d6:	f8d8 2000 	ldr.w	r2, [r8]
 800a7da:	3a01      	subs	r2, #1
 800a7dc:	42b2      	cmp	r2, r6
 800a7de:	d109      	bne.n	800a7f4 <__gethex+0x388>
 800a7e0:	1171      	asrs	r1, r6, #5
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a7e8:	f006 061f 	and.w	r6, r6, #31
 800a7ec:	fa02 f606 	lsl.w	r6, r2, r6
 800a7f0:	421e      	tst	r6, r3
 800a7f2:	d13a      	bne.n	800a86a <__gethex+0x3fe>
 800a7f4:	f045 0520 	orr.w	r5, r5, #32
 800a7f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7fa:	601c      	str	r4, [r3, #0]
 800a7fc:	9b02      	ldr	r3, [sp, #8]
 800a7fe:	601f      	str	r7, [r3, #0]
 800a800:	e6b0      	b.n	800a564 <__gethex+0xf8>
 800a802:	4299      	cmp	r1, r3
 800a804:	f843 cc04 	str.w	ip, [r3, #-4]
 800a808:	d8d9      	bhi.n	800a7be <__gethex+0x352>
 800a80a:	68a3      	ldr	r3, [r4, #8]
 800a80c:	459b      	cmp	fp, r3
 800a80e:	db17      	blt.n	800a840 <__gethex+0x3d4>
 800a810:	6861      	ldr	r1, [r4, #4]
 800a812:	9801      	ldr	r0, [sp, #4]
 800a814:	3101      	adds	r1, #1
 800a816:	f7fe f80f 	bl	8008838 <_Balloc>
 800a81a:	4681      	mov	r9, r0
 800a81c:	b918      	cbnz	r0, 800a826 <__gethex+0x3ba>
 800a81e:	4b1a      	ldr	r3, [pc, #104]	@ (800a888 <__gethex+0x41c>)
 800a820:	4602      	mov	r2, r0
 800a822:	2184      	movs	r1, #132	@ 0x84
 800a824:	e6c5      	b.n	800a5b2 <__gethex+0x146>
 800a826:	6922      	ldr	r2, [r4, #16]
 800a828:	3202      	adds	r2, #2
 800a82a:	f104 010c 	add.w	r1, r4, #12
 800a82e:	0092      	lsls	r2, r2, #2
 800a830:	300c      	adds	r0, #12
 800a832:	f7fd f89e 	bl	8007972 <memcpy>
 800a836:	4621      	mov	r1, r4
 800a838:	9801      	ldr	r0, [sp, #4]
 800a83a:	f7fe f83d 	bl	80088b8 <_Bfree>
 800a83e:	464c      	mov	r4, r9
 800a840:	6923      	ldr	r3, [r4, #16]
 800a842:	1c5a      	adds	r2, r3, #1
 800a844:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a848:	6122      	str	r2, [r4, #16]
 800a84a:	2201      	movs	r2, #1
 800a84c:	615a      	str	r2, [r3, #20]
 800a84e:	e7be      	b.n	800a7ce <__gethex+0x362>
 800a850:	6922      	ldr	r2, [r4, #16]
 800a852:	455a      	cmp	r2, fp
 800a854:	dd0b      	ble.n	800a86e <__gethex+0x402>
 800a856:	2101      	movs	r1, #1
 800a858:	4620      	mov	r0, r4
 800a85a:	f7ff fd9f 	bl	800a39c <rshift>
 800a85e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a862:	3701      	adds	r7, #1
 800a864:	42bb      	cmp	r3, r7
 800a866:	f6ff aee0 	blt.w	800a62a <__gethex+0x1be>
 800a86a:	2501      	movs	r5, #1
 800a86c:	e7c2      	b.n	800a7f4 <__gethex+0x388>
 800a86e:	f016 061f 	ands.w	r6, r6, #31
 800a872:	d0fa      	beq.n	800a86a <__gethex+0x3fe>
 800a874:	4453      	add	r3, sl
 800a876:	f1c6 0620 	rsb	r6, r6, #32
 800a87a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a87e:	f7fe f8cd 	bl	8008a1c <__hi0bits>
 800a882:	42b0      	cmp	r0, r6
 800a884:	dbe7      	blt.n	800a856 <__gethex+0x3ea>
 800a886:	e7f0      	b.n	800a86a <__gethex+0x3fe>
 800a888:	0800b2ad 	.word	0x0800b2ad

0800a88c <L_shift>:
 800a88c:	f1c2 0208 	rsb	r2, r2, #8
 800a890:	0092      	lsls	r2, r2, #2
 800a892:	b570      	push	{r4, r5, r6, lr}
 800a894:	f1c2 0620 	rsb	r6, r2, #32
 800a898:	6843      	ldr	r3, [r0, #4]
 800a89a:	6804      	ldr	r4, [r0, #0]
 800a89c:	fa03 f506 	lsl.w	r5, r3, r6
 800a8a0:	432c      	orrs	r4, r5
 800a8a2:	40d3      	lsrs	r3, r2
 800a8a4:	6004      	str	r4, [r0, #0]
 800a8a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a8aa:	4288      	cmp	r0, r1
 800a8ac:	d3f4      	bcc.n	800a898 <L_shift+0xc>
 800a8ae:	bd70      	pop	{r4, r5, r6, pc}

0800a8b0 <__match>:
 800a8b0:	b530      	push	{r4, r5, lr}
 800a8b2:	6803      	ldr	r3, [r0, #0]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8ba:	b914      	cbnz	r4, 800a8c2 <__match+0x12>
 800a8bc:	6003      	str	r3, [r0, #0]
 800a8be:	2001      	movs	r0, #1
 800a8c0:	bd30      	pop	{r4, r5, pc}
 800a8c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a8ca:	2d19      	cmp	r5, #25
 800a8cc:	bf98      	it	ls
 800a8ce:	3220      	addls	r2, #32
 800a8d0:	42a2      	cmp	r2, r4
 800a8d2:	d0f0      	beq.n	800a8b6 <__match+0x6>
 800a8d4:	2000      	movs	r0, #0
 800a8d6:	e7f3      	b.n	800a8c0 <__match+0x10>

0800a8d8 <__hexnan>:
 800a8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8dc:	680b      	ldr	r3, [r1, #0]
 800a8de:	6801      	ldr	r1, [r0, #0]
 800a8e0:	115e      	asrs	r6, r3, #5
 800a8e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a8e6:	f013 031f 	ands.w	r3, r3, #31
 800a8ea:	b087      	sub	sp, #28
 800a8ec:	bf18      	it	ne
 800a8ee:	3604      	addne	r6, #4
 800a8f0:	2500      	movs	r5, #0
 800a8f2:	1f37      	subs	r7, r6, #4
 800a8f4:	4682      	mov	sl, r0
 800a8f6:	4690      	mov	r8, r2
 800a8f8:	9301      	str	r3, [sp, #4]
 800a8fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800a8fe:	46b9      	mov	r9, r7
 800a900:	463c      	mov	r4, r7
 800a902:	9502      	str	r5, [sp, #8]
 800a904:	46ab      	mov	fp, r5
 800a906:	784a      	ldrb	r2, [r1, #1]
 800a908:	1c4b      	adds	r3, r1, #1
 800a90a:	9303      	str	r3, [sp, #12]
 800a90c:	b342      	cbz	r2, 800a960 <__hexnan+0x88>
 800a90e:	4610      	mov	r0, r2
 800a910:	9105      	str	r1, [sp, #20]
 800a912:	9204      	str	r2, [sp, #16]
 800a914:	f7ff fd94 	bl	800a440 <__hexdig_fun>
 800a918:	2800      	cmp	r0, #0
 800a91a:	d151      	bne.n	800a9c0 <__hexnan+0xe8>
 800a91c:	9a04      	ldr	r2, [sp, #16]
 800a91e:	9905      	ldr	r1, [sp, #20]
 800a920:	2a20      	cmp	r2, #32
 800a922:	d818      	bhi.n	800a956 <__hexnan+0x7e>
 800a924:	9b02      	ldr	r3, [sp, #8]
 800a926:	459b      	cmp	fp, r3
 800a928:	dd13      	ble.n	800a952 <__hexnan+0x7a>
 800a92a:	454c      	cmp	r4, r9
 800a92c:	d206      	bcs.n	800a93c <__hexnan+0x64>
 800a92e:	2d07      	cmp	r5, #7
 800a930:	dc04      	bgt.n	800a93c <__hexnan+0x64>
 800a932:	462a      	mov	r2, r5
 800a934:	4649      	mov	r1, r9
 800a936:	4620      	mov	r0, r4
 800a938:	f7ff ffa8 	bl	800a88c <L_shift>
 800a93c:	4544      	cmp	r4, r8
 800a93e:	d952      	bls.n	800a9e6 <__hexnan+0x10e>
 800a940:	2300      	movs	r3, #0
 800a942:	f1a4 0904 	sub.w	r9, r4, #4
 800a946:	f844 3c04 	str.w	r3, [r4, #-4]
 800a94a:	f8cd b008 	str.w	fp, [sp, #8]
 800a94e:	464c      	mov	r4, r9
 800a950:	461d      	mov	r5, r3
 800a952:	9903      	ldr	r1, [sp, #12]
 800a954:	e7d7      	b.n	800a906 <__hexnan+0x2e>
 800a956:	2a29      	cmp	r2, #41	@ 0x29
 800a958:	d157      	bne.n	800aa0a <__hexnan+0x132>
 800a95a:	3102      	adds	r1, #2
 800a95c:	f8ca 1000 	str.w	r1, [sl]
 800a960:	f1bb 0f00 	cmp.w	fp, #0
 800a964:	d051      	beq.n	800aa0a <__hexnan+0x132>
 800a966:	454c      	cmp	r4, r9
 800a968:	d206      	bcs.n	800a978 <__hexnan+0xa0>
 800a96a:	2d07      	cmp	r5, #7
 800a96c:	dc04      	bgt.n	800a978 <__hexnan+0xa0>
 800a96e:	462a      	mov	r2, r5
 800a970:	4649      	mov	r1, r9
 800a972:	4620      	mov	r0, r4
 800a974:	f7ff ff8a 	bl	800a88c <L_shift>
 800a978:	4544      	cmp	r4, r8
 800a97a:	d936      	bls.n	800a9ea <__hexnan+0x112>
 800a97c:	f1a8 0204 	sub.w	r2, r8, #4
 800a980:	4623      	mov	r3, r4
 800a982:	f853 1b04 	ldr.w	r1, [r3], #4
 800a986:	f842 1f04 	str.w	r1, [r2, #4]!
 800a98a:	429f      	cmp	r7, r3
 800a98c:	d2f9      	bcs.n	800a982 <__hexnan+0xaa>
 800a98e:	1b3b      	subs	r3, r7, r4
 800a990:	f023 0303 	bic.w	r3, r3, #3
 800a994:	3304      	adds	r3, #4
 800a996:	3401      	adds	r4, #1
 800a998:	3e03      	subs	r6, #3
 800a99a:	42b4      	cmp	r4, r6
 800a99c:	bf88      	it	hi
 800a99e:	2304      	movhi	r3, #4
 800a9a0:	4443      	add	r3, r8
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f843 2b04 	str.w	r2, [r3], #4
 800a9a8:	429f      	cmp	r7, r3
 800a9aa:	d2fb      	bcs.n	800a9a4 <__hexnan+0xcc>
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	b91b      	cbnz	r3, 800a9b8 <__hexnan+0xe0>
 800a9b0:	4547      	cmp	r7, r8
 800a9b2:	d128      	bne.n	800aa06 <__hexnan+0x12e>
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	603b      	str	r3, [r7, #0]
 800a9b8:	2005      	movs	r0, #5
 800a9ba:	b007      	add	sp, #28
 800a9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c0:	3501      	adds	r5, #1
 800a9c2:	2d08      	cmp	r5, #8
 800a9c4:	f10b 0b01 	add.w	fp, fp, #1
 800a9c8:	dd06      	ble.n	800a9d8 <__hexnan+0x100>
 800a9ca:	4544      	cmp	r4, r8
 800a9cc:	d9c1      	bls.n	800a952 <__hexnan+0x7a>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9d4:	2501      	movs	r5, #1
 800a9d6:	3c04      	subs	r4, #4
 800a9d8:	6822      	ldr	r2, [r4, #0]
 800a9da:	f000 000f 	and.w	r0, r0, #15
 800a9de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a9e2:	6020      	str	r0, [r4, #0]
 800a9e4:	e7b5      	b.n	800a952 <__hexnan+0x7a>
 800a9e6:	2508      	movs	r5, #8
 800a9e8:	e7b3      	b.n	800a952 <__hexnan+0x7a>
 800a9ea:	9b01      	ldr	r3, [sp, #4]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d0dd      	beq.n	800a9ac <__hexnan+0xd4>
 800a9f0:	f1c3 0320 	rsb	r3, r3, #32
 800a9f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a9f8:	40da      	lsrs	r2, r3
 800a9fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a9fe:	4013      	ands	r3, r2
 800aa00:	f846 3c04 	str.w	r3, [r6, #-4]
 800aa04:	e7d2      	b.n	800a9ac <__hexnan+0xd4>
 800aa06:	3f04      	subs	r7, #4
 800aa08:	e7d0      	b.n	800a9ac <__hexnan+0xd4>
 800aa0a:	2004      	movs	r0, #4
 800aa0c:	e7d5      	b.n	800a9ba <__hexnan+0xe2>

0800aa0e <__ascii_mbtowc>:
 800aa0e:	b082      	sub	sp, #8
 800aa10:	b901      	cbnz	r1, 800aa14 <__ascii_mbtowc+0x6>
 800aa12:	a901      	add	r1, sp, #4
 800aa14:	b142      	cbz	r2, 800aa28 <__ascii_mbtowc+0x1a>
 800aa16:	b14b      	cbz	r3, 800aa2c <__ascii_mbtowc+0x1e>
 800aa18:	7813      	ldrb	r3, [r2, #0]
 800aa1a:	600b      	str	r3, [r1, #0]
 800aa1c:	7812      	ldrb	r2, [r2, #0]
 800aa1e:	1e10      	subs	r0, r2, #0
 800aa20:	bf18      	it	ne
 800aa22:	2001      	movne	r0, #1
 800aa24:	b002      	add	sp, #8
 800aa26:	4770      	bx	lr
 800aa28:	4610      	mov	r0, r2
 800aa2a:	e7fb      	b.n	800aa24 <__ascii_mbtowc+0x16>
 800aa2c:	f06f 0001 	mvn.w	r0, #1
 800aa30:	e7f8      	b.n	800aa24 <__ascii_mbtowc+0x16>

0800aa32 <_realloc_r>:
 800aa32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa36:	4680      	mov	r8, r0
 800aa38:	4615      	mov	r5, r2
 800aa3a:	460c      	mov	r4, r1
 800aa3c:	b921      	cbnz	r1, 800aa48 <_realloc_r+0x16>
 800aa3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa42:	4611      	mov	r1, r2
 800aa44:	f7fd be6c 	b.w	8008720 <_malloc_r>
 800aa48:	b92a      	cbnz	r2, 800aa56 <_realloc_r+0x24>
 800aa4a:	f7fd fdf5 	bl	8008638 <_free_r>
 800aa4e:	2400      	movs	r4, #0
 800aa50:	4620      	mov	r0, r4
 800aa52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa56:	f000 f840 	bl	800aada <_malloc_usable_size_r>
 800aa5a:	4285      	cmp	r5, r0
 800aa5c:	4606      	mov	r6, r0
 800aa5e:	d802      	bhi.n	800aa66 <_realloc_r+0x34>
 800aa60:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aa64:	d8f4      	bhi.n	800aa50 <_realloc_r+0x1e>
 800aa66:	4629      	mov	r1, r5
 800aa68:	4640      	mov	r0, r8
 800aa6a:	f7fd fe59 	bl	8008720 <_malloc_r>
 800aa6e:	4607      	mov	r7, r0
 800aa70:	2800      	cmp	r0, #0
 800aa72:	d0ec      	beq.n	800aa4e <_realloc_r+0x1c>
 800aa74:	42b5      	cmp	r5, r6
 800aa76:	462a      	mov	r2, r5
 800aa78:	4621      	mov	r1, r4
 800aa7a:	bf28      	it	cs
 800aa7c:	4632      	movcs	r2, r6
 800aa7e:	f7fc ff78 	bl	8007972 <memcpy>
 800aa82:	4621      	mov	r1, r4
 800aa84:	4640      	mov	r0, r8
 800aa86:	f7fd fdd7 	bl	8008638 <_free_r>
 800aa8a:	463c      	mov	r4, r7
 800aa8c:	e7e0      	b.n	800aa50 <_realloc_r+0x1e>

0800aa8e <__ascii_wctomb>:
 800aa8e:	4603      	mov	r3, r0
 800aa90:	4608      	mov	r0, r1
 800aa92:	b141      	cbz	r1, 800aaa6 <__ascii_wctomb+0x18>
 800aa94:	2aff      	cmp	r2, #255	@ 0xff
 800aa96:	d904      	bls.n	800aaa2 <__ascii_wctomb+0x14>
 800aa98:	228a      	movs	r2, #138	@ 0x8a
 800aa9a:	601a      	str	r2, [r3, #0]
 800aa9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aaa0:	4770      	bx	lr
 800aaa2:	700a      	strb	r2, [r1, #0]
 800aaa4:	2001      	movs	r0, #1
 800aaa6:	4770      	bx	lr

0800aaa8 <fiprintf>:
 800aaa8:	b40e      	push	{r1, r2, r3}
 800aaaa:	b503      	push	{r0, r1, lr}
 800aaac:	4601      	mov	r1, r0
 800aaae:	ab03      	add	r3, sp, #12
 800aab0:	4805      	ldr	r0, [pc, #20]	@ (800aac8 <fiprintf+0x20>)
 800aab2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aab6:	6800      	ldr	r0, [r0, #0]
 800aab8:	9301      	str	r3, [sp, #4]
 800aaba:	f000 f83f 	bl	800ab3c <_vfiprintf_r>
 800aabe:	b002      	add	sp, #8
 800aac0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aac4:	b003      	add	sp, #12
 800aac6:	4770      	bx	lr
 800aac8:	2000001c 	.word	0x2000001c

0800aacc <abort>:
 800aacc:	b508      	push	{r3, lr}
 800aace:	2006      	movs	r0, #6
 800aad0:	f000 fa08 	bl	800aee4 <raise>
 800aad4:	2001      	movs	r0, #1
 800aad6:	f7f7 fae9 	bl	80020ac <_exit>

0800aada <_malloc_usable_size_r>:
 800aada:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aade:	1f18      	subs	r0, r3, #4
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	bfbc      	itt	lt
 800aae4:	580b      	ldrlt	r3, [r1, r0]
 800aae6:	18c0      	addlt	r0, r0, r3
 800aae8:	4770      	bx	lr

0800aaea <__sfputc_r>:
 800aaea:	6893      	ldr	r3, [r2, #8]
 800aaec:	3b01      	subs	r3, #1
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	b410      	push	{r4}
 800aaf2:	6093      	str	r3, [r2, #8]
 800aaf4:	da08      	bge.n	800ab08 <__sfputc_r+0x1e>
 800aaf6:	6994      	ldr	r4, [r2, #24]
 800aaf8:	42a3      	cmp	r3, r4
 800aafa:	db01      	blt.n	800ab00 <__sfputc_r+0x16>
 800aafc:	290a      	cmp	r1, #10
 800aafe:	d103      	bne.n	800ab08 <__sfputc_r+0x1e>
 800ab00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab04:	f000 b932 	b.w	800ad6c <__swbuf_r>
 800ab08:	6813      	ldr	r3, [r2, #0]
 800ab0a:	1c58      	adds	r0, r3, #1
 800ab0c:	6010      	str	r0, [r2, #0]
 800ab0e:	7019      	strb	r1, [r3, #0]
 800ab10:	4608      	mov	r0, r1
 800ab12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <__sfputs_r>:
 800ab18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	460f      	mov	r7, r1
 800ab1e:	4614      	mov	r4, r2
 800ab20:	18d5      	adds	r5, r2, r3
 800ab22:	42ac      	cmp	r4, r5
 800ab24:	d101      	bne.n	800ab2a <__sfputs_r+0x12>
 800ab26:	2000      	movs	r0, #0
 800ab28:	e007      	b.n	800ab3a <__sfputs_r+0x22>
 800ab2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab2e:	463a      	mov	r2, r7
 800ab30:	4630      	mov	r0, r6
 800ab32:	f7ff ffda 	bl	800aaea <__sfputc_r>
 800ab36:	1c43      	adds	r3, r0, #1
 800ab38:	d1f3      	bne.n	800ab22 <__sfputs_r+0xa>
 800ab3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab3c <_vfiprintf_r>:
 800ab3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab40:	460d      	mov	r5, r1
 800ab42:	b09d      	sub	sp, #116	@ 0x74
 800ab44:	4614      	mov	r4, r2
 800ab46:	4698      	mov	r8, r3
 800ab48:	4606      	mov	r6, r0
 800ab4a:	b118      	cbz	r0, 800ab54 <_vfiprintf_r+0x18>
 800ab4c:	6a03      	ldr	r3, [r0, #32]
 800ab4e:	b90b      	cbnz	r3, 800ab54 <_vfiprintf_r+0x18>
 800ab50:	f7fc fda0 	bl	8007694 <__sinit>
 800ab54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab56:	07d9      	lsls	r1, r3, #31
 800ab58:	d405      	bmi.n	800ab66 <_vfiprintf_r+0x2a>
 800ab5a:	89ab      	ldrh	r3, [r5, #12]
 800ab5c:	059a      	lsls	r2, r3, #22
 800ab5e:	d402      	bmi.n	800ab66 <_vfiprintf_r+0x2a>
 800ab60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab62:	f7fc ff04 	bl	800796e <__retarget_lock_acquire_recursive>
 800ab66:	89ab      	ldrh	r3, [r5, #12]
 800ab68:	071b      	lsls	r3, r3, #28
 800ab6a:	d501      	bpl.n	800ab70 <_vfiprintf_r+0x34>
 800ab6c:	692b      	ldr	r3, [r5, #16]
 800ab6e:	b99b      	cbnz	r3, 800ab98 <_vfiprintf_r+0x5c>
 800ab70:	4629      	mov	r1, r5
 800ab72:	4630      	mov	r0, r6
 800ab74:	f000 f938 	bl	800ade8 <__swsetup_r>
 800ab78:	b170      	cbz	r0, 800ab98 <_vfiprintf_r+0x5c>
 800ab7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab7c:	07dc      	lsls	r4, r3, #31
 800ab7e:	d504      	bpl.n	800ab8a <_vfiprintf_r+0x4e>
 800ab80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab84:	b01d      	add	sp, #116	@ 0x74
 800ab86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab8a:	89ab      	ldrh	r3, [r5, #12]
 800ab8c:	0598      	lsls	r0, r3, #22
 800ab8e:	d4f7      	bmi.n	800ab80 <_vfiprintf_r+0x44>
 800ab90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab92:	f7fc feed 	bl	8007970 <__retarget_lock_release_recursive>
 800ab96:	e7f3      	b.n	800ab80 <_vfiprintf_r+0x44>
 800ab98:	2300      	movs	r3, #0
 800ab9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab9c:	2320      	movs	r3, #32
 800ab9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aba2:	f8cd 800c 	str.w	r8, [sp, #12]
 800aba6:	2330      	movs	r3, #48	@ 0x30
 800aba8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ad58 <_vfiprintf_r+0x21c>
 800abac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800abb0:	f04f 0901 	mov.w	r9, #1
 800abb4:	4623      	mov	r3, r4
 800abb6:	469a      	mov	sl, r3
 800abb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abbc:	b10a      	cbz	r2, 800abc2 <_vfiprintf_r+0x86>
 800abbe:	2a25      	cmp	r2, #37	@ 0x25
 800abc0:	d1f9      	bne.n	800abb6 <_vfiprintf_r+0x7a>
 800abc2:	ebba 0b04 	subs.w	fp, sl, r4
 800abc6:	d00b      	beq.n	800abe0 <_vfiprintf_r+0xa4>
 800abc8:	465b      	mov	r3, fp
 800abca:	4622      	mov	r2, r4
 800abcc:	4629      	mov	r1, r5
 800abce:	4630      	mov	r0, r6
 800abd0:	f7ff ffa2 	bl	800ab18 <__sfputs_r>
 800abd4:	3001      	adds	r0, #1
 800abd6:	f000 80a7 	beq.w	800ad28 <_vfiprintf_r+0x1ec>
 800abda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abdc:	445a      	add	r2, fp
 800abde:	9209      	str	r2, [sp, #36]	@ 0x24
 800abe0:	f89a 3000 	ldrb.w	r3, [sl]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f000 809f 	beq.w	800ad28 <_vfiprintf_r+0x1ec>
 800abea:	2300      	movs	r3, #0
 800abec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800abf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abf4:	f10a 0a01 	add.w	sl, sl, #1
 800abf8:	9304      	str	r3, [sp, #16]
 800abfa:	9307      	str	r3, [sp, #28]
 800abfc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac00:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac02:	4654      	mov	r4, sl
 800ac04:	2205      	movs	r2, #5
 800ac06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac0a:	4853      	ldr	r0, [pc, #332]	@ (800ad58 <_vfiprintf_r+0x21c>)
 800ac0c:	f7f5 fae8 	bl	80001e0 <memchr>
 800ac10:	9a04      	ldr	r2, [sp, #16]
 800ac12:	b9d8      	cbnz	r0, 800ac4c <_vfiprintf_r+0x110>
 800ac14:	06d1      	lsls	r1, r2, #27
 800ac16:	bf44      	itt	mi
 800ac18:	2320      	movmi	r3, #32
 800ac1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac1e:	0713      	lsls	r3, r2, #28
 800ac20:	bf44      	itt	mi
 800ac22:	232b      	movmi	r3, #43	@ 0x2b
 800ac24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac28:	f89a 3000 	ldrb.w	r3, [sl]
 800ac2c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac2e:	d015      	beq.n	800ac5c <_vfiprintf_r+0x120>
 800ac30:	9a07      	ldr	r2, [sp, #28]
 800ac32:	4654      	mov	r4, sl
 800ac34:	2000      	movs	r0, #0
 800ac36:	f04f 0c0a 	mov.w	ip, #10
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac40:	3b30      	subs	r3, #48	@ 0x30
 800ac42:	2b09      	cmp	r3, #9
 800ac44:	d94b      	bls.n	800acde <_vfiprintf_r+0x1a2>
 800ac46:	b1b0      	cbz	r0, 800ac76 <_vfiprintf_r+0x13a>
 800ac48:	9207      	str	r2, [sp, #28]
 800ac4a:	e014      	b.n	800ac76 <_vfiprintf_r+0x13a>
 800ac4c:	eba0 0308 	sub.w	r3, r0, r8
 800ac50:	fa09 f303 	lsl.w	r3, r9, r3
 800ac54:	4313      	orrs	r3, r2
 800ac56:	9304      	str	r3, [sp, #16]
 800ac58:	46a2      	mov	sl, r4
 800ac5a:	e7d2      	b.n	800ac02 <_vfiprintf_r+0xc6>
 800ac5c:	9b03      	ldr	r3, [sp, #12]
 800ac5e:	1d19      	adds	r1, r3, #4
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	9103      	str	r1, [sp, #12]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	bfbb      	ittet	lt
 800ac68:	425b      	neglt	r3, r3
 800ac6a:	f042 0202 	orrlt.w	r2, r2, #2
 800ac6e:	9307      	strge	r3, [sp, #28]
 800ac70:	9307      	strlt	r3, [sp, #28]
 800ac72:	bfb8      	it	lt
 800ac74:	9204      	strlt	r2, [sp, #16]
 800ac76:	7823      	ldrb	r3, [r4, #0]
 800ac78:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac7a:	d10a      	bne.n	800ac92 <_vfiprintf_r+0x156>
 800ac7c:	7863      	ldrb	r3, [r4, #1]
 800ac7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac80:	d132      	bne.n	800ace8 <_vfiprintf_r+0x1ac>
 800ac82:	9b03      	ldr	r3, [sp, #12]
 800ac84:	1d1a      	adds	r2, r3, #4
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	9203      	str	r2, [sp, #12]
 800ac8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac8e:	3402      	adds	r4, #2
 800ac90:	9305      	str	r3, [sp, #20]
 800ac92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ad68 <_vfiprintf_r+0x22c>
 800ac96:	7821      	ldrb	r1, [r4, #0]
 800ac98:	2203      	movs	r2, #3
 800ac9a:	4650      	mov	r0, sl
 800ac9c:	f7f5 faa0 	bl	80001e0 <memchr>
 800aca0:	b138      	cbz	r0, 800acb2 <_vfiprintf_r+0x176>
 800aca2:	9b04      	ldr	r3, [sp, #16]
 800aca4:	eba0 000a 	sub.w	r0, r0, sl
 800aca8:	2240      	movs	r2, #64	@ 0x40
 800acaa:	4082      	lsls	r2, r0
 800acac:	4313      	orrs	r3, r2
 800acae:	3401      	adds	r4, #1
 800acb0:	9304      	str	r3, [sp, #16]
 800acb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acb6:	4829      	ldr	r0, [pc, #164]	@ (800ad5c <_vfiprintf_r+0x220>)
 800acb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800acbc:	2206      	movs	r2, #6
 800acbe:	f7f5 fa8f 	bl	80001e0 <memchr>
 800acc2:	2800      	cmp	r0, #0
 800acc4:	d03f      	beq.n	800ad46 <_vfiprintf_r+0x20a>
 800acc6:	4b26      	ldr	r3, [pc, #152]	@ (800ad60 <_vfiprintf_r+0x224>)
 800acc8:	bb1b      	cbnz	r3, 800ad12 <_vfiprintf_r+0x1d6>
 800acca:	9b03      	ldr	r3, [sp, #12]
 800accc:	3307      	adds	r3, #7
 800acce:	f023 0307 	bic.w	r3, r3, #7
 800acd2:	3308      	adds	r3, #8
 800acd4:	9303      	str	r3, [sp, #12]
 800acd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acd8:	443b      	add	r3, r7
 800acda:	9309      	str	r3, [sp, #36]	@ 0x24
 800acdc:	e76a      	b.n	800abb4 <_vfiprintf_r+0x78>
 800acde:	fb0c 3202 	mla	r2, ip, r2, r3
 800ace2:	460c      	mov	r4, r1
 800ace4:	2001      	movs	r0, #1
 800ace6:	e7a8      	b.n	800ac3a <_vfiprintf_r+0xfe>
 800ace8:	2300      	movs	r3, #0
 800acea:	3401      	adds	r4, #1
 800acec:	9305      	str	r3, [sp, #20]
 800acee:	4619      	mov	r1, r3
 800acf0:	f04f 0c0a 	mov.w	ip, #10
 800acf4:	4620      	mov	r0, r4
 800acf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acfa:	3a30      	subs	r2, #48	@ 0x30
 800acfc:	2a09      	cmp	r2, #9
 800acfe:	d903      	bls.n	800ad08 <_vfiprintf_r+0x1cc>
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d0c6      	beq.n	800ac92 <_vfiprintf_r+0x156>
 800ad04:	9105      	str	r1, [sp, #20]
 800ad06:	e7c4      	b.n	800ac92 <_vfiprintf_r+0x156>
 800ad08:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad0c:	4604      	mov	r4, r0
 800ad0e:	2301      	movs	r3, #1
 800ad10:	e7f0      	b.n	800acf4 <_vfiprintf_r+0x1b8>
 800ad12:	ab03      	add	r3, sp, #12
 800ad14:	9300      	str	r3, [sp, #0]
 800ad16:	462a      	mov	r2, r5
 800ad18:	4b12      	ldr	r3, [pc, #72]	@ (800ad64 <_vfiprintf_r+0x228>)
 800ad1a:	a904      	add	r1, sp, #16
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	f7fb fe61 	bl	80069e4 <_printf_float>
 800ad22:	4607      	mov	r7, r0
 800ad24:	1c78      	adds	r0, r7, #1
 800ad26:	d1d6      	bne.n	800acd6 <_vfiprintf_r+0x19a>
 800ad28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad2a:	07d9      	lsls	r1, r3, #31
 800ad2c:	d405      	bmi.n	800ad3a <_vfiprintf_r+0x1fe>
 800ad2e:	89ab      	ldrh	r3, [r5, #12]
 800ad30:	059a      	lsls	r2, r3, #22
 800ad32:	d402      	bmi.n	800ad3a <_vfiprintf_r+0x1fe>
 800ad34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad36:	f7fc fe1b 	bl	8007970 <__retarget_lock_release_recursive>
 800ad3a:	89ab      	ldrh	r3, [r5, #12]
 800ad3c:	065b      	lsls	r3, r3, #25
 800ad3e:	f53f af1f 	bmi.w	800ab80 <_vfiprintf_r+0x44>
 800ad42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad44:	e71e      	b.n	800ab84 <_vfiprintf_r+0x48>
 800ad46:	ab03      	add	r3, sp, #12
 800ad48:	9300      	str	r3, [sp, #0]
 800ad4a:	462a      	mov	r2, r5
 800ad4c:	4b05      	ldr	r3, [pc, #20]	@ (800ad64 <_vfiprintf_r+0x228>)
 800ad4e:	a904      	add	r1, sp, #16
 800ad50:	4630      	mov	r0, r6
 800ad52:	f7fc f8df 	bl	8006f14 <_printf_i>
 800ad56:	e7e4      	b.n	800ad22 <_vfiprintf_r+0x1e6>
 800ad58:	0800b571 	.word	0x0800b571
 800ad5c:	0800b57b 	.word	0x0800b57b
 800ad60:	080069e5 	.word	0x080069e5
 800ad64:	0800ab19 	.word	0x0800ab19
 800ad68:	0800b577 	.word	0x0800b577

0800ad6c <__swbuf_r>:
 800ad6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6e:	460e      	mov	r6, r1
 800ad70:	4614      	mov	r4, r2
 800ad72:	4605      	mov	r5, r0
 800ad74:	b118      	cbz	r0, 800ad7e <__swbuf_r+0x12>
 800ad76:	6a03      	ldr	r3, [r0, #32]
 800ad78:	b90b      	cbnz	r3, 800ad7e <__swbuf_r+0x12>
 800ad7a:	f7fc fc8b 	bl	8007694 <__sinit>
 800ad7e:	69a3      	ldr	r3, [r4, #24]
 800ad80:	60a3      	str	r3, [r4, #8]
 800ad82:	89a3      	ldrh	r3, [r4, #12]
 800ad84:	071a      	lsls	r2, r3, #28
 800ad86:	d501      	bpl.n	800ad8c <__swbuf_r+0x20>
 800ad88:	6923      	ldr	r3, [r4, #16]
 800ad8a:	b943      	cbnz	r3, 800ad9e <__swbuf_r+0x32>
 800ad8c:	4621      	mov	r1, r4
 800ad8e:	4628      	mov	r0, r5
 800ad90:	f000 f82a 	bl	800ade8 <__swsetup_r>
 800ad94:	b118      	cbz	r0, 800ad9e <__swbuf_r+0x32>
 800ad96:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad9e:	6823      	ldr	r3, [r4, #0]
 800ada0:	6922      	ldr	r2, [r4, #16]
 800ada2:	1a98      	subs	r0, r3, r2
 800ada4:	6963      	ldr	r3, [r4, #20]
 800ada6:	b2f6      	uxtb	r6, r6
 800ada8:	4283      	cmp	r3, r0
 800adaa:	4637      	mov	r7, r6
 800adac:	dc05      	bgt.n	800adba <__swbuf_r+0x4e>
 800adae:	4621      	mov	r1, r4
 800adb0:	4628      	mov	r0, r5
 800adb2:	f7ff fa53 	bl	800a25c <_fflush_r>
 800adb6:	2800      	cmp	r0, #0
 800adb8:	d1ed      	bne.n	800ad96 <__swbuf_r+0x2a>
 800adba:	68a3      	ldr	r3, [r4, #8]
 800adbc:	3b01      	subs	r3, #1
 800adbe:	60a3      	str	r3, [r4, #8]
 800adc0:	6823      	ldr	r3, [r4, #0]
 800adc2:	1c5a      	adds	r2, r3, #1
 800adc4:	6022      	str	r2, [r4, #0]
 800adc6:	701e      	strb	r6, [r3, #0]
 800adc8:	6962      	ldr	r2, [r4, #20]
 800adca:	1c43      	adds	r3, r0, #1
 800adcc:	429a      	cmp	r2, r3
 800adce:	d004      	beq.n	800adda <__swbuf_r+0x6e>
 800add0:	89a3      	ldrh	r3, [r4, #12]
 800add2:	07db      	lsls	r3, r3, #31
 800add4:	d5e1      	bpl.n	800ad9a <__swbuf_r+0x2e>
 800add6:	2e0a      	cmp	r6, #10
 800add8:	d1df      	bne.n	800ad9a <__swbuf_r+0x2e>
 800adda:	4621      	mov	r1, r4
 800addc:	4628      	mov	r0, r5
 800adde:	f7ff fa3d 	bl	800a25c <_fflush_r>
 800ade2:	2800      	cmp	r0, #0
 800ade4:	d0d9      	beq.n	800ad9a <__swbuf_r+0x2e>
 800ade6:	e7d6      	b.n	800ad96 <__swbuf_r+0x2a>

0800ade8 <__swsetup_r>:
 800ade8:	b538      	push	{r3, r4, r5, lr}
 800adea:	4b29      	ldr	r3, [pc, #164]	@ (800ae90 <__swsetup_r+0xa8>)
 800adec:	4605      	mov	r5, r0
 800adee:	6818      	ldr	r0, [r3, #0]
 800adf0:	460c      	mov	r4, r1
 800adf2:	b118      	cbz	r0, 800adfc <__swsetup_r+0x14>
 800adf4:	6a03      	ldr	r3, [r0, #32]
 800adf6:	b90b      	cbnz	r3, 800adfc <__swsetup_r+0x14>
 800adf8:	f7fc fc4c 	bl	8007694 <__sinit>
 800adfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae00:	0719      	lsls	r1, r3, #28
 800ae02:	d422      	bmi.n	800ae4a <__swsetup_r+0x62>
 800ae04:	06da      	lsls	r2, r3, #27
 800ae06:	d407      	bmi.n	800ae18 <__swsetup_r+0x30>
 800ae08:	2209      	movs	r2, #9
 800ae0a:	602a      	str	r2, [r5, #0]
 800ae0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae10:	81a3      	strh	r3, [r4, #12]
 800ae12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae16:	e033      	b.n	800ae80 <__swsetup_r+0x98>
 800ae18:	0758      	lsls	r0, r3, #29
 800ae1a:	d512      	bpl.n	800ae42 <__swsetup_r+0x5a>
 800ae1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae1e:	b141      	cbz	r1, 800ae32 <__swsetup_r+0x4a>
 800ae20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae24:	4299      	cmp	r1, r3
 800ae26:	d002      	beq.n	800ae2e <__swsetup_r+0x46>
 800ae28:	4628      	mov	r0, r5
 800ae2a:	f7fd fc05 	bl	8008638 <_free_r>
 800ae2e:	2300      	movs	r3, #0
 800ae30:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae32:	89a3      	ldrh	r3, [r4, #12]
 800ae34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ae38:	81a3      	strh	r3, [r4, #12]
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	6063      	str	r3, [r4, #4]
 800ae3e:	6923      	ldr	r3, [r4, #16]
 800ae40:	6023      	str	r3, [r4, #0]
 800ae42:	89a3      	ldrh	r3, [r4, #12]
 800ae44:	f043 0308 	orr.w	r3, r3, #8
 800ae48:	81a3      	strh	r3, [r4, #12]
 800ae4a:	6923      	ldr	r3, [r4, #16]
 800ae4c:	b94b      	cbnz	r3, 800ae62 <__swsetup_r+0x7a>
 800ae4e:	89a3      	ldrh	r3, [r4, #12]
 800ae50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ae54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae58:	d003      	beq.n	800ae62 <__swsetup_r+0x7a>
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	f000 f883 	bl	800af68 <__smakebuf_r>
 800ae62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae66:	f013 0201 	ands.w	r2, r3, #1
 800ae6a:	d00a      	beq.n	800ae82 <__swsetup_r+0x9a>
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	60a2      	str	r2, [r4, #8]
 800ae70:	6962      	ldr	r2, [r4, #20]
 800ae72:	4252      	negs	r2, r2
 800ae74:	61a2      	str	r2, [r4, #24]
 800ae76:	6922      	ldr	r2, [r4, #16]
 800ae78:	b942      	cbnz	r2, 800ae8c <__swsetup_r+0xa4>
 800ae7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ae7e:	d1c5      	bne.n	800ae0c <__swsetup_r+0x24>
 800ae80:	bd38      	pop	{r3, r4, r5, pc}
 800ae82:	0799      	lsls	r1, r3, #30
 800ae84:	bf58      	it	pl
 800ae86:	6962      	ldrpl	r2, [r4, #20]
 800ae88:	60a2      	str	r2, [r4, #8]
 800ae8a:	e7f4      	b.n	800ae76 <__swsetup_r+0x8e>
 800ae8c:	2000      	movs	r0, #0
 800ae8e:	e7f7      	b.n	800ae80 <__swsetup_r+0x98>
 800ae90:	2000001c 	.word	0x2000001c

0800ae94 <_raise_r>:
 800ae94:	291f      	cmp	r1, #31
 800ae96:	b538      	push	{r3, r4, r5, lr}
 800ae98:	4605      	mov	r5, r0
 800ae9a:	460c      	mov	r4, r1
 800ae9c:	d904      	bls.n	800aea8 <_raise_r+0x14>
 800ae9e:	2316      	movs	r3, #22
 800aea0:	6003      	str	r3, [r0, #0]
 800aea2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aea6:	bd38      	pop	{r3, r4, r5, pc}
 800aea8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aeaa:	b112      	cbz	r2, 800aeb2 <_raise_r+0x1e>
 800aeac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aeb0:	b94b      	cbnz	r3, 800aec6 <_raise_r+0x32>
 800aeb2:	4628      	mov	r0, r5
 800aeb4:	f000 f830 	bl	800af18 <_getpid_r>
 800aeb8:	4622      	mov	r2, r4
 800aeba:	4601      	mov	r1, r0
 800aebc:	4628      	mov	r0, r5
 800aebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aec2:	f000 b817 	b.w	800aef4 <_kill_r>
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d00a      	beq.n	800aee0 <_raise_r+0x4c>
 800aeca:	1c59      	adds	r1, r3, #1
 800aecc:	d103      	bne.n	800aed6 <_raise_r+0x42>
 800aece:	2316      	movs	r3, #22
 800aed0:	6003      	str	r3, [r0, #0]
 800aed2:	2001      	movs	r0, #1
 800aed4:	e7e7      	b.n	800aea6 <_raise_r+0x12>
 800aed6:	2100      	movs	r1, #0
 800aed8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aedc:	4620      	mov	r0, r4
 800aede:	4798      	blx	r3
 800aee0:	2000      	movs	r0, #0
 800aee2:	e7e0      	b.n	800aea6 <_raise_r+0x12>

0800aee4 <raise>:
 800aee4:	4b02      	ldr	r3, [pc, #8]	@ (800aef0 <raise+0xc>)
 800aee6:	4601      	mov	r1, r0
 800aee8:	6818      	ldr	r0, [r3, #0]
 800aeea:	f7ff bfd3 	b.w	800ae94 <_raise_r>
 800aeee:	bf00      	nop
 800aef0:	2000001c 	.word	0x2000001c

0800aef4 <_kill_r>:
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	4d07      	ldr	r5, [pc, #28]	@ (800af14 <_kill_r+0x20>)
 800aef8:	2300      	movs	r3, #0
 800aefa:	4604      	mov	r4, r0
 800aefc:	4608      	mov	r0, r1
 800aefe:	4611      	mov	r1, r2
 800af00:	602b      	str	r3, [r5, #0]
 800af02:	f7f7 f8c3 	bl	800208c <_kill>
 800af06:	1c43      	adds	r3, r0, #1
 800af08:	d102      	bne.n	800af10 <_kill_r+0x1c>
 800af0a:	682b      	ldr	r3, [r5, #0]
 800af0c:	b103      	cbz	r3, 800af10 <_kill_r+0x1c>
 800af0e:	6023      	str	r3, [r4, #0]
 800af10:	bd38      	pop	{r3, r4, r5, pc}
 800af12:	bf00      	nop
 800af14:	200044b4 	.word	0x200044b4

0800af18 <_getpid_r>:
 800af18:	f7f7 b8b0 	b.w	800207c <_getpid>

0800af1c <__swhatbuf_r>:
 800af1c:	b570      	push	{r4, r5, r6, lr}
 800af1e:	460c      	mov	r4, r1
 800af20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af24:	2900      	cmp	r1, #0
 800af26:	b096      	sub	sp, #88	@ 0x58
 800af28:	4615      	mov	r5, r2
 800af2a:	461e      	mov	r6, r3
 800af2c:	da0d      	bge.n	800af4a <__swhatbuf_r+0x2e>
 800af2e:	89a3      	ldrh	r3, [r4, #12]
 800af30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800af34:	f04f 0100 	mov.w	r1, #0
 800af38:	bf14      	ite	ne
 800af3a:	2340      	movne	r3, #64	@ 0x40
 800af3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800af40:	2000      	movs	r0, #0
 800af42:	6031      	str	r1, [r6, #0]
 800af44:	602b      	str	r3, [r5, #0]
 800af46:	b016      	add	sp, #88	@ 0x58
 800af48:	bd70      	pop	{r4, r5, r6, pc}
 800af4a:	466a      	mov	r2, sp
 800af4c:	f000 f848 	bl	800afe0 <_fstat_r>
 800af50:	2800      	cmp	r0, #0
 800af52:	dbec      	blt.n	800af2e <__swhatbuf_r+0x12>
 800af54:	9901      	ldr	r1, [sp, #4]
 800af56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800af5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800af5e:	4259      	negs	r1, r3
 800af60:	4159      	adcs	r1, r3
 800af62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af66:	e7eb      	b.n	800af40 <__swhatbuf_r+0x24>

0800af68 <__smakebuf_r>:
 800af68:	898b      	ldrh	r3, [r1, #12]
 800af6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af6c:	079d      	lsls	r5, r3, #30
 800af6e:	4606      	mov	r6, r0
 800af70:	460c      	mov	r4, r1
 800af72:	d507      	bpl.n	800af84 <__smakebuf_r+0x1c>
 800af74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800af78:	6023      	str	r3, [r4, #0]
 800af7a:	6123      	str	r3, [r4, #16]
 800af7c:	2301      	movs	r3, #1
 800af7e:	6163      	str	r3, [r4, #20]
 800af80:	b003      	add	sp, #12
 800af82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af84:	ab01      	add	r3, sp, #4
 800af86:	466a      	mov	r2, sp
 800af88:	f7ff ffc8 	bl	800af1c <__swhatbuf_r>
 800af8c:	9f00      	ldr	r7, [sp, #0]
 800af8e:	4605      	mov	r5, r0
 800af90:	4639      	mov	r1, r7
 800af92:	4630      	mov	r0, r6
 800af94:	f7fd fbc4 	bl	8008720 <_malloc_r>
 800af98:	b948      	cbnz	r0, 800afae <__smakebuf_r+0x46>
 800af9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af9e:	059a      	lsls	r2, r3, #22
 800afa0:	d4ee      	bmi.n	800af80 <__smakebuf_r+0x18>
 800afa2:	f023 0303 	bic.w	r3, r3, #3
 800afa6:	f043 0302 	orr.w	r3, r3, #2
 800afaa:	81a3      	strh	r3, [r4, #12]
 800afac:	e7e2      	b.n	800af74 <__smakebuf_r+0xc>
 800afae:	89a3      	ldrh	r3, [r4, #12]
 800afb0:	6020      	str	r0, [r4, #0]
 800afb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afb6:	81a3      	strh	r3, [r4, #12]
 800afb8:	9b01      	ldr	r3, [sp, #4]
 800afba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800afbe:	b15b      	cbz	r3, 800afd8 <__smakebuf_r+0x70>
 800afc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afc4:	4630      	mov	r0, r6
 800afc6:	f000 f81d 	bl	800b004 <_isatty_r>
 800afca:	b128      	cbz	r0, 800afd8 <__smakebuf_r+0x70>
 800afcc:	89a3      	ldrh	r3, [r4, #12]
 800afce:	f023 0303 	bic.w	r3, r3, #3
 800afd2:	f043 0301 	orr.w	r3, r3, #1
 800afd6:	81a3      	strh	r3, [r4, #12]
 800afd8:	89a3      	ldrh	r3, [r4, #12]
 800afda:	431d      	orrs	r5, r3
 800afdc:	81a5      	strh	r5, [r4, #12]
 800afde:	e7cf      	b.n	800af80 <__smakebuf_r+0x18>

0800afe0 <_fstat_r>:
 800afe0:	b538      	push	{r3, r4, r5, lr}
 800afe2:	4d07      	ldr	r5, [pc, #28]	@ (800b000 <_fstat_r+0x20>)
 800afe4:	2300      	movs	r3, #0
 800afe6:	4604      	mov	r4, r0
 800afe8:	4608      	mov	r0, r1
 800afea:	4611      	mov	r1, r2
 800afec:	602b      	str	r3, [r5, #0]
 800afee:	f7f7 f8ad 	bl	800214c <_fstat>
 800aff2:	1c43      	adds	r3, r0, #1
 800aff4:	d102      	bne.n	800affc <_fstat_r+0x1c>
 800aff6:	682b      	ldr	r3, [r5, #0]
 800aff8:	b103      	cbz	r3, 800affc <_fstat_r+0x1c>
 800affa:	6023      	str	r3, [r4, #0]
 800affc:	bd38      	pop	{r3, r4, r5, pc}
 800affe:	bf00      	nop
 800b000:	200044b4 	.word	0x200044b4

0800b004 <_isatty_r>:
 800b004:	b538      	push	{r3, r4, r5, lr}
 800b006:	4d06      	ldr	r5, [pc, #24]	@ (800b020 <_isatty_r+0x1c>)
 800b008:	2300      	movs	r3, #0
 800b00a:	4604      	mov	r4, r0
 800b00c:	4608      	mov	r0, r1
 800b00e:	602b      	str	r3, [r5, #0]
 800b010:	f7f7 f8ac 	bl	800216c <_isatty>
 800b014:	1c43      	adds	r3, r0, #1
 800b016:	d102      	bne.n	800b01e <_isatty_r+0x1a>
 800b018:	682b      	ldr	r3, [r5, #0]
 800b01a:	b103      	cbz	r3, 800b01e <_isatty_r+0x1a>
 800b01c:	6023      	str	r3, [r4, #0]
 800b01e:	bd38      	pop	{r3, r4, r5, pc}
 800b020:	200044b4 	.word	0x200044b4

0800b024 <_init>:
 800b024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b026:	bf00      	nop
 800b028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b02a:	bc08      	pop	{r3}
 800b02c:	469e      	mov	lr, r3
 800b02e:	4770      	bx	lr

0800b030 <_fini>:
 800b030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b032:	bf00      	nop
 800b034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b036:	bc08      	pop	{r3}
 800b038:	469e      	mov	lr, r3
 800b03a:	4770      	bx	lr
